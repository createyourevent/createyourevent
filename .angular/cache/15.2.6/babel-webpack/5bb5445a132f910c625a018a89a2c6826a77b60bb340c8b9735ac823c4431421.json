{"ast":null,"code":"import { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getPropertyIdentifier } from '../property.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport class PropertyService {\n  constructor(http, applicationConfigService) {\n    this.http = http;\n    this.applicationConfigService = applicationConfigService;\n    this.resourceUrl = this.applicationConfigService.getEndpointFor('api/properties');\n  }\n  create(property) {\n    return this.http.post(this.resourceUrl, property, {\n      observe: 'response'\n    });\n  }\n  update(property) {\n    return this.http.put(`${this.resourceUrl}/${getPropertyIdentifier(property)}`, property, {\n      observe: 'response'\n    });\n  }\n  partialUpdate(property) {\n    return this.http.patch(`${this.resourceUrl}/${getPropertyIdentifier(property)}`, property, {\n      observe: 'response'\n    });\n  }\n  find(id) {\n    return this.http.get(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  query(req) {\n    const options = createRequestOption(req);\n    return this.http.get(this.resourceUrl, {\n      params: options,\n      observe: 'response'\n    });\n  }\n  delete(id) {\n    return this.http.delete(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  addPropertyToCollectionIfMissing(propertyCollection, ...propertiesToCheck) {\n    const properties = propertiesToCheck.filter(isPresent);\n    if (properties.length > 0) {\n      const propertyCollectionIdentifiers = propertyCollection.map(propertyItem => getPropertyIdentifier(propertyItem));\n      const propertiesToAdd = properties.filter(propertyItem => {\n        const propertyIdentifier = getPropertyIdentifier(propertyItem);\n        if (propertyIdentifier == null || propertyCollectionIdentifiers.includes(propertyIdentifier)) {\n          return false;\n        }\n        propertyCollectionIdentifiers.push(propertyIdentifier);\n        return true;\n      });\n      return [...propertiesToAdd, ...propertyCollection];\n    }\n    return propertyCollection;\n  }\n}\nPropertyService.ɵfac = function PropertyService_Factory(t) {\n  return new (t || PropertyService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n};\nPropertyService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PropertyService,\n  factory: PropertyService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAIA,SAASA,SAAS,QAAQ,yBAAyB;AAEnD,SAASC,mBAAmB,QAAQ,+BAA+B;AACnE,SAAoBC,qBAAqB,QAAQ,mBAAmB;;;;AAMpE,OAAM,MAAOC,eAAe;EAG1BC,YAAsBC,IAAgB,EAAYC,wBAAkD;IAA9E,SAAI,GAAJD,IAAI;IAAwB,6BAAwB,GAAxBC,wBAAwB;IAFhE,gBAAW,GAAG,IAAI,CAACA,wBAAwB,CAACC,cAAc,CAAC,gBAAgB,CAAC;EAEiB;EAEvGC,MAAM,CAACC,QAAmB;IACxB,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAY,IAAI,CAACC,WAAW,EAAEF,QAAQ,EAAE;MAAEG,OAAO,EAAE;IAAU,CAAE,CAAC;EACvF;EAEAC,MAAM,CAACJ,QAAmB;IACxB,OAAO,IAAI,CAACJ,IAAI,CAACS,GAAG,CAAY,GAAG,IAAI,CAACH,WAAW,IAAIT,qBAAqB,CAACO,QAAQ,CAAW,EAAE,EAAEA,QAAQ,EAAE;MAAEG,OAAO,EAAE;IAAU,CAAE,CAAC;EACxI;EAEAG,aAAa,CAACN,QAAmB;IAC/B,OAAO,IAAI,CAACJ,IAAI,CAACW,KAAK,CAAY,GAAG,IAAI,CAACL,WAAW,IAAIT,qBAAqB,CAACO,QAAQ,CAAW,EAAE,EAAEA,QAAQ,EAAE;MAC9GG,OAAO,EAAE;KACV,CAAC;EACJ;EAEAK,IAAI,CAACC,EAAU;IACb,OAAO,IAAI,CAACb,IAAI,CAACc,GAAG,CAAY,GAAG,IAAI,CAACR,WAAW,IAAIO,EAAE,EAAE,EAAE;MAAEN,OAAO,EAAE;IAAU,CAAE,CAAC;EACvF;EAEAQ,KAAK,CAACC,GAAS;IACb,MAAMC,OAAO,GAAGrB,mBAAmB,CAACoB,GAAG,CAAC;IACxC,OAAO,IAAI,CAAChB,IAAI,CAACc,GAAG,CAAc,IAAI,CAACR,WAAW,EAAE;MAAEY,MAAM,EAAED,OAAO;MAAEV,OAAO,EAAE;IAAU,CAAE,CAAC;EAC/F;EAEAY,MAAM,CAACN,EAAU;IACf,OAAO,IAAI,CAACb,IAAI,CAACmB,MAAM,CAAC,GAAG,IAAI,CAACb,WAAW,IAAIO,EAAE,EAAE,EAAE;MAAEN,OAAO,EAAE;IAAU,CAAE,CAAC;EAC/E;EAEAa,gCAAgC,CAACC,kBAA+B,EAAE,GAAGC,iBAAmD;IACtH,MAAMC,UAAU,GAAgBD,iBAAiB,CAACE,MAAM,CAAC7B,SAAS,CAAC;IACnE,IAAI4B,UAAU,CAACE,MAAM,GAAG,CAAC,EAAE;MACzB,MAAMC,6BAA6B,GAAGL,kBAAkB,CAACM,GAAG,CAACC,YAAY,IAAI/B,qBAAqB,CAAC+B,YAAY,CAAE,CAAC;MAClH,MAAMC,eAAe,GAAGN,UAAU,CAACC,MAAM,CAACI,YAAY,IAAG;QACvD,MAAME,kBAAkB,GAAGjC,qBAAqB,CAAC+B,YAAY,CAAC;QAC9D,IAAIE,kBAAkB,IAAI,IAAI,IAAIJ,6BAA6B,CAACK,QAAQ,CAACD,kBAAkB,CAAC,EAAE;UAC5F,OAAO,KAAK;;QAEdJ,6BAA6B,CAACM,IAAI,CAACF,kBAAkB,CAAC;QACtD,OAAO,IAAI;MACb,CAAC,CAAC;MACF,OAAO,CAAC,GAAGD,eAAe,EAAE,GAAGR,kBAAkB,CAAC;;IAEpD,OAAOA,kBAAkB;EAC3B;;;mBA/CWvB,eAAe;AAAA;;SAAfA,eAAe;EAAAmC,SAAfnC,eAAe;EAAAoC,YADF;AAAM","names":["isPresent","createRequestOption","getPropertyIdentifier","PropertyService","constructor","http","applicationConfigService","getEndpointFor","create","property","post","resourceUrl","observe","update","put","partialUpdate","patch","find","id","get","query","req","options","params","delete","addPropertyToCollectionIfMissing","propertyCollection","propertiesToCheck","properties","filter","length","propertyCollectionIdentifiers","map","propertyItem","propertiesToAdd","propertyIdentifier","includes","push","factory","providedIn"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/entities/property/service/property.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { isPresent } from 'app/core/util/operators';\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { IProperty, getPropertyIdentifier } from '../property.model';\n\nexport type EntityResponseType = HttpResponse<IProperty>;\nexport type EntityArrayResponseType = HttpResponse<IProperty[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class PropertyService {\n  protected resourceUrl = this.applicationConfigService.getEndpointFor('api/properties');\n\n  constructor(protected http: HttpClient, protected applicationConfigService: ApplicationConfigService) {}\n\n  create(property: IProperty): Observable<EntityResponseType> {\n    return this.http.post<IProperty>(this.resourceUrl, property, { observe: 'response' });\n  }\n\n  update(property: IProperty): Observable<EntityResponseType> {\n    return this.http.put<IProperty>(`${this.resourceUrl}/${getPropertyIdentifier(property) as number}`, property, { observe: 'response' });\n  }\n\n  partialUpdate(property: IProperty): Observable<EntityResponseType> {\n    return this.http.patch<IProperty>(`${this.resourceUrl}/${getPropertyIdentifier(property) as number}`, property, {\n      observe: 'response',\n    });\n  }\n\n  find(id: number): Observable<EntityResponseType> {\n    return this.http.get<IProperty>(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  query(req?: any): Observable<EntityArrayResponseType> {\n    const options = createRequestOption(req);\n    return this.http.get<IProperty[]>(this.resourceUrl, { params: options, observe: 'response' });\n  }\n\n  delete(id: number): Observable<HttpResponse<{}>> {\n    return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  addPropertyToCollectionIfMissing(propertyCollection: IProperty[], ...propertiesToCheck: (IProperty | null | undefined)[]): IProperty[] {\n    const properties: IProperty[] = propertiesToCheck.filter(isPresent);\n    if (properties.length > 0) {\n      const propertyCollectionIdentifiers = propertyCollection.map(propertyItem => getPropertyIdentifier(propertyItem)!);\n      const propertiesToAdd = properties.filter(propertyItem => {\n        const propertyIdentifier = getPropertyIdentifier(propertyItem);\n        if (propertyIdentifier == null || propertyCollectionIdentifiers.includes(propertyIdentifier)) {\n          return false;\n        }\n        propertyCollectionIdentifiers.push(propertyIdentifier);\n        return true;\n      });\n      return [...propertiesToAdd, ...propertyCollection];\n    }\n    return propertyCollection;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}