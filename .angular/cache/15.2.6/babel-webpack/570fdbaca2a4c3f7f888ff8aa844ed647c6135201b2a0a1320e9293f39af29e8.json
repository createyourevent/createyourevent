{"ast":null,"code":"import { __awaiter } from 'tslib';\nimport * as i3 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Inject, isDevMode, Component, ChangeDetectionStrategy, ViewEncapsulation, NgModule } from '@angular/core';\nimport * as i1 from '@angular/router';\nimport { NavigationStart, GuardsCheckEnd, NavigationEnd } from '@angular/router';\nimport { BehaviorSubject, filter, switchMap, NEVER, of, tap, first, map, shareReplay, pluck, firstValueFrom, takeWhile, catchError, ReplaySubject, merge } from 'rxjs';\nimport * as i2 from '@angular/common/http';\nimport { HttpClientModule } from '@angular/common/http';\nconst _c0 = [\"*\"];\nconst ScullyDefaultSettings = {\n  useTransferState: true,\n  alwaysMonitor: false,\n  manualIdle: false,\n  baseURIForScullyContent: 'http://localhost:1668'\n};\nconst SCULLY_LIB_CONFIG = new InjectionToken('scullyLibConfig', {\n  factory: () => ScullyDefaultSettings\n});\n\n/**\n * Take a string, preferably resembling an URL, take out the search params, the anchors, and the ending slash\n * @param str\n */\nconst basePathOnly = str => {\n  if (str.includes('#')) {\n    str = str.split('#')[0];\n  }\n  if (str.includes('?')) {\n    str = str.split('?')[0];\n  }\n  const cleanedUpVersion = str.endsWith('/') ? str.slice(0, -1) : str;\n  return cleanedUpVersion;\n};\n\n// tslint:disable: no-string-literal\nconst isScullyRunning = () => window && window['ScullyIO'] === 'running';\nconst isScullyGenerated = () => window && window['ScullyIO'] === 'generated';\nfunction mergePaths(base, path) {\n  base = base !== null && base !== void 0 ? base : '';\n  if (base.endsWith('/') && path.startsWith('/')) {\n    return `${base}${path.substr(1)}`;\n  }\n  if (!base.endsWith('/') && !path.startsWith('/')) {\n    return `${base}/${path}`;\n  }\n  return `${base}${path}`;\n}\nconst SCULLY_SCRIPT_ID = `ScullyIO-transfer-state`;\nconst SCULLY_STATE_START = `/** ___SCULLY_STATE_START___ */`;\nconst SCULLY_STATE_END = `/** ___SCULLY_STATE_END___ */`;\nconst initialStateDone = '__done__with__Initial__navigation__';\n// Adding this dynamic comment to suppress ngc error around Document as a DI token.\n// https://github.com/angular/angular/issues/20351#issuecomment-344009887\n/** @dynamic */\nclass TransferStateService {\n  constructor(document, router, http) {\n    this.document = document;\n    this.router = router;\n    this.http = http;\n    /** parse from index, or load from data.json, according to scullConfig setting */\n    this.inlineOnly = false;\n    /** set the currentBase to something that it can never be */\n    this.currentBaseUrl = '//';\n    /** subject to fire off incoming states */\n    this.stateBS = new BehaviorSubject({});\n    this.state$ = this.stateBS.pipe(filter(state => state !== undefined));\n    // emit the next url when routing is complete\n    this.nextUrl = this.router.events.pipe(filter(e => e instanceof NavigationStart), switchMap(e => {\n      if (basePathOnly(this.initialUrl) === basePathOnly(e.url)) {\n        /** don't kick off on initial load to prevent flicker */\n        this.initialUrl = initialStateDone;\n        return NEVER;\n      }\n      return of(e);\n    }), /** reset the state, so new components will never get stale data */\n    tap(() => this.stateBS.next(undefined)), /** prevent emitting before navigation to _this_ URL is done. */\n    switchMap(e => this.router.events.pipe(filter(ev => ev instanceof GuardsCheckEnd && ev.url === e.url), first())), map(ev => basePathOnly(ev.urlAfterRedirects || ev.url)), shareReplay(1));\n  }\n  startMonitoring() {\n    if (window && window['ScullyIO-injected'] && window['ScullyIO-injected'].inlineStateOnly) {\n      this.inlineOnly = true;\n    }\n    this.setupEnvForTransferState();\n    this.setupStartNavMonitoring();\n  }\n  setupEnvForTransferState() {\n    if (isScullyRunning()) {\n      this.injectScript();\n      // In Scully puppeteer\n      const exposed = window['ScullyIO-exposed'] || {};\n      if (exposed.transferState) {\n        this.stateBS.next(exposed.transferState);\n        this.saveState(exposed.transferState);\n      }\n    } else {\n      // On the client AFTER Scully rendered it. Also store the state in case the user comes from a non-scully page\n      this.initialUrl = window.location.pathname || '__no_NO_no__';\n      this.initialUrl = this.initialUrl !== '/' && this.initialUrl.endsWith('/') ? this.initialUrl.slice(0, -1) : this.initialUrl;\n      /** set the initial state */\n      if (isScullyGenerated()) {\n        /** only update the initial state when the page is Scully generated */\n        this.stateBS.next(window && window[SCULLY_SCRIPT_ID] || {});\n      }\n    }\n  }\n  injectScript() {\n    this.script = this.document.createElement('script');\n    this.script.setAttribute('id', SCULLY_SCRIPT_ID);\n    let last = this.document.body.lastChild;\n    while (last.previousSibling.nodeName === 'SCRIPT') {\n      last = last.previousSibling;\n    }\n    // console.log(`\n    // --------------------------------------------------\n    //    Welp! ${this.script}\n    // --------------------------------------------------\n    // `)\n    this.document.body.insertBefore(this.script, last);\n  }\n  /**\n   * Getstate will return an observable that containes the data.\n   * It does so right after the navigation for the page has finished.\n   * please note, this works SYNC on initial route, preventing a flash of content.\n   * @param name The name of the state to\n   */\n  getState(name) {\n    /** start of the fetch for the current active route. */\n    this.fetchTransferState();\n    return this.state$.pipe(pluck(name)\n    // tap((data) => console.log('tss', data))\n    );\n  }\n  /**\n   * Read the current state, and see if it has an value for the name.\n   * (note the value it containes still can be undefined!)\n   */\n  stateHasKey(name) {\n    return this.stateBS.value && this.stateBS.value.hasOwnProperty(name);\n  }\n  /**\n   * Read the current state, and see if it has an value for the name.\n   * ys also if there is actually an value in the state.\n   */\n  stateKeyHasValue(name) {\n    return this.stateBS.value && this.stateBS.value.hasOwnProperty(name) && this.stateBS.value[name] != null;\n  }\n  /**\n   * SetState will update the script in the generated page with data added.\n   * @param name\n   * @param val\n   */\n  setState(name, val) {\n    const newState = Object.assign(Object.assign({}, this.stateBS.value), {\n      [name]: val\n    });\n    this.stateBS.next(newState);\n    this.saveState(newState);\n  }\n  saveState(newState) {\n    if (isScullyRunning()) {\n      this.script.textContent = `{window['${SCULLY_SCRIPT_ID}']=_u(String.raw\\`${SCULLY_STATE_START}${escapeHtml(JSON.stringify(newState))}${SCULLY_STATE_END}\\`);function _u(t){t=t.split('${SCULLY_STATE_START}')[1].split('${SCULLY_STATE_END}')[0];const u={'_~b~': \"${'`'}\",'_~q~': \"'\",'_~o~': '$','_~s~': '/','_~l~': '<','_~g~': '>'};return JSON.parse(t.replace(/_~d~/g,'\\\\\\\\\"').replace(/_~[^]~/g, (s) => u[s]).replace(/\\\\n/g,'\\\\\\\\n').replace(/\\\\t/g,'\\\\\\\\t').replace(/\\\\r/g,'\\\\\\\\r'));}}`;\n    }\n  }\n  /**\n   * starts monitoring the router, and keep the url from the last completed navigation handy.\n   */\n  setupStartNavMonitoring() {\n    if (!isScullyGenerated()) {\n      return;\n    }\n    /** start monitoring the routes */\n    this.nextUrl.subscribe();\n  }\n  /**\n   * Wraps an observable into scully's transfer state. If data for the provided `name` is\n   * available in the state, it gets returned. Otherwise, the `originalState` observable will\n   * be returned.\n   *\n   * On subsequent calls, the data in the state will always be returned. The `originalState` will\n   * be returned only once.\n   *\n   * This is a convenience method which does not require you to use `getState`/`setState` manually.\n   *\n   * @param name state key\n   * @param originalState an observable which yields the desired data\n   */\n  useScullyTransferState(name, originalState) {\n    if (isScullyGenerated()) {\n      return this.getState(name);\n    }\n    return originalState.pipe(tap(state => this.setState(name, state)));\n  }\n  fetchTransferState() {\n    return __awaiter(this, void 0, void 0, function* () {\n      /** helper to read the part before the first slash (ignores leading slash) */\n      const base = url => url.split('/').filter(part => part.trim() !== '')[0];\n      /** put this in the next event cycle so the correct route can be read */\n      yield new Promise(r => setTimeout(r, 0));\n      /** get the current url */\n      const currentUrl = yield firstValueFrom(this.nextUrl);\n      const baseUrl = base(currentUrl);\n      if (this.currentBaseUrl === baseUrl) {\n        /** already monitoring, don't tho a thing */\n        return;\n      }\n      /** keep the baseUrl for later reference */\n      this.currentBaseUrl = baseUrl;\n      this.nextUrl.pipe( /** keep updating till we move to another route */\n      takeWhile(url => base(url) === this.currentBaseUrl),\n      // Get the next route's data from the the index or data file\n      switchMap(url => this.inlineOnly ? this.readFromIndex(url) : this.readFromJson(url)), catchError(e => {\n        // TODO: come up with better error text.\n        /** the developer needs to know, but its not fatal, so just return an empty state */\n        console.warn('Error while loading of parsing Scully state:', e);\n        return of({});\n      }), tap(newState => {\n        /** and activate the state in the components. on any error it will be empty */\n        this.stateBS.next(newState);\n      })).subscribe({\n        /** when completes (different URL) */\n        complete: () => {\n          /** reset the currentBaseUrl */\n          this.currentBaseUrl = '//';\n        }\n      });\n    });\n  }\n  readFromJson(url) {\n    return firstValueFrom(this.http.get(dropPreSlash(mergePaths(url, '/data.json'))));\n  }\n  readFromIndex(url) {\n    return firstValueFrom(this.http.get(dropPreSlash(mergePaths(url, '/index.html')), {\n      responseType: 'text'\n    })).then(html => {\n      const newStateStr = html.split(SCULLY_STATE_START)[1].split(SCULLY_STATE_END)[0];\n      return JSON.parse(unescapeHtml(newStateStr));\n    });\n  }\n}\n/** @nocollapse */\nTransferStateService.ɵfac = function TransferStateService_Factory(t) {\n  return new (t || TransferStateService)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n};\n/** @nocollapse */\nTransferStateService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: TransferStateService,\n  factory: TransferStateService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TransferStateService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: Document,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i1.Router\n    }, {\n      type: i2.HttpClient\n    }];\n  }, null);\n})();\nfunction dropPreSlash(string) {\n  return string.startsWith('/') ? string.slice(1) : string;\n}\n/**\n * we need to escape our HTML to prevent XXS,\n * It needs to be custom, because the content can already contain html-escaped sequences\n **/\nfunction escapeHtml(text) {\n  const escapedText = {\n    \"'\": '_~q~',\n    $: '_~o~',\n    '`': '_~b~',\n    '/': '_~s~',\n    '<': '_~l~',\n    '>': '_~g~'\n  };\n  return text\n  /** escape the json */.replace(/[\\$`'<>\\/]/g, s => escapedText[s])\n  /** replace escaped double-quotes with single */.replace(/\\\\\\\"/g, `_~d~`);\n}\n/**\n * Unescape our custom escaped texts\n * @param text\n */\nfunction unescapeHtml(text) {\n  const unescapedText = {\n    '_~q~': \"'\",\n    '_~b~': '`',\n    '_~o~': '$',\n    '_~s~': '/',\n    '_~l~': '<',\n    '_~g~': '>'\n  };\n  return text\n  /** put back escaped double quotes to make valid json again */.replace(/_~d~/g, `\\\\\"`)\n  /** replace the custom escapes */.replace(/_~[^]~/g, s => unescapedText[s])\n  /** restore newlines+cr */.replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r');\n}\n\n// if (window) {\n//   window.addEventListener('AngularReady', ev => {\n//     console.log('appReady fired', ev);\n//   });\n// }\n// Adding this dynamic comment to suppress ngc error around Document as a DI token.\n// https://github.com/angular/angular/issues/20351#issuecomment-344009887\n/** @dynamic */\nclass IdleMonitorService {\n  constructor(zone, router, conf, document, tss) {\n    this.zone = zone;\n    this.router = router;\n    this.document = document;\n    /** store the 'landing' url so we can skip it in idle-check. */\n    this.initialUrl = dropEndingSlash(window && window.location && window.location.pathname) || '';\n    this.imState = new BehaviorSubject({\n      idle: false,\n      timeOut: 5 * 1000 // 5 seconds timeout as default\n    });\n\n    this.idle$ = this.imState.pipe(pluck('idle'));\n    this.initApp = new Event('AngularInitialized', {\n      bubbles: true,\n      cancelable: false\n    });\n    this.appReady = new Event('AngularReady', {\n      bubbles: true,\n      cancelable: false\n    });\n    this.appTimeout = new Event('AngularTimeout', {\n      bubbles: true,\n      cancelable: false\n    });\n    /** provide the default for missing conf paramter */\n    this.scullyLibConfig = Object.assign({}, ScullyDefaultSettings, conf);\n    const exposed = window['ScullyIO-exposed'] || {};\n    const manualIdle = !!exposed.manualIdle;\n    if (!this.scullyLibConfig.manualIdle && window && (this.scullyLibConfig.alwaysMonitor || isScullyRunning())) {\n      this.document.dispatchEvent(this.initApp);\n      this.router.events.pipe(filter(ev => ev instanceof NavigationEnd && ev.urlAfterRedirects !== undefined), /** don't check the page that has this setting. event is only importand on page load */\n      filter(ev => manualIdle ? ev.urlAfterRedirects !== this.initialUrl : true), tap(() => this.zoneIdleCheck())).subscribe();\n    }\n    if (this.scullyLibConfig.manualIdle) {\n      /** we still need the init event. */\n      this.document.dispatchEvent(this.initApp);\n    }\n    if (this.scullyLibConfig.useTransferState) {\n      /** don't start monitoring if people don't use the transferState */\n      tss.startMonitoring();\n    }\n  }\n  fireManualMyAppReadyEvent() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.document.dispatchEvent(this.appReady);\n    });\n  }\n  init() {\n    return firstValueFrom(this.idle$);\n  }\n  zoneIdleCheck() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (Zone === undefined) {\n        return this.simpleTimeout();\n      }\n      const taskTrackingZone = Zone.current.get('TaskTrackingZone');\n      if (taskTrackingZone === undefined) {\n        return this.simpleTimeout();\n      }\n      if (this.imState.value.idle) {\n        yield this.setState('idle', false);\n      }\n      /** run the actual check for 'idle' outsides zone, otherwise it will never come to an end. */\n      this.zone.runOutsideAngular(() => {\n        let tCancel;\n        let count = 0;\n        const startTime = Date.now();\n        const monitor = () => {\n          clearTimeout(tCancel);\n          // console.table(taskTrackingZone.macroTasks);\n          if (Date.now() - startTime > 30 * 1000) {\n            /** bail out after 30 seconds. */\n            this.document.dispatchEvent(this.appTimeout);\n            return;\n          }\n          if (taskTrackingZone.macroTasks.length > 0 && taskTrackingZone.macroTasks.find(z => z.source.includes('XMLHttpRequest')) !== undefined || count < 1 // make sure it runs at least once!\n          ) {\n            tCancel = setTimeout(() => {\n              count += 1;\n              monitor();\n            }, 50);\n            return;\n          }\n          this.zone.run(() => {\n            /** run this inside the zone, and give the app 250Ms to wrap up, before scraping starts */\n            setTimeout(() => {\n              this.document.dispatchEvent(this.appReady);\n              this.setState('idle', true);\n            }, 250);\n          });\n        };\n        monitor();\n      });\n    });\n  }\n  simpleTimeout() {\n    return __awaiter(this, void 0, void 0, function* () {\n      /** zone not available, use a timeout instead. */\n      console.warn('Scully is using timeouts, add the needed polyfills instead!');\n      yield new Promise(r => setTimeout(r, this.imState.value.timeOut));\n      this.document.dispatchEvent(this.appReady);\n    });\n  }\n  setPupeteerTimeoutValue(milliseconds) {\n    this.imState.next(Object.assign(Object.assign({}, this.imState.value), {\n      timeOut: milliseconds\n    }));\n  }\n  setState(key, value) {\n    this.imState.next(Object.assign(Object.assign({}, this.imState.value), {\n      [key]: value\n    }));\n  }\n}\n/** @nocollapse */\nIdleMonitorService.ɵfac = function IdleMonitorService_Factory(t) {\n  return new (t || IdleMonitorService)(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.Router), i0.ɵɵinject(SCULLY_LIB_CONFIG), i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(TransferStateService));\n};\n/** @nocollapse */\nIdleMonitorService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: IdleMonitorService,\n  factory: IdleMonitorService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(IdleMonitorService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }, {\n      type: i1.Router\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [SCULLY_LIB_CONFIG]\n      }]\n    }, {\n      type: Document,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: TransferStateService\n    }];\n  }, null);\n})();\nfunction dropEndingSlash(str) {\n  return str.endsWith('/') ? str.slice(0, -1) : str;\n}\nclass ScullyRoutesService {\n  constructor(router, http) {\n    this.router = router;\n    this.http = http;\n    this.refresh = new ReplaySubject(1);\n    /**\n     * An observable with all routes, published and unpublished alike\n     */\n    this.allRoutes$ = this.refresh.pipe(switchMap(() => this.http.get('assets/scully-routes.json')), catchError(() => {\n      console.warn('Scully routes file not found, are you running the Scully generated version of your site?');\n      return of([]);\n    }), /** filter out all non-array results */\n    filter(routes => Array.isArray(routes)), map(this.cleanDups), shareReplay({\n      refCount: false,\n      bufferSize: 1\n    }));\n    /**\n     * An observable with available routes (all published routes)\n     */\n    this.available$ = this.allRoutes$.pipe(map(list => list.filter(r => r.hasOwnProperty('published') ? r.published !== false : true)), shareReplay({\n      refCount: false,\n      bufferSize: 1\n    }));\n    /**\n     * an observable with all unpublished routes\n     */\n    this.unPublished$ = this.allRoutes$.pipe(map(list => list.filter(r => r.hasOwnProperty('published') ? r.published === false : false)), shareReplay({\n      refCount: false,\n      bufferSize: 1\n    }));\n    /**\n     * An observable with the top-level off all published routes.\n     * (in an urls it would be `http://www.sample.org/__thisPart__/subroutes`)\n     */\n    this.topLevel$ = this.available$.pipe(map(routes => routes.filter(r => !r.route.slice(1).includes('/'))), shareReplay({\n      refCount: false,\n      bufferSize: 1\n    }));\n    /** kick off first cycle */\n    this.reload();\n  }\n  /**\n   * returns an observable that returns the route information for the\n   * route currently selected. subscribes to route-events to update when needed\n   */\n  getCurrent() {\n    if (!location) {\n      /** probably not in a browser, no current location available */\n      return of();\n    }\n    /** fire off at start, and when navigation is done. */\n    return merge(of(new NavigationEnd(0, '', '')), this.router.events).pipe(filter(e => e instanceof NavigationEnd), switchMap(() => this.available$), map(list => {\n      const curLocation = basePathOnly(encodeURI(location.pathname).trim());\n      return list.find(r => curLocation === basePathOnly(r.route.trim()) || r.slugs && Array.isArray(r.slugs) && r.slugs.find(slug => curLocation.endsWith(basePathOnly(slug.trim()))));\n    }));\n  }\n  /**\n   * internal, as routes can have multiple slugs, and so occur multiple times\n   * this util function collapses all slugs back into 1 route.\n   */\n  cleanDups(routes) {\n    const m = new Map();\n    /** check for duplicates by comparing all, include route in comparison if its the only thing, or the only thing with only the tile  */\n    routes.forEach(r => m.set(JSON.stringify(Object.assign(Object.assign({}, r), {\n      route: hasOtherprops(r) ? '' : r.route\n    })), r));\n    return [...m.values()];\n  }\n  /** an utility that will force a reload of the `scully-routes.json` file */\n  reload() {\n    this.refresh.next();\n  }\n}\n/** @nocollapse */\nScullyRoutesService.ɵfac = function ScullyRoutesService_Factory(t) {\n  return new (t || ScullyRoutesService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n};\n/** @nocollapse */\nScullyRoutesService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ScullyRoutesService,\n  factory: ScullyRoutesService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ScullyRoutesService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.Router\n    }, {\n      type: i2.HttpClient\n    }];\n  }, null);\n})();\nfunction hasOtherprops(obj) {\n  const keys = Object.keys(obj);\n  if (keys.length === 1 && keys.includes('route')) {\n    return false;\n  }\n  if (keys.length === 2 && keys.includes('route') && keys.includes('title')) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Returns an array of nodes coninting all the html comments in the element.\n * When a searchText is given this is narrowed down to only comments that contian this text\n * @param rootElem Element to search nto\n * @param searchText optional string that needs to be in a HTML comment\n */\nfunction findComments(rootElem, searchText) {\n  const comments = [];\n  // Fourth argument, which is actually obsolete according to the DOM4 standard, seems required in IE 11\n  const iterator = document.createNodeIterator(rootElem, NodeFilter.SHOW_COMMENT, {\n    acceptNode: node => {\n      // Logic to determine whether to accept, reject or skip node\n      // In this case, only accept nodes that have content\n      // that is containing our searchText, by rejecting any other nodes.\n      if (searchText && node.nodeValue && !node.nodeValue.includes(searchText)) {\n        return NodeFilter.FILTER_REJECT;\n      }\n      return NodeFilter.FILTER_ACCEPT;\n    }\n  }\n  // , false // IE-11 support requires this parameter.\n  );\n\n  let curNode;\n  // tslint:disable-next-line: no-conditional-assignment\n  while (curNode = iterator.nextNode()) {\n    comments.push(curNode);\n  }\n  return comments;\n}\n\n/** this is needed, because otherwise the CLI borks while building */\nconst scullyBegin = '<!--scullyContent-begin-->';\nconst scullyEnd = '<!--scullyContent-end-->';\n/** use the module's closure to keep a system-wide check for the last handled URL. */\nlet lastHandled;\n// Adding this dynamic comment to suppress ngc error around Document as a DI token.\n// https://github.com/angular/angular/issues/20351#issuecomment-344009887\n/** @dynamic */\nclass ScullyContentComponent {\n  constructor(elmRef, srs, router, location, http, document, conf) {\n    this.elmRef = elmRef;\n    this.srs = srs;\n    this.router = router;\n    this.location = location;\n    this.http = http;\n    this.document = document;\n    this.conf = conf;\n    this.baseUrl = this.conf.useTransferState || ScullyDefaultSettings.useTransferState;\n    this.elm = this.elmRef.nativeElement;\n    /** pull in all  available routes into an eager promise */\n    this.routes = firstValueFrom(this.srs.allRoutes$);\n    /** monitor the router, so we can update while navigating in the same 'page' see #311 */\n    this.routeUpdates$ = this.router.events.pipe(filter(ev => ev instanceof NavigationEnd), /** don't replace if we are already there */\n    filter(ev => lastHandled && !lastHandled.endsWith(basePathOnly(ev.urlAfterRedirects))), tap(r => this.replaceContent()));\n    this.routeSub = this.routeUpdates$.subscribe();\n    /** do this from constructor, so it runs ASAP */\n  }\n\n  ngOnInit() {\n    if (this.elm) {\n      /** this will only fire in a browser environment */\n      this.handlePage();\n    }\n  }\n  /**\n   * Loads the static content from scully into the view\n   * Will fetch the content from sibling links with xmlHTTPrequest\n   */\n  handlePage() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const curPage = basePathOnly(location.href);\n      if (lastHandled === curPage) {\n        /**\n         * Due to the fix we needed for #311\n         * it might happen that this routine is called\n         * twice for the same page.\n         * this code will make sure the second one is ignored.\n         */\n        return;\n      }\n      lastHandled = curPage;\n      const template = this.document.createElement('template');\n      const currentCssId = this.getCSSId(this.elm);\n      if (window.scullyContent) {\n        /** upgrade existing static content */\n        const htmlString = window.scullyContent.html;\n        if (currentCssId !== window.scullyContent.cssId) {\n          /** replace the angular cssId */\n          template.innerHTML = htmlString.split(window.scullyContent.cssId).join(currentCssId);\n        } else {\n          template.innerHTML = htmlString;\n        }\n      } else {\n        /**\n         *   NOTE\n         * when updateting the texts for the errors, make sure you leave the\n         *  `id=\"___scully-parsing-error___\"`\n         * in there. That way users can detect rendering errors in their CI\n         * on a reliable way.\n         */\n        if (isScullyRunning()) {\n          /**\n           * we don't need to fetch the content, as it is already in the window\n           */\n          return;\n        }\n        yield firstValueFrom(this.http.get(curPage + '/index.html', {\n          responseType: 'text'\n        })).catch(e => {\n          if (isDevMode()) {\n            /** in devmode (usually in `ng serve`) check the scully server for the content too */\n            const uri = new URL(location.href);\n            const url = `${this.conf.baseURIForScullyContent}/${basePathOnly(uri.pathname)}/index.html`;\n            return firstValueFrom(this.http.get(url, {\n              responseType: 'text'\n            }));\n          } else {\n            return Promise.reject(e);\n          }\n        }).then(html => {\n          try {\n            const htmlString = html.split(scullyBegin)[1].split(scullyEnd)[0];\n            if (htmlString.includes('_ngcontent')) {\n              /** update the angular cssId */\n              const atr = '_ngcontent' + htmlString.split('_ngcontent')[1].split('=')[0];\n              template.innerHTML = htmlString.split(atr).join(currentCssId);\n            } else {\n              template.innerHTML = htmlString;\n            }\n          } catch (e) {\n            template.innerHTML = `<h2 id=\"___scully-parsing-error___\">Sorry, could not parse static page content</h2>\n            <p>This might happen if you are not using the static generated pages.</p>`;\n          }\n        }).catch(e => {\n          template.innerHTML = '<h2 id=\"___scully-parsing-error___\">Sorry, could not load static page content</h2>';\n          console.error('problem during loading static scully content', e);\n        });\n      }\n      /** insert the whole thing just before the `<scully-content>` element */\n      const parent = this.elm.parentElement || this.document.body;\n      const begin = this.document.createComment('scullyContent-begin');\n      const end = this.document.createComment('scullyContent-end');\n      parent.insertBefore(begin, this.elm);\n      parent.insertBefore(template.content, this.elm);\n      parent.insertBefore(end, this.elm);\n      /** upgrade all hrefs to simulated routelinks (in next microtask) */\n      setTimeout(() => this.document.querySelectorAll('[href]').forEach(this.upgradeToRoutelink.bind(this)), 10);\n      // document.querySelectorAll('[href]').forEach(this.upgradeToRoutelink.bind(this));\n    });\n  }\n  /**\n   * upgrade a **href** attributes to links that respect the Angular router\n   * and don't do a full page reload. Only works on links that are found in the\n   * Scully route config file.\n   * @param elm the element containing the **hrefs**\n   */\n  upgradeToRoutelink(elm) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!['A', 'BUTTON'].includes(elm.tagName)) {\n        return;\n      }\n      const hash = (_a = elm.dataset) === null || _a === void 0 ? void 0 : _a.hash;\n      if (hash) {\n        elm.setAttribute('href', '#' + hash);\n        elm.setAttribute('onclick', '');\n        elm.onclick = ev => {\n          ev.preventDefault();\n          const destination = document.getElementById(hash);\n          if (destination) {\n            const url = new URL(window.location.href);\n            url.hash = hash;\n            history.replaceState('', '', url.toString());\n            destination.scrollIntoView();\n          }\n        };\n        return;\n      }\n      const routes = yield this.routes;\n      const href = elm.getAttribute('href');\n      const lnk = basePathOnly(href.toLowerCase());\n      const route = routes.find(r => basePathOnly(r.route.toLowerCase()) === lnk);\n      /** only upgrade routes known by scully. */\n      if (lnk && route && !lnk.startsWith('#')) {\n        elm.onclick = ev => __awaiter(this, void 0, void 0, function* () {\n          const splitRoute = route.route.split(`/`);\n          const curSplit = location.pathname.split('/');\n          // loose last \"part\" of route\n          curSplit.pop();\n          ev.preventDefault();\n          const routed = yield this.router.navigate(splitRoute).catch(e => {\n            console.error('routing error', e);\n            return false;\n          });\n          if (!routed) {\n            return;\n          }\n          /** check for the same route with different \"data\", and NOT a 1 level higher (length), and is not a fragment of th same page */\n          if (curSplit.every((part, i) => splitRoute[i] === part) && splitRoute.length !== curSplit.length + 1) {\n            setTimeout(() => this.replaceContent(), 10); // a small delay, so we are sure the angular parts in the page are settled enough\n          }\n        });\n      }\n    });\n  }\n\n  replaceContent() {\n    /**\n     * as Angular doesn't destroy the component if we stay on the same page,\n     * we have to manually delete old content. Also we need to kick of loading\n     * the new content. handlePage() takes care of that.\n     */\n    /** delete the content, as it is now out of date! */\n    window.scullyContent = undefined;\n    const parent = this.elm.parentElement;\n    let cur = findComments(parent, 'scullyContent-begin')[0];\n    while (cur && cur !== this.elm) {\n      const next = cur.nextSibling;\n      parent.removeChild(cur);\n      cur = next;\n    }\n    this.handlePage();\n  }\n  getCSSId(elm) {\n    return elm.getAttributeNames().find(a => a.startsWith('_ngcontent')) || '';\n  }\n  ngOnDestroy() {\n    this.routeSub.unsubscribe();\n    /** reset the lastused */\n    lastHandled = '//';\n  }\n}\n/** @nocollapse */\nScullyContentComponent.ɵfac = function ScullyContentComponent_Factory(t) {\n  return new (t || ScullyContentComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(ScullyRoutesService), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i3.Location), i0.ɵɵdirectiveInject(i2.HttpClient), i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(SCULLY_LIB_CONFIG));\n};\n/** @nocollapse */\nScullyContentComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ScullyContentComponent,\n  selectors: [[\"scully-content\"]],\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function ScullyContentComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵprojection(0);\n    }\n  },\n  styles: [\"\\n      :host {\\n        display: none;\\n      }\\n      scully-content {\\n        display: none;\\n      }\\n    \"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ScullyContentComponent, [{\n    type: Component,\n    args: [{\n      // tslint:disable-next-line: component-selector\n      selector: 'scully-content',\n      template: '<ng-content></ng-content>',\n      styles: [`\n      :host {\n        display: none;\n      }\n      scully-content {\n        display: none;\n      }\n    `],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      preserveWhitespaces: true\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: ScullyRoutesService\n    }, {\n      type: i1.Router\n    }, {\n      type: i3.Location\n    }, {\n      type: i2.HttpClient\n    }, {\n      type: Document,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [SCULLY_LIB_CONFIG]\n      }]\n    }];\n  }, null);\n})();\nclass ScullyContentModule {}\n/** @nocollapse */\nScullyContentModule.ɵfac = function ScullyContentModule_Factory(t) {\n  return new (t || ScullyContentModule)();\n};\n/** @nocollapse */\nScullyContentModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ScullyContentModule\n});\n/** @nocollapse */\nScullyContentModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ScullyContentModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [ScullyContentComponent],\n      exports: [ScullyContentComponent]\n    }]\n  }], null, null);\n})();\nclass ScullyLibModule {\n  constructor(idle) {\n    this.idle = idle;\n  }\n  /**\n   * We use a little trick to get a working idle-service.\n   * First, we separate out the component in a separate module to prevent a circulair injection\n   * second we create a constuctor that activates the IdleMonitorService. as that is provided for 'root'\n   * there will be only 1 instance in our app.\n   */\n  static forRoot(config = ScullyDefaultSettings) {\n    config = Object.assign({}, ScullyDefaultSettings, config);\n    return {\n      ngModule: ScullyLibModule,\n      providers: [{\n        provide: SCULLY_LIB_CONFIG,\n        useValue: config\n      }]\n    };\n  }\n}\n/** @nocollapse */\nScullyLibModule.ɵfac = function ScullyLibModule_Factory(t) {\n  return new (t || ScullyLibModule)(i0.ɵɵinject(IdleMonitorService));\n};\n/** @nocollapse */\nScullyLibModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ScullyLibModule\n});\n/** @nocollapse */\nScullyLibModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ScullyContentModule, HttpClientModule], ScullyContentModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ScullyLibModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ScullyContentModule, HttpClientModule],\n      exports: [ScullyContentModule]\n    }]\n  }], function () {\n    return [{\n      type: IdleMonitorService\n    }];\n  }, null);\n})();\n\n/*\n * Public API Surface of ng-lib\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { IdleMonitorService, ScullyContentComponent, ScullyContentModule, ScullyLibModule, ScullyRoutesService, TransferStateService, dropEndingSlash, isScullyGenerated, isScullyRunning };","map":{"version":3,"names":["__awaiter","i3","DOCUMENT","i0","InjectionToken","Injectable","Inject","isDevMode","Component","ChangeDetectionStrategy","ViewEncapsulation","NgModule","i1","NavigationStart","GuardsCheckEnd","NavigationEnd","BehaviorSubject","filter","switchMap","NEVER","of","tap","first","map","shareReplay","pluck","firstValueFrom","takeWhile","catchError","ReplaySubject","merge","i2","HttpClientModule","ScullyDefaultSettings","useTransferState","alwaysMonitor","manualIdle","baseURIForScullyContent","SCULLY_LIB_CONFIG","factory","basePathOnly","str","includes","split","cleanedUpVersion","endsWith","slice","isScullyRunning","window","isScullyGenerated","mergePaths","base","path","startsWith","substr","SCULLY_SCRIPT_ID","SCULLY_STATE_START","SCULLY_STATE_END","initialStateDone","TransferStateService","constructor","document","router","http","inlineOnly","currentBaseUrl","stateBS","state$","pipe","state","undefined","nextUrl","events","e","initialUrl","url","next","ev","urlAfterRedirects","startMonitoring","inlineStateOnly","setupEnvForTransferState","setupStartNavMonitoring","injectScript","exposed","transferState","saveState","location","pathname","script","createElement","setAttribute","last","body","lastChild","previousSibling","nodeName","insertBefore","getState","name","fetchTransferState","stateHasKey","value","hasOwnProperty","stateKeyHasValue","setState","val","newState","Object","assign","textContent","escapeHtml","JSON","stringify","subscribe","useScullyTransferState","originalState","part","trim","Promise","r","setTimeout","currentUrl","baseUrl","readFromIndex","readFromJson","console","warn","complete","get","dropPreSlash","responseType","then","html","newStateStr","parse","unescapeHtml","ɵfac","Router","HttpClient","ɵprov","type","args","providedIn","Document","decorators","string","text","escapedText","$","replace","s","unescapedText","IdleMonitorService","zone","conf","tss","dropEndingSlash","imState","idle","timeOut","idle$","initApp","Event","bubbles","cancelable","appReady","appTimeout","scullyLibConfig","dispatchEvent","zoneIdleCheck","fireManualMyAppReadyEvent","init","Zone","simpleTimeout","taskTrackingZone","current","runOutsideAngular","tCancel","count","startTime","Date","now","monitor","clearTimeout","macroTasks","length","find","z","source","run","setPupeteerTimeoutValue","milliseconds","key","NgZone","ScullyRoutesService","refresh","allRoutes$","routes","Array","isArray","cleanDups","refCount","bufferSize","available$","list","published","unPublished$","topLevel$","route","reload","getCurrent","curLocation","encodeURI","slugs","slug","m","Map","forEach","set","hasOtherprops","values","obj","keys","findComments","rootElem","searchText","comments","iterator","createNodeIterator","NodeFilter","SHOW_COMMENT","acceptNode","node","nodeValue","FILTER_REJECT","FILTER_ACCEPT","curNode","nextNode","push","scullyBegin","scullyEnd","lastHandled","ScullyContentComponent","elmRef","srs","elm","nativeElement","routeUpdates$","replaceContent","routeSub","ngOnInit","handlePage","curPage","href","template","currentCssId","getCSSId","scullyContent","htmlString","cssId","innerHTML","join","catch","uri","URL","reject","atr","error","parent","parentElement","begin","createComment","end","content","querySelectorAll","upgradeToRoutelink","bind","_a","tagName","hash","dataset","onclick","preventDefault","destination","getElementById","history","replaceState","toString","scrollIntoView","getAttribute","lnk","toLowerCase","splitRoute","curSplit","pop","routed","navigate","every","i","cur","nextSibling","removeChild","getAttributeNames","a","ngOnDestroy","unsubscribe","ElementRef","Location","ɵcmp","selector","styles","changeDetection","OnPush","encapsulation","None","preserveWhitespaces","ScullyContentModule","ɵmod","ɵinj","declarations","exports","ScullyLibModule","forRoot","config","ngModule","providers","provide","useValue","imports"],"sources":["/home/ceo/mmmm/createyourevent/node_modules/@scullyio/ng-lib/fesm2015/scullyio-ng-lib.js"],"sourcesContent":["import { __awaiter } from 'tslib';\nimport * as i3 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Inject, isDevMode, Component, ChangeDetectionStrategy, ViewEncapsulation, NgModule } from '@angular/core';\nimport * as i1 from '@angular/router';\nimport { NavigationStart, GuardsCheckEnd, NavigationEnd } from '@angular/router';\nimport { BehaviorSubject, filter, switchMap, NEVER, of, tap, first, map, shareReplay, pluck, firstValueFrom, takeWhile, catchError, ReplaySubject, merge } from 'rxjs';\nimport * as i2 from '@angular/common/http';\nimport { HttpClientModule } from '@angular/common/http';\n\nconst ScullyDefaultSettings = {\n    useTransferState: true,\n    alwaysMonitor: false,\n    manualIdle: false,\n    baseURIForScullyContent: 'http://localhost:1668',\n};\nconst SCULLY_LIB_CONFIG = new InjectionToken('scullyLibConfig', {\n    factory: () => ScullyDefaultSettings,\n});\n\n/**\n * Take a string, preferably resembling an URL, take out the search params, the anchors, and the ending slash\n * @param str\n */\nconst basePathOnly = (str) => {\n    if (str.includes('#')) {\n        str = str.split('#')[0];\n    }\n    if (str.includes('?')) {\n        str = str.split('?')[0];\n    }\n    const cleanedUpVersion = str.endsWith('/') ? str.slice(0, -1) : str;\n    return cleanedUpVersion;\n};\n\n// tslint:disable: no-string-literal\nconst isScullyRunning = () => window && window['ScullyIO'] === 'running';\nconst isScullyGenerated = () => window && window['ScullyIO'] === 'generated';\n\nfunction mergePaths(base, path) {\n    base = base !== null && base !== void 0 ? base : '';\n    if (base.endsWith('/') && path.startsWith('/')) {\n        return `${base}${path.substr(1)}`;\n    }\n    if (!base.endsWith('/') && !path.startsWith('/')) {\n        return `${base}/${path}`;\n    }\n    return `${base}${path}`;\n}\n\nconst SCULLY_SCRIPT_ID = `ScullyIO-transfer-state`;\nconst SCULLY_STATE_START = `/** ___SCULLY_STATE_START___ */`;\nconst SCULLY_STATE_END = `/** ___SCULLY_STATE_END___ */`;\nconst initialStateDone = '__done__with__Initial__navigation__';\n// Adding this dynamic comment to suppress ngc error around Document as a DI token.\n// https://github.com/angular/angular/issues/20351#issuecomment-344009887\n/** @dynamic */\nclass TransferStateService {\n    constructor(document, router, http) {\n        this.document = document;\n        this.router = router;\n        this.http = http;\n        /** parse from index, or load from data.json, according to scullConfig setting */\n        this.inlineOnly = false;\n        /** set the currentBase to something that it can never be */\n        this.currentBaseUrl = '//';\n        /** subject to fire off incoming states */\n        this.stateBS = new BehaviorSubject({});\n        this.state$ = this.stateBS.pipe(filter((state) => state !== undefined));\n        // emit the next url when routing is complete\n        this.nextUrl = this.router.events.pipe(filter((e) => e instanceof NavigationStart), switchMap((e) => {\n            if (basePathOnly(this.initialUrl) === basePathOnly(e.url)) {\n                /** don't kick off on initial load to prevent flicker */\n                this.initialUrl = initialStateDone;\n                return NEVER;\n            }\n            return of(e);\n        }), \n        /** reset the state, so new components will never get stale data */\n        tap(() => this.stateBS.next(undefined)), \n        /** prevent emitting before navigation to _this_ URL is done. */\n        switchMap((e) => this.router.events.pipe(filter((ev) => ev instanceof GuardsCheckEnd && ev.url === e.url), first())), map((ev) => basePathOnly(ev.urlAfterRedirects || ev.url)), shareReplay(1));\n    }\n    startMonitoring() {\n        if (window && window['ScullyIO-injected'] && window['ScullyIO-injected'].inlineStateOnly) {\n            this.inlineOnly = true;\n        }\n        this.setupEnvForTransferState();\n        this.setupStartNavMonitoring();\n    }\n    setupEnvForTransferState() {\n        if (isScullyRunning()) {\n            this.injectScript();\n            // In Scully puppeteer\n            const exposed = window['ScullyIO-exposed'] || {};\n            if (exposed.transferState) {\n                this.stateBS.next(exposed.transferState);\n                this.saveState(exposed.transferState);\n            }\n        }\n        else {\n            // On the client AFTER Scully rendered it. Also store the state in case the user comes from a non-scully page\n            this.initialUrl = window.location.pathname || '__no_NO_no__';\n            this.initialUrl = this.initialUrl !== '/' && this.initialUrl.endsWith('/') ? this.initialUrl.slice(0, -1) : this.initialUrl;\n            /** set the initial state */\n            if (isScullyGenerated()) {\n                /** only update the initial state when the page is Scully generated */\n                this.stateBS.next((window && window[SCULLY_SCRIPT_ID]) || {});\n            }\n        }\n    }\n    injectScript() {\n        this.script = this.document.createElement('script');\n        this.script.setAttribute('id', SCULLY_SCRIPT_ID);\n        let last = this.document.body.lastChild;\n        while (last.previousSibling.nodeName === 'SCRIPT') {\n            last = last.previousSibling;\n        }\n        // console.log(`\n        // --------------------------------------------------\n        //    Welp! ${this.script}\n        // --------------------------------------------------\n        // `)\n        this.document.body.insertBefore(this.script, last);\n    }\n    /**\n     * Getstate will return an observable that containes the data.\n     * It does so right after the navigation for the page has finished.\n     * please note, this works SYNC on initial route, preventing a flash of content.\n     * @param name The name of the state to\n     */\n    getState(name) {\n        /** start of the fetch for the current active route. */\n        this.fetchTransferState();\n        return this.state$.pipe(pluck(name)\n        // tap((data) => console.log('tss', data))\n        );\n    }\n    /**\n     * Read the current state, and see if it has an value for the name.\n     * (note the value it containes still can be undefined!)\n     */\n    stateHasKey(name) {\n        return this.stateBS.value && this.stateBS.value.hasOwnProperty(name);\n    }\n    /**\n     * Read the current state, and see if it has an value for the name.\n     * ys also if there is actually an value in the state.\n     */\n    stateKeyHasValue(name) {\n        return this.stateBS.value && this.stateBS.value.hasOwnProperty(name) && this.stateBS.value[name] != null;\n    }\n    /**\n     * SetState will update the script in the generated page with data added.\n     * @param name\n     * @param val\n     */\n    setState(name, val) {\n        const newState = Object.assign(Object.assign({}, this.stateBS.value), { [name]: val });\n        this.stateBS.next(newState);\n        this.saveState(newState);\n    }\n    saveState(newState) {\n        if (isScullyRunning()) {\n            this.script.textContent = `{window['${SCULLY_SCRIPT_ID}']=_u(String.raw\\`${SCULLY_STATE_START}${escapeHtml(JSON.stringify(newState))}${SCULLY_STATE_END}\\`);function _u(t){t=t.split('${SCULLY_STATE_START}')[1].split('${SCULLY_STATE_END}')[0];const u={'_~b~': \"${'`'}\",'_~q~': \"'\",'_~o~': '$','_~s~': '/','_~l~': '<','_~g~': '>'};return JSON.parse(t.replace(/_~d~/g,'\\\\\\\\\"').replace(/_~[^]~/g, (s) => u[s]).replace(/\\\\n/g,'\\\\\\\\n').replace(/\\\\t/g,'\\\\\\\\t').replace(/\\\\r/g,'\\\\\\\\r'));}}`;\n        }\n    }\n    /**\n     * starts monitoring the router, and keep the url from the last completed navigation handy.\n     */\n    setupStartNavMonitoring() {\n        if (!isScullyGenerated()) {\n            return;\n        }\n        /** start monitoring the routes */\n        this.nextUrl.subscribe();\n    }\n    /**\n     * Wraps an observable into scully's transfer state. If data for the provided `name` is\n     * available in the state, it gets returned. Otherwise, the `originalState` observable will\n     * be returned.\n     *\n     * On subsequent calls, the data in the state will always be returned. The `originalState` will\n     * be returned only once.\n     *\n     * This is a convenience method which does not require you to use `getState`/`setState` manually.\n     *\n     * @param name state key\n     * @param originalState an observable which yields the desired data\n     */\n    useScullyTransferState(name, originalState) {\n        if (isScullyGenerated()) {\n            return this.getState(name);\n        }\n        return originalState.pipe(tap((state) => this.setState(name, state)));\n    }\n    fetchTransferState() {\n        return __awaiter(this, void 0, void 0, function* () {\n            /** helper to read the part before the first slash (ignores leading slash) */\n            const base = (url) => url.split('/').filter((part) => part.trim() !== '')[0];\n            /** put this in the next event cycle so the correct route can be read */\n            yield new Promise((r) => setTimeout(r, 0));\n            /** get the current url */\n            const currentUrl = yield firstValueFrom(this.nextUrl);\n            const baseUrl = base(currentUrl);\n            if (this.currentBaseUrl === baseUrl) {\n                /** already monitoring, don't tho a thing */\n                return;\n            }\n            /** keep the baseUrl for later reference */\n            this.currentBaseUrl = baseUrl;\n            this.nextUrl\n                .pipe(\n            /** keep updating till we move to another route */\n            takeWhile((url) => base(url) === this.currentBaseUrl), \n            // Get the next route's data from the the index or data file\n            switchMap((url) => (this.inlineOnly ? this.readFromIndex(url) : this.readFromJson(url))), catchError((e) => {\n                // TODO: come up with better error text.\n                /** the developer needs to know, but its not fatal, so just return an empty state */\n                console.warn('Error while loading of parsing Scully state:', e);\n                return of({});\n            }), tap((newState) => {\n                /** and activate the state in the components. on any error it will be empty */\n                this.stateBS.next(newState);\n            }))\n                .subscribe({\n                /** when completes (different URL) */\n                complete: () => {\n                    /** reset the currentBaseUrl */\n                    this.currentBaseUrl = '//';\n                },\n            });\n        });\n    }\n    readFromJson(url) {\n        return firstValueFrom(this.http.get(dropPreSlash(mergePaths(url, '/data.json'))));\n    }\n    readFromIndex(url) {\n        return firstValueFrom(this.http.get(dropPreSlash(mergePaths(url, '/index.html')), { responseType: 'text' })).then((html) => {\n            const newStateStr = html.split(SCULLY_STATE_START)[1].split(SCULLY_STATE_END)[0];\n            return JSON.parse(unescapeHtml(newStateStr));\n        });\n    }\n}\n/** @nocollapse */ TransferStateService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.6\", ngImport: i0, type: TransferStateService, deps: [{ token: DOCUMENT }, { token: i1.Router }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });\n/** @nocollapse */ TransferStateService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.6\", ngImport: i0, type: TransferStateService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.6\", ngImport: i0, type: TransferStateService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: function () { return [{ type: Document, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1.Router }, { type: i2.HttpClient }]; } });\nfunction dropPreSlash(string) {\n    return string.startsWith('/') ? string.slice(1) : string;\n}\n/**\n * we need to escape our HTML to prevent XXS,\n * It needs to be custom, because the content can already contain html-escaped sequences\n **/\nfunction escapeHtml(text) {\n    const escapedText = {\n        \"'\": '_~q~',\n        $: '_~o~',\n        '`': '_~b~',\n        '/': '_~s~',\n        '<': '_~l~',\n        '>': '_~g~',\n    };\n    return (text\n        /** escape the json */\n        .replace(/[\\$`'<>\\/]/g, (s) => escapedText[s])\n        /** replace escaped double-quotes with single */\n        .replace(/\\\\\\\"/g, `_~d~`));\n}\n/**\n * Unescape our custom escaped texts\n * @param text\n */\nfunction unescapeHtml(text) {\n    const unescapedText = {\n        '_~q~': \"'\",\n        '_~b~': '`',\n        '_~o~': '$',\n        '_~s~': '/',\n        '_~l~': '<',\n        '_~g~': '>',\n    };\n    return (text\n        /** put back escaped double quotes to make valid json again */\n        .replace(/_~d~/g, `\\\\\"`)\n        /** replace the custom escapes */\n        .replace(/_~[^]~/g, (s) => unescapedText[s])\n        /** restore newlines+cr */\n        .replace(/\\n/g, '\\\\n')\n        .replace(/\\r/g, '\\\\r'));\n}\n\n// if (window) {\n//   window.addEventListener('AngularReady', ev => {\n//     console.log('appReady fired', ev);\n//   });\n// }\n// Adding this dynamic comment to suppress ngc error around Document as a DI token.\n// https://github.com/angular/angular/issues/20351#issuecomment-344009887\n/** @dynamic */\nclass IdleMonitorService {\n    constructor(zone, router, conf, document, tss) {\n        this.zone = zone;\n        this.router = router;\n        this.document = document;\n        /** store the 'landing' url so we can skip it in idle-check. */\n        this.initialUrl = dropEndingSlash(window && window.location && window.location.pathname) || '';\n        this.imState = new BehaviorSubject({\n            idle: false,\n            timeOut: 5 * 1000, // 5 seconds timeout as default\n        });\n        this.idle$ = this.imState.pipe(pluck('idle'));\n        this.initApp = new Event('AngularInitialized', {\n            bubbles: true,\n            cancelable: false,\n        });\n        this.appReady = new Event('AngularReady', {\n            bubbles: true,\n            cancelable: false,\n        });\n        this.appTimeout = new Event('AngularTimeout', {\n            bubbles: true,\n            cancelable: false,\n        });\n        /** provide the default for missing conf paramter */\n        this.scullyLibConfig = Object.assign({}, ScullyDefaultSettings, conf);\n        const exposed = window['ScullyIO-exposed'] || {};\n        const manualIdle = !!exposed.manualIdle;\n        if (!this.scullyLibConfig.manualIdle && window && (this.scullyLibConfig.alwaysMonitor || isScullyRunning())) {\n            this.document.dispatchEvent(this.initApp);\n            this.router.events\n                .pipe(filter((ev) => ev instanceof NavigationEnd && ev.urlAfterRedirects !== undefined), \n            /** don't check the page that has this setting. event is only importand on page load */\n            filter((ev) => (manualIdle ? ev.urlAfterRedirects !== this.initialUrl : true)), tap(() => this.zoneIdleCheck()))\n                .subscribe();\n        }\n        if (this.scullyLibConfig.manualIdle) {\n            /** we still need the init event. */\n            this.document.dispatchEvent(this.initApp);\n        }\n        if (this.scullyLibConfig.useTransferState) {\n            /** don't start monitoring if people don't use the transferState */\n            tss.startMonitoring();\n        }\n    }\n    fireManualMyAppReadyEvent() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.document.dispatchEvent(this.appReady);\n        });\n    }\n    init() {\n        return firstValueFrom(this.idle$);\n    }\n    zoneIdleCheck() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (Zone === undefined) {\n                return this.simpleTimeout();\n            }\n            const taskTrackingZone = Zone.current.get('TaskTrackingZone');\n            if (taskTrackingZone === undefined) {\n                return this.simpleTimeout();\n            }\n            if (this.imState.value.idle) {\n                yield this.setState('idle', false);\n            }\n            /** run the actual check for 'idle' outsides zone, otherwise it will never come to an end. */\n            this.zone.runOutsideAngular(() => {\n                let tCancel;\n                let count = 0;\n                const startTime = Date.now();\n                const monitor = () => {\n                    clearTimeout(tCancel);\n                    // console.table(taskTrackingZone.macroTasks);\n                    if (Date.now() - startTime > 30 * 1000) {\n                        /** bail out after 30 seconds. */\n                        this.document.dispatchEvent(this.appTimeout);\n                        return;\n                    }\n                    if ((taskTrackingZone.macroTasks.length > 0 &&\n                        taskTrackingZone.macroTasks.find((z) => z.source.includes('XMLHttpRequest')) !==\n                            undefined) ||\n                        count < 1 // make sure it runs at least once!\n                    ) {\n                        tCancel = setTimeout(() => {\n                            count += 1;\n                            monitor();\n                        }, 50);\n                        return;\n                    }\n                    this.zone.run(() => {\n                        /** run this inside the zone, and give the app 250Ms to wrap up, before scraping starts */\n                        setTimeout(() => {\n                            this.document.dispatchEvent(this.appReady);\n                            this.setState('idle', true);\n                        }, 250);\n                    });\n                };\n                monitor();\n            });\n        });\n    }\n    simpleTimeout() {\n        return __awaiter(this, void 0, void 0, function* () {\n            /** zone not available, use a timeout instead. */\n            console.warn('Scully is using timeouts, add the needed polyfills instead!');\n            yield new Promise((r) => setTimeout(r, this.imState.value.timeOut));\n            this.document.dispatchEvent(this.appReady);\n        });\n    }\n    setPupeteerTimeoutValue(milliseconds) {\n        this.imState.next(Object.assign(Object.assign({}, this.imState.value), { timeOut: milliseconds }));\n    }\n    setState(key, value) {\n        this.imState.next(Object.assign(Object.assign({}, this.imState.value), { [key]: value }));\n    }\n}\n/** @nocollapse */ IdleMonitorService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.6\", ngImport: i0, type: IdleMonitorService, deps: [{ token: i0.NgZone }, { token: i1.Router }, { token: SCULLY_LIB_CONFIG }, { token: DOCUMENT }, { token: TransferStateService }], target: i0.ɵɵFactoryTarget.Injectable });\n/** @nocollapse */ IdleMonitorService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.6\", ngImport: i0, type: IdleMonitorService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.6\", ngImport: i0, type: IdleMonitorService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i1.Router }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [SCULLY_LIB_CONFIG]\n                }] }, { type: Document, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: TransferStateService }]; } });\nfunction dropEndingSlash(str) {\n    return str.endsWith('/') ? str.slice(0, -1) : str;\n}\n\nclass ScullyRoutesService {\n    constructor(router, http) {\n        this.router = router;\n        this.http = http;\n        this.refresh = new ReplaySubject(1);\n        /**\n         * An observable with all routes, published and unpublished alike\n         */\n        this.allRoutes$ = this.refresh.pipe(switchMap(() => this.http.get('assets/scully-routes.json')), catchError(() => {\n            console.warn('Scully routes file not found, are you running the Scully generated version of your site?');\n            return of([]);\n        }), \n        /** filter out all non-array results */\n        filter((routes) => Array.isArray(routes)), map(this.cleanDups), shareReplay({ refCount: false, bufferSize: 1 }));\n        /**\n         * An observable with available routes (all published routes)\n         */\n        this.available$ = this.allRoutes$.pipe(map((list) => list.filter((r) => r.hasOwnProperty('published') ? r.published !== false : true)), shareReplay({ refCount: false, bufferSize: 1 }));\n        /**\n         * an observable with all unpublished routes\n         */\n        this.unPublished$ = this.allRoutes$.pipe(map((list) => list.filter((r) => r.hasOwnProperty('published') ? r.published === false : false)), shareReplay({ refCount: false, bufferSize: 1 }));\n        /**\n         * An observable with the top-level off all published routes.\n         * (in an urls it would be `http://www.sample.org/__thisPart__/subroutes`)\n         */\n        this.topLevel$ = this.available$.pipe(map((routes) => routes.filter((r) => !r.route.slice(1).includes('/'))), shareReplay({ refCount: false, bufferSize: 1 }));\n        /** kick off first cycle */\n        this.reload();\n    }\n    /**\n     * returns an observable that returns the route information for the\n     * route currently selected. subscribes to route-events to update when needed\n     */\n    getCurrent() {\n        if (!location) {\n            /** probably not in a browser, no current location available */\n            return of();\n        }\n        /** fire off at start, and when navigation is done. */\n        return merge(of(new NavigationEnd(0, '', '')), this.router.events).pipe(filter((e) => e instanceof NavigationEnd), switchMap(() => this.available$), map((list) => {\n            const curLocation = basePathOnly(encodeURI(location.pathname).trim());\n            return list.find((r) => curLocation === basePathOnly(r.route.trim()) ||\n                (r.slugs &&\n                    Array.isArray(r.slugs) &&\n                    r.slugs.find((slug) => curLocation.endsWith(basePathOnly(slug.trim())))));\n        }));\n    }\n    /**\n     * internal, as routes can have multiple slugs, and so occur multiple times\n     * this util function collapses all slugs back into 1 route.\n     */\n    cleanDups(routes) {\n        const m = new Map();\n        /** check for duplicates by comparing all, include route in comparison if its the only thing, or the only thing with only the tile  */\n        routes.forEach((r) => m.set(JSON.stringify(Object.assign(Object.assign({}, r), { route: hasOtherprops(r) ? '' : r.route })), r));\n        return [...m.values()];\n    }\n    /** an utility that will force a reload of the `scully-routes.json` file */\n    reload() {\n        this.refresh.next();\n    }\n}\n/** @nocollapse */ ScullyRoutesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.6\", ngImport: i0, type: ScullyRoutesService, deps: [{ token: i1.Router }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });\n/** @nocollapse */ ScullyRoutesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.6\", ngImport: i0, type: ScullyRoutesService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.6\", ngImport: i0, type: ScullyRoutesService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: function () { return [{ type: i1.Router }, { type: i2.HttpClient }]; } });\nfunction hasOtherprops(obj) {\n    const keys = Object.keys(obj);\n    if (keys.length === 1 && keys.includes('route')) {\n        return false;\n    }\n    if (keys.length === 2 && keys.includes('route') && keys.includes('title')) {\n        return false;\n    }\n    return true;\n}\n\n/**\n * Returns an array of nodes coninting all the html comments in the element.\n * When a searchText is given this is narrowed down to only comments that contian this text\n * @param rootElem Element to search nto\n * @param searchText optional string that needs to be in a HTML comment\n */\nfunction findComments(rootElem, searchText) {\n    const comments = [];\n    // Fourth argument, which is actually obsolete according to the DOM4 standard, seems required in IE 11\n    const iterator = document.createNodeIterator(rootElem, NodeFilter.SHOW_COMMENT, {\n        acceptNode: node => {\n            // Logic to determine whether to accept, reject or skip node\n            // In this case, only accept nodes that have content\n            // that is containing our searchText, by rejecting any other nodes.\n            if (searchText &&\n                node.nodeValue &&\n                !node.nodeValue.includes(searchText)) {\n                return NodeFilter.FILTER_REJECT;\n            }\n            return NodeFilter.FILTER_ACCEPT;\n        }\n    }\n    // , false // IE-11 support requires this parameter.\n    );\n    let curNode;\n    // tslint:disable-next-line: no-conditional-assignment\n    while ((curNode = iterator.nextNode())) {\n        comments.push(curNode);\n    }\n    return comments;\n}\n\n/** this is needed, because otherwise the CLI borks while building */\nconst scullyBegin = '<!--scullyContent-begin-->';\nconst scullyEnd = '<!--scullyContent-end-->';\n/** use the module's closure to keep a system-wide check for the last handled URL. */\nlet lastHandled;\n// Adding this dynamic comment to suppress ngc error around Document as a DI token.\n// https://github.com/angular/angular/issues/20351#issuecomment-344009887\n/** @dynamic */\nclass ScullyContentComponent {\n    constructor(elmRef, srs, router, location, http, document, conf) {\n        this.elmRef = elmRef;\n        this.srs = srs;\n        this.router = router;\n        this.location = location;\n        this.http = http;\n        this.document = document;\n        this.conf = conf;\n        this.baseUrl = this.conf.useTransferState || ScullyDefaultSettings.useTransferState;\n        this.elm = this.elmRef.nativeElement;\n        /** pull in all  available routes into an eager promise */\n        this.routes = firstValueFrom(this.srs.allRoutes$);\n        /** monitor the router, so we can update while navigating in the same 'page' see #311 */\n        this.routeUpdates$ = this.router.events.pipe(filter((ev) => ev instanceof NavigationEnd), \n        /** don't replace if we are already there */\n        filter((ev) => lastHandled && !lastHandled.endsWith(basePathOnly(ev.urlAfterRedirects))), tap((r) => this.replaceContent()));\n        this.routeSub = this.routeUpdates$.subscribe();\n        /** do this from constructor, so it runs ASAP */\n    }\n    ngOnInit() {\n        if (this.elm) {\n            /** this will only fire in a browser environment */\n            this.handlePage();\n        }\n    }\n    /**\n     * Loads the static content from scully into the view\n     * Will fetch the content from sibling links with xmlHTTPrequest\n     */\n    handlePage() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const curPage = basePathOnly(location.href);\n            if (lastHandled === curPage) {\n                /**\n                 * Due to the fix we needed for #311\n                 * it might happen that this routine is called\n                 * twice for the same page.\n                 * this code will make sure the second one is ignored.\n                 */\n                return;\n            }\n            lastHandled = curPage;\n            const template = this.document.createElement('template');\n            const currentCssId = this.getCSSId(this.elm);\n            if (window.scullyContent) {\n                /** upgrade existing static content */\n                const htmlString = window.scullyContent.html;\n                if (currentCssId !== window.scullyContent.cssId) {\n                    /** replace the angular cssId */\n                    template.innerHTML = htmlString.split(window.scullyContent.cssId).join(currentCssId);\n                }\n                else {\n                    template.innerHTML = htmlString;\n                }\n            }\n            else {\n                /**\n                 *   NOTE\n                 * when updateting the texts for the errors, make sure you leave the\n                 *  `id=\"___scully-parsing-error___\"`\n                 * in there. That way users can detect rendering errors in their CI\n                 * on a reliable way.\n                 */\n                if (isScullyRunning()) {\n                    /**\n                     * we don't need to fetch the content, as it is already in the window\n                     */\n                    return;\n                }\n                yield firstValueFrom(this.http.get(curPage + '/index.html', { responseType: 'text' }))\n                    .catch((e) => {\n                    if (isDevMode()) {\n                        /** in devmode (usually in `ng serve`) check the scully server for the content too */\n                        const uri = new URL(location.href);\n                        const url = `${this.conf.baseURIForScullyContent}/${basePathOnly(uri.pathname)}/index.html`;\n                        return firstValueFrom(this.http.get(url, { responseType: 'text' }));\n                    }\n                    else {\n                        return Promise.reject(e);\n                    }\n                })\n                    .then((html) => {\n                    try {\n                        const htmlString = html.split(scullyBegin)[1].split(scullyEnd)[0];\n                        if (htmlString.includes('_ngcontent')) {\n                            /** update the angular cssId */\n                            const atr = '_ngcontent' + htmlString.split('_ngcontent')[1].split('=')[0];\n                            template.innerHTML = htmlString.split(atr).join(currentCssId);\n                        }\n                        else {\n                            template.innerHTML = htmlString;\n                        }\n                    }\n                    catch (e) {\n                        template.innerHTML = `<h2 id=\"___scully-parsing-error___\">Sorry, could not parse static page content</h2>\n            <p>This might happen if you are not using the static generated pages.</p>`;\n                    }\n                })\n                    .catch((e) => {\n                    template.innerHTML = '<h2 id=\"___scully-parsing-error___\">Sorry, could not load static page content</h2>';\n                    console.error('problem during loading static scully content', e);\n                });\n            }\n            /** insert the whole thing just before the `<scully-content>` element */\n            const parent = this.elm.parentElement || this.document.body;\n            const begin = this.document.createComment('scullyContent-begin');\n            const end = this.document.createComment('scullyContent-end');\n            parent.insertBefore(begin, this.elm);\n            parent.insertBefore(template.content, this.elm);\n            parent.insertBefore(end, this.elm);\n            /** upgrade all hrefs to simulated routelinks (in next microtask) */\n            setTimeout(() => this.document.querySelectorAll('[href]').forEach(this.upgradeToRoutelink.bind(this)), 10);\n            // document.querySelectorAll('[href]').forEach(this.upgradeToRoutelink.bind(this));\n        });\n    }\n    /**\n     * upgrade a **href** attributes to links that respect the Angular router\n     * and don't do a full page reload. Only works on links that are found in the\n     * Scully route config file.\n     * @param elm the element containing the **hrefs**\n     */\n    upgradeToRoutelink(elm) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!['A', 'BUTTON'].includes(elm.tagName)) {\n                return;\n            }\n            const hash = (_a = elm.dataset) === null || _a === void 0 ? void 0 : _a.hash;\n            if (hash) {\n                elm.setAttribute('href', '#' + hash);\n                elm.setAttribute('onclick', '');\n                elm.onclick = (ev) => {\n                    ev.preventDefault();\n                    const destination = document.getElementById(hash);\n                    if (destination) {\n                        const url = new URL(window.location.href);\n                        url.hash = hash;\n                        history.replaceState('', '', url.toString());\n                        destination.scrollIntoView();\n                    }\n                };\n                return;\n            }\n            const routes = yield this.routes;\n            const href = elm.getAttribute('href');\n            const lnk = basePathOnly(href.toLowerCase());\n            const route = routes.find((r) => basePathOnly(r.route.toLowerCase()) === lnk);\n            /** only upgrade routes known by scully. */\n            if (lnk && route && !lnk.startsWith('#')) {\n                elm.onclick = (ev) => __awaiter(this, void 0, void 0, function* () {\n                    const splitRoute = route.route.split(`/`);\n                    const curSplit = location.pathname.split('/');\n                    // loose last \"part\" of route\n                    curSplit.pop();\n                    ev.preventDefault();\n                    const routed = yield this.router.navigate(splitRoute).catch((e) => {\n                        console.error('routing error', e);\n                        return false;\n                    });\n                    if (!routed) {\n                        return;\n                    }\n                    /** check for the same route with different \"data\", and NOT a 1 level higher (length), and is not a fragment of th same page */\n                    if (curSplit.every((part, i) => splitRoute[i] === part) && splitRoute.length !== curSplit.length + 1) {\n                        setTimeout(() => this.replaceContent(), 10); // a small delay, so we are sure the angular parts in the page are settled enough\n                    }\n                });\n            }\n        });\n    }\n    replaceContent() {\n        /**\n         * as Angular doesn't destroy the component if we stay on the same page,\n         * we have to manually delete old content. Also we need to kick of loading\n         * the new content. handlePage() takes care of that.\n         */\n        /** delete the content, as it is now out of date! */\n        window.scullyContent = undefined;\n        const parent = this.elm.parentElement;\n        let cur = findComments(parent, 'scullyContent-begin')[0];\n        while (cur && cur !== this.elm) {\n            const next = cur.nextSibling;\n            parent.removeChild(cur);\n            cur = next;\n        }\n        this.handlePage();\n    }\n    getCSSId(elm) {\n        return elm.getAttributeNames().find((a) => a.startsWith('_ngcontent')) || '';\n    }\n    ngOnDestroy() {\n        this.routeSub.unsubscribe();\n        /** reset the lastused */\n        lastHandled = '//';\n    }\n}\n/** @nocollapse */ ScullyContentComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.6\", ngImport: i0, type: ScullyContentComponent, deps: [{ token: i0.ElementRef }, { token: ScullyRoutesService }, { token: i1.Router }, { token: i3.Location }, { token: i2.HttpClient }, { token: DOCUMENT }, { token: SCULLY_LIB_CONFIG }], target: i0.ɵɵFactoryTarget.Component });\n/** @nocollapse */ ScullyContentComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.6\", type: ScullyContentComponent, selector: \"scully-content\", ngImport: i0, template: '<ng-content></ng-content>', isInline: true, styles: [\"\\n      :host {\\n        display: none;\\n      }\\n      scully-content {\\n        display: none;\\n      }\\n    \"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None, preserveWhitespaces: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.6\", ngImport: i0, type: ScullyContentComponent, decorators: [{\n            type: Component,\n            args: [{\n                    // tslint:disable-next-line: component-selector\n                    selector: 'scully-content',\n                    template: '<ng-content></ng-content>',\n                    styles: [\n                        `\n      :host {\n        display: none;\n      }\n      scully-content {\n        display: none;\n      }\n    `,\n                    ],\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    preserveWhitespaces: true,\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: ScullyRoutesService }, { type: i1.Router }, { type: i3.Location }, { type: i2.HttpClient }, { type: Document, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [SCULLY_LIB_CONFIG]\n                }] }]; } });\n\nclass ScullyContentModule {\n}\n/** @nocollapse */ ScullyContentModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.6\", ngImport: i0, type: ScullyContentModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n/** @nocollapse */ ScullyContentModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.6\", ngImport: i0, type: ScullyContentModule, declarations: [ScullyContentComponent], exports: [ScullyContentComponent] });\n/** @nocollapse */ ScullyContentModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.6\", ngImport: i0, type: ScullyContentModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.6\", ngImport: i0, type: ScullyContentModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [ScullyContentComponent],\n                    exports: [ScullyContentComponent]\n                }]\n        }] });\n\nclass ScullyLibModule {\n    constructor(idle) {\n        this.idle = idle;\n    }\n    /**\n     * We use a little trick to get a working idle-service.\n     * First, we separate out the component in a separate module to prevent a circulair injection\n     * second we create a constuctor that activates the IdleMonitorService. as that is provided for 'root'\n     * there will be only 1 instance in our app.\n     */\n    static forRoot(config = ScullyDefaultSettings) {\n        config = Object.assign({}, ScullyDefaultSettings, config);\n        return {\n            ngModule: ScullyLibModule,\n            providers: [{ provide: SCULLY_LIB_CONFIG, useValue: config }],\n        };\n    }\n}\n/** @nocollapse */ ScullyLibModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.6\", ngImport: i0, type: ScullyLibModule, deps: [{ token: IdleMonitorService }], target: i0.ɵɵFactoryTarget.NgModule });\n/** @nocollapse */ ScullyLibModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.6\", ngImport: i0, type: ScullyLibModule, imports: [ScullyContentModule, HttpClientModule], exports: [ScullyContentModule] });\n/** @nocollapse */ ScullyLibModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.6\", ngImport: i0, type: ScullyLibModule, imports: [[ScullyContentModule, HttpClientModule], ScullyContentModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.6\", ngImport: i0, type: ScullyLibModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ScullyContentModule, HttpClientModule],\n                    exports: [ScullyContentModule],\n                }]\n        }], ctorParameters: function () { return [{ type: IdleMonitorService }]; } });\n\n/*\n * Public API Surface of ng-lib\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { IdleMonitorService, ScullyContentComponent, ScullyContentModule, ScullyLibModule, ScullyRoutesService, TransferStateService, dropEndingSlash, isScullyGenerated, isScullyRunning };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}