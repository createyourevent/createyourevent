{"ast":null,"code":"import { MetricsModalThreadsComponent } from '../metrics-modal-threads/metrics-modal-threads.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ng-bootstrap/ng-bootstrap\";\nimport * as i2 from \"../../../../shared/language/translate.directive\";\nimport * as i3 from \"@angular/common\";\nexport class JvmThreadsComponent {\n  constructor(modalService) {\n    this.modalService = modalService;\n    this.threadStats = {\n      threadDumpAll: 0,\n      threadDumpRunnable: 0,\n      threadDumpTimedWaiting: 0,\n      threadDumpWaiting: 0,\n      threadDumpBlocked: 0\n    };\n  }\n  set threads(threads) {\n    this._threads = threads;\n    threads?.forEach(thread => {\n      if (thread.threadState === 'RUNNABLE') {\n        this.threadStats.threadDumpRunnable += 1;\n      } else if (thread.threadState === 'WAITING') {\n        this.threadStats.threadDumpWaiting += 1;\n      } else if (thread.threadState === 'TIMED_WAITING') {\n        this.threadStats.threadDumpTimedWaiting += 1;\n      } else if (thread.threadState === 'BLOCKED') {\n        this.threadStats.threadDumpBlocked += 1;\n      }\n    });\n    this.threadStats.threadDumpAll = this.threadStats.threadDumpRunnable + this.threadStats.threadDumpWaiting + this.threadStats.threadDumpTimedWaiting + this.threadStats.threadDumpBlocked;\n  }\n  get threads() {\n    return this._threads;\n  }\n  open() {\n    const modalRef = this.modalService.open(MetricsModalThreadsComponent);\n    modalRef.componentInstance.threads = this.threads;\n  }\n}\nJvmThreadsComponent.ɵfac = function JvmThreadsComponent_Factory(t) {\n  return new (t || JvmThreadsComponent)(i0.ɵɵdirectiveInject(i1.NgbModal));\n};\nJvmThreadsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: JvmThreadsComponent,\n  selectors: [[\"jhi-jvm-threads\"]],\n  inputs: {\n    threads: \"threads\"\n  },\n  decls: 60,\n  vars: 37,\n  consts: [[\"jhiTranslate\", \"metrics.jvm.threads.title\"], [\"jhiTranslate\", \"metrics.jvm.threads.runnable\"], [\"type\", \"success\", 3, \"value\", \"max\", \"striped\", \"animated\"], [\"jhiTranslate\", \"metrics.jvm.threads.timedwaiting\"], [\"type\", \"warning\", 3, \"value\", \"max\", \"striped\", \"animated\"], [\"jhiTranslate\", \"metrics.jvm.threads.waiting\"], [\"jhiTranslate\", \"metrics.jvm.threads.blocked\"], [\"data-toggle\", \"modal\", \"data-target\", \"#threadDump\", 1, \"hand\", \"btn\", \"btn-primary\", \"btn-sm\", 3, \"click\"]],\n  template: function JvmThreadsComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h4\", 0);\n      i0.ɵɵtext(1, \"Threads\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(2, \"\\n\\n\");\n      i0.ɵɵelementStart(3, \"span\")(4, \"span\", 1);\n      i0.ɵɵtext(5, \"Runnable\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(7, \"\\n\\n\");\n      i0.ɵɵelementStart(8, \"ngb-progressbar\", 2);\n      i0.ɵɵtext(9, \"\\n  \");\n      i0.ɵɵelementStart(10, \"span\");\n      i0.ɵɵtext(11);\n      i0.ɵɵpipe(12, \"number\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(13, \"\\n\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(14, \"\\n\\n\");\n      i0.ɵɵelementStart(15, \"span\")(16, \"span\", 3);\n      i0.ɵɵtext(17, \"Timed Waiting\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(18);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(19, \"\\n\\n\");\n      i0.ɵɵelementStart(20, \"ngb-progressbar\", 4);\n      i0.ɵɵtext(21, \"\\n  \");\n      i0.ɵɵelementStart(22, \"span\");\n      i0.ɵɵtext(23);\n      i0.ɵɵpipe(24, \"number\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(25, \"\\n\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(26, \"\\n\\n\");\n      i0.ɵɵelementStart(27, \"span\")(28, \"span\", 5);\n      i0.ɵɵtext(29, \"Waiting\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(30);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(31, \"\\n\\n\");\n      i0.ɵɵelementStart(32, \"ngb-progressbar\", 4);\n      i0.ɵɵtext(33, \"\\n  \");\n      i0.ɵɵelementStart(34, \"span\");\n      i0.ɵɵtext(35);\n      i0.ɵɵpipe(36, \"number\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(37, \"\\n\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(38, \"\\n\\n\");\n      i0.ɵɵelementStart(39, \"span\")(40, \"span\", 6);\n      i0.ɵɵtext(41, \"Blocked\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(42);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(43, \"\\n\\n\");\n      i0.ɵɵelementStart(44, \"ngb-progressbar\", 2);\n      i0.ɵɵtext(45, \"\\n  \");\n      i0.ɵɵelementStart(46, \"span\");\n      i0.ɵɵtext(47);\n      i0.ɵɵpipe(48, \"number\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(49, \"\\n\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(50, \"\\n\\n\");\n      i0.ɵɵelementStart(51, \"div\");\n      i0.ɵɵtext(52);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(53, \"\\n\\n\");\n      i0.ɵɵelementStart(54, \"button\", 7);\n      i0.ɵɵlistener(\"click\", function JvmThreadsComponent_Template_button_click_54_listener() {\n        return ctx.open();\n      });\n      i0.ɵɵtext(55, \"\\n  \");\n      i0.ɵɵelementStart(56, \"span\");\n      i0.ɵɵtext(57, \"Expand\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(58, \"\\n\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(59, \"\\n\");\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(6);\n      i0.ɵɵtextInterpolate1(\" \", ctx.threadStats.threadDumpRunnable, \"\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"value\", ctx.threadStats.threadDumpRunnable)(\"max\", ctx.threadStats.threadDumpAll)(\"striped\", true)(\"animated\", false);\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind2(12, 25, ctx.threadStats.threadDumpRunnable * 100 / ctx.threadStats.threadDumpAll, \"1.0-0\"), \"%\");\n      i0.ɵɵadvance(7);\n      i0.ɵɵtextInterpolate1(\" (\", ctx.threadStats.threadDumpTimedWaiting, \")\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"value\", ctx.threadStats.threadDumpTimedWaiting)(\"max\", ctx.threadStats.threadDumpAll)(\"striped\", true)(\"animated\", false);\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind2(24, 28, ctx.threadStats.threadDumpTimedWaiting * 100 / ctx.threadStats.threadDumpAll, \"1.0-0\"), \"%\");\n      i0.ɵɵadvance(7);\n      i0.ɵɵtextInterpolate1(\" (\", ctx.threadStats.threadDumpWaiting, \")\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"value\", ctx.threadStats.threadDumpWaiting)(\"max\", ctx.threadStats.threadDumpAll)(\"striped\", true)(\"animated\", false);\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind2(36, 31, ctx.threadStats.threadDumpWaiting * 100 / ctx.threadStats.threadDumpAll, \"1.0-0\"), \"%\");\n      i0.ɵɵadvance(7);\n      i0.ɵɵtextInterpolate1(\" (\", ctx.threadStats.threadDumpBlocked, \")\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"value\", ctx.threadStats.threadDumpBlocked)(\"max\", ctx.threadStats.threadDumpAll)(\"striped\", true)(\"animated\", false);\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind2(48, 34, ctx.threadStats.threadDumpBlocked * 100 / ctx.threadStats.threadDumpAll, \"1.0-0\"), \"%\");\n      i0.ɵɵadvance(5);\n      i0.ɵɵtextInterpolate1(\"Total: \", ctx.threadStats.threadDumpAll, \"\");\n    }\n  },\n  dependencies: [i1.NgbProgressbar, i2.TranslateDirective, i3.DecimalPipe],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"AAIA,SAASA,4BAA4B,QAAQ,0DAA0D;;;;;AAMvG,OAAM,MAAOC,mBAAmB;EAsC9BC,YAAoBC,YAAsB;IAAtB,iBAAY,GAAZA,YAAY;IArChC,gBAAW,GAAG;MACZC,aAAa,EAAE,CAAC;MAChBC,kBAAkB,EAAE,CAAC;MACrBC,sBAAsB,EAAE,CAAC;MACzBC,iBAAiB,EAAE,CAAC;MACpBC,iBAAiB,EAAE;KACpB;EA+B4C;EA7B7C,IACIC,OAAO,CAACA,OAA6B;IACvC,IAAI,CAACC,QAAQ,GAAGD,OAAO;IAEvBA,OAAO,EAAEE,OAAO,CAACC,MAAM,IAAG;MACxB,IAAIA,MAAM,CAACC,WAAW,KAAK,UAAU,EAAE;QACrC,IAAI,CAACC,WAAW,CAACT,kBAAkB,IAAI,CAAC;OACzC,MAAM,IAAIO,MAAM,CAACC,WAAW,KAAK,SAAS,EAAE;QAC3C,IAAI,CAACC,WAAW,CAACP,iBAAiB,IAAI,CAAC;OACxC,MAAM,IAAIK,MAAM,CAACC,WAAW,KAAK,eAAe,EAAE;QACjD,IAAI,CAACC,WAAW,CAACR,sBAAsB,IAAI,CAAC;OAC7C,MAAM,IAAIM,MAAM,CAACC,WAAW,KAAK,SAAS,EAAE;QAC3C,IAAI,CAACC,WAAW,CAACN,iBAAiB,IAAI,CAAC;;IAE3C,CAAC,CAAC;IAEF,IAAI,CAACM,WAAW,CAACV,aAAa,GAC5B,IAAI,CAACU,WAAW,CAACT,kBAAkB,GACnC,IAAI,CAACS,WAAW,CAACP,iBAAiB,GAClC,IAAI,CAACO,WAAW,CAACR,sBAAsB,GACvC,IAAI,CAACQ,WAAW,CAACN,iBAAiB;EACtC;EAEA,IAAIC,OAAO;IACT,OAAO,IAAI,CAACC,QAAQ;EACtB;EAMAK,IAAI;IACF,MAAMC,QAAQ,GAAG,IAAI,CAACb,YAAY,CAACY,IAAI,CAACf,4BAA4B,CAAC;IACrEgB,QAAQ,CAACC,iBAAiB,CAACR,OAAO,GAAG,IAAI,CAACA,OAAO;EACnD;;;mBA3CWR,mBAAmB;AAAA;;QAAnBA,mBAAmB;EAAAiB;EAAAC;IAAAV;EAAA;EAAAW;EAAAC;EAAAC;EAAAC;IAAA;MCVhCC,6BAA6C;MAAAA,uBAAO;MAAAA,iBAAK;MAEzDA;MAAAA,4BAAM;MAAkDA,wBAAQ;MAAAA,iBAAO;MAACA,YAAoC;MAAAA,iBAAO;MAEnHA;MAAAA,0CAMC;MACCA;MAAAA,6BAAM;MAAAA,aAA2F;;MAAAA,iBAAO;MAC1GA;MAAAA,iBAAkB;MAElBA;MAAAA,6BAAM;MAAsDA,8BAAa;MAAAA,iBAAO;MAACA,aAA0C;MAAAA,iBAAO;MAElIA;MAAAA,2CAMC;MACCA;MAAAA,6BAAM;MAAAA,aAA+F;;MAAAA,iBAAO;MAC9GA;MAAAA,iBAAkB;MAElBA;MAAAA,6BAAM;MAAiDA,wBAAO;MAAAA,iBAAO;MAACA,aAAqC;MAAAA,iBAAO;MAElHA;MAAAA,2CAMC;MACCA;MAAAA,6BAAM;MAAAA,aAA0F;;MAAAA,iBAAO;MACzGA;MAAAA,iBAAkB;MAElBA;MAAAA,6BAAM;MAAiDA,wBAAO;MAAAA,iBAAO;MAACA,aAAqC;MAAAA,iBAAO;MAElHA;MAAAA,2CAMC;MACCA;MAAAA,6BAAM;MAAAA,aAA0F;;MAAAA,iBAAO;MACzGA;MAAAA,iBAAkB;MAElBA;MAAAA,4BAAK;MAAAA,aAAsC;MAAAA,iBAAM;MAEjDA;MAAAA,kCAA2G;MAA/DA;QAAA,OAASC,UAAM;MAAA,EAAC;MAC1DD;MAAAA,6BAAM;MAAAA,uBAAM;MAAAA,iBAAO;MACrBA;MAAAA,iBAAS;MACTA;;;MArDwEA,eAAoC;MAApCA,kEAAoC;MAG1GA,eAAwC;MAAxCA,0DAAwC;MAMlCA,eAA2F;MAA3FA,yIAA2F;MAGlBA,eAA0C;MAA1CA,wEAA0C;MAGzHA,eAA4C;MAA5CA,8DAA4C;MAMtCA,eAA+F;MAA/FA,6IAA+F;MAGjCA,eAAqC;MAArCA,mEAAqC;MAGzGA,eAAuC;MAAvCA,yDAAuC;MAMjCA,eAA0F;MAA1FA,wIAA0F;MAG5BA,eAAqC;MAArCA,mEAAqC;MAGzGA,eAAuC;MAAvCA,yDAAuC;MAMjCA,eAA0F;MAA1FA,wIAA0F;MAG7FA,eAAsC;MAAtCA,mEAAsC","names":["MetricsModalThreadsComponent","JvmThreadsComponent","constructor","modalService","threadDumpAll","threadDumpRunnable","threadDumpTimedWaiting","threadDumpWaiting","threadDumpBlocked","threads","_threads","forEach","thread","threadState","threadStats","open","modalRef","componentInstance","selectors","inputs","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/admin/metrics/blocks/jvm-threads/jvm-threads.component.ts","/home/ceo/mmmm/createyourevent/src/main/webapp/app/admin/metrics/blocks/jvm-threads/jvm-threads.component.html"],"sourcesContent":["import { Component, Input } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\n\nimport { Thread } from 'app/admin/metrics/metrics.model';\nimport { MetricsModalThreadsComponent } from '../metrics-modal-threads/metrics-modal-threads.component';\n\n@Component({\n  selector: 'jhi-jvm-threads',\n  templateUrl: './jvm-threads.component.html',\n})\nexport class JvmThreadsComponent {\n  threadStats = {\n    threadDumpAll: 0,\n    threadDumpRunnable: 0,\n    threadDumpTimedWaiting: 0,\n    threadDumpWaiting: 0,\n    threadDumpBlocked: 0,\n  };\n\n  @Input()\n  set threads(threads: Thread[] | undefined) {\n    this._threads = threads;\n\n    threads?.forEach(thread => {\n      if (thread.threadState === 'RUNNABLE') {\n        this.threadStats.threadDumpRunnable += 1;\n      } else if (thread.threadState === 'WAITING') {\n        this.threadStats.threadDumpWaiting += 1;\n      } else if (thread.threadState === 'TIMED_WAITING') {\n        this.threadStats.threadDumpTimedWaiting += 1;\n      } else if (thread.threadState === 'BLOCKED') {\n        this.threadStats.threadDumpBlocked += 1;\n      }\n    });\n\n    this.threadStats.threadDumpAll =\n      this.threadStats.threadDumpRunnable +\n      this.threadStats.threadDumpWaiting +\n      this.threadStats.threadDumpTimedWaiting +\n      this.threadStats.threadDumpBlocked;\n  }\n\n  get threads(): Thread[] | undefined {\n    return this._threads;\n  }\n\n  private _threads: Thread[] | undefined;\n\n  constructor(private modalService: NgbModal) {}\n\n  open(): void {\n    const modalRef = this.modalService.open(MetricsModalThreadsComponent);\n    modalRef.componentInstance.threads = this.threads;\n  }\n}\n","<h4 jhiTranslate=\"metrics.jvm.threads.title\">Threads</h4>\n\n<span><span jhiTranslate=\"metrics.jvm.threads.runnable\">Runnable</span> {{ threadStats.threadDumpRunnable }}</span>\n\n<ngb-progressbar\n  [value]=\"threadStats.threadDumpRunnable\"\n  [max]=\"threadStats.threadDumpAll\"\n  [striped]=\"true\"\n  [animated]=\"false\"\n  type=\"success\"\n>\n  <span>{{ (threadStats.threadDumpRunnable * 100) / threadStats.threadDumpAll | number: '1.0-0' }}%</span>\n</ngb-progressbar>\n\n<span><span jhiTranslate=\"metrics.jvm.threads.timedwaiting\">Timed Waiting</span> ({{ threadStats.threadDumpTimedWaiting }})</span>\n\n<ngb-progressbar\n  [value]=\"threadStats.threadDumpTimedWaiting\"\n  [max]=\"threadStats.threadDumpAll\"\n  [striped]=\"true\"\n  [animated]=\"false\"\n  type=\"warning\"\n>\n  <span>{{ (threadStats.threadDumpTimedWaiting * 100) / threadStats.threadDumpAll | number: '1.0-0' }}%</span>\n</ngb-progressbar>\n\n<span><span jhiTranslate=\"metrics.jvm.threads.waiting\">Waiting</span> ({{ threadStats.threadDumpWaiting }})</span>\n\n<ngb-progressbar\n  [value]=\"threadStats.threadDumpWaiting\"\n  [max]=\"threadStats.threadDumpAll\"\n  [striped]=\"true\"\n  [animated]=\"false\"\n  type=\"warning\"\n>\n  <span>{{ (threadStats.threadDumpWaiting * 100) / threadStats.threadDumpAll | number: '1.0-0' }}%</span>\n</ngb-progressbar>\n\n<span><span jhiTranslate=\"metrics.jvm.threads.blocked\">Blocked</span> ({{ threadStats.threadDumpBlocked }})</span>\n\n<ngb-progressbar\n  [value]=\"threadStats.threadDumpBlocked\"\n  [max]=\"threadStats.threadDumpAll\"\n  [striped]=\"true\"\n  [animated]=\"false\"\n  type=\"success\"\n>\n  <span>{{ (threadStats.threadDumpBlocked * 100) / threadStats.threadDumpAll | number: '1.0-0' }}%</span>\n</ngb-progressbar>\n\n<div>Total: {{ threadStats.threadDumpAll }}</div>\n\n<button class=\"hand btn btn-primary btn-sm\" (click)=\"open()\" data-toggle=\"modal\" data-target=\"#threadDump\">\n  <span>Expand</span>\n</button>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}