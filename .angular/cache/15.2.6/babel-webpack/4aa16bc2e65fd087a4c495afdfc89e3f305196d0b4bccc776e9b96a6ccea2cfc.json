{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, NgZone, Inject, InjectionToken, Directive, Input, EventEmitter, ElementRef, ChangeDetectorRef, Optional, SkipSelf, Output, TemplateRef, ViewContainerRef, Self, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i2 from '@angular/cdk/scrolling';\nimport { ViewportRuler, ScrollDispatcher, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { _getEventTarget, normalizePassiveListenerOptions, _getShadowRoot } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceArray, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\nimport { takeUntil, startWith, map, take, tap, switchMap } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Shallow-extends a stylesheet object with another stylesheet-like object.\n * Note that the keys in `source` have to be dash-cased.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nfunction extendStyles(dest, source, importantProperties) {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      const value = source[key];\n      if (value) {\n        dest.setProperty(key, value, (importantProperties === null || importantProperties === void 0 ? void 0 : importantProperties.has(key)) ? 'important' : '');\n      } else {\n        dest.removeProperty(key);\n      }\n    }\n  }\n  return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nfunction toggleNativeDragInteractions(element, enable) {\n  const userSelect = enable ? '' : 'none';\n  extendStyles(element.style, {\n    'touch-action': enable ? '' : 'none',\n    '-webkit-user-drag': enable ? '' : 'none',\n    '-webkit-tap-highlight-color': enable ? '' : 'transparent',\n    'user-select': userSelect,\n    '-ms-user-select': userSelect,\n    '-webkit-user-select': userSelect,\n    '-moz-user-select': userSelect\n  });\n}\n/**\n * Toggles whether an element is visible while preserving its dimensions.\n * @param element Element whose visibility to toggle\n * @param enable Whether the element should be visible.\n * @param importantProperties Properties to be set as `!important`.\n * @docs-private\n */\nfunction toggleVisibility(element, enable, importantProperties) {\n  extendStyles(element.style, {\n    position: enable ? '' : 'fixed',\n    top: enable ? '' : '0',\n    opacity: enable ? '' : '0',\n    left: enable ? '' : '-999em'\n  }, importantProperties);\n}\n/**\n * Combines a transform string with an optional other transform\n * that exited before the base transform was applied.\n */\nfunction combineTransforms(transform, initialTransform) {\n  return initialTransform && initialTransform != 'none' ? transform + ' ' + initialTransform : transform;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value) {\n  // Some browsers will return it in seconds, whereas others will return milliseconds.\n  const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n  return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nfunction getTransformTransitionDurationInMs(element) {\n  const computedStyle = getComputedStyle(element);\n  const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n  const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n  // If there's no transition for `all` or `transform`, we shouldn't do anything.\n  if (!property) {\n    return 0;\n  }\n  // Get the index of the property that we're interested in and match\n  // it up to the same index in `transition-delay` and `transition-duration`.\n  const propertyIndex = transitionedProperties.indexOf(property);\n  const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n  const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n  return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) + parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle, name) {\n  const value = computedStyle.getPropertyValue(name);\n  return value.split(',').map(part => part.trim());\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Gets a mutable version of an element's bounding `ClientRect`. */\nfunction getMutableClientRect(element) {\n  const clientRect = element.getBoundingClientRect();\n  // We need to clone the `clientRect` here, because all the values on it are readonly\n  // and we need to be able to update them. Also we can't use a spread here, because\n  // the values on a `ClientRect` aren't own properties. See:\n  // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n  return {\n    top: clientRect.top,\n    right: clientRect.right,\n    bottom: clientRect.bottom,\n    left: clientRect.left,\n    width: clientRect.width,\n    height: clientRect.height\n  };\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect, x, y) {\n  const {\n    top,\n    bottom,\n    left,\n    right\n  } = clientRect;\n  return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param clientRect `ClientRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustClientRect(clientRect, top, left) {\n  clientRect.top += top;\n  clientRect.bottom = clientRect.top + clientRect.height;\n  clientRect.left += left;\n  clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a ClientRect.\n * @param rect ClientRect to check against.\n * @param threshold Threshold around the ClientRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\nfunction isPointerNearClientRect(rect, threshold, pointerX, pointerY) {\n  const {\n    top,\n    right,\n    bottom,\n    left,\n    width,\n    height\n  } = rect;\n  const xThreshold = width * threshold;\n  const yThreshold = height * threshold;\n  return pointerY > top - yThreshold && pointerY < bottom + yThreshold && pointerX > left - xThreshold && pointerX < right + xThreshold;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\nclass ParentPositionTracker {\n  constructor(_document, _viewportRuler) {\n    this._document = _document;\n    this._viewportRuler = _viewportRuler;\n    /** Cached positions of the scrollable parent elements. */\n    this.positions = new Map();\n  }\n  /** Clears the cached positions. */\n  clear() {\n    this.positions.clear();\n  }\n  /** Caches the positions. Should be called at the beginning of a drag sequence. */\n  cache(elements) {\n    this.clear();\n    this.positions.set(this._document, {\n      scrollPosition: this._viewportRuler.getViewportScrollPosition()\n    });\n    elements.forEach(element => {\n      this.positions.set(element, {\n        scrollPosition: {\n          top: element.scrollTop,\n          left: element.scrollLeft\n        },\n        clientRect: getMutableClientRect(element)\n      });\n    });\n  }\n  /** Handles scrolling while a drag is taking place. */\n  handleScroll(event) {\n    const target = _getEventTarget(event);\n    const cachedPosition = this.positions.get(target);\n    if (!cachedPosition) {\n      return null;\n    }\n    // Used when figuring out whether an element is inside the scroll parent. If the scrolled\n    // parent is the `document`, we use the `documentElement`, because IE doesn't support\n    // `contains` on the `document`.\n    const scrolledParentNode = target === this._document ? target.documentElement : target;\n    const scrollPosition = cachedPosition.scrollPosition;\n    let newTop;\n    let newLeft;\n    if (target === this._document) {\n      const viewportScrollPosition = this._viewportRuler.getViewportScrollPosition();\n      newTop = viewportScrollPosition.top;\n      newLeft = viewportScrollPosition.left;\n    } else {\n      newTop = target.scrollTop;\n      newLeft = target.scrollLeft;\n    }\n    const topDifference = scrollPosition.top - newTop;\n    const leftDifference = scrollPosition.left - newLeft;\n    // Go through and update the cached positions of the scroll\n    // parents that are inside the element that was scrolled.\n    this.positions.forEach((position, node) => {\n      if (position.clientRect && target !== node && scrolledParentNode.contains(node)) {\n        adjustClientRect(position.clientRect, topDifference, leftDifference);\n      }\n    });\n    scrollPosition.top = newTop;\n    scrollPosition.left = newLeft;\n    return {\n      top: topDifference,\n      left: leftDifference\n    };\n  }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node) {\n  const clone = node.cloneNode(true);\n  const descendantsWithId = clone.querySelectorAll('[id]');\n  const nodeName = node.nodeName.toLowerCase();\n  // Remove the `id` to avoid having multiple elements with the same id on the page.\n  clone.removeAttribute('id');\n  for (let i = 0; i < descendantsWithId.length; i++) {\n    descendantsWithId[i].removeAttribute('id');\n  }\n  if (nodeName === 'canvas') {\n    transferCanvasData(node, clone);\n  } else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n    transferInputData(node, clone);\n  }\n  transferData('canvas', node, clone, transferCanvasData);\n  transferData('input, textarea, select', node, clone, transferInputData);\n  return clone;\n}\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\nfunction transferData(selector, node, clone, callback) {\n  const descendantElements = node.querySelectorAll(selector);\n  if (descendantElements.length) {\n    const cloneElements = clone.querySelectorAll(selector);\n    for (let i = 0; i < descendantElements.length; i++) {\n      callback(descendantElements[i], cloneElements[i]);\n    }\n  }\n}\n// Counter for unique cloned radio button names.\nlet cloneUniqueId = 0;\n/** Transfers the data of one input element to another. */\nfunction transferInputData(source, clone) {\n  // Browsers throw an error when assigning the value of a file input programmatically.\n  if (clone.type !== 'file') {\n    clone.value = source.value;\n  }\n  // Radio button `name` attributes must be unique for radio button groups\n  // otherwise original radio buttons can lose their checked state\n  // once the clone is inserted in the DOM.\n  if (clone.type === 'radio' && clone.name) {\n    clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\n  }\n}\n/** Transfers the data of one canvas element to another. */\nfunction transferCanvasData(source, clone) {\n  const context = clone.getContext('2d');\n  if (context) {\n    // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n    // We can't do much about it so just ignore the error.\n    try {\n      context.drawImage(source, 0, 0);\n    } catch (_a) {}\n  }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({\n  passive: true\n});\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({\n  passive: false\n});\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/** Inline styles to be set as `!important` while dragging. */\nconst dragImportantProperties = new Set([\n// Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n'position']);\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\nclass DragRef {\n  constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n    this._config = _config;\n    this._document = _document;\n    this._ngZone = _ngZone;\n    this._viewportRuler = _viewportRuler;\n    this._dragDropRegistry = _dragDropRegistry;\n    /**\n     * CSS `transform` applied to the element when it isn't being dragged. We need a\n     * passive transform in order for the dragged element to retain its new position\n     * after the user has stopped dragging and because we need to know the relative\n     * position in case they start dragging again. This corresponds to `element.style.transform`.\n     */\n    this._passiveTransform = {\n      x: 0,\n      y: 0\n    };\n    /** CSS `transform` that is applied to the element while it's being dragged. */\n    this._activeTransform = {\n      x: 0,\n      y: 0\n    };\n    /**\n     * Whether the dragging sequence has been started. Doesn't\n     * necessarily mean that the element has been moved.\n     */\n    this._hasStartedDragging = false;\n    /** Emits when the item is being moved. */\n    this._moveEvents = new Subject();\n    /** Subscription to pointer movement events. */\n    this._pointerMoveSubscription = Subscription.EMPTY;\n    /** Subscription to the event that is dispatched when the user lifts their pointer. */\n    this._pointerUpSubscription = Subscription.EMPTY;\n    /** Subscription to the viewport being scrolled. */\n    this._scrollSubscription = Subscription.EMPTY;\n    /** Subscription to the viewport being resized. */\n    this._resizeSubscription = Subscription.EMPTY;\n    /** Cached reference to the boundary element. */\n    this._boundaryElement = null;\n    /** Whether the native dragging interactions have been enabled on the root element. */\n    this._nativeInteractionsEnabled = true;\n    /** Elements that can be used to drag the draggable item. */\n    this._handles = [];\n    /** Registered handles that are currently disabled. */\n    this._disabledHandles = new Set();\n    /** Layout direction of the item. */\n    this._direction = 'ltr';\n    /**\n     * Amount of milliseconds to wait after the user has put their\n     * pointer down before starting to drag the element.\n     */\n    this.dragStartDelay = 0;\n    this._disabled = false;\n    /** Emits as the drag sequence is being prepared. */\n    this.beforeStarted = new Subject();\n    /** Emits when the user starts dragging the item. */\n    this.started = new Subject();\n    /** Emits when the user has released a drag item, before any animations have started. */\n    this.released = new Subject();\n    /** Emits when the user stops dragging an item in the container. */\n    this.ended = new Subject();\n    /** Emits when the user has moved the item into a new container. */\n    this.entered = new Subject();\n    /** Emits when the user removes the item its container by dragging it into another container. */\n    this.exited = new Subject();\n    /** Emits when the user drops the item inside a container. */\n    this.dropped = new Subject();\n    /**\n     * Emits as the user is dragging the item. Use with caution,\n     * because this event will fire for every pixel that the user has dragged.\n     */\n    this.moved = this._moveEvents;\n    /** Handler for the `mousedown`/`touchstart` events. */\n    this._pointerDown = event => {\n      this.beforeStarted.next();\n      // Delegate the event based on whether it started from a handle or the element itself.\n      if (this._handles.length) {\n        const targetHandle = this._handles.find(handle => {\n          const target = _getEventTarget(event);\n          return !!target && (target === handle || handle.contains(target));\n        });\n        if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n          this._initializeDragSequence(targetHandle, event);\n        }\n      } else if (!this.disabled) {\n        this._initializeDragSequence(this._rootElement, event);\n      }\n    };\n    /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n    this._pointerMove = event => {\n      const pointerPosition = this._getPointerPositionOnPage(event);\n      if (!this._hasStartedDragging) {\n        const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n        const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n        const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n        // Only start dragging after the user has moved more than the minimum distance in either\n        // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n        // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n        // per pixel of movement (e.g. if the user moves their pointer quickly).\n        if (isOverThreshold) {\n          const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n          const container = this._dropContainer;\n          if (!isDelayElapsed) {\n            this._endDragSequence(event);\n            return;\n          }\n          // Prevent other drag sequences from starting while something in the container is still\n          // being dragged. This can happen while we're waiting for the drop animation to finish\n          // and can cause errors, because some elements might still be moving around.\n          if (!container || !container.isDragging() && !container.isReceiving()) {\n            // Prevent the default action as soon as the dragging sequence is considered as\n            // \"started\" since waiting for the next event can allow the device to begin scrolling.\n            event.preventDefault();\n            this._hasStartedDragging = true;\n            this._ngZone.run(() => this._startDragSequence(event));\n          }\n        }\n        return;\n      }\n      // We only need the preview dimensions if we have a boundary element.\n      if (this._boundaryElement) {\n        // Cache the preview element rect if we haven't cached it already or if\n        // we cached it too early before the element dimensions were computed.\n        if (!this._previewRect || !this._previewRect.width && !this._previewRect.height) {\n          this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\n        }\n      }\n      // We prevent the default action down here so that we know that dragging has started. This is\n      // important for touch devices where doing this too early can unnecessarily block scrolling,\n      // if there's a dragging delay.\n      event.preventDefault();\n      const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n      this._hasMoved = true;\n      this._lastKnownPointerPosition = pointerPosition;\n      this._updatePointerDirectionDelta(constrainedPointerPosition);\n      if (this._dropContainer) {\n        this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n      } else {\n        const activeTransform = this._activeTransform;\n        activeTransform.x = constrainedPointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n        activeTransform.y = constrainedPointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n        this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n        // Apply transform as attribute if dragging and svg element to work for IE\n        if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n          const appliedTransform = `translate(${activeTransform.x} ${activeTransform.y})`;\n          this._rootElement.setAttribute('transform', appliedTransform);\n        }\n      }\n      // Since this event gets fired for every pixel while dragging, we only\n      // want to fire it if the consumer opted into it. Also we have to\n      // re-enter the zone because we run all of the events on the outside.\n      if (this._moveEvents.observers.length) {\n        this._ngZone.run(() => {\n          this._moveEvents.next({\n            source: this,\n            pointerPosition: constrainedPointerPosition,\n            event,\n            distance: this._getDragDistance(constrainedPointerPosition),\n            delta: this._pointerDirectionDelta\n          });\n        });\n      }\n    };\n    /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n    this._pointerUp = event => {\n      this._endDragSequence(event);\n    };\n    this.withRootElement(element).withParent(_config.parentDragRef || null);\n    this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n    _dragDropRegistry.registerDragItem(this);\n  }\n  /** Whether starting to drag this element is disabled. */\n  get disabled() {\n    return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n  }\n  set disabled(value) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._toggleNativeDragInteractions();\n      this._handles.forEach(handle => toggleNativeDragInteractions(handle, newValue));\n    }\n  }\n  /**\n   * Returns the element that is being used as a placeholder\n   * while the current element is being dragged.\n   */\n  getPlaceholderElement() {\n    return this._placeholder;\n  }\n  /** Returns the root draggable element. */\n  getRootElement() {\n    return this._rootElement;\n  }\n  /**\n   * Gets the currently-visible element that represents the drag item.\n   * While dragging this is the placeholder, otherwise it's the root element.\n   */\n  getVisibleElement() {\n    return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n  }\n  /** Registers the handles that can be used to drag the element. */\n  withHandles(handles) {\n    this._handles = handles.map(handle => coerceElement(handle));\n    this._handles.forEach(handle => toggleNativeDragInteractions(handle, this.disabled));\n    this._toggleNativeDragInteractions();\n    // Delete any lingering disabled handles that may have been destroyed. Note that we re-create\n    // the set, rather than iterate over it and filter out the destroyed handles, because while\n    // the ES spec allows for sets to be modified while they're being iterated over, some polyfills\n    // use an array internally which may throw an error.\n    const disabledHandles = new Set();\n    this._disabledHandles.forEach(handle => {\n      if (this._handles.indexOf(handle) > -1) {\n        disabledHandles.add(handle);\n      }\n    });\n    this._disabledHandles = disabledHandles;\n    return this;\n  }\n  /**\n   * Registers the template that should be used for the drag preview.\n   * @param template Template that from which to stamp out the preview.\n   */\n  withPreviewTemplate(template) {\n    this._previewTemplate = template;\n    return this;\n  }\n  /**\n   * Registers the template that should be used for the drag placeholder.\n   * @param template Template that from which to stamp out the placeholder.\n   */\n  withPlaceholderTemplate(template) {\n    this._placeholderTemplate = template;\n    return this;\n  }\n  /**\n   * Sets an alternate drag root element. The root element is the element that will be moved as\n   * the user is dragging. Passing an alternate root element is useful when trying to enable\n   * dragging on an element that you might not have access to.\n   */\n  withRootElement(rootElement) {\n    const element = coerceElement(rootElement);\n    if (element !== this._rootElement) {\n      if (this._rootElement) {\n        this._removeRootElementListeners(this._rootElement);\n      }\n      this._ngZone.runOutsideAngular(() => {\n        element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n      });\n      this._initialTransform = undefined;\n      this._rootElement = element;\n    }\n    if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n      this._ownerSVGElement = this._rootElement.ownerSVGElement;\n    }\n    return this;\n  }\n  /**\n   * Element to which the draggable's position will be constrained.\n   */\n  withBoundaryElement(boundaryElement) {\n    this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n    this._resizeSubscription.unsubscribe();\n    if (boundaryElement) {\n      this._resizeSubscription = this._viewportRuler.change(10).subscribe(() => this._containInsideBoundaryOnResize());\n    }\n    return this;\n  }\n  /** Sets the parent ref that the ref is nested in.  */\n  withParent(parent) {\n    this._parentDragRef = parent;\n    return this;\n  }\n  /** Removes the dragging functionality from the DOM element. */\n  dispose() {\n    this._removeRootElementListeners(this._rootElement);\n    // Do this check before removing from the registry since it'll\n    // stop being considered as dragged once it is removed.\n    if (this.isDragging()) {\n      // Since we move out the element to the end of the body while it's being\n      // dragged, we have to make sure that it's removed if it gets destroyed.\n      removeNode(this._rootElement);\n    }\n    removeNode(this._anchor);\n    this._destroyPreview();\n    this._destroyPlaceholder();\n    this._dragDropRegistry.removeDragItem(this);\n    this._removeSubscriptions();\n    this.beforeStarted.complete();\n    this.started.complete();\n    this.released.complete();\n    this.ended.complete();\n    this.entered.complete();\n    this.exited.complete();\n    this.dropped.complete();\n    this._moveEvents.complete();\n    this._handles = [];\n    this._disabledHandles.clear();\n    this._dropContainer = undefined;\n    this._resizeSubscription.unsubscribe();\n    this._parentPositions.clear();\n    this._boundaryElement = this._rootElement = this._ownerSVGElement = this._placeholderTemplate = this._previewTemplate = this._anchor = this._parentDragRef = null;\n  }\n  /** Checks whether the element is currently being dragged. */\n  isDragging() {\n    return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n  }\n  /** Resets a standalone drag item to its initial position. */\n  reset() {\n    this._rootElement.style.transform = this._initialTransform || '';\n    this._activeTransform = {\n      x: 0,\n      y: 0\n    };\n    this._passiveTransform = {\n      x: 0,\n      y: 0\n    };\n  }\n  /**\n   * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n   * @param handle Handle element that should be disabled.\n   */\n  disableHandle(handle) {\n    if (!this._disabledHandles.has(handle) && this._handles.indexOf(handle) > -1) {\n      this._disabledHandles.add(handle);\n      toggleNativeDragInteractions(handle, true);\n    }\n  }\n  /**\n   * Enables a handle, if it has been disabled.\n   * @param handle Handle element to be enabled.\n   */\n  enableHandle(handle) {\n    if (this._disabledHandles.has(handle)) {\n      this._disabledHandles.delete(handle);\n      toggleNativeDragInteractions(handle, this.disabled);\n    }\n  }\n  /** Sets the layout direction of the draggable item. */\n  withDirection(direction) {\n    this._direction = direction;\n    return this;\n  }\n  /** Sets the container that the item is part of. */\n  _withDropContainer(container) {\n    this._dropContainer = container;\n  }\n  /**\n   * Gets the current position in pixels the draggable outside of a drop container.\n   */\n  getFreeDragPosition() {\n    const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n    return {\n      x: position.x,\n      y: position.y\n    };\n  }\n  /**\n   * Sets the current position in pixels the draggable outside of a drop container.\n   * @param value New position to be set.\n   */\n  setFreeDragPosition(value) {\n    this._activeTransform = {\n      x: 0,\n      y: 0\n    };\n    this._passiveTransform.x = value.x;\n    this._passiveTransform.y = value.y;\n    if (!this._dropContainer) {\n      this._applyRootElementTransform(value.x, value.y);\n    }\n    return this;\n  }\n  /**\n   * Sets the container into which to insert the preview element.\n   * @param value Container into which to insert the preview.\n   */\n  withPreviewContainer(value) {\n    this._previewContainer = value;\n    return this;\n  }\n  /** Updates the item's sort order based on the last-known pointer position. */\n  _sortFromLastPointerPosition() {\n    const position = this._lastKnownPointerPosition;\n    if (position && this._dropContainer) {\n      this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n    }\n  }\n  /** Unsubscribes from the global subscriptions. */\n  _removeSubscriptions() {\n    this._pointerMoveSubscription.unsubscribe();\n    this._pointerUpSubscription.unsubscribe();\n    this._scrollSubscription.unsubscribe();\n  }\n  /** Destroys the preview element and its ViewRef. */\n  _destroyPreview() {\n    if (this._preview) {\n      removeNode(this._preview);\n    }\n    if (this._previewRef) {\n      this._previewRef.destroy();\n    }\n    this._preview = this._previewRef = null;\n  }\n  /** Destroys the placeholder element and its ViewRef. */\n  _destroyPlaceholder() {\n    if (this._placeholder) {\n      removeNode(this._placeholder);\n    }\n    if (this._placeholderRef) {\n      this._placeholderRef.destroy();\n    }\n    this._placeholder = this._placeholderRef = null;\n  }\n  /**\n   * Clears subscriptions and stops the dragging sequence.\n   * @param event Browser event object that ended the sequence.\n   */\n  _endDragSequence(event) {\n    // Note that here we use `isDragging` from the service, rather than from `this`.\n    // The difference is that the one from the service reflects whether a dragging sequence\n    // has been initiated, whereas the one on `this` includes whether the user has passed\n    // the minimum dragging threshold.\n    if (!this._dragDropRegistry.isDragging(this)) {\n      return;\n    }\n    this._removeSubscriptions();\n    this._dragDropRegistry.stopDragging(this);\n    this._toggleNativeDragInteractions();\n    if (this._handles) {\n      this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n    }\n    if (!this._hasStartedDragging) {\n      return;\n    }\n    this.released.next({\n      source: this\n    });\n    if (this._dropContainer) {\n      // Stop scrolling immediately, instead of waiting for the animation to finish.\n      this._dropContainer._stopScrolling();\n      this._animatePreviewToPlaceholder().then(() => {\n        this._cleanupDragArtifacts(event);\n        this._cleanupCachedDimensions();\n        this._dragDropRegistry.stopDragging(this);\n      });\n    } else {\n      // Convert the active transform into a passive one. This means that next time\n      // the user starts dragging the item, its position will be calculated relatively\n      // to the new passive transform.\n      this._passiveTransform.x = this._activeTransform.x;\n      const pointerPosition = this._getPointerPositionOnPage(event);\n      this._passiveTransform.y = this._activeTransform.y;\n      this._ngZone.run(() => {\n        this.ended.next({\n          source: this,\n          distance: this._getDragDistance(pointerPosition),\n          dropPoint: pointerPosition\n        });\n      });\n      this._cleanupCachedDimensions();\n      this._dragDropRegistry.stopDragging(this);\n    }\n  }\n  /** Starts the dragging sequence. */\n  _startDragSequence(event) {\n    if (isTouchEvent(event)) {\n      this._lastTouchEventTime = Date.now();\n    }\n    this._toggleNativeDragInteractions();\n    const dropContainer = this._dropContainer;\n    if (dropContainer) {\n      const element = this._rootElement;\n      const parent = element.parentNode;\n      const placeholder = this._placeholder = this._createPlaceholderElement();\n      const anchor = this._anchor = this._anchor || this._document.createComment('');\n      // Needs to happen before the root element is moved.\n      const shadowRoot = this._getShadowRoot();\n      // Insert an anchor node so that we can restore the element's position in the DOM.\n      parent.insertBefore(anchor, element);\n      // There's no risk of transforms stacking when inside a drop container so\n      // we can keep the initial transform up to date any time dragging starts.\n      this._initialTransform = element.style.transform || '';\n      // Create the preview after the initial transform has\n      // been cached, because it can be affected by the transform.\n      this._preview = this._createPreviewElement();\n      // We move the element out at the end of the body and we make it hidden, because keeping it in\n      // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n      // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n      toggleVisibility(element, false, dragImportantProperties);\n      this._document.body.appendChild(parent.replaceChild(placeholder, element));\n      this._getPreviewInsertionPoint(parent, shadowRoot).appendChild(this._preview);\n      this.started.next({\n        source: this\n      }); // Emit before notifying the container.\n      dropContainer.start();\n      this._initialContainer = dropContainer;\n      this._initialIndex = dropContainer.getItemIndex(this);\n    } else {\n      this.started.next({\n        source: this\n      });\n      this._initialContainer = this._initialIndex = undefined;\n    }\n    // Important to run after we've called `start` on the parent container\n    // so that it has had time to resolve its scrollable parents.\n    this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n  }\n  /**\n   * Sets up the different variables and subscriptions\n   * that will be necessary for the dragging sequence.\n   * @param referenceElement Element that started the drag sequence.\n   * @param event Browser event object that started the sequence.\n   */\n  _initializeDragSequence(referenceElement, event) {\n    // Stop propagation if the item is inside another\n    // draggable so we don't start multiple drag sequences.\n    if (this._parentDragRef) {\n      event.stopPropagation();\n    }\n    const isDragging = this.isDragging();\n    const isTouchSequence = isTouchEvent(event);\n    const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n    const rootElement = this._rootElement;\n    const target = _getEventTarget(event);\n    const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime && this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n    const isFakeEvent = isTouchSequence ? isFakeTouchstartFromScreenReader(event) : isFakeMousedownFromScreenReader(event);\n    // If the event started from an element with the native HTML drag&drop, it'll interfere\n    // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n    // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n    // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n    // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n    // events from firing on touch devices.\n    if (target && target.draggable && event.type === 'mousedown') {\n      event.preventDefault();\n    }\n    // Abort if the user is already dragging or is using a mouse button other than the primary one.\n    if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent || isFakeEvent) {\n      return;\n    }\n    // If we've got handles, we need to disable the tap highlight on the entire root element,\n    // otherwise iOS will still add it, even though all the drag interactions on the handle\n    // are disabled.\n    if (this._handles.length) {\n      this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor || '';\n      rootElement.style.webkitTapHighlightColor = 'transparent';\n    }\n    this._hasStartedDragging = this._hasMoved = false;\n    // Avoid multiple subscriptions and memory leaks when multi touch\n    // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n    this._removeSubscriptions();\n    this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n    this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n    this._scrollSubscription = this._dragDropRegistry.scrolled(this._getShadowRoot()).subscribe(scrollEvent => this._updateOnScroll(scrollEvent));\n    if (this._boundaryElement) {\n      this._boundaryRect = getMutableClientRect(this._boundaryElement);\n    }\n    // If we have a custom preview we can't know ahead of time how large it'll be so we position\n    // it next to the cursor. The exception is when the consumer has opted into making the preview\n    // the same size as the root element, in which case we do know the size.\n    const previewTemplate = this._previewTemplate;\n    this._pickupPositionInElement = previewTemplate && previewTemplate.template && !previewTemplate.matchSize ? {\n      x: 0,\n      y: 0\n    } : this._getPointerPositionInElement(referenceElement, event);\n    const pointerPosition = this._pickupPositionOnPage = this._lastKnownPointerPosition = this._getPointerPositionOnPage(event);\n    this._pointerDirectionDelta = {\n      x: 0,\n      y: 0\n    };\n    this._pointerPositionAtLastDirectionChange = {\n      x: pointerPosition.x,\n      y: pointerPosition.y\n    };\n    this._dragStartTime = Date.now();\n    this._dragDropRegistry.startDragging(this, event);\n  }\n  /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n  _cleanupDragArtifacts(event) {\n    // Restore the element's visibility and insert it at its old position in the DOM.\n    // It's important that we maintain the position, because moving the element around in the DOM\n    // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n    // while moving the existing elements in all other cases.\n    toggleVisibility(this._rootElement, true, dragImportantProperties);\n    this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n    this._destroyPreview();\n    this._destroyPlaceholder();\n    this._boundaryRect = this._previewRect = this._initialTransform = undefined;\n    // Re-enter the NgZone since we bound `document` events on the outside.\n    this._ngZone.run(() => {\n      const container = this._dropContainer;\n      const currentIndex = container.getItemIndex(this);\n      const pointerPosition = this._getPointerPositionOnPage(event);\n      const distance = this._getDragDistance(pointerPosition);\n      const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n      this.ended.next({\n        source: this,\n        distance,\n        dropPoint: pointerPosition\n      });\n      this.dropped.next({\n        item: this,\n        currentIndex,\n        previousIndex: this._initialIndex,\n        container: container,\n        previousContainer: this._initialContainer,\n        isPointerOverContainer,\n        distance,\n        dropPoint: pointerPosition\n      });\n      container.drop(this, currentIndex, this._initialIndex, this._initialContainer, isPointerOverContainer, distance, pointerPosition);\n      this._dropContainer = this._initialContainer;\n    });\n  }\n  /**\n   * Updates the item's position in its drop container, or moves it\n   * into a new one, depending on its current drag position.\n   */\n  _updateActiveDropContainer({\n    x,\n    y\n  }, {\n    x: rawX,\n    y: rawY\n  }) {\n    // Drop container that draggable has been moved into.\n    let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n    // If we couldn't find a new container to move the item into, and the item has left its\n    // initial container, check whether the it's over the initial container. This handles the\n    // case where two containers are connected one way and the user tries to undo dragging an\n    // item into a new container.\n    if (!newContainer && this._dropContainer !== this._initialContainer && this._initialContainer._isOverContainer(x, y)) {\n      newContainer = this._initialContainer;\n    }\n    if (newContainer && newContainer !== this._dropContainer) {\n      this._ngZone.run(() => {\n        // Notify the old container that the item has left.\n        this.exited.next({\n          item: this,\n          container: this._dropContainer\n        });\n        this._dropContainer.exit(this);\n        // Notify the new container that the item has entered.\n        this._dropContainer = newContainer;\n        this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\n        // If we're re-entering the initial container and sorting is disabled,\n        // put item the into its starting index to begin with.\n        newContainer.sortingDisabled ? this._initialIndex : undefined);\n        this.entered.next({\n          item: this,\n          container: newContainer,\n          currentIndex: newContainer.getItemIndex(this)\n        });\n      });\n    }\n    // Dragging may have been interrupted as a result of the events above.\n    if (this.isDragging()) {\n      this._dropContainer._startScrollingIfNecessary(rawX, rawY);\n      this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n      this._applyPreviewTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n    }\n  }\n  /**\n   * Creates the element that will be rendered next to the user's pointer\n   * and will be used as a preview of the element that is being dragged.\n   */\n  _createPreviewElement() {\n    const previewConfig = this._previewTemplate;\n    const previewClass = this.previewClass;\n    const previewTemplate = previewConfig ? previewConfig.template : null;\n    let preview;\n    if (previewTemplate && previewConfig) {\n      // Measure the element before we've inserted the preview\n      // since the insertion could throw off the measurement.\n      const rootRect = previewConfig.matchSize ? this._rootElement.getBoundingClientRect() : null;\n      const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n      viewRef.detectChanges();\n      preview = getRootNode(viewRef, this._document);\n      this._previewRef = viewRef;\n      if (previewConfig.matchSize) {\n        matchElementSize(preview, rootRect);\n      } else {\n        preview.style.transform = getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n      }\n    } else {\n      const element = this._rootElement;\n      preview = deepCloneNode(element);\n      matchElementSize(preview, element.getBoundingClientRect());\n      if (this._initialTransform) {\n        preview.style.transform = this._initialTransform;\n      }\n    }\n    extendStyles(preview.style, {\n      // It's important that we disable the pointer events on the preview, because\n      // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n      'pointer-events': 'none',\n      // We have to reset the margin, because it can throw off positioning relative to the viewport.\n      'margin': '0',\n      'position': 'fixed',\n      'top': '0',\n      'left': '0',\n      'z-index': `${this._config.zIndex || 1000}`\n    }, dragImportantProperties);\n    toggleNativeDragInteractions(preview, false);\n    preview.classList.add('cdk-drag-preview');\n    preview.setAttribute('dir', this._direction);\n    if (previewClass) {\n      if (Array.isArray(previewClass)) {\n        previewClass.forEach(className => preview.classList.add(className));\n      } else {\n        preview.classList.add(previewClass);\n      }\n    }\n    return preview;\n  }\n  /**\n   * Animates the preview element from its current position to the location of the drop placeholder.\n   * @returns Promise that resolves when the animation completes.\n   */\n  _animatePreviewToPlaceholder() {\n    // If the user hasn't moved yet, the transitionend event won't fire.\n    if (!this._hasMoved) {\n      return Promise.resolve();\n    }\n    const placeholderRect = this._placeholder.getBoundingClientRect();\n    // Apply the class that adds a transition to the preview.\n    this._preview.classList.add('cdk-drag-animating');\n    // Move the preview to the placeholder position.\n    this._applyPreviewTransform(placeholderRect.left, placeholderRect.top);\n    // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n    // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n    // apply its style, we take advantage of the available info to figure out whether we need to\n    // bind the event in the first place.\n    const duration = getTransformTransitionDurationInMs(this._preview);\n    if (duration === 0) {\n      return Promise.resolve();\n    }\n    return this._ngZone.runOutsideAngular(() => {\n      return new Promise(resolve => {\n        const handler = event => {\n          var _a;\n          if (!event || _getEventTarget(event) === this._preview && event.propertyName === 'transform') {\n            (_a = this._preview) === null || _a === void 0 ? void 0 : _a.removeEventListener('transitionend', handler);\n            resolve();\n            clearTimeout(timeout);\n          }\n        };\n        // If a transition is short enough, the browser might not fire the `transitionend` event.\n        // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n        // fire if the transition hasn't completed when it was supposed to.\n        const timeout = setTimeout(handler, duration * 1.5);\n        this._preview.addEventListener('transitionend', handler);\n      });\n    });\n  }\n  /** Creates an element that will be shown instead of the current element while dragging. */\n  _createPlaceholderElement() {\n    const placeholderConfig = this._placeholderTemplate;\n    const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n    let placeholder;\n    if (placeholderTemplate) {\n      this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n      this._placeholderRef.detectChanges();\n      placeholder = getRootNode(this._placeholderRef, this._document);\n    } else {\n      placeholder = deepCloneNode(this._rootElement);\n    }\n    placeholder.classList.add('cdk-drag-placeholder');\n    return placeholder;\n  }\n  /**\n   * Figures out the coordinates at which an element was picked up.\n   * @param referenceElement Element that initiated the dragging.\n   * @param event Event that initiated the dragging.\n   */\n  _getPointerPositionInElement(referenceElement, event) {\n    const elementRect = this._rootElement.getBoundingClientRect();\n    const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n    const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n    const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n    const scrollPosition = this._getViewportScrollPosition();\n    const x = point.pageX - referenceRect.left - scrollPosition.left;\n    const y = point.pageY - referenceRect.top - scrollPosition.top;\n    return {\n      x: referenceRect.left - elementRect.left + x,\n      y: referenceRect.top - elementRect.top + y\n    };\n  }\n  /** Determines the point of the page that was touched by the user. */\n  _getPointerPositionOnPage(event) {\n    const scrollPosition = this._getViewportScrollPosition();\n    const point = isTouchEvent(event) ?\n    // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n    // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n    // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n    // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n    // throwing an error. The value returned here will be incorrect, but since this only\n    // breaks inside a developer tool and the value is only used for secondary information,\n    // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n    event.touches[0] || event.changedTouches[0] || {\n      pageX: 0,\n      pageY: 0\n    } : event;\n    const x = point.pageX - scrollPosition.left;\n    const y = point.pageY - scrollPosition.top;\n    // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n    // coordinate system\n    if (this._ownerSVGElement) {\n      const svgMatrix = this._ownerSVGElement.getScreenCTM();\n      if (svgMatrix) {\n        const svgPoint = this._ownerSVGElement.createSVGPoint();\n        svgPoint.x = x;\n        svgPoint.y = y;\n        return svgPoint.matrixTransform(svgMatrix.inverse());\n      }\n    }\n    return {\n      x,\n      y\n    };\n  }\n  /** Gets the pointer position on the page, accounting for any position constraints. */\n  _getConstrainedPointerPosition(point) {\n    const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n    let {\n      x,\n      y\n    } = this.constrainPosition ? this.constrainPosition(point, this) : point;\n    if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n      y = this._pickupPositionOnPage.y;\n    } else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n      x = this._pickupPositionOnPage.x;\n    }\n    if (this._boundaryRect) {\n      const {\n        x: pickupX,\n        y: pickupY\n      } = this._pickupPositionInElement;\n      const boundaryRect = this._boundaryRect;\n      const previewRect = this._previewRect;\n      const minY = boundaryRect.top + pickupY;\n      const maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n      const minX = boundaryRect.left + pickupX;\n      const maxX = boundaryRect.right - (previewRect.width - pickupX);\n      x = clamp$1(x, minX, maxX);\n      y = clamp$1(y, minY, maxY);\n    }\n    return {\n      x,\n      y\n    };\n  }\n  /** Updates the current drag delta, based on the user's current pointer position on the page. */\n  _updatePointerDirectionDelta(pointerPositionOnPage) {\n    const {\n      x,\n      y\n    } = pointerPositionOnPage;\n    const delta = this._pointerDirectionDelta;\n    const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n    // Amount of pixels the user has dragged since the last time the direction changed.\n    const changeX = Math.abs(x - positionSinceLastChange.x);\n    const changeY = Math.abs(y - positionSinceLastChange.y);\n    // Because we handle pointer events on a per-pixel basis, we don't want the delta\n    // to change for every pixel, otherwise anything that depends on it can look erratic.\n    // To make the delta more consistent, we track how much the user has moved since the last\n    // delta change and we only update it after it has reached a certain threshold.\n    if (changeX > this._config.pointerDirectionChangeThreshold) {\n      delta.x = x > positionSinceLastChange.x ? 1 : -1;\n      positionSinceLastChange.x = x;\n    }\n    if (changeY > this._config.pointerDirectionChangeThreshold) {\n      delta.y = y > positionSinceLastChange.y ? 1 : -1;\n      positionSinceLastChange.y = y;\n    }\n    return delta;\n  }\n  /** Toggles the native drag interactions, based on how many handles are registered. */\n  _toggleNativeDragInteractions() {\n    if (!this._rootElement || !this._handles) {\n      return;\n    }\n    const shouldEnable = this._handles.length > 0 || !this.isDragging();\n    if (shouldEnable !== this._nativeInteractionsEnabled) {\n      this._nativeInteractionsEnabled = shouldEnable;\n      toggleNativeDragInteractions(this._rootElement, shouldEnable);\n    }\n  }\n  /** Removes the manually-added event listeners from the root element. */\n  _removeRootElementListeners(element) {\n    element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n    element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n  }\n  /**\n   * Applies a `transform` to the root element, taking into account any existing transforms on it.\n   * @param x New transform value along the X axis.\n   * @param y New transform value along the Y axis.\n   */\n  _applyRootElementTransform(x, y) {\n    const transform = getTransform(x, y);\n    // Cache the previous transform amount only after the first drag sequence, because\n    // we don't want our own transforms to stack on top of each other.\n    // Should be excluded none because none + translate3d(x, y, x) is invalid css\n    if (this._initialTransform == null) {\n      this._initialTransform = this._rootElement.style.transform && this._rootElement.style.transform != 'none' ? this._rootElement.style.transform : '';\n    }\n    // Preserve the previous `transform` value, if there was one. Note that we apply our own\n    // transform before the user's, because things like rotation can affect which direction\n    // the element will be translated towards.\n    this._rootElement.style.transform = combineTransforms(transform, this._initialTransform);\n  }\n  /**\n   * Applies a `transform` to the preview, taking into account any existing transforms on it.\n   * @param x New transform value along the X axis.\n   * @param y New transform value along the Y axis.\n   */\n  _applyPreviewTransform(x, y) {\n    var _a;\n    // Only apply the initial transform if the preview is a clone of the original element, otherwise\n    // it could be completely different and the transform might not make sense anymore.\n    const initialTransform = ((_a = this._previewTemplate) === null || _a === void 0 ? void 0 : _a.template) ? undefined : this._initialTransform;\n    const transform = getTransform(x, y);\n    this._preview.style.transform = combineTransforms(transform, initialTransform);\n  }\n  /**\n   * Gets the distance that the user has dragged during the current drag sequence.\n   * @param currentPosition Current position of the user's pointer.\n   */\n  _getDragDistance(currentPosition) {\n    const pickupPosition = this._pickupPositionOnPage;\n    if (pickupPosition) {\n      return {\n        x: currentPosition.x - pickupPosition.x,\n        y: currentPosition.y - pickupPosition.y\n      };\n    }\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n  /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n  _cleanupCachedDimensions() {\n    this._boundaryRect = this._previewRect = undefined;\n    this._parentPositions.clear();\n  }\n  /**\n   * Checks whether the element is still inside its boundary after the viewport has been resized.\n   * If not, the position is adjusted so that the element fits again.\n   */\n  _containInsideBoundaryOnResize() {\n    let {\n      x,\n      y\n    } = this._passiveTransform;\n    if (x === 0 && y === 0 || this.isDragging() || !this._boundaryElement) {\n      return;\n    }\n    const boundaryRect = this._boundaryElement.getBoundingClientRect();\n    const elementRect = this._rootElement.getBoundingClientRect();\n    // It's possible that the element got hidden away after dragging (e.g. by switching to a\n    // different tab). Don't do anything in this case so we don't clear the user's position.\n    if (boundaryRect.width === 0 && boundaryRect.height === 0 || elementRect.width === 0 && elementRect.height === 0) {\n      return;\n    }\n    const leftOverflow = boundaryRect.left - elementRect.left;\n    const rightOverflow = elementRect.right - boundaryRect.right;\n    const topOverflow = boundaryRect.top - elementRect.top;\n    const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n    // If the element has become wider than the boundary, we can't\n    // do much to make it fit so we just anchor it to the left.\n    if (boundaryRect.width > elementRect.width) {\n      if (leftOverflow > 0) {\n        x += leftOverflow;\n      }\n      if (rightOverflow > 0) {\n        x -= rightOverflow;\n      }\n    } else {\n      x = 0;\n    }\n    // If the element has become taller than the boundary, we can't\n    // do much to make it fit so we just anchor it to the top.\n    if (boundaryRect.height > elementRect.height) {\n      if (topOverflow > 0) {\n        y += topOverflow;\n      }\n      if (bottomOverflow > 0) {\n        y -= bottomOverflow;\n      }\n    } else {\n      y = 0;\n    }\n    if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n      this.setFreeDragPosition({\n        y,\n        x\n      });\n    }\n  }\n  /** Gets the drag start delay, based on the event type. */\n  _getDragStartDelay(event) {\n    const value = this.dragStartDelay;\n    if (typeof value === 'number') {\n      return value;\n    } else if (isTouchEvent(event)) {\n      return value.touch;\n    }\n    return value ? value.mouse : 0;\n  }\n  /** Updates the internal state of the draggable element when scrolling has occurred. */\n  _updateOnScroll(event) {\n    const scrollDifference = this._parentPositions.handleScroll(event);\n    if (scrollDifference) {\n      const target = _getEventTarget(event);\n      // ClientRect dimensions are based on the scroll position of the page and its parent node so\n      // we have to update the cached boundary ClientRect if the user has scrolled. Check for\n      // the `document` specifically since IE doesn't support `contains` on it.\n      if (this._boundaryRect && (target === this._document || target !== this._boundaryElement && target.contains(this._boundaryElement))) {\n        adjustClientRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n      }\n      this._pickupPositionOnPage.x += scrollDifference.left;\n      this._pickupPositionOnPage.y += scrollDifference.top;\n      // If we're in free drag mode, we have to update the active transform, because\n      // it isn't relative to the viewport like the preview inside a drop list.\n      if (!this._dropContainer) {\n        this._activeTransform.x -= scrollDifference.left;\n        this._activeTransform.y -= scrollDifference.top;\n        this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n      }\n    }\n  }\n  /** Gets the scroll position of the viewport. */\n  _getViewportScrollPosition() {\n    const cachedPosition = this._parentPositions.positions.get(this._document);\n    return cachedPosition ? cachedPosition.scrollPosition : this._viewportRuler.getViewportScrollPosition();\n  }\n  /**\n   * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n   * than saving it in property directly on init, because we want to resolve it as late as possible\n   * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n   * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n   */\n  _getShadowRoot() {\n    if (this._cachedShadowRoot === undefined) {\n      this._cachedShadowRoot = _getShadowRoot(this._rootElement);\n    }\n    return this._cachedShadowRoot;\n  }\n  /** Gets the element into which the drag preview should be inserted. */\n  _getPreviewInsertionPoint(initialParent, shadowRoot) {\n    const previewContainer = this._previewContainer || 'global';\n    if (previewContainer === 'parent') {\n      return initialParent;\n    }\n    if (previewContainer === 'global') {\n      const documentRef = this._document;\n      // We can't use the body if the user is in fullscreen mode,\n      // because the preview will render under the fullscreen element.\n      // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n      return shadowRoot || documentRef.fullscreenElement || documentRef.webkitFullscreenElement || documentRef.mozFullScreenElement || documentRef.msFullscreenElement || documentRef.body;\n    }\n    return coerceElement(previewContainer);\n  }\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x, y) {\n  // Round the transforms since some browsers will\n  // blur the elements for sub-pixel transforms.\n  return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp$1(value, min, max) {\n  return Math.max(min, Math.min(max, value));\n}\n/**\n * Helper to remove a node from the DOM and to do all the necessary null checks.\n * @param node Node to be removed.\n */\nfunction removeNode(node) {\n  if (node && node.parentNode) {\n    node.parentNode.removeChild(node);\n  }\n}\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event) {\n  // This function is called for every pixel that the user has dragged so we need it to be\n  // as fast as possible. Since we only bind mouse events and touch events, we can assume\n  // that if the event's name starts with `t`, it's a touch event.\n  return event.type[0] === 't';\n}\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\nfunction getRootNode(viewRef, _document) {\n  const rootNodes = viewRef.rootNodes;\n  if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n    return rootNodes[0];\n  }\n  const wrapper = _document.createElement('div');\n  rootNodes.forEach(node => wrapper.appendChild(node));\n  return wrapper;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\nfunction matchElementSize(target, sourceRect) {\n  target.style.width = `${sourceRect.width}px`;\n  target.style.height = `${sourceRect.height}px`;\n  target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n  const from = clamp(fromIndex, array.length - 1);\n  const to = clamp(toIndex, array.length - 1);\n  if (from === to) {\n    return;\n  }\n  const target = array[from];\n  const delta = to < from ? -1 : 1;\n  for (let i = from; i !== to; i += delta) {\n    array[i] = array[i + delta];\n  }\n  array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n  const from = clamp(currentIndex, currentArray.length - 1);\n  const to = clamp(targetIndex, targetArray.length);\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n  }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n  const to = clamp(targetIndex, targetArray.length);\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray[currentIndex]);\n  }\n}\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value, max) {\n  return Math.max(0, Math.min(max, value));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\nclass DropListRef {\n  constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n    this._dragDropRegistry = _dragDropRegistry;\n    this._ngZone = _ngZone;\n    this._viewportRuler = _viewportRuler;\n    /** Whether starting a dragging sequence from this container is disabled. */\n    this.disabled = false;\n    /** Whether sorting items within the list is disabled. */\n    this.sortingDisabled = false;\n    /**\n     * Whether auto-scrolling the view when the user\n     * moves their pointer close to the edges is disabled.\n     */\n    this.autoScrollDisabled = false;\n    /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n    this.autoScrollStep = 2;\n    /**\n     * Function that is used to determine whether an item\n     * is allowed to be moved into a drop container.\n     */\n    this.enterPredicate = () => true;\n    /** Functions that is used to determine whether an item can be sorted into a particular index. */\n    this.sortPredicate = () => true;\n    /** Emits right before dragging has started. */\n    this.beforeStarted = new Subject();\n    /**\n     * Emits when the user has moved a new drag item into this container.\n     */\n    this.entered = new Subject();\n    /**\n     * Emits when the user removes an item from the container\n     * by dragging it into another container.\n     */\n    this.exited = new Subject();\n    /** Emits when the user drops an item inside the container. */\n    this.dropped = new Subject();\n    /** Emits as the user is swapping items while actively dragging. */\n    this.sorted = new Subject();\n    /** Whether an item in the list is being dragged. */\n    this._isDragging = false;\n    /** Cache of the dimensions of all the items inside the container. */\n    this._itemPositions = [];\n    /**\n     * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n     * the pointer was moving in when the swap occured and whether the user's pointer continued to\n     * overlap with the swapped item after the swapping occurred.\n     */\n    this._previousSwap = {\n      drag: null,\n      delta: 0,\n      overlaps: false\n    };\n    /** Draggable items in the container. */\n    this._draggables = [];\n    /** Drop lists that are connected to the current one. */\n    this._siblings = [];\n    /** Direction in which the list is oriented. */\n    this._orientation = 'vertical';\n    /** Connected siblings that currently have a dragged item. */\n    this._activeSiblings = new Set();\n    /** Layout direction of the drop list. */\n    this._direction = 'ltr';\n    /** Subscription to the window being scrolled. */\n    this._viewportScrollSubscription = Subscription.EMPTY;\n    /** Vertical direction in which the list is currently scrolling. */\n    this._verticalScrollDirection = 0 /* NONE */;\n    /** Horizontal direction in which the list is currently scrolling. */\n    this._horizontalScrollDirection = 0 /* NONE */;\n    /** Used to signal to the current auto-scroll sequence when to stop. */\n    this._stopScrollTimers = new Subject();\n    /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n    this._cachedShadowRoot = null;\n    /** Starts the interval that'll auto-scroll the element. */\n    this._startScrollInterval = () => {\n      this._stopScrolling();\n      interval(0, animationFrameScheduler).pipe(takeUntil(this._stopScrollTimers)).subscribe(() => {\n        const node = this._scrollNode;\n        const scrollStep = this.autoScrollStep;\n        if (this._verticalScrollDirection === 1 /* UP */) {\n          incrementVerticalScroll(node, -scrollStep);\n        } else if (this._verticalScrollDirection === 2 /* DOWN */) {\n          incrementVerticalScroll(node, scrollStep);\n        }\n        if (this._horizontalScrollDirection === 1 /* LEFT */) {\n          incrementHorizontalScroll(node, -scrollStep);\n        } else if (this._horizontalScrollDirection === 2 /* RIGHT */) {\n          incrementHorizontalScroll(node, scrollStep);\n        }\n      });\n    };\n    this.element = coerceElement(element);\n    this._document = _document;\n    this.withScrollableParents([this.element]);\n    _dragDropRegistry.registerDropContainer(this);\n    this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n  }\n  /** Removes the drop list functionality from the DOM element. */\n  dispose() {\n    this._stopScrolling();\n    this._stopScrollTimers.complete();\n    this._viewportScrollSubscription.unsubscribe();\n    this.beforeStarted.complete();\n    this.entered.complete();\n    this.exited.complete();\n    this.dropped.complete();\n    this.sorted.complete();\n    this._activeSiblings.clear();\n    this._scrollNode = null;\n    this._parentPositions.clear();\n    this._dragDropRegistry.removeDropContainer(this);\n  }\n  /** Whether an item from this list is currently being dragged. */\n  isDragging() {\n    return this._isDragging;\n  }\n  /** Starts dragging an item. */\n  start() {\n    this._draggingStarted();\n    this._notifyReceivingSiblings();\n  }\n  /**\n   * Emits an event to indicate that the user moved an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param index Index at which the item entered. If omitted, the container will try to figure it\n   *   out automatically.\n   */\n  enter(item, pointerX, pointerY, index) {\n    this._draggingStarted();\n    // If sorting is disabled, we want the item to return to its starting\n    // position if the user is returning it to its initial container.\n    let newIndex;\n    if (index == null) {\n      newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\n      if (newIndex === -1) {\n        // We use the coordinates of where the item entered the drop\n        // zone to figure out at which index it should be inserted.\n        newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n      }\n    } else {\n      newIndex = index;\n    }\n    const activeDraggables = this._activeDraggables;\n    const currentIndex = activeDraggables.indexOf(item);\n    const placeholder = item.getPlaceholderElement();\n    let newPositionReference = activeDraggables[newIndex];\n    // If the item at the new position is the same as the item that is being dragged,\n    // it means that we're trying to restore the item to its initial position. In this\n    // case we should use the next item from the list as the reference.\n    if (newPositionReference === item) {\n      newPositionReference = activeDraggables[newIndex + 1];\n    }\n    // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n    // into another container and back again), we have to ensure that it isn't duplicated.\n    if (currentIndex > -1) {\n      activeDraggables.splice(currentIndex, 1);\n    }\n    // Don't use items that are being dragged as a reference, because\n    // their element has been moved down to the bottom of the body.\n    if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n      const element = newPositionReference.getRootElement();\n      element.parentElement.insertBefore(placeholder, element);\n      activeDraggables.splice(newIndex, 0, item);\n    } else if (this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n      const reference = activeDraggables[0].getRootElement();\n      reference.parentNode.insertBefore(placeholder, reference);\n      activeDraggables.unshift(item);\n    } else {\n      coerceElement(this.element).appendChild(placeholder);\n      activeDraggables.push(item);\n    }\n    // The transform needs to be cleared so it doesn't throw off the measurements.\n    placeholder.style.transform = '';\n    // Note that the positions were already cached when we called `start` above,\n    // but we need to refresh them since the amount of items has changed and also parent rects.\n    this._cacheItemPositions();\n    this._cacheParentPositions();\n    // Notify siblings at the end so that the item has been inserted into the `activeDraggables`.\n    this._notifyReceivingSiblings();\n    this.entered.next({\n      item,\n      container: this,\n      currentIndex: this.getItemIndex(item)\n    });\n  }\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item) {\n    this._reset();\n    this.exited.next({\n      item,\n      container: this\n    });\n  }\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousIndex Index of the item when dragging started.\n   * @param previousContainer Container from which the item got dragged in.\n   * @param isPointerOverContainer Whether the user's pointer was over the\n   *    container when the item was dropped.\n   * @param distance Distance the user has dragged since the start of the dragging sequence.\n   */\n  drop(item, currentIndex, previousIndex, previousContainer, isPointerOverContainer, distance, dropPoint) {\n    this._reset();\n    this.dropped.next({\n      item,\n      currentIndex,\n      previousIndex,\n      container: this,\n      previousContainer,\n      isPointerOverContainer,\n      distance,\n      dropPoint\n    });\n  }\n  /**\n   * Sets the draggable items that are a part of this list.\n   * @param items Items that are a part of this list.\n   */\n  withItems(items) {\n    const previousItems = this._draggables;\n    this._draggables = items;\n    items.forEach(item => item._withDropContainer(this));\n    if (this.isDragging()) {\n      const draggedItems = previousItems.filter(item => item.isDragging());\n      // If all of the items being dragged were removed\n      // from the list, abort the current drag sequence.\n      if (draggedItems.every(item => items.indexOf(item) === -1)) {\n        this._reset();\n      } else {\n        this._cacheItems();\n      }\n    }\n    return this;\n  }\n  /** Sets the layout direction of the drop list. */\n  withDirection(direction) {\n    this._direction = direction;\n    return this;\n  }\n  /**\n   * Sets the containers that are connected to this one. When two or more containers are\n   * connected, the user will be allowed to transfer items between them.\n   * @param connectedTo Other containers that the current containers should be connected to.\n   */\n  connectedTo(connectedTo) {\n    this._siblings = connectedTo.slice();\n    return this;\n  }\n  /**\n   * Sets the orientation of the container.\n   * @param orientation New orientation for the container.\n   */\n  withOrientation(orientation) {\n    this._orientation = orientation;\n    return this;\n  }\n  /**\n   * Sets which parent elements are can be scrolled while the user is dragging.\n   * @param elements Elements that can be scrolled.\n   */\n  withScrollableParents(elements) {\n    const element = coerceElement(this.element);\n    // We always allow the current element to be scrollable\n    // so we need to ensure that it's in the array.\n    this._scrollableElements = elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n    return this;\n  }\n  /** Gets the scrollable parents that are registered with this drop container. */\n  getScrollableParents() {\n    return this._scrollableElements;\n  }\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item) {\n    if (!this._isDragging) {\n      return this._draggables.indexOf(item);\n    }\n    // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n    // The rest of the logic still stands no matter what orientation we're in, however\n    // we need to invert the array when determining the index.\n    const items = this._orientation === 'horizontal' && this._direction === 'rtl' ? this._itemPositions.slice().reverse() : this._itemPositions;\n    return findIndex(items, currentItem => currentItem.drag === item);\n  }\n  /**\n   * Whether the list is able to receive the item that\n   * is currently being dragged inside a connected drop list.\n   */\n  isReceiving() {\n    return this._activeSiblings.size > 0;\n  }\n  /**\n   * Sorts an item inside the container based on its position.\n   * @param item Item to be sorted.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param pointerDelta Direction in which the pointer is moving along each axis.\n   */\n  _sortItem(item, pointerX, pointerY, pointerDelta) {\n    // Don't sort the item if sorting is disabled or it's out of range.\n    if (this.sortingDisabled || !this._clientRect || !isPointerNearClientRect(this._clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n      return;\n    }\n    const siblings = this._itemPositions;\n    const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n    if (newIndex === -1 && siblings.length > 0) {\n      return;\n    }\n    const isHorizontal = this._orientation === 'horizontal';\n    const currentIndex = findIndex(siblings, currentItem => currentItem.drag === item);\n    const siblingAtNewPosition = siblings[newIndex];\n    const currentPosition = siblings[currentIndex].clientRect;\n    const newPosition = siblingAtNewPosition.clientRect;\n    const delta = currentIndex > newIndex ? 1 : -1;\n    // How many pixels the item's placeholder should be offset.\n    const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n    // How many pixels all the other items should be offset.\n    const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n    // Save the previous order of the items before moving the item to its new index.\n    // We use this to check whether an item has been moved as a result of the sorting.\n    const oldOrder = siblings.slice();\n    // Shuffle the array in place.\n    moveItemInArray(siblings, currentIndex, newIndex);\n    this.sorted.next({\n      previousIndex: currentIndex,\n      currentIndex: newIndex,\n      container: this,\n      item\n    });\n    siblings.forEach((sibling, index) => {\n      // Don't do anything if the position hasn't changed.\n      if (oldOrder[index] === sibling) {\n        return;\n      }\n      const isDraggedItem = sibling.drag === item;\n      const offset = isDraggedItem ? itemOffset : siblingOffset;\n      const elementToOffset = isDraggedItem ? item.getPlaceholderElement() : sibling.drag.getRootElement();\n      // Update the offset to reflect the new position.\n      sibling.offset += offset;\n      // Since we're moving the items with a `transform`, we need to adjust their cached\n      // client rects to reflect their new position, as well as swap their positions in the cache.\n      // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n      // elements may be mid-animation which will give us a wrong result.\n      if (isHorizontal) {\n        // Round the transforms since some browsers will\n        // blur the elements, for sub-pixel transforms.\n        elementToOffset.style.transform = combineTransforms(`translate3d(${Math.round(sibling.offset)}px, 0, 0)`, sibling.initialTransform);\n        adjustClientRect(sibling.clientRect, 0, offset);\n      } else {\n        elementToOffset.style.transform = combineTransforms(`translate3d(0, ${Math.round(sibling.offset)}px, 0)`, sibling.initialTransform);\n        adjustClientRect(sibling.clientRect, offset, 0);\n      }\n    });\n    // Note that it's important that we do this after the client rects have been adjusted.\n    this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n    this._previousSwap.drag = siblingAtNewPosition.drag;\n    this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n  }\n  /**\n   * Checks whether the user's pointer is close to the edges of either the\n   * viewport or the drop list and starts the auto-scroll sequence.\n   * @param pointerX User's pointer position along the x axis.\n   * @param pointerY User's pointer position along the y axis.\n   */\n  _startScrollingIfNecessary(pointerX, pointerY) {\n    if (this.autoScrollDisabled) {\n      return;\n    }\n    let scrollNode;\n    let verticalScrollDirection = 0 /* NONE */;\n    let horizontalScrollDirection = 0 /* NONE */;\n    // Check whether we should start scrolling any of the parent containers.\n    this._parentPositions.positions.forEach((position, element) => {\n      // We have special handling for the `document` below. Also this would be\n      // nicer with a  for...of loop, but it requires changing a compiler flag.\n      if (element === this._document || !position.clientRect || scrollNode) {\n        return;\n      }\n      if (isPointerNearClientRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n        [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, pointerX, pointerY);\n        if (verticalScrollDirection || horizontalScrollDirection) {\n          scrollNode = element;\n        }\n      }\n    });\n    // Otherwise check if we can start scrolling the viewport.\n    if (!verticalScrollDirection && !horizontalScrollDirection) {\n      const {\n        width,\n        height\n      } = this._viewportRuler.getViewportSize();\n      const clientRect = {\n        width,\n        height,\n        top: 0,\n        right: width,\n        bottom: height,\n        left: 0\n      };\n      verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n      horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n      scrollNode = window;\n    }\n    if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection || horizontalScrollDirection !== this._horizontalScrollDirection || scrollNode !== this._scrollNode)) {\n      this._verticalScrollDirection = verticalScrollDirection;\n      this._horizontalScrollDirection = horizontalScrollDirection;\n      this._scrollNode = scrollNode;\n      if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n        this._ngZone.runOutsideAngular(this._startScrollInterval);\n      } else {\n        this._stopScrolling();\n      }\n    }\n  }\n  /** Stops any currently-running auto-scroll sequences. */\n  _stopScrolling() {\n    this._stopScrollTimers.next();\n  }\n  /** Starts the dragging sequence within the list. */\n  _draggingStarted() {\n    const styles = coerceElement(this.element).style;\n    this.beforeStarted.next();\n    this._isDragging = true;\n    // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n    // scrolling. The browser seems to round the value based on the snapping points which means\n    // that we can't increment/decrement the scroll position.\n    this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n    styles.scrollSnapType = styles.msScrollSnapType = 'none';\n    this._cacheItems();\n    this._viewportScrollSubscription.unsubscribe();\n    this._listenToScrollEvents();\n  }\n  /** Caches the positions of the configured scrollable parents. */\n  _cacheParentPositions() {\n    const element = coerceElement(this.element);\n    this._parentPositions.cache(this._scrollableElements);\n    // The list element is always in the `scrollableElements`\n    // so we can take advantage of the cached `ClientRect`.\n    this._clientRect = this._parentPositions.positions.get(element).clientRect;\n  }\n  /** Refreshes the position cache of the items and sibling containers. */\n  _cacheItemPositions() {\n    const isHorizontal = this._orientation === 'horizontal';\n    this._itemPositions = this._activeDraggables.map(drag => {\n      const elementToMeasure = drag.getVisibleElement();\n      return {\n        drag,\n        offset: 0,\n        initialTransform: elementToMeasure.style.transform || '',\n        clientRect: getMutableClientRect(elementToMeasure)\n      };\n    }).sort((a, b) => {\n      return isHorizontal ? a.clientRect.left - b.clientRect.left : a.clientRect.top - b.clientRect.top;\n    });\n  }\n  /** Resets the container to its initial state. */\n  _reset() {\n    this._isDragging = false;\n    const styles = coerceElement(this.element).style;\n    styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n    // TODO(crisbeto): may have to wait for the animations to finish.\n    this._activeDraggables.forEach(item => {\n      var _a;\n      const rootElement = item.getRootElement();\n      if (rootElement) {\n        const initialTransform = (_a = this._itemPositions.find(current => current.drag === item)) === null || _a === void 0 ? void 0 : _a.initialTransform;\n        rootElement.style.transform = initialTransform || '';\n      }\n    });\n    this._siblings.forEach(sibling => sibling._stopReceiving(this));\n    this._activeDraggables = [];\n    this._itemPositions = [];\n    this._previousSwap.drag = null;\n    this._previousSwap.delta = 0;\n    this._previousSwap.overlaps = false;\n    this._stopScrolling();\n    this._viewportScrollSubscription.unsubscribe();\n    this._parentPositions.clear();\n  }\n  /**\n   * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n   * @param currentIndex Index of the item currently being dragged.\n   * @param siblings All of the items in the list.\n   * @param delta Direction in which the user is moving.\n   */\n  _getSiblingOffsetPx(currentIndex, siblings, delta) {\n    const isHorizontal = this._orientation === 'horizontal';\n    const currentPosition = siblings[currentIndex].clientRect;\n    const immediateSibling = siblings[currentIndex + delta * -1];\n    let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n    if (immediateSibling) {\n      const start = isHorizontal ? 'left' : 'top';\n      const end = isHorizontal ? 'right' : 'bottom';\n      // Get the spacing between the start of the current item and the end of the one immediately\n      // after it in the direction in which the user is dragging, or vice versa. We add it to the\n      // offset in order to push the element to where it will be when it's inline and is influenced\n      // by the `margin` of its siblings.\n      if (delta === -1) {\n        siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n      } else {\n        siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n      }\n    }\n    return siblingOffset;\n  }\n  /**\n   * Gets the offset in pixels by which the item that is being dragged should be moved.\n   * @param currentPosition Current position of the item.\n   * @param newPosition Position of the item where the current item should be moved.\n   * @param delta Direction in which the user is moving.\n   */\n  _getItemOffsetPx(currentPosition, newPosition, delta) {\n    const isHorizontal = this._orientation === 'horizontal';\n    let itemOffset = isHorizontal ? newPosition.left - currentPosition.left : newPosition.top - currentPosition.top;\n    // Account for differences in the item width/height.\n    if (delta === -1) {\n      itemOffset += isHorizontal ? newPosition.width - currentPosition.width : newPosition.height - currentPosition.height;\n    }\n    return itemOffset;\n  }\n  /**\n   * Checks if pointer is entering in the first position\n   * @param pointerX Position of the user's pointer along the X axis.\n   * @param pointerY Position of the user's pointer along the Y axis.\n   */\n  _shouldEnterAsFirstChild(pointerX, pointerY) {\n    if (!this._activeDraggables.length) {\n      return false;\n    }\n    const itemPositions = this._itemPositions;\n    const isHorizontal = this._orientation === 'horizontal';\n    // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n    // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n    const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n    if (reversed) {\n      const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n      return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n    } else {\n      const firstItemRect = itemPositions[0].clientRect;\n      return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n    }\n  }\n  /**\n   * Gets the index of an item in the drop container, based on the position of the user's pointer.\n   * @param item Item that is being sorted.\n   * @param pointerX Position of the user's pointer along the X axis.\n   * @param pointerY Position of the user's pointer along the Y axis.\n   * @param delta Direction in which the user is moving their pointer.\n   */\n  _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n    const isHorizontal = this._orientation === 'horizontal';\n    const index = findIndex(this._itemPositions, ({\n      drag,\n      clientRect\n    }, _, array) => {\n      if (drag === item) {\n        // If there's only one item left in the container, it must be\n        // the dragged item itself so we use it as a reference.\n        return array.length < 2;\n      }\n      if (delta) {\n        const direction = isHorizontal ? delta.x : delta.y;\n        // If the user is still hovering over the same item as last time, their cursor hasn't left\n        // the item after we made the swap, and they didn't change the direction in which they're\n        // dragging, we don't consider it a direction swap.\n        if (drag === this._previousSwap.drag && this._previousSwap.overlaps && direction === this._previousSwap.delta) {\n          return false;\n        }\n      }\n      return isHorizontal ?\n      // Round these down since most browsers report client rects with\n      // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n      pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right) : pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n    });\n    return index === -1 || !this.sortPredicate(index, item, this) ? -1 : index;\n  }\n  /** Caches the current items in the list and their positions. */\n  _cacheItems() {\n    this._activeDraggables = this._draggables.slice();\n    this._cacheItemPositions();\n    this._cacheParentPositions();\n  }\n  /**\n   * Checks whether the user's pointer is positioned over the container.\n   * @param x Pointer position along the X axis.\n   * @param y Pointer position along the Y axis.\n   */\n  _isOverContainer(x, y) {\n    return this._clientRect != null && isInsideClientRect(this._clientRect, x, y);\n  }\n  /**\n   * Figures out whether an item should be moved into a sibling\n   * drop container, based on its current position.\n   * @param item Drag item that is being moved.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _getSiblingContainerFromPosition(item, x, y) {\n    return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n  }\n  /**\n   * Checks whether the drop list can receive the passed-in item.\n   * @param item Item that is being dragged into the list.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _canReceive(item, x, y) {\n    if (!this._clientRect || !isInsideClientRect(this._clientRect, x, y) || !this.enterPredicate(item, this)) {\n      return false;\n    }\n    const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\n    // If there's no element at the pointer position, then\n    // the client rect is probably scrolled out of the view.\n    if (!elementFromPoint) {\n      return false;\n    }\n    const nativeElement = coerceElement(this.element);\n    // The `ClientRect`, that we're using to find the container over which the user is\n    // hovering, doesn't give us any information on whether the element has been scrolled\n    // out of the view or whether it's overlapping with other containers. This means that\n    // we could end up transferring the item into a container that's invisible or is positioned\n    // below another one. We use the result from `elementFromPoint` to get the top-most element\n    // at the pointer position and to find whether it's one of the intersecting drop containers.\n    return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n  }\n  /**\n   * Called by one of the connected drop lists when a dragging sequence has started.\n   * @param sibling Sibling in which dragging has started.\n   */\n  _startReceiving(sibling, items) {\n    const activeSiblings = this._activeSiblings;\n    if (!activeSiblings.has(sibling) && items.every(item => {\n      // Note that we have to add an exception to the `enterPredicate` for items that started off\n      // in this drop list. The drag ref has logic that allows an item to return to its initial\n      // container, if it has left the initial container and none of the connected containers\n      // allow it to enter. See `DragRef._updateActiveDropContainer` for more context.\n      return this.enterPredicate(item, this) || this._draggables.indexOf(item) > -1;\n    })) {\n      activeSiblings.add(sibling);\n      this._cacheParentPositions();\n      this._listenToScrollEvents();\n    }\n  }\n  /**\n   * Called by a connected drop list when dragging has stopped.\n   * @param sibling Sibling whose dragging has stopped.\n   */\n  _stopReceiving(sibling) {\n    this._activeSiblings.delete(sibling);\n    this._viewportScrollSubscription.unsubscribe();\n  }\n  /**\n   * Starts listening to scroll events on the viewport.\n   * Used for updating the internal state of the list.\n   */\n  _listenToScrollEvents() {\n    this._viewportScrollSubscription = this._dragDropRegistry.scrolled(this._getShadowRoot()).subscribe(event => {\n      if (this.isDragging()) {\n        const scrollDifference = this._parentPositions.handleScroll(event);\n        if (scrollDifference) {\n          // Since we know the amount that the user has scrolled we can shift all of the\n          // client rectangles ourselves. This is cheaper than re-measuring everything and\n          // we can avoid inconsistent behavior where we might be measuring the element before\n          // its position has changed.\n          this._itemPositions.forEach(({\n            clientRect\n          }) => {\n            adjustClientRect(clientRect, scrollDifference.top, scrollDifference.left);\n          });\n          // We need two loops for this, because we want all of the cached\n          // positions to be up-to-date before we re-sort the item.\n          this._itemPositions.forEach(({\n            drag\n          }) => {\n            if (this._dragDropRegistry.isDragging(drag)) {\n              // We need to re-sort the item manually, because the pointer move\n              // events won't be dispatched while the user is scrolling.\n              drag._sortFromLastPointerPosition();\n            }\n          });\n        }\n      } else if (this.isReceiving()) {\n        this._cacheParentPositions();\n      }\n    });\n  }\n  /**\n   * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n   * than saving it in property directly on init, because we want to resolve it as late as possible\n   * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n   * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n   */\n  _getShadowRoot() {\n    if (!this._cachedShadowRoot) {\n      const shadowRoot = _getShadowRoot(coerceElement(this.element));\n      this._cachedShadowRoot = shadowRoot || this._document;\n    }\n    return this._cachedShadowRoot;\n  }\n  /** Notifies any siblings that may potentially receive the item. */\n  _notifyReceivingSiblings() {\n    const draggedItems = this._activeDraggables.filter(item => item.isDragging());\n    this._siblings.forEach(sibling => sibling._startReceiving(this, draggedItems));\n  }\n}\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.findIndex` which isn't part of the standard Google typings.\n * @param array Array in which to look for matches.\n * @param predicate Function used to determine whether an item is a match.\n */\nfunction findIndex(array, predicate) {\n  for (let i = 0; i < array.length; i++) {\n    if (predicate(array[i], i, array)) {\n      return i;\n    }\n  }\n  return -1;\n}\n/**\n * Increments the vertical scroll position of a node.\n * @param node Node whose scroll position should change.\n * @param amount Amount of pixels that the `node` should be scrolled.\n */\nfunction incrementVerticalScroll(node, amount) {\n  if (node === window) {\n    node.scrollBy(0, amount);\n  } else {\n    // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n    node.scrollTop += amount;\n  }\n}\n/**\n * Increments the horizontal scroll position of a node.\n * @param node Node whose scroll position should change.\n * @param amount Amount of pixels that the `node` should be scrolled.\n */\nfunction incrementHorizontalScroll(node, amount) {\n  if (node === window) {\n    node.scrollBy(amount, 0);\n  } else {\n    // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n    node.scrollLeft += amount;\n  }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n  const {\n    top,\n    bottom,\n    height\n  } = clientRect;\n  const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n  if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n    return 1 /* UP */;\n  } else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n    return 2 /* DOWN */;\n  }\n\n  return 0 /* NONE */;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n  const {\n    left,\n    right,\n    width\n  } = clientRect;\n  const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n  if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n    return 1 /* LEFT */;\n  } else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n    return 2 /* RIGHT */;\n  }\n\n  return 0 /* NONE */;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n  const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n  const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n  let verticalScrollDirection = 0 /* NONE */;\n  let horizontalScrollDirection = 0 /* NONE */;\n  // Note that we here we do some extra checks for whether the element is actually scrollable in\n  // a certain direction and we only assign the scroll direction if it is. We do this so that we\n  // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n  // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n  if (computedVertical) {\n    const scrollTop = element.scrollTop;\n    if (computedVertical === 1 /* UP */) {\n      if (scrollTop > 0) {\n        verticalScrollDirection = 1 /* UP */;\n      }\n    } else if (element.scrollHeight - scrollTop > element.clientHeight) {\n      verticalScrollDirection = 2 /* DOWN */;\n    }\n  }\n\n  if (computedHorizontal) {\n    const scrollLeft = element.scrollLeft;\n    if (computedHorizontal === 1 /* LEFT */) {\n      if (scrollLeft > 0) {\n        horizontalScrollDirection = 1 /* LEFT */;\n      }\n    } else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n      horizontalScrollDirection = 2 /* RIGHT */;\n    }\n  }\n\n  return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n  passive: false,\n  capture: true\n});\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\nclass DragDropRegistry {\n  constructor(_ngZone, _document) {\n    this._ngZone = _ngZone;\n    /** Registered drop container instances. */\n    this._dropInstances = new Set();\n    /** Registered drag item instances. */\n    this._dragInstances = new Set();\n    /** Drag item instances that are currently being dragged. */\n    this._activeDragInstances = [];\n    /** Keeps track of the event listeners that we've bound to the `document`. */\n    this._globalListeners = new Map();\n    /**\n     * Predicate function to check if an item is being dragged.  Moved out into a property,\n     * because it'll be called a lot and we don't want to create a new function every time.\n     */\n    this._draggingPredicate = item => item.isDragging();\n    /**\n     * Emits the `touchmove` or `mousemove` events that are dispatched\n     * while the user is dragging a drag item instance.\n     */\n    this.pointerMove = new Subject();\n    /**\n     * Emits the `touchend` or `mouseup` events that are dispatched\n     * while the user is dragging a drag item instance.\n     */\n    this.pointerUp = new Subject();\n    /**\n     * Emits when the viewport has been scrolled while the user is dragging an item.\n     * @deprecated To be turned into a private member. Use the `scrolled` method instead.\n     * @breaking-change 13.0.0\n     */\n    this.scroll = new Subject();\n    /**\n     * Event listener that will prevent the default browser action while the user is dragging.\n     * @param event Event whose default action should be prevented.\n     */\n    this._preventDefaultWhileDragging = event => {\n      if (this._activeDragInstances.length > 0) {\n        event.preventDefault();\n      }\n    };\n    /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n    this._persistentTouchmoveListener = event => {\n      if (this._activeDragInstances.length > 0) {\n        // Note that we only want to prevent the default action after dragging has actually started.\n        // Usually this is the same time at which the item is added to the `_activeDragInstances`,\n        // but it could be pushed back if the user has set up a drag delay or threshold.\n        if (this._activeDragInstances.some(this._draggingPredicate)) {\n          event.preventDefault();\n        }\n        this.pointerMove.next(event);\n      }\n    };\n    this._document = _document;\n  }\n  /** Adds a drop container to the registry. */\n  registerDropContainer(drop) {\n    if (!this._dropInstances.has(drop)) {\n      this._dropInstances.add(drop);\n    }\n  }\n  /** Adds a drag item instance to the registry. */\n  registerDragItem(drag) {\n    this._dragInstances.add(drag);\n    // The `touchmove` event gets bound once, ahead of time, because WebKit\n    // won't preventDefault on a dynamically-added `touchmove` listener.\n    // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n    if (this._dragInstances.size === 1) {\n      this._ngZone.runOutsideAngular(() => {\n        // The event handler has to be explicitly active,\n        // because newer browsers make it passive by default.\n        this._document.addEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n      });\n    }\n  }\n  /** Removes a drop container from the registry. */\n  removeDropContainer(drop) {\n    this._dropInstances.delete(drop);\n  }\n  /** Removes a drag item instance from the registry. */\n  removeDragItem(drag) {\n    this._dragInstances.delete(drag);\n    this.stopDragging(drag);\n    if (this._dragInstances.size === 0) {\n      this._document.removeEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n    }\n  }\n  /**\n   * Starts the dragging sequence for a drag instance.\n   * @param drag Drag instance which is being dragged.\n   * @param event Event that initiated the dragging.\n   */\n  startDragging(drag, event) {\n    // Do not process the same drag twice to avoid memory leaks and redundant listeners\n    if (this._activeDragInstances.indexOf(drag) > -1) {\n      return;\n    }\n    this._activeDragInstances.push(drag);\n    if (this._activeDragInstances.length === 1) {\n      const isTouchEvent = event.type.startsWith('touch');\n      // We explicitly bind __active__ listeners here, because newer browsers will default to\n      // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n      // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n      this._globalListeners.set(isTouchEvent ? 'touchend' : 'mouseup', {\n        handler: e => this.pointerUp.next(e),\n        options: true\n      }).set('scroll', {\n        handler: e => this.scroll.next(e),\n        // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n        // the document. See https://github.com/angular/components/issues/17144.\n        options: true\n      })\n      // Preventing the default action on `mousemove` isn't enough to disable text selection\n      // on Safari so we need to prevent the selection event as well. Alternatively this can\n      // be done by setting `user-select: none` on the `body`, however it has causes a style\n      // recalculation which can be expensive on pages with a lot of elements.\n      .set('selectstart', {\n        handler: this._preventDefaultWhileDragging,\n        options: activeCapturingEventOptions\n      });\n      // We don't have to bind a move event for touch drag sequences, because\n      // we already have a persistent global one bound from `registerDragItem`.\n      if (!isTouchEvent) {\n        this._globalListeners.set('mousemove', {\n          handler: e => this.pointerMove.next(e),\n          options: activeCapturingEventOptions\n        });\n      }\n      this._ngZone.runOutsideAngular(() => {\n        this._globalListeners.forEach((config, name) => {\n          this._document.addEventListener(name, config.handler, config.options);\n        });\n      });\n    }\n  }\n  /** Stops dragging a drag item instance. */\n  stopDragging(drag) {\n    const index = this._activeDragInstances.indexOf(drag);\n    if (index > -1) {\n      this._activeDragInstances.splice(index, 1);\n      if (this._activeDragInstances.length === 0) {\n        this._clearGlobalListeners();\n      }\n    }\n  }\n  /** Gets whether a drag item instance is currently being dragged. */\n  isDragging(drag) {\n    return this._activeDragInstances.indexOf(drag) > -1;\n  }\n  /**\n   * Gets a stream that will emit when any element on the page is scrolled while an item is being\n   * dragged.\n   * @param shadowRoot Optional shadow root that the current dragging sequence started from.\n   *   Top-level listeners won't pick up events coming from the shadow DOM so this parameter can\n   *   be used to include an additional top-level listener at the shadow root level.\n   */\n  scrolled(shadowRoot) {\n    const streams = [this.scroll];\n    if (shadowRoot && shadowRoot !== this._document) {\n      // Note that this is basically the same as `fromEvent` from rjxs, but we do it ourselves,\n      // because we want to guarantee that the event is bound outside of the `NgZone`. With\n      // `fromEvent` it'll only happen if the subscription is outside the `NgZone`.\n      streams.push(new Observable(observer => {\n        return this._ngZone.runOutsideAngular(() => {\n          const eventOptions = true;\n          const callback = event => {\n            if (this._activeDragInstances.length) {\n              observer.next(event);\n            }\n          };\n          shadowRoot.addEventListener('scroll', callback, eventOptions);\n          return () => {\n            shadowRoot.removeEventListener('scroll', callback, eventOptions);\n          };\n        });\n      }));\n    }\n    return merge(...streams);\n  }\n  ngOnDestroy() {\n    this._dragInstances.forEach(instance => this.removeDragItem(instance));\n    this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n    this._clearGlobalListeners();\n    this.pointerMove.complete();\n    this.pointerUp.complete();\n  }\n  /** Clears out the global event listeners from the `document`. */\n  _clearGlobalListeners() {\n    this._globalListeners.forEach((config, name) => {\n      this._document.removeEventListener(name, config.handler, config.options);\n    });\n    this._globalListeners.clear();\n  }\n}\nDragDropRegistry.ɵfac = function DragDropRegistry_Factory(t) {\n  return new (t || DragDropRegistry)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT));\n};\nDragDropRegistry.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function DragDropRegistry_Factory() {\n    return new DragDropRegistry(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.DOCUMENT));\n  },\n  token: DragDropRegistry,\n  providedIn: \"root\"\n});\nDragDropRegistry.ctorParameters = () => [{\n  type: NgZone\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DragDropRegistry, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n  dragStartThreshold: 5,\n  pointerDirectionChangeThreshold: 5\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n  constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n    this._document = _document;\n    this._ngZone = _ngZone;\n    this._viewportRuler = _viewportRuler;\n    this._dragDropRegistry = _dragDropRegistry;\n  }\n  /**\n   * Turns an element into a draggable item.\n   * @param element Element to which to attach the dragging functionality.\n   * @param config Object used to configure the dragging behavior.\n   */\n  createDrag(element, config = DEFAULT_CONFIG) {\n    return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n  }\n  /**\n   * Turns an element into a drop list.\n   * @param element Element to which to attach the drop list functionality.\n   */\n  createDropList(element) {\n    return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n  }\n}\nDragDrop.ɵfac = function DragDrop_Factory(t) {\n  return new (t || DragDrop)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DragDropRegistry));\n};\nDragDrop.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function DragDrop_Factory() {\n    return new DragDrop(i0.ɵɵinject(i1.DOCUMENT), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i2.ViewportRuler), i0.ɵɵinject(DragDropRegistry));\n  },\n  token: DragDrop,\n  providedIn: \"root\"\n});\nDragDrop.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: NgZone\n}, {\n  type: ViewportRuler\n}, {\n  type: DragDropRegistry\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DragDrop, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc1.ViewportRuler\n    }, {\n      type: DragDropRegistry\n    }];\n  }, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST_GROUP = new InjectionToken('CdkDropListGroup');\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\nclass CdkDropListGroup {\n  constructor() {\n    /** Drop lists registered inside the group. */\n    this._items = new Set();\n    this._disabled = false;\n  }\n  /** Whether starting a dragging sequence from inside this group is disabled. */\n  get disabled() {\n    return this._disabled;\n  }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  ngOnDestroy() {\n    this._items.clear();\n  }\n}\nCdkDropListGroup.ɵfac = function CdkDropListGroup_Factory(t) {\n  return new (t || CdkDropListGroup)();\n};\nCdkDropListGroup.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkDropListGroup,\n  selectors: [[\"\", \"cdkDropListGroup\", \"\"]],\n  inputs: {\n    disabled: [\"cdkDropListGroupDisabled\", \"disabled\"]\n  },\n  exportAs: [\"cdkDropListGroup\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CDK_DROP_LIST_GROUP,\n    useExisting: CdkDropListGroup\n  }])]\n});\nCdkDropListGroup.propDecorators = {\n  disabled: [{\n    type: Input,\n    args: ['cdkDropListGroupDisabled']\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDropListGroup, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkDropListGroup]',\n      exportAs: 'cdkDropListGroup',\n      providers: [{\n        provide: CDK_DROP_LIST_GROUP,\n        useExisting: CdkDropListGroup\n      }]\n    }]\n  }], function () {\n    return [];\n  }, {\n    disabled: [{\n      type: Input,\n      args: ['cdkDropListGroupDisabled']\n    }]\n  });\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Asserts that a particular node is an element.\n * @param node Node to be checked.\n * @param name Name to attach to the error message.\n */\nfunction assertElementNode(node, name) {\n  if (node.nodeType !== 1) {\n    throw Error(`${name} must be attached to an element node. ` + `Currently attached to \"${node.nodeName}\".`);\n  }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST = new InjectionToken('CdkDropList');\nconst ɵ0 = undefined;\n/** Container that wraps a set of draggable items. */\nclass CdkDropList {\n  constructor( /** Element that the drop list is attached to. */\n  element, dragDrop, _changeDetectorRef, _scrollDispatcher, _dir, _group, config) {\n    this.element = element;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._scrollDispatcher = _scrollDispatcher;\n    this._dir = _dir;\n    this._group = _group;\n    /** Emits when the list has been destroyed. */\n    this._destroyed = new Subject();\n    /**\n     * Other draggable containers that this container is connected to and into which the\n     * container's items can be transferred. Can either be references to other drop containers,\n     * or their unique IDs.\n     */\n    this.connectedTo = [];\n    /**\n     * Unique ID for the drop zone. Can be used as a reference\n     * in the `connectedTo` of another `CdkDropList`.\n     */\n    this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\n    /**\n     * Function that is used to determine whether an item\n     * is allowed to be moved into a drop container.\n     */\n    this.enterPredicate = () => true;\n    /** Functions that is used to determine whether an item can be sorted into a particular index. */\n    this.sortPredicate = () => true;\n    /** Emits when the user drops an item inside the container. */\n    this.dropped = new EventEmitter();\n    /**\n     * Emits when the user has moved a new drag item into this container.\n     */\n    this.entered = new EventEmitter();\n    /**\n     * Emits when the user removes an item from the container\n     * by dragging it into another container.\n     */\n    this.exited = new EventEmitter();\n    /** Emits as the user is swapping items while actively dragging. */\n    this.sorted = new EventEmitter();\n    /**\n     * Keeps track of the items that are registered with this container. Historically we used to\n     * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n     * well which means that we can't handle cases like dragging the headers of a `mat-table`\n     * correctly. What we do instead is to have the items register themselves with the container\n     * and then we sort them based on their position in the DOM.\n     */\n    this._unsortedItems = new Set();\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      assertElementNode(element.nativeElement, 'cdkDropList');\n    }\n    this._dropListRef = dragDrop.createDropList(element);\n    this._dropListRef.data = this;\n    if (config) {\n      this._assignDefaults(config);\n    }\n    this._dropListRef.enterPredicate = (drag, drop) => {\n      return this.enterPredicate(drag.data, drop.data);\n    };\n    this._dropListRef.sortPredicate = (index, drag, drop) => {\n      return this.sortPredicate(index, drag.data, drop.data);\n    };\n    this._setupInputSyncSubscription(this._dropListRef);\n    this._handleEvents(this._dropListRef);\n    CdkDropList._dropLists.push(this);\n    if (_group) {\n      _group._items.add(this);\n    }\n  }\n  /** Whether starting a dragging sequence from this container is disabled. */\n  get disabled() {\n    return this._disabled || !!this._group && this._group.disabled;\n  }\n  set disabled(value) {\n    // Usually we sync the directive and ref state right before dragging starts, in order to have\n    // a single point of failure and to avoid having to use setters for everything. `disabled` is\n    // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n    // the user in a disabled state, so we also need to sync it as it's being set.\n    this._dropListRef.disabled = this._disabled = coerceBooleanProperty(value);\n  }\n  /** Registers an items with the drop list. */\n  addItem(item) {\n    this._unsortedItems.add(item);\n    if (this._dropListRef.isDragging()) {\n      this._syncItemsWithRef();\n    }\n  }\n  /** Removes an item from the drop list. */\n  removeItem(item) {\n    this._unsortedItems.delete(item);\n    if (this._dropListRef.isDragging()) {\n      this._syncItemsWithRef();\n    }\n  }\n  /** Gets the registered items in the list, sorted by their position in the DOM. */\n  getSortedItems() {\n    return Array.from(this._unsortedItems).sort((a, b) => {\n      const documentPosition = a._dragRef.getVisibleElement().compareDocumentPosition(b._dragRef.getVisibleElement());\n      // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n      // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n      // tslint:disable-next-line:no-bitwise\n      return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n    });\n  }\n  ngOnDestroy() {\n    const index = CdkDropList._dropLists.indexOf(this);\n    if (index > -1) {\n      CdkDropList._dropLists.splice(index, 1);\n    }\n    if (this._group) {\n      this._group._items.delete(this);\n    }\n    this._unsortedItems.clear();\n    this._dropListRef.dispose();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n  /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n  _setupInputSyncSubscription(ref) {\n    if (this._dir) {\n      this._dir.change.pipe(startWith(this._dir.value), takeUntil(this._destroyed)).subscribe(value => ref.withDirection(value));\n    }\n    ref.beforeStarted.subscribe(() => {\n      const siblings = coerceArray(this.connectedTo).map(drop => {\n        if (typeof drop === 'string') {\n          const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\n          if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\n          }\n          return correspondingDropList;\n        }\n        return drop;\n      });\n      if (this._group) {\n        this._group._items.forEach(drop => {\n          if (siblings.indexOf(drop) === -1) {\n            siblings.push(drop);\n          }\n        });\n      }\n      // Note that we resolve the scrollable parents here so that we delay the resolution\n      // as long as possible, ensuring that the element is in its final place in the DOM.\n      if (!this._scrollableParentsResolved) {\n        const scrollableParents = this._scrollDispatcher.getAncestorScrollContainers(this.element).map(scrollable => scrollable.getElementRef().nativeElement);\n        this._dropListRef.withScrollableParents(scrollableParents);\n        // Only do this once since it involves traversing the DOM and the parents\n        // shouldn't be able to change without the drop list being destroyed.\n        this._scrollableParentsResolved = true;\n      }\n      ref.disabled = this.disabled;\n      ref.lockAxis = this.lockAxis;\n      ref.sortingDisabled = coerceBooleanProperty(this.sortingDisabled);\n      ref.autoScrollDisabled = coerceBooleanProperty(this.autoScrollDisabled);\n      ref.autoScrollStep = coerceNumberProperty(this.autoScrollStep, 2);\n      ref.connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef)).withOrientation(this.orientation);\n    });\n  }\n  /** Handles events from the underlying DropListRef. */\n  _handleEvents(ref) {\n    ref.beforeStarted.subscribe(() => {\n      this._syncItemsWithRef();\n      this._changeDetectorRef.markForCheck();\n    });\n    ref.entered.subscribe(event => {\n      this.entered.emit({\n        container: this,\n        item: event.item.data,\n        currentIndex: event.currentIndex\n      });\n    });\n    ref.exited.subscribe(event => {\n      this.exited.emit({\n        container: this,\n        item: event.item.data\n      });\n      this._changeDetectorRef.markForCheck();\n    });\n    ref.sorted.subscribe(event => {\n      this.sorted.emit({\n        previousIndex: event.previousIndex,\n        currentIndex: event.currentIndex,\n        container: this,\n        item: event.item.data\n      });\n    });\n    ref.dropped.subscribe(event => {\n      this.dropped.emit({\n        previousIndex: event.previousIndex,\n        currentIndex: event.currentIndex,\n        previousContainer: event.previousContainer.data,\n        container: event.container.data,\n        item: event.item.data,\n        isPointerOverContainer: event.isPointerOverContainer,\n        distance: event.distance,\n        dropPoint: event.dropPoint\n      });\n      // Mark for check since all of these events run outside of change\n      // detection and we're not guaranteed for something else to have triggered it.\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n  /** Assigns the default input values based on a provided config object. */\n  _assignDefaults(config) {\n    const {\n      lockAxis,\n      draggingDisabled,\n      sortingDisabled,\n      listAutoScrollDisabled,\n      listOrientation\n    } = config;\n    this.disabled = draggingDisabled == null ? false : draggingDisabled;\n    this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n    this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n    this.orientation = listOrientation || 'vertical';\n    if (lockAxis) {\n      this.lockAxis = lockAxis;\n    }\n  }\n  /** Syncs up the registered drag items with underlying drop list ref. */\n  _syncItemsWithRef() {\n    this._dropListRef.withItems(this.getSortedItems().map(item => item._dragRef));\n  }\n}\nCdkDropList.ɵfac = function CdkDropList_Factory(t) {\n  return new (t || CdkDropList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(CDK_DROP_LIST_GROUP, 12), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8));\n};\nCdkDropList.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkDropList,\n  selectors: [[\"\", \"cdkDropList\", \"\"], [\"cdk-drop-list\"]],\n  hostAttrs: [1, \"cdk-drop-list\"],\n  hostVars: 7,\n  hostBindings: function CdkDropList_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"id\", ctx.id);\n      ɵngcc0.ɵɵclassProp(\"cdk-drop-list-disabled\", ctx.disabled)(\"cdk-drop-list-dragging\", ctx._dropListRef.isDragging())(\"cdk-drop-list-receiving\", ctx._dropListRef.isReceiving());\n    }\n  },\n  inputs: {\n    connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"],\n    id: \"id\",\n    enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"],\n    sortPredicate: [\"cdkDropListSortPredicate\", \"sortPredicate\"],\n    disabled: [\"cdkDropListDisabled\", \"disabled\"],\n    sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\"],\n    autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\"],\n    orientation: [\"cdkDropListOrientation\", \"orientation\"],\n    lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"],\n    data: [\"cdkDropListData\", \"data\"],\n    autoScrollStep: [\"cdkDropListAutoScrollStep\", \"autoScrollStep\"]\n  },\n  outputs: {\n    dropped: \"cdkDropListDropped\",\n    entered: \"cdkDropListEntered\",\n    exited: \"cdkDropListExited\",\n    sorted: \"cdkDropListSorted\"\n  },\n  exportAs: [\"cdkDropList\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([\n  // Prevent child drop lists from picking up the same group as their parent.\n  {\n    provide: CDK_DROP_LIST_GROUP,\n    useValue: ɵ0\n  }, {\n    provide: CDK_DROP_LIST,\n    useExisting: CdkDropList\n  }])]\n});\n/** Keeps track of the drop lists that are currently on the page. */\nCdkDropList._dropLists = [];\nCdkDropList.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: DragDrop\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: ScrollDispatcher\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: CdkDropListGroup,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [CDK_DROP_LIST_GROUP]\n  }, {\n    type: SkipSelf\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [CDK_DRAG_CONFIG]\n  }]\n}];\nCdkDropList.propDecorators = {\n  connectedTo: [{\n    type: Input,\n    args: ['cdkDropListConnectedTo']\n  }],\n  data: [{\n    type: Input,\n    args: ['cdkDropListData']\n  }],\n  orientation: [{\n    type: Input,\n    args: ['cdkDropListOrientation']\n  }],\n  id: [{\n    type: Input\n  }],\n  lockAxis: [{\n    type: Input,\n    args: ['cdkDropListLockAxis']\n  }],\n  disabled: [{\n    type: Input,\n    args: ['cdkDropListDisabled']\n  }],\n  sortingDisabled: [{\n    type: Input,\n    args: ['cdkDropListSortingDisabled']\n  }],\n  enterPredicate: [{\n    type: Input,\n    args: ['cdkDropListEnterPredicate']\n  }],\n  sortPredicate: [{\n    type: Input,\n    args: ['cdkDropListSortPredicate']\n  }],\n  autoScrollDisabled: [{\n    type: Input,\n    args: ['cdkDropListAutoScrollDisabled']\n  }],\n  autoScrollStep: [{\n    type: Input,\n    args: ['cdkDropListAutoScrollStep']\n  }],\n  dropped: [{\n    type: Output,\n    args: ['cdkDropListDropped']\n  }],\n  entered: [{\n    type: Output,\n    args: ['cdkDropListEntered']\n  }],\n  exited: [{\n    type: Output,\n    args: ['cdkDropListExited']\n  }],\n  sorted: [{\n    type: Output,\n    args: ['cdkDropListSorted']\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDropList, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkDropList], cdk-drop-list',\n      exportAs: 'cdkDropList',\n      providers: [\n      // Prevent child drop lists from picking up the same group as their parent.\n      {\n        provide: CDK_DROP_LIST_GROUP,\n        useValue: ɵ0\n      }, {\n        provide: CDK_DROP_LIST,\n        useExisting: CdkDropList\n      }],\n      host: {\n        'class': 'cdk-drop-list',\n        '[attr.id]': 'id',\n        '[class.cdk-drop-list-disabled]': 'disabled',\n        '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n        '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: DragDrop\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc1.ScrollDispatcher\n    }, {\n      type: ɵngcc2.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: CdkDropListGroup,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [CDK_DROP_LIST_GROUP]\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [CDK_DRAG_CONFIG]\n      }]\n    }];\n  }, {\n    connectedTo: [{\n      type: Input,\n      args: ['cdkDropListConnectedTo']\n    }],\n    id: [{\n      type: Input\n    }],\n    enterPredicate: [{\n      type: Input,\n      args: ['cdkDropListEnterPredicate']\n    }],\n    sortPredicate: [{\n      type: Input,\n      args: ['cdkDropListSortPredicate']\n    }],\n    dropped: [{\n      type: Output,\n      args: ['cdkDropListDropped']\n    }],\n    entered: [{\n      type: Output,\n      args: ['cdkDropListEntered']\n    }],\n    exited: [{\n      type: Output,\n      args: ['cdkDropListExited']\n    }],\n    sorted: [{\n      type: Output,\n      args: ['cdkDropListSorted']\n    }],\n    disabled: [{\n      type: Input,\n      args: ['cdkDropListDisabled']\n    }],\n    sortingDisabled: [{\n      type: Input,\n      args: ['cdkDropListSortingDisabled']\n    }],\n    autoScrollDisabled: [{\n      type: Input,\n      args: ['cdkDropListAutoScrollDisabled']\n    }],\n    orientation: [{\n      type: Input,\n      args: ['cdkDropListOrientation']\n    }],\n    lockAxis: [{\n      type: Input,\n      args: ['cdkDropListLockAxis']\n    }],\n    data: [{\n      type: Input,\n      args: ['cdkDropListData']\n    }],\n    autoScrollStep: [{\n      type: Input,\n      args: ['cdkDropListAutoScrollStep']\n    }]\n  });\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_HANDLE = new InjectionToken('CdkDragHandle');\n/** Handle that can be used to drag a CdkDrag instance. */\nclass CdkDragHandle {\n  constructor(element, parentDrag) {\n    this.element = element;\n    /** Emits when the state of the handle has changed. */\n    this._stateChanges = new Subject();\n    this._disabled = false;\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      assertElementNode(element.nativeElement, 'cdkDragHandle');\n    }\n    this._parentDrag = parentDrag;\n  }\n  /** Whether starting to drag through this handle is disabled. */\n  get disabled() {\n    return this._disabled;\n  }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._stateChanges.next(this);\n  }\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\nCdkDragHandle.ɵfac = function CdkDragHandle_Factory(t) {\n  return new (t || CdkDragHandle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_PARENT, 12));\n};\nCdkDragHandle.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkDragHandle,\n  selectors: [[\"\", \"cdkDragHandle\", \"\"]],\n  hostAttrs: [1, \"cdk-drag-handle\"],\n  inputs: {\n    disabled: [\"cdkDragHandleDisabled\", \"disabled\"]\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CDK_DRAG_HANDLE,\n    useExisting: CdkDragHandle\n  }])]\n});\nCdkDragHandle.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [CDK_DRAG_PARENT]\n  }, {\n    type: Optional\n  }, {\n    type: SkipSelf\n  }]\n}];\nCdkDragHandle.propDecorators = {\n  disabled: [{\n    type: Input,\n    args: ['cdkDragHandleDisabled']\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDragHandle, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkDragHandle]',\n      host: {\n        'class': 'cdk-drag-handle'\n      },\n      providers: [{\n        provide: CDK_DRAG_HANDLE,\n        useExisting: CdkDragHandle\n      }]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_DRAG_PARENT]\n      }, {\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }];\n  }, {\n    disabled: [{\n      type: Input,\n      args: ['cdkDragHandleDisabled']\n    }]\n  });\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PLACEHOLDER = new InjectionToken('CdkDragPlaceholder');\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\nclass CdkDragPlaceholder {\n  constructor(templateRef) {\n    this.templateRef = templateRef;\n  }\n}\nCdkDragPlaceholder.ɵfac = function CdkDragPlaceholder_Factory(t) {\n  return new (t || CdkDragPlaceholder)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n};\nCdkDragPlaceholder.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkDragPlaceholder,\n  selectors: [[\"ng-template\", \"cdkDragPlaceholder\", \"\"]],\n  inputs: {\n    data: \"data\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CDK_DRAG_PLACEHOLDER,\n    useExisting: CdkDragPlaceholder\n  }])]\n});\nCdkDragPlaceholder.ctorParameters = () => [{\n  type: TemplateRef\n}];\nCdkDragPlaceholder.propDecorators = {\n  data: [{\n    type: Input\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDragPlaceholder, [{\n    type: Directive,\n    args: [{\n      selector: 'ng-template[cdkDragPlaceholder]',\n      providers: [{\n        provide: CDK_DRAG_PLACEHOLDER,\n        useExisting: CdkDragPlaceholder\n      }]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }];\n  }, {\n    data: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PREVIEW = new InjectionToken('CdkDragPreview');\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\nclass CdkDragPreview {\n  constructor(templateRef) {\n    this.templateRef = templateRef;\n    this._matchSize = false;\n  }\n  /** Whether the preview should preserve the same size as the item that is being dragged. */\n  get matchSize() {\n    return this._matchSize;\n  }\n  set matchSize(value) {\n    this._matchSize = coerceBooleanProperty(value);\n  }\n}\nCdkDragPreview.ɵfac = function CdkDragPreview_Factory(t) {\n  return new (t || CdkDragPreview)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n};\nCdkDragPreview.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkDragPreview,\n  selectors: [[\"ng-template\", \"cdkDragPreview\", \"\"]],\n  inputs: {\n    matchSize: \"matchSize\",\n    data: \"data\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CDK_DRAG_PREVIEW,\n    useExisting: CdkDragPreview\n  }])]\n});\nCdkDragPreview.ctorParameters = () => [{\n  type: TemplateRef\n}];\nCdkDragPreview.propDecorators = {\n  data: [{\n    type: Input\n  }],\n  matchSize: [{\n    type: Input\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDragPreview, [{\n    type: Directive,\n    args: [{\n      selector: 'ng-template[cdkDragPreview]',\n      providers: [{\n        provide: CDK_DRAG_PREVIEW,\n        useExisting: CdkDragPreview\n      }]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }];\n  }, {\n    matchSize: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst DRAG_HOST_CLASS = 'cdk-drag';\n/** Element that can be moved inside a CdkDropList container. */\nclass CdkDrag {\n  constructor( /** Element that the draggable is attached to. */\n  element, /** Droppable container that the draggable is a part of. */\n  dropContainer,\n  /**\n   * @deprecated `_document` parameter no longer being used and will be removed.\n   * @breaking-change 12.0.0\n   */\n  _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, _selfHandle, _parentDrag) {\n    this.element = element;\n    this.dropContainer = dropContainer;\n    this._ngZone = _ngZone;\n    this._viewContainerRef = _viewContainerRef;\n    this._dir = _dir;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._selfHandle = _selfHandle;\n    this._parentDrag = _parentDrag;\n    this._destroyed = new Subject();\n    /** Emits when the user starts dragging the item. */\n    this.started = new EventEmitter();\n    /** Emits when the user has released a drag item, before any animations have started. */\n    this.released = new EventEmitter();\n    /** Emits when the user stops dragging an item in the container. */\n    this.ended = new EventEmitter();\n    /** Emits when the user has moved the item into a new container. */\n    this.entered = new EventEmitter();\n    /** Emits when the user removes the item its container by dragging it into another container. */\n    this.exited = new EventEmitter();\n    /** Emits when the user drops the item inside a container. */\n    this.dropped = new EventEmitter();\n    /**\n     * Emits as the user is dragging the item. Use with caution,\n     * because this event will fire for every pixel that the user has dragged.\n     */\n    this.moved = new Observable(observer => {\n      const subscription = this._dragRef.moved.pipe(map(movedEvent => ({\n        source: this,\n        pointerPosition: movedEvent.pointerPosition,\n        event: movedEvent.event,\n        delta: movedEvent.delta,\n        distance: movedEvent.distance\n      }))).subscribe(observer);\n      return () => {\n        subscription.unsubscribe();\n      };\n    });\n    this._dragRef = dragDrop.createDrag(element, {\n      dragStartThreshold: config && config.dragStartThreshold != null ? config.dragStartThreshold : 5,\n      pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null ? config.pointerDirectionChangeThreshold : 5,\n      zIndex: config === null || config === void 0 ? void 0 : config.zIndex\n    });\n    this._dragRef.data = this;\n    // We have to keep track of the drag instances in order to be able to match an element to\n    // a drag instance. We can't go through the global registry of `DragRef`, because the root\n    // element could be different.\n    CdkDrag._dragInstances.push(this);\n    if (config) {\n      this._assignDefaults(config);\n    }\n    // Note that usually the container is assigned when the drop list is picks up the item, but in\n    // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n    // where there are no items on the first change detection pass, but the items get picked up as\n    // soon as the user triggers another pass by dragging. This is a problem, because the item would\n    // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n    // is too late since the two modes save different kinds of information. We work around it by\n    // assigning the drop container both from here and the list.\n    if (dropContainer) {\n      this._dragRef._withDropContainer(dropContainer._dropListRef);\n      dropContainer.addItem(this);\n    }\n    this._syncInputs(this._dragRef);\n    this._handleEvents(this._dragRef);\n  }\n  /** Whether starting to drag this element is disabled. */\n  get disabled() {\n    return this._disabled || this.dropContainer && this.dropContainer.disabled;\n  }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._dragRef.disabled = this._disabled;\n  }\n  /**\n   * Returns the element that is being used as a placeholder\n   * while the current element is being dragged.\n   */\n  getPlaceholderElement() {\n    return this._dragRef.getPlaceholderElement();\n  }\n  /** Returns the root draggable element. */\n  getRootElement() {\n    return this._dragRef.getRootElement();\n  }\n  /** Resets a standalone drag item to its initial position. */\n  reset() {\n    this._dragRef.reset();\n  }\n  /**\n   * Gets the pixel coordinates of the draggable outside of a drop container.\n   */\n  getFreeDragPosition() {\n    return this._dragRef.getFreeDragPosition();\n  }\n  ngAfterViewInit() {\n    // Normally this isn't in the zone, but it can cause major performance regressions for apps\n    // using `zone-patch-rxjs` because it'll trigger a change detection when it unsubscribes.\n    this._ngZone.runOutsideAngular(() => {\n      // We need to wait for the zone to stabilize, in order for the reference\n      // element to be in the proper place in the DOM. This is mostly relevant\n      // for draggable elements inside portals since they get stamped out in\n      // their original DOM position and then they get transferred to the portal.\n      this._ngZone.onStable.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n        this._updateRootElement();\n        this._setupHandlesListener();\n        if (this.freeDragPosition) {\n          this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n      });\n    });\n  }\n  ngOnChanges(changes) {\n    const rootSelectorChange = changes['rootElementSelector'];\n    const positionChange = changes['freeDragPosition'];\n    // We don't have to react to the first change since it's being\n    // handled in `ngAfterViewInit` where it needs to be deferred.\n    if (rootSelectorChange && !rootSelectorChange.firstChange) {\n      this._updateRootElement();\n    }\n    // Skip the first change since it's being handled in `ngAfterViewInit`.\n    if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n      this._dragRef.setFreeDragPosition(this.freeDragPosition);\n    }\n  }\n  ngOnDestroy() {\n    if (this.dropContainer) {\n      this.dropContainer.removeItem(this);\n    }\n    const index = CdkDrag._dragInstances.indexOf(this);\n    if (index > -1) {\n      CdkDrag._dragInstances.splice(index, 1);\n    }\n    // Unnecessary in most cases, but used to avoid extra change detections with `zone-paths-rxjs`.\n    this._ngZone.runOutsideAngular(() => {\n      this._destroyed.next();\n      this._destroyed.complete();\n      this._dragRef.dispose();\n    });\n  }\n  /** Syncs the root element with the `DragRef`. */\n  _updateRootElement() {\n    const element = this.element.nativeElement;\n    const rootElement = this.rootElementSelector ? getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n    if (rootElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      assertElementNode(rootElement, 'cdkDrag');\n    }\n    this._dragRef.withRootElement(rootElement || element);\n  }\n  /** Gets the boundary element, based on the `boundaryElement` value. */\n  _getBoundaryElement() {\n    const boundary = this.boundaryElement;\n    if (!boundary) {\n      return null;\n    }\n    if (typeof boundary === 'string') {\n      return getClosestMatchingAncestor(this.element.nativeElement, boundary);\n    }\n    const element = coerceElement(boundary);\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && !element.contains(this.element.nativeElement)) {\n      throw Error('Draggable element is not inside of the node passed into cdkDragBoundary.');\n    }\n    return element;\n  }\n  /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n  _syncInputs(ref) {\n    ref.beforeStarted.subscribe(() => {\n      if (!ref.isDragging()) {\n        const dir = this._dir;\n        const dragStartDelay = this.dragStartDelay;\n        const placeholder = this._placeholderTemplate ? {\n          template: this._placeholderTemplate.templateRef,\n          context: this._placeholderTemplate.data,\n          viewContainer: this._viewContainerRef\n        } : null;\n        const preview = this._previewTemplate ? {\n          template: this._previewTemplate.templateRef,\n          context: this._previewTemplate.data,\n          matchSize: this._previewTemplate.matchSize,\n          viewContainer: this._viewContainerRef\n        } : null;\n        ref.disabled = this.disabled;\n        ref.lockAxis = this.lockAxis;\n        ref.dragStartDelay = typeof dragStartDelay === 'object' && dragStartDelay ? dragStartDelay : coerceNumberProperty(dragStartDelay);\n        ref.constrainPosition = this.constrainPosition;\n        ref.previewClass = this.previewClass;\n        ref.withBoundaryElement(this._getBoundaryElement()).withPlaceholderTemplate(placeholder).withPreviewTemplate(preview).withPreviewContainer(this.previewContainer || 'global');\n        if (dir) {\n          ref.withDirection(dir.value);\n        }\n      }\n    });\n    // This only needs to be resolved once.\n    ref.beforeStarted.pipe(take(1)).subscribe(() => {\n      var _a, _b;\n      // If we managed to resolve a parent through DI, use it.\n      if (this._parentDrag) {\n        ref.withParent(this._parentDrag._dragRef);\n        return;\n      }\n      // Otherwise fall back to resolving the parent by looking up the DOM. This can happen if\n      // the item was projected into another item by something like `ngTemplateOutlet`.\n      let parent = this.element.nativeElement.parentElement;\n      while (parent) {\n        // `classList` needs to be null checked, because IE doesn't have it on some elements.\n        if ((_a = parent.classList) === null || _a === void 0 ? void 0 : _a.contains(DRAG_HOST_CLASS)) {\n          ref.withParent(((_b = CdkDrag._dragInstances.find(drag => {\n            return drag.element.nativeElement === parent;\n          })) === null || _b === void 0 ? void 0 : _b._dragRef) || null);\n          break;\n        }\n        parent = parent.parentElement;\n      }\n    });\n  }\n  /** Handles the events from the underlying `DragRef`. */\n  _handleEvents(ref) {\n    ref.started.subscribe(() => {\n      this.started.emit({\n        source: this\n      });\n      // Since all of these events run outside of change detection,\n      // we need to ensure that everything is marked correctly.\n      this._changeDetectorRef.markForCheck();\n    });\n    ref.released.subscribe(() => {\n      this.released.emit({\n        source: this\n      });\n    });\n    ref.ended.subscribe(event => {\n      this.ended.emit({\n        source: this,\n        distance: event.distance,\n        dropPoint: event.dropPoint\n      });\n      // Since all of these events run outside of change detection,\n      // we need to ensure that everything is marked correctly.\n      this._changeDetectorRef.markForCheck();\n    });\n    ref.entered.subscribe(event => {\n      this.entered.emit({\n        container: event.container.data,\n        item: this,\n        currentIndex: event.currentIndex\n      });\n    });\n    ref.exited.subscribe(event => {\n      this.exited.emit({\n        container: event.container.data,\n        item: this\n      });\n    });\n    ref.dropped.subscribe(event => {\n      this.dropped.emit({\n        previousIndex: event.previousIndex,\n        currentIndex: event.currentIndex,\n        previousContainer: event.previousContainer.data,\n        container: event.container.data,\n        isPointerOverContainer: event.isPointerOverContainer,\n        item: this,\n        distance: event.distance,\n        dropPoint: event.dropPoint\n      });\n    });\n  }\n  /** Assigns the default input values based on a provided config object. */\n  _assignDefaults(config) {\n    const {\n      lockAxis,\n      dragStartDelay,\n      constrainPosition,\n      previewClass,\n      boundaryElement,\n      draggingDisabled,\n      rootElementSelector,\n      previewContainer\n    } = config;\n    this.disabled = draggingDisabled == null ? false : draggingDisabled;\n    this.dragStartDelay = dragStartDelay || 0;\n    if (lockAxis) {\n      this.lockAxis = lockAxis;\n    }\n    if (constrainPosition) {\n      this.constrainPosition = constrainPosition;\n    }\n    if (previewClass) {\n      this.previewClass = previewClass;\n    }\n    if (boundaryElement) {\n      this.boundaryElement = boundaryElement;\n    }\n    if (rootElementSelector) {\n      this.rootElementSelector = rootElementSelector;\n    }\n    if (previewContainer) {\n      this.previewContainer = previewContainer;\n    }\n  }\n  /** Sets up the listener that syncs the handles with the drag ref. */\n  _setupHandlesListener() {\n    // Listen for any newly-added handles.\n    this._handles.changes.pipe(startWith(this._handles),\n    // Sync the new handles with the DragRef.\n    tap(handles => {\n      const childHandleElements = handles.filter(handle => handle._parentDrag === this).map(handle => handle.element);\n      // Usually handles are only allowed to be a descendant of the drag element, but if\n      // the consumer defined a different drag root, we should allow the drag element\n      // itself to be a handle too.\n      if (this._selfHandle && this.rootElementSelector) {\n        childHandleElements.push(this.element);\n      }\n      this._dragRef.withHandles(childHandleElements);\n    }),\n    // Listen if the state of any of the handles changes.\n    switchMap(handles => {\n      return merge(...handles.map(item => {\n        return item._stateChanges.pipe(startWith(item));\n      }));\n    }), takeUntil(this._destroyed)).subscribe(handleInstance => {\n      // Enabled/disable the handle that changed in the DragRef.\n      const dragRef = this._dragRef;\n      const handle = handleInstance.element.nativeElement;\n      handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n    });\n  }\n}\nCdkDrag.ɵfac = function CdkDrag_Factory(t) {\n  return new (t || CdkDrag)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DROP_LIST, 12), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_HANDLE, 10), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_PARENT, 12));\n};\nCdkDrag.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkDrag,\n  selectors: [[\"\", \"cdkDrag\", \"\"]],\n  contentQueries: function CdkDrag_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_PREVIEW, 5);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_PLACEHOLDER, 5);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_HANDLE, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._previewTemplate = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._placeholderTemplate = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._handles = _t);\n    }\n  },\n  hostAttrs: [1, \"cdk-drag\"],\n  hostVars: 4,\n  hostBindings: function CdkDrag_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"cdk-drag-disabled\", ctx.disabled)(\"cdk-drag-dragging\", ctx._dragRef.isDragging());\n    }\n  },\n  inputs: {\n    disabled: [\"cdkDragDisabled\", \"disabled\"],\n    dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"],\n    lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"],\n    constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"],\n    previewClass: [\"cdkDragPreviewClass\", \"previewClass\"],\n    boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"],\n    rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"],\n    previewContainer: [\"cdkDragPreviewContainer\", \"previewContainer\"],\n    data: [\"cdkDragData\", \"data\"],\n    freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"]\n  },\n  outputs: {\n    started: \"cdkDragStarted\",\n    released: \"cdkDragReleased\",\n    ended: \"cdkDragEnded\",\n    entered: \"cdkDragEntered\",\n    exited: \"cdkDragExited\",\n    dropped: \"cdkDragDropped\",\n    moved: \"cdkDragMoved\"\n  },\n  exportAs: [\"cdkDrag\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CDK_DRAG_PARENT,\n    useExisting: CdkDrag\n  }]), ɵngcc0.ɵɵNgOnChangesFeature]\n});\nCdkDrag._dragInstances = [];\nCdkDrag.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [CDK_DROP_LIST]\n  }, {\n    type: Optional\n  }, {\n    type: SkipSelf\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: NgZone\n}, {\n  type: ViewContainerRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [CDK_DRAG_CONFIG]\n  }]\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: DragDrop\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: CdkDragHandle,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Self\n  }, {\n    type: Inject,\n    args: [CDK_DRAG_HANDLE]\n  }]\n}, {\n  type: CdkDrag,\n  decorators: [{\n    type: Optional\n  }, {\n    type: SkipSelf\n  }, {\n    type: Inject,\n    args: [CDK_DRAG_PARENT]\n  }]\n}];\nCdkDrag.propDecorators = {\n  _handles: [{\n    type: ContentChildren,\n    args: [CDK_DRAG_HANDLE, {\n      descendants: true\n    }]\n  }],\n  _previewTemplate: [{\n    type: ContentChild,\n    args: [CDK_DRAG_PREVIEW]\n  }],\n  _placeholderTemplate: [{\n    type: ContentChild,\n    args: [CDK_DRAG_PLACEHOLDER]\n  }],\n  data: [{\n    type: Input,\n    args: ['cdkDragData']\n  }],\n  lockAxis: [{\n    type: Input,\n    args: ['cdkDragLockAxis']\n  }],\n  rootElementSelector: [{\n    type: Input,\n    args: ['cdkDragRootElement']\n  }],\n  boundaryElement: [{\n    type: Input,\n    args: ['cdkDragBoundary']\n  }],\n  dragStartDelay: [{\n    type: Input,\n    args: ['cdkDragStartDelay']\n  }],\n  freeDragPosition: [{\n    type: Input,\n    args: ['cdkDragFreeDragPosition']\n  }],\n  disabled: [{\n    type: Input,\n    args: ['cdkDragDisabled']\n  }],\n  constrainPosition: [{\n    type: Input,\n    args: ['cdkDragConstrainPosition']\n  }],\n  previewClass: [{\n    type: Input,\n    args: ['cdkDragPreviewClass']\n  }],\n  previewContainer: [{\n    type: Input,\n    args: ['cdkDragPreviewContainer']\n  }],\n  started: [{\n    type: Output,\n    args: ['cdkDragStarted']\n  }],\n  released: [{\n    type: Output,\n    args: ['cdkDragReleased']\n  }],\n  ended: [{\n    type: Output,\n    args: ['cdkDragEnded']\n  }],\n  entered: [{\n    type: Output,\n    args: ['cdkDragEntered']\n  }],\n  exited: [{\n    type: Output,\n    args: ['cdkDragExited']\n  }],\n  dropped: [{\n    type: Output,\n    args: ['cdkDragDropped']\n  }],\n  moved: [{\n    type: Output,\n    args: ['cdkDragMoved']\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDrag, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkDrag]',\n      exportAs: 'cdkDrag',\n      host: {\n        'class': DRAG_HOST_CLASS,\n        '[class.cdk-drag-disabled]': 'disabled',\n        '[class.cdk-drag-dragging]': '_dragRef.isDragging()'\n      },\n      providers: [{\n        provide: CDK_DRAG_PARENT,\n        useExisting: CdkDrag\n      }]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_DROP_LIST]\n      }, {\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [CDK_DRAG_CONFIG]\n      }]\n    }, {\n      type: ɵngcc2.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: DragDrop\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: CdkDragHandle,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }, {\n        type: Inject,\n        args: [CDK_DRAG_HANDLE]\n      }]\n    }, {\n      type: CdkDrag,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }, {\n        type: Inject,\n        args: [CDK_DRAG_PARENT]\n      }]\n    }];\n  }, {\n    started: [{\n      type: Output,\n      args: ['cdkDragStarted']\n    }],\n    released: [{\n      type: Output,\n      args: ['cdkDragReleased']\n    }],\n    ended: [{\n      type: Output,\n      args: ['cdkDragEnded']\n    }],\n    entered: [{\n      type: Output,\n      args: ['cdkDragEntered']\n    }],\n    exited: [{\n      type: Output,\n      args: ['cdkDragExited']\n    }],\n    dropped: [{\n      type: Output,\n      args: ['cdkDragDropped']\n    }],\n    moved: [{\n      type: Output,\n      args: ['cdkDragMoved']\n    }],\n    disabled: [{\n      type: Input,\n      args: ['cdkDragDisabled']\n    }],\n    dragStartDelay: [{\n      type: Input,\n      args: ['cdkDragStartDelay']\n    }],\n    lockAxis: [{\n      type: Input,\n      args: ['cdkDragLockAxis']\n    }],\n    constrainPosition: [{\n      type: Input,\n      args: ['cdkDragConstrainPosition']\n    }],\n    previewClass: [{\n      type: Input,\n      args: ['cdkDragPreviewClass']\n    }],\n    boundaryElement: [{\n      type: Input,\n      args: ['cdkDragBoundary']\n    }],\n    rootElementSelector: [{\n      type: Input,\n      args: ['cdkDragRootElement']\n    }],\n    previewContainer: [{\n      type: Input,\n      args: ['cdkDragPreviewContainer']\n    }],\n    _handles: [{\n      type: ContentChildren,\n      args: [CDK_DRAG_HANDLE, {\n        descendants: true\n      }]\n    }],\n    _previewTemplate: [{\n      type: ContentChild,\n      args: [CDK_DRAG_PREVIEW]\n    }],\n    _placeholderTemplate: [{\n      type: ContentChild,\n      args: [CDK_DRAG_PLACEHOLDER]\n    }],\n    data: [{\n      type: Input,\n      args: ['cdkDragData']\n    }],\n    freeDragPosition: [{\n      type: Input,\n      args: ['cdkDragFreeDragPosition']\n    }]\n  });\n})();\n/** Gets the closest ancestor of an element that matches a selector. */\nfunction getClosestMatchingAncestor(element, selector) {\n  let currentElement = element.parentElement;\n  while (currentElement) {\n    // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n    if (currentElement.matches ? currentElement.matches(selector) : currentElement.msMatchesSelector(selector)) {\n      return currentElement;\n    }\n    currentElement = currentElement.parentElement;\n  }\n  return null;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass DragDropModule {}\nDragDropModule.ɵfac = function DragDropModule_Factory(t) {\n  return new (t || DragDropModule)();\n};\nDragDropModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: DragDropModule\n});\nDragDropModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [DragDrop],\n  imports: [CdkScrollableModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DragDropModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder],\n      exports: [CdkScrollableModule, CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder],\n      providers: [DragDrop]\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DragDropModule, {\n    declarations: function () {\n      return [CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder];\n    },\n    exports: function () {\n      return [CdkScrollableModule, CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder];\n    }\n  });\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_HANDLE, CDK_DRAG_PARENT, CDK_DRAG_PLACEHOLDER, CDK_DRAG_PREVIEW, CDK_DROP_LIST, CDK_DROP_LIST_GROUP, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem };","map":{"version":3,"names":["i0","Injectable","NgZone","Inject","InjectionToken","Directive","Input","EventEmitter","ElementRef","ChangeDetectorRef","Optional","SkipSelf","Output","TemplateRef","ViewContainerRef","Self","ContentChildren","ContentChild","NgModule","i1","DOCUMENT","i2","ViewportRuler","ScrollDispatcher","CdkScrollableModule","_getEventTarget","normalizePassiveListenerOptions","_getShadowRoot","coerceBooleanProperty","coerceElement","coerceArray","coerceNumberProperty","isFakeTouchstartFromScreenReader","isFakeMousedownFromScreenReader","Subject","Subscription","interval","animationFrameScheduler","Observable","merge","takeUntil","startWith","map","take","tap","switchMap","Directionality","ɵngcc0","ɵngcc1","ɵngcc2","extendStyles","dest","source","importantProperties","key","hasOwnProperty","value","setProperty","has","removeProperty","toggleNativeDragInteractions","element","enable","userSelect","style","toggleVisibility","position","top","opacity","left","combineTransforms","transform","initialTransform","parseCssTimeUnitsToMs","multiplier","toLowerCase","indexOf","parseFloat","getTransformTransitionDurationInMs","computedStyle","getComputedStyle","transitionedProperties","parseCssPropertyValue","property","find","prop","propertyIndex","rawDurations","rawDelays","name","getPropertyValue","split","part","trim","getMutableClientRect","clientRect","getBoundingClientRect","right","bottom","width","height","isInsideClientRect","x","y","adjustClientRect","isPointerNearClientRect","rect","threshold","pointerX","pointerY","xThreshold","yThreshold","ParentPositionTracker","constructor","_document","_viewportRuler","positions","Map","clear","cache","elements","set","scrollPosition","getViewportScrollPosition","forEach","scrollTop","scrollLeft","handleScroll","event","target","cachedPosition","get","scrolledParentNode","documentElement","newTop","newLeft","viewportScrollPosition","topDifference","leftDifference","node","contains","deepCloneNode","clone","cloneNode","descendantsWithId","querySelectorAll","nodeName","removeAttribute","i","length","transferCanvasData","transferInputData","transferData","selector","callback","descendantElements","cloneElements","cloneUniqueId","type","context","getContext","drawImage","_a","passiveEventListenerOptions","passive","activeEventListenerOptions","MOUSE_EVENT_IGNORE_TIME","dragImportantProperties","Set","DragRef","_config","_ngZone","_dragDropRegistry","_passiveTransform","_activeTransform","_hasStartedDragging","_moveEvents","_pointerMoveSubscription","EMPTY","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_boundaryElement","_nativeInteractionsEnabled","_handles","_disabledHandles","_direction","dragStartDelay","_disabled","beforeStarted","started","released","ended","entered","exited","dropped","moved","_pointerDown","next","targetHandle","handle","disabled","_initializeDragSequence","_rootElement","_pointerMove","pointerPosition","_getPointerPositionOnPage","distanceX","Math","abs","_pickupPositionOnPage","distanceY","isOverThreshold","dragStartThreshold","isDelayElapsed","Date","now","_dragStartTime","_getDragStartDelay","container","_dropContainer","_endDragSequence","isDragging","isReceiving","preventDefault","run","_startDragSequence","_previewRect","_preview","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","_lastKnownPointerPosition","_updatePointerDirectionDelta","_updateActiveDropContainer","activeTransform","_applyRootElementTransform","SVGElement","appliedTransform","setAttribute","observers","distance","_getDragDistance","delta","_pointerDirectionDelta","_pointerUp","withRootElement","withParent","parentDragRef","_parentPositions","registerDragItem","newValue","_toggleNativeDragInteractions","getPlaceholderElement","_placeholder","getRootElement","getVisibleElement","withHandles","handles","disabledHandles","add","withPreviewTemplate","template","_previewTemplate","withPlaceholderTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","runOutsideAngular","addEventListener","_initialTransform","undefined","_ownerSVGElement","ownerSVGElement","withBoundaryElement","boundaryElement","unsubscribe","change","subscribe","_containInsideBoundaryOnResize","parent","_parentDragRef","dispose","removeNode","_anchor","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeSubscriptions","complete","reset","disableHandle","enableHandle","delete","withDirection","direction","_withDropContainer","getFreeDragPosition","setFreeDragPosition","withPreviewContainer","_previewContainer","_sortFromLastPointerPosition","_previewRef","destroy","_placeholderRef","stopDragging","webkitTapHighlightColor","_rootElementTapHighlight","_stopScrolling","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","_cleanupCachedDimensions","dropPoint","isTouchEvent","_lastTouchEventTime","dropContainer","parentNode","placeholder","_createPlaceholderElement","anchor","createComment","shadowRoot","insertBefore","_createPreviewElement","body","appendChild","replaceChild","_getPreviewInsertionPoint","start","_initialContainer","_initialIndex","getItemIndex","getScrollableParents","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","isFakeEvent","draggable","pointerMove","pointerUp","scrolled","scrollEvent","_updateOnScroll","_boundaryRect","previewTemplate","_pickupPositionInElement","matchSize","_getPointerPositionInElement","_pointerPositionAtLastDirectionChange","startDragging","currentIndex","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","drop","rawX","rawY","newContainer","_getSiblingContainerFromPosition","exit","enter","sortingDisabled","_startScrollingIfNecessary","_sortItem","_applyPreviewTransform","previewConfig","previewClass","preview","rootRect","viewRef","viewContainer","createEmbeddedView","detectChanges","getRootNode","matchElementSize","getTransform","zIndex","classList","Array","isArray","className","Promise","resolve","placeholderRect","duration","handler","propertyName","removeEventListener","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","elementRect","handleElement","referenceRect","point","targetTouches","_getViewportScrollPosition","pageX","pageY","touches","changedTouches","svgMatrix","getScreenCTM","svgPoint","createSVGPoint","matrixTransform","inverse","dropContainerLock","lockAxis","constrainPosition","pickupX","pickupY","boundaryRect","previewRect","minY","maxY","minX","maxX","clamp$1","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","currentPosition","pickupPosition","leftOverflow","rightOverflow","topOverflow","bottomOverflow","touch","mouse","scrollDifference","_cachedShadowRoot","initialParent","previewContainer","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","round","min","max","removeChild","rootNodes","nodeType","ELEMENT_NODE","wrapper","createElement","sourceRect","moveItemInArray","array","fromIndex","toIndex","from","clamp","to","transferArrayItem","currentArray","targetArray","targetIndex","splice","copyArrayItem","DROP_PROXIMITY_THRESHOLD","SCROLL_PROXIMITY_THRESHOLD","DropListRef","autoScrollDisabled","autoScrollStep","enterPredicate","sortPredicate","sorted","_isDragging","_itemPositions","_previousSwap","drag","overlaps","_draggables","_siblings","_orientation","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","_horizontalScrollDirection","_stopScrollTimers","_startScrollInterval","pipe","_scrollNode","scrollStep","incrementVerticalScroll","incrementHorizontalScroll","withScrollableParents","registerDropContainer","removeDropContainer","_draggingStarted","_notifyReceivingSiblings","index","newIndex","_getItemIndexFromPointerPosition","activeDraggables","_activeDraggables","newPositionReference","parentElement","_shouldEnterAsFirstChild","reference","unshift","push","_cacheItemPositions","_cacheParentPositions","_reset","withItems","items","previousItems","draggedItems","filter","every","_cacheItems","connectedTo","slice","withOrientation","orientation","_scrollableElements","reverse","findIndex","currentItem","size","pointerDelta","_clientRect","siblings","isHorizontal","siblingAtNewPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","sibling","isDraggedItem","offset","elementToOffset","scrollNode","verticalScrollDirection","horizontalScrollDirection","getElementScrollDirections","getViewportSize","getVerticalScrollDirection","getHorizontalScrollDirection","window","styles","_initialScrollSnap","msScrollSnapType","scrollSnapType","_listenToScrollEvents","elementToMeasure","sort","a","b","current","_stopReceiving","immediateSibling","end","itemPositions","reversed","lastItemRect","firstItemRect","_","floor","_canReceive","elementFromPoint","nativeElement","_startReceiving","activeSiblings","predicate","amount","scrollBy","computedVertical","computedHorizontal","scrollHeight","clientHeight","scrollWidth","clientWidth","activeCapturingEventOptions","capture","DragDropRegistry","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","_draggingPredicate","scroll","_preventDefaultWhileDragging","_persistentTouchmoveListener","some","startsWith","e","options","config","_clearGlobalListeners","streams","observer","eventOptions","ngOnDestroy","instance","ɵfac","DragDropRegistry_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","factory","token","providedIn","ctorParameters","decorators","args","ngDevMode","ɵsetClassMetadata","DEFAULT_CONFIG","DragDrop","createDrag","createDropList","DragDrop_Factory","CDK_DRAG_PARENT","CDK_DROP_LIST_GROUP","CdkDropListGroup","_items","CdkDropListGroup_Factory","ɵdir","ɵɵdefineDirective","selectors","inputs","exportAs","features","ɵɵProvidersFeature","provide","useExisting","propDecorators","providers","CDK_DRAG_CONFIG","assertElementNode","Error","_uniqueIdCounter","CDK_DROP_LIST","ɵ0","CdkDropList","dragDrop","_changeDetectorRef","_scrollDispatcher","_dir","_group","_destroyed","id","_unsortedItems","_dropListRef","data","_assignDefaults","_setupInputSyncSubscription","_handleEvents","_dropLists","addItem","_syncItemsWithRef","removeItem","getSortedItems","documentPosition","_dragRef","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","ref","correspondingDropList","list","console","warn","_scrollableParentsResolved","scrollableParents","getAncestorScrollContainers","scrollable","getElementRef","markForCheck","emit","draggingDisabled","listAutoScrollDisabled","listOrientation","CdkDropList_Factory","ɵɵdirectiveInject","hostAttrs","hostVars","hostBindings","CdkDropList_HostBindings","rf","ctx","ɵɵattribute","ɵɵclassProp","outputs","useValue","host","CDK_DRAG_HANDLE","CdkDragHandle","parentDrag","_stateChanges","_parentDrag","CdkDragHandle_Factory","CDK_DRAG_PLACEHOLDER","CdkDragPlaceholder","templateRef","CdkDragPlaceholder_Factory","CDK_DRAG_PREVIEW","CdkDragPreview","_matchSize","CdkDragPreview_Factory","DRAG_HOST_CLASS","CdkDrag","_viewContainerRef","_selfHandle","subscription","movedEvent","_syncInputs","ngAfterViewInit","onStable","_updateRootElement","_setupHandlesListener","freeDragPosition","ngOnChanges","changes","rootSelectorChange","positionChange","firstChange","rootElementSelector","getClosestMatchingAncestor","_getBoundaryElement","boundary","dir","_b","childHandleElements","handleInstance","dragRef","CdkDrag_Factory","contentQueries","CdkDrag_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","CdkDrag_HostBindings","ɵɵNgOnChangesFeature","descendants","currentElement","matches","msMatchesSelector","DragDropModule","DragDropModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","declarations","exports","ngJitMode","ɵɵsetNgModuleScope"],"sources":["/home/ceo/mmmm/createyourevent/node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/drag-drop.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, NgZone, Inject, InjectionToken, Directive, Input, EventEmitter, ElementRef, ChangeDetectorRef, Optional, SkipSelf, Output, TemplateRef, ViewContainerRef, Self, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i2 from '@angular/cdk/scrolling';\nimport { ViewportRuler, ScrollDispatcher, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { _getEventTarget, normalizePassiveListenerOptions, _getShadowRoot } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceArray, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\nimport { takeUntil, startWith, map, take, tap, switchMap } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Shallow-extends a stylesheet object with another stylesheet-like object.\n * Note that the keys in `source` have to be dash-cased.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nfunction extendStyles(dest, source, importantProperties) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            const value = source[key];\n            if (value) {\n                dest.setProperty(key, value, (importantProperties === null || importantProperties === void 0 ? void 0 : importantProperties.has(key)) ? 'important' : '');\n            }\n            else {\n                dest.removeProperty(key);\n            }\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        'touch-action': enable ? '' : 'none',\n        '-webkit-user-drag': enable ? '' : 'none',\n        '-webkit-tap-highlight-color': enable ? '' : 'transparent',\n        'user-select': userSelect,\n        '-ms-user-select': userSelect,\n        '-webkit-user-select': userSelect,\n        '-moz-user-select': userSelect\n    });\n}\n/**\n * Toggles whether an element is visible while preserving its dimensions.\n * @param element Element whose visibility to toggle\n * @param enable Whether the element should be visible.\n * @param importantProperties Properties to be set as `!important`.\n * @docs-private\n */\nfunction toggleVisibility(element, enable, importantProperties) {\n    extendStyles(element.style, {\n        position: enable ? '' : 'fixed',\n        top: enable ? '' : '0',\n        opacity: enable ? '' : '0',\n        left: enable ? '' : '-999em'\n    }, importantProperties);\n}\n/**\n * Combines a transform string with an optional other transform\n * that exited before the base transform was applied.\n */\nfunction combineTransforms(transform, initialTransform) {\n    return initialTransform && initialTransform != 'none' ?\n        (transform + ' ' + initialTransform) :\n        transform;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nfunction getTransformTransitionDurationInMs(element) {\n    const computedStyle = getComputedStyle(element);\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    const propertyIndex = transitionedProperties.indexOf(property);\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle, name) {\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map(part => part.trim());\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Gets a mutable version of an element's bounding `ClientRect`. */\nfunction getMutableClientRect(element) {\n    const clientRect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `ClientRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: clientRect.top,\n        right: clientRect.right,\n        bottom: clientRect.bottom,\n        left: clientRect.left,\n        width: clientRect.width,\n        height: clientRect.height\n    };\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param clientRect `ClientRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustClientRect(clientRect, top, left) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a ClientRect.\n * @param rect ClientRect to check against.\n * @param threshold Threshold around the ClientRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\nfunction isPointerNearClientRect(rect, threshold, pointerX, pointerY) {\n    const { top, right, bottom, left, width, height } = rect;\n    const xThreshold = width * threshold;\n    const yThreshold = height * threshold;\n    return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n        pointerX > left - xThreshold && pointerX < right + xThreshold;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\nclass ParentPositionTracker {\n    constructor(_document, _viewportRuler) {\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        /** Cached positions of the scrollable parent elements. */\n        this.positions = new Map();\n    }\n    /** Clears the cached positions. */\n    clear() {\n        this.positions.clear();\n    }\n    /** Caches the positions. Should be called at the beginning of a drag sequence. */\n    cache(elements) {\n        this.clear();\n        this.positions.set(this._document, {\n            scrollPosition: this._viewportRuler.getViewportScrollPosition(),\n        });\n        elements.forEach(element => {\n            this.positions.set(element, {\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                clientRect: getMutableClientRect(element)\n            });\n        });\n    }\n    /** Handles scrolling while a drag is taking place. */\n    handleScroll(event) {\n        const target = _getEventTarget(event);\n        const cachedPosition = this.positions.get(target);\n        if (!cachedPosition) {\n            return null;\n        }\n        // Used when figuring out whether an element is inside the scroll parent. If the scrolled\n        // parent is the `document`, we use the `documentElement`, because IE doesn't support\n        // `contains` on the `document`.\n        const scrolledParentNode = target === this._document ? target.documentElement : target;\n        const scrollPosition = cachedPosition.scrollPosition;\n        let newTop;\n        let newLeft;\n        if (target === this._document) {\n            const viewportScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            newTop = viewportScrollPosition.top;\n            newLeft = viewportScrollPosition.left;\n        }\n        else {\n            newTop = target.scrollTop;\n            newLeft = target.scrollLeft;\n        }\n        const topDifference = scrollPosition.top - newTop;\n        const leftDifference = scrollPosition.left - newLeft;\n        // Go through and update the cached positions of the scroll\n        // parents that are inside the element that was scrolled.\n        this.positions.forEach((position, node) => {\n            if (position.clientRect && target !== node && scrolledParentNode.contains(node)) {\n                adjustClientRect(position.clientRect, topDifference, leftDifference);\n            }\n        });\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n        return { top: topDifference, left: leftDifference };\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node) {\n    const clone = node.cloneNode(true);\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    const nodeName = node.nodeName.toLowerCase();\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    if (nodeName === 'canvas') {\n        transferCanvasData(node, clone);\n    }\n    else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n        transferInputData(node, clone);\n    }\n    transferData('canvas', node, clone, transferCanvasData);\n    transferData('input, textarea, select', node, clone, transferInputData);\n    return clone;\n}\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\nfunction transferData(selector, node, clone, callback) {\n    const descendantElements = node.querySelectorAll(selector);\n    if (descendantElements.length) {\n        const cloneElements = clone.querySelectorAll(selector);\n        for (let i = 0; i < descendantElements.length; i++) {\n            callback(descendantElements[i], cloneElements[i]);\n        }\n    }\n}\n// Counter for unique cloned radio button names.\nlet cloneUniqueId = 0;\n/** Transfers the data of one input element to another. */\nfunction transferInputData(source, clone) {\n    // Browsers throw an error when assigning the value of a file input programmatically.\n    if (clone.type !== 'file') {\n        clone.value = source.value;\n    }\n    // Radio button `name` attributes must be unique for radio button groups\n    // otherwise original radio buttons can lose their checked state\n    // once the clone is inserted in the DOM.\n    if (clone.type === 'radio' && clone.name) {\n        clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\n    }\n}\n/** Transfers the data of one canvas element to another. */\nfunction transferCanvasData(source, clone) {\n    const context = clone.getContext('2d');\n    if (context) {\n        // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n        // We can't do much about it so just ignore the error.\n        try {\n            context.drawImage(source, 0, 0);\n        }\n        catch (_a) { }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/** Inline styles to be set as `!important` while dragging. */\nconst dragImportantProperties = new Set([\n    // Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n    'position'\n]);\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\nclass DragRef {\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /** CSS `transform` that is applied to the element while it's being dragged. */\n        this._activeTransform = { x: 0, y: 0 };\n        /**\n         * Whether the dragging sequence has been started. Doesn't\n         * necessarily mean that the element has been moved.\n         */\n        this._hasStartedDragging = false;\n        /** Emits when the item is being moved. */\n        this._moveEvents = new Subject();\n        /** Subscription to pointer movement events. */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /** Subscription to the event that is dispatched when the user lifts their pointer. */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being scrolled. */\n        this._scrollSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being resized. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Cached reference to the boundary element. */\n        this._boundaryElement = null;\n        /** Whether the native dragging interactions have been enabled on the root element. */\n        this._nativeInteractionsEnabled = true;\n        /** Elements that can be used to drag the draggable item. */\n        this._handles = [];\n        /** Registered handles that are currently disabled. */\n        this._disabledHandles = new Set();\n        /** Layout direction of the item. */\n        this._direction = 'ltr';\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /** Emits as the drag sequence is being prepared. */\n        this.beforeStarted = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new Subject();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new Subject();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new Subject();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new Subject();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new Subject();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = this._moveEvents;\n        /** Handler for the `mousedown`/`touchstart` events. */\n        this._pointerDown = (event) => {\n            this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (this._handles.length) {\n                const targetHandle = this._handles.find(handle => {\n                    const target = _getEventTarget(event);\n                    return !!target && (target === handle || handle.contains(target));\n                });\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!this.disabled) {\n                this._initializeDragSequence(this._rootElement, event);\n            }\n        };\n        /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n        this._pointerMove = (event) => {\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            if (!this._hasStartedDragging) {\n                const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n                const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n                const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (isOverThreshold) {\n                    const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                    const container = this._dropContainer;\n                    if (!isDelayElapsed) {\n                        this._endDragSequence(event);\n                        return;\n                    }\n                    // Prevent other drag sequences from starting while something in the container is still\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\n                    // and can cause errors, because some elements might still be moving around.\n                    if (!container || (!container.isDragging() && !container.isReceiving())) {\n                        // Prevent the default action as soon as the dragging sequence is considered as\n                        // \"started\" since waiting for the next event can allow the device to begin scrolling.\n                        event.preventDefault();\n                        this._hasStartedDragging = true;\n                        this._ngZone.run(() => this._startDragSequence(event));\n                    }\n                }\n                return;\n            }\n            // We only need the preview dimensions if we have a boundary element.\n            if (this._boundaryElement) {\n                // Cache the preview element rect if we haven't cached it already or if\n                // we cached it too early before the element dimensions were computed.\n                if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n                    this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\n                }\n            }\n            // We prevent the default action down here so that we know that dragging has started. This is\n            // important for touch devices where doing this too early can unnecessarily block scrolling,\n            // if there's a dragging delay.\n            event.preventDefault();\n            const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n            this._hasMoved = true;\n            this._lastKnownPointerPosition = pointerPosition;\n            this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (this._dropContainer) {\n                this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n            }\n            else {\n                const activeTransform = this._activeTransform;\n                activeTransform.x =\n                    constrainedPointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n                activeTransform.y =\n                    constrainedPointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n                this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n                // Apply transform as attribute if dragging and svg element to work for IE\n                if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n                    const appliedTransform = `translate(${activeTransform.x} ${activeTransform.y})`;\n                    this._rootElement.setAttribute('transform', appliedTransform);\n                }\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (this._moveEvents.observers.length) {\n                this._ngZone.run(() => {\n                    this._moveEvents.next({\n                        source: this,\n                        pointerPosition: constrainedPointerPosition,\n                        event,\n                        distance: this._getDragDistance(constrainedPointerPosition),\n                        delta: this._pointerDirectionDelta\n                    });\n                });\n            }\n        };\n        /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n        this._pointerUp = (event) => {\n            this._endDragSequence(event);\n        };\n        this.withRootElement(element).withParent(_config.parentDragRef || null);\n        this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    set disabled(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._toggleNativeDragInteractions();\n            this._handles.forEach(handle => toggleNativeDragInteractions(handle, newValue));\n        }\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     */\n    getVisibleElement() {\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    }\n    /** Registers the handles that can be used to drag the element. */\n    withHandles(handles) {\n        this._handles = handles.map(handle => coerceElement(handle));\n        this._handles.forEach(handle => toggleNativeDragInteractions(handle, this.disabled));\n        this._toggleNativeDragInteractions();\n        // Delete any lingering disabled handles that may have been destroyed. Note that we re-create\n        // the set, rather than iterate over it and filter out the destroyed handles, because while\n        // the ES spec allows for sets to be modified while they're being iterated over, some polyfills\n        // use an array internally which may throw an error.\n        const disabledHandles = new Set();\n        this._disabledHandles.forEach(handle => {\n            if (this._handles.indexOf(handle) > -1) {\n                disabledHandles.add(handle);\n            }\n        });\n        this._disabledHandles = disabledHandles;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @param template Template that from which to stamp out the preview.\n     */\n    withPreviewTemplate(template) {\n        this._previewTemplate = template;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @param template Template that from which to stamp out the placeholder.\n     */\n    withPlaceholderTemplate(template) {\n        this._placeholderTemplate = template;\n        return this;\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     */\n    withRootElement(rootElement) {\n        const element = coerceElement(rootElement);\n        if (element !== this._rootElement) {\n            if (this._rootElement) {\n                this._removeRootElementListeners(this._rootElement);\n            }\n            this._ngZone.runOutsideAngular(() => {\n                element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n                element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n            });\n            this._initialTransform = undefined;\n            this._rootElement = element;\n        }\n        if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n            this._ownerSVGElement = this._rootElement.ownerSVGElement;\n        }\n        return this;\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     */\n    withBoundaryElement(boundaryElement) {\n        this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        this._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            this._resizeSubscription = this._viewportRuler\n                .change(10)\n                .subscribe(() => this._containInsideBoundaryOnResize());\n        }\n        return this;\n    }\n    /** Sets the parent ref that the ref is nested in.  */\n    withParent(parent) {\n        this._parentDragRef = parent;\n        return this;\n    }\n    /** Removes the dragging functionality from the DOM element. */\n    dispose() {\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            removeNode(this._rootElement);\n        }\n        removeNode(this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeSubscriptions();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._parentPositions.clear();\n        this._boundaryElement = this._rootElement = this._ownerSVGElement = this._placeholderTemplate =\n            this._previewTemplate = this._anchor = this._parentDragRef = null;\n    }\n    /** Checks whether the element is currently being dragged. */\n    isDragging() {\n        return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param handle Handle element that should be disabled.\n     */\n    disableHandle(handle) {\n        if (!this._disabledHandles.has(handle) && this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n            toggleNativeDragInteractions(handle, true);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param handle Handle element to be enabled.\n     */\n    enableHandle(handle) {\n        if (this._disabledHandles.has(handle)) {\n            this._disabledHandles.delete(handle);\n            toggleNativeDragInteractions(handle, this.disabled);\n        }\n    }\n    /** Sets the layout direction of the draggable item. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /** Sets the container that the item is part of. */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform.x = value.x;\n        this._passiveTransform.y = value.y;\n        if (!this._dropContainer) {\n            this._applyRootElementTransform(value.x, value.y);\n        }\n        return this;\n    }\n    /**\n     * Sets the container into which to insert the preview element.\n     * @param value Container into which to insert the preview.\n     */\n    withPreviewContainer(value) {\n        this._previewContainer = value;\n        return this;\n    }\n    /** Updates the item's sort order based on the last-known pointer position. */\n    _sortFromLastPointerPosition() {\n        const position = this._lastKnownPointerPosition;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n        }\n    }\n    /** Unsubscribes from the global subscriptions. */\n    _removeSubscriptions() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n    }\n    /** Destroys the preview element and its ViewRef. */\n    _destroyPreview() {\n        if (this._preview) {\n            removeNode(this._preview);\n        }\n        if (this._previewRef) {\n            this._previewRef.destroy();\n        }\n        this._preview = this._previewRef = null;\n    }\n    /** Destroys the placeholder element and its ViewRef. */\n    _destroyPlaceholder() {\n        if (this._placeholder) {\n            removeNode(this._placeholder);\n        }\n        if (this._placeholderRef) {\n            this._placeholderRef.destroy();\n        }\n        this._placeholder = this._placeholderRef = null;\n    }\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @param event Browser event object that ended the sequence.\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeSubscriptions();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging) {\n            return;\n        }\n        this.released.next({ source: this });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then(() => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            });\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run(() => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(pointerPosition),\n                    dropPoint: pointerPosition\n                });\n            });\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /** Starts the dragging sequence. */\n    _startDragSequence(event) {\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        const dropContainer = this._dropContainer;\n        if (dropContainer) {\n            const element = this._rootElement;\n            const parent = element.parentNode;\n            const placeholder = this._placeholder = this._createPlaceholderElement();\n            const anchor = this._anchor = this._anchor || this._document.createComment('');\n            // Needs to happen before the root element is moved.\n            const shadowRoot = this._getShadowRoot();\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent.insertBefore(anchor, element);\n            // There's no risk of transforms stacking when inside a drop container so\n            // we can keep the initial transform up to date any time dragging starts.\n            this._initialTransform = element.style.transform || '';\n            // Create the preview after the initial transform has\n            // been cached, because it can be affected by the transform.\n            this._preview = this._createPreviewElement();\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            toggleVisibility(element, false, dragImportantProperties);\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            this._getPreviewInsertionPoint(parent, shadowRoot).appendChild(this._preview);\n            this.started.next({ source: this }); // Emit before notifying the container.\n            dropContainer.start();\n            this._initialContainer = dropContainer;\n            this._initialIndex = dropContainer.getItemIndex(this);\n        }\n        else {\n            this.started.next({ source: this });\n            this._initialContainer = this._initialIndex = undefined;\n        }\n        // Important to run after we've called `start` on the parent container\n        // so that it has had time to resolve its scrollable parents.\n        this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @param referenceElement Element that started the drag sequence.\n     * @param event Browser event object that started the sequence.\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Stop propagation if the item is inside another\n        // draggable so we don't start multiple drag sequences.\n        if (this._parentDragRef) {\n            event.stopPropagation();\n        }\n        const isDragging = this.isDragging();\n        const isTouchSequence = isTouchEvent(event);\n        const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n        const rootElement = this._rootElement;\n        const target = _getEventTarget(event);\n        const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        const isFakeEvent = isTouchSequence ? isFakeTouchstartFromScreenReader(event) :\n            isFakeMousedownFromScreenReader(event);\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (target && target.draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent || isFakeEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor || '';\n            rootElement.style.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasStartedDragging = this._hasMoved = false;\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeSubscriptions();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(scrollEvent => this._updateOnScroll(scrollEvent));\n        if (this._boundaryElement) {\n            this._boundaryRect = getMutableClientRect(this._boundaryElement);\n        }\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\n        // the same size as the root element, in which case we do know the size.\n        const previewTemplate = this._previewTemplate;\n        this._pickupPositionInElement = previewTemplate && previewTemplate.template &&\n            !previewTemplate.matchSize ? { x: 0, y: 0 } :\n            this._getPointerPositionInElement(referenceElement, event);\n        const pointerPosition = this._pickupPositionOnPage = this._lastKnownPointerPosition =\n            this._getPointerPositionOnPage(event);\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        toggleVisibility(this._rootElement, true, dragImportantProperties);\n        this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._boundaryRect = this._previewRect = this._initialTransform = undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run(() => {\n            const container = this._dropContainer;\n            const currentIndex = container.getItemIndex(this);\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            const distance = this._getDragDistance(pointerPosition);\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance, dropPoint: pointerPosition });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialIndex,\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance,\n                dropPoint: pointerPosition\n            });\n            container.drop(this, currentIndex, this._initialIndex, this._initialContainer, isPointerOverContainer, distance, pointerPosition);\n            this._dropContainer = this._initialContainer;\n        });\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     */\n    _updateActiveDropContainer({ x, y }, { x: rawX, y: rawY }) {\n        // Drop container that draggable has been moved into.\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer && this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run(() => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: this._dropContainer });\n                this._dropContainer.exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = newContainer;\n                this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\n                    // If we're re-entering the initial container and sorting is disabled,\n                    // put item the into its starting index to begin with.\n                    newContainer.sortingDisabled ? this._initialIndex : undefined);\n                this.entered.next({\n                    item: this,\n                    container: newContainer,\n                    currentIndex: newContainer.getItemIndex(this)\n                });\n            });\n        }\n        // Dragging may have been interrupted as a result of the events above.\n        if (this.isDragging()) {\n            this._dropContainer._startScrollingIfNecessary(rawX, rawY);\n            this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n            this._applyPreviewTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n        }\n    }\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     */\n    _createPreviewElement() {\n        const previewConfig = this._previewTemplate;\n        const previewClass = this.previewClass;\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        let preview;\n        if (previewTemplate && previewConfig) {\n            // Measure the element before we've inserted the preview\n            // since the insertion could throw off the measurement.\n            const rootRect = previewConfig.matchSize ? this._rootElement.getBoundingClientRect() : null;\n            const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n            viewRef.detectChanges();\n            preview = getRootNode(viewRef, this._document);\n            this._previewRef = viewRef;\n            if (previewConfig.matchSize) {\n                matchElementSize(preview, rootRect);\n            }\n            else {\n                preview.style.transform =\n                    getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n        }\n        else {\n            const element = this._rootElement;\n            preview = deepCloneNode(element);\n            matchElementSize(preview, element.getBoundingClientRect());\n            if (this._initialTransform) {\n                preview.style.transform = this._initialTransform;\n            }\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            'pointer-events': 'none',\n            // We have to reset the margin, because it can throw off positioning relative to the viewport.\n            'margin': '0',\n            'position': 'fixed',\n            'top': '0',\n            'left': '0',\n            'z-index': `${this._config.zIndex || 1000}`\n        }, dragImportantProperties);\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach(className => preview.classList.add(className));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @returns Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.classList.add('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._applyPreviewTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        const duration = getTransformTransitionDurationInMs(this._preview);\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular(() => {\n            return new Promise(resolve => {\n                const handler = ((event) => {\n                    var _a;\n                    if (!event || (_getEventTarget(event) === this._preview &&\n                        event.propertyName === 'transform')) {\n                        (_a = this._preview) === null || _a === void 0 ? void 0 : _a.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                });\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                const timeout = setTimeout(handler, duration * 1.5);\n                this._preview.addEventListener('transitionend', handler);\n            });\n        });\n    }\n    /** Creates an element that will be shown instead of the current element while dragging. */\n    _createPlaceholderElement() {\n        const placeholderConfig = this._placeholderTemplate;\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n            this._placeholderRef.detectChanges();\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @param referenceElement Element that initiated the dragging.\n     * @param event Event that initiated the dragging.\n     */\n    _getPointerPositionInElement(referenceElement, event) {\n        const elementRect = this._rootElement.getBoundingClientRect();\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        const scrollPosition = this._getViewportScrollPosition();\n        const x = point.pageX - referenceRect.left - scrollPosition.left;\n        const y = point.pageY - referenceRect.top - scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y\n        };\n    }\n    /** Determines the point of the page that was touched by the user. */\n    _getPointerPositionOnPage(event) {\n        const scrollPosition = this._getViewportScrollPosition();\n        const point = isTouchEvent(event) ?\n            // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n            // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n            // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n            // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n            // throwing an error. The value returned here will be incorrect, but since this only\n            // breaks inside a developer tool and the value is only used for secondary information,\n            // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n            (event.touches[0] || event.changedTouches[0] || { pageX: 0, pageY: 0 }) : event;\n        const x = point.pageX - scrollPosition.left;\n        const y = point.pageY - scrollPosition.top;\n        // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n        // coordinate system\n        if (this._ownerSVGElement) {\n            const svgMatrix = this._ownerSVGElement.getScreenCTM();\n            if (svgMatrix) {\n                const svgPoint = this._ownerSVGElement.createSVGPoint();\n                svgPoint.x = x;\n                svgPoint.y = y;\n                return svgPoint.matrixTransform(svgMatrix.inverse());\n            }\n        }\n        return { x, y };\n    }\n    /** Gets the pointer position on the page, accounting for any position constraints. */\n    _getConstrainedPointerPosition(point) {\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        let { x, y } = this.constrainPosition ? this.constrainPosition(point, this) : point;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            y = this._pickupPositionOnPage.y;\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            x = this._pickupPositionOnPage.x;\n        }\n        if (this._boundaryRect) {\n            const { x: pickupX, y: pickupY } = this._pickupPositionInElement;\n            const boundaryRect = this._boundaryRect;\n            const previewRect = this._previewRect;\n            const minY = boundaryRect.top + pickupY;\n            const maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n            const minX = boundaryRect.left + pickupX;\n            const maxX = boundaryRect.right - (previewRect.width - pickupX);\n            x = clamp$1(x, minX, maxX);\n            y = clamp$1(y, minY, maxY);\n        }\n        return { x, y };\n    }\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        const delta = this._pointerDirectionDelta;\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /** Toggles the native drag interactions, based on how many handles are registered. */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /** Removes the manually-added event listeners from the root element. */\n    _removeRootElementListeners(element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyRootElementTransform(x, y) {\n        const transform = getTransform(x, y);\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        // Should be excluded none because none + translate3d(x, y, x) is invalid css\n        if (this._initialTransform == null) {\n            this._initialTransform = this._rootElement.style.transform\n                && this._rootElement.style.transform != 'none'\n                ? this._rootElement.style.transform\n                : '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        this._rootElement.style.transform = combineTransforms(transform, this._initialTransform);\n    }\n    /**\n     * Applies a `transform` to the preview, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyPreviewTransform(x, y) {\n        var _a;\n        // Only apply the initial transform if the preview is a clone of the original element, otherwise\n        // it could be completely different and the transform might not make sense anymore.\n        const initialTransform = ((_a = this._previewTemplate) === null || _a === void 0 ? void 0 : _a.template) ? undefined : this._initialTransform;\n        const transform = getTransform(x, y);\n        this._preview.style.transform = combineTransforms(transform, initialTransform);\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @param currentPosition Current position of the user's pointer.\n     */\n    _getDragDistance(currentPosition) {\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        const elementRect = this._rootElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        const topOverflow = boundaryRect.top - elementRect.top;\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /** Gets the drag start delay, based on the event type. */\n    _getDragStartDelay(event) {\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n    /** Updates the internal state of the draggable element when scrolling has occurred. */\n    _updateOnScroll(event) {\n        const scrollDifference = this._parentPositions.handleScroll(event);\n        if (scrollDifference) {\n            const target = _getEventTarget(event);\n            // ClientRect dimensions are based on the scroll position of the page and its parent node so\n            // we have to update the cached boundary ClientRect if the user has scrolled. Check for\n            // the `document` specifically since IE doesn't support `contains` on it.\n            if (this._boundaryRect && (target === this._document ||\n                (target !== this._boundaryElement && target.contains(this._boundaryElement)))) {\n                adjustClientRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n            }\n            this._pickupPositionOnPage.x += scrollDifference.left;\n            this._pickupPositionOnPage.y += scrollDifference.top;\n            // If we're in free drag mode, we have to update the active transform, because\n            // it isn't relative to the viewport like the preview inside a drop list.\n            if (!this._dropContainer) {\n                this._activeTransform.x -= scrollDifference.left;\n                this._activeTransform.y -= scrollDifference.top;\n                this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n            }\n        }\n    }\n    /** Gets the scroll position of the viewport. */\n    _getViewportScrollPosition() {\n        const cachedPosition = this._parentPositions.positions.get(this._document);\n        return cachedPosition ? cachedPosition.scrollPosition :\n            this._viewportRuler.getViewportScrollPosition();\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (this._cachedShadowRoot === undefined) {\n            this._cachedShadowRoot = _getShadowRoot(this._rootElement);\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Gets the element into which the drag preview should be inserted. */\n    _getPreviewInsertionPoint(initialParent, shadowRoot) {\n        const previewContainer = this._previewContainer || 'global';\n        if (previewContainer === 'parent') {\n            return initialParent;\n        }\n        if (previewContainer === 'global') {\n            const documentRef = this._document;\n            // We can't use the body if the user is in fullscreen mode,\n            // because the preview will render under the fullscreen element.\n            // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n            return shadowRoot ||\n                documentRef.fullscreenElement ||\n                documentRef.webkitFullscreenElement ||\n                documentRef.mozFullScreenElement ||\n                documentRef.msFullscreenElement ||\n                documentRef.body;\n        }\n        return coerceElement(previewContainer);\n    }\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp$1(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/**\n * Helper to remove a node from the DOM and to do all the necessary null checks.\n * @param node Node to be removed.\n */\nfunction removeNode(node) {\n    if (node && node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\nfunction getRootNode(viewRef, _document) {\n    const rootNodes = viewRef.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n        return rootNodes[0];\n    }\n    const wrapper = _document.createElement('div');\n    rootNodes.forEach(node => wrapper.appendChild(node));\n    return wrapper;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\nfunction matchElementSize(target, sourceRect) {\n    target.style.width = `${sourceRect.width}px`;\n    target.style.height = `${sourceRect.height}px`;\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    const from = clamp(fromIndex, array.length - 1);\n    const to = clamp(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    const target = array[from];\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const from = clamp(currentIndex, currentArray.length - 1);\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\nclass DropListRef {\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        /** Whether starting a dragging sequence from this container is disabled. */\n        this.disabled = false;\n        /** Whether sorting items within the list is disabled. */\n        this.sortingDisabled = false;\n        /**\n         * Whether auto-scrolling the view when the user\n         * moves their pointer close to the edges is disabled.\n         */\n        this.autoScrollDisabled = false;\n        /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n        this.autoScrollStep = 2;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Functions that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits right before dragging has started. */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new Subject();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new Subject();\n        /** Whether an item in the list is being dragged. */\n        this._isDragging = false;\n        /** Cache of the dimensions of all the items inside the container. */\n        this._itemPositions = [];\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n         * the pointer was moving in when the swap occured and whether the user's pointer continued to\n         * overlap with the swapped item after the swapping occurred.\n         */\n        this._previousSwap = { drag: null, delta: 0, overlaps: false };\n        /** Draggable items in the container. */\n        this._draggables = [];\n        /** Drop lists that are connected to the current one. */\n        this._siblings = [];\n        /** Direction in which the list is oriented. */\n        this._orientation = 'vertical';\n        /** Connected siblings that currently have a dragged item. */\n        this._activeSiblings = new Set();\n        /** Layout direction of the drop list. */\n        this._direction = 'ltr';\n        /** Subscription to the window being scrolled. */\n        this._viewportScrollSubscription = Subscription.EMPTY;\n        /** Vertical direction in which the list is currently scrolling. */\n        this._verticalScrollDirection = 0 /* NONE */;\n        /** Horizontal direction in which the list is currently scrolling. */\n        this._horizontalScrollDirection = 0 /* NONE */;\n        /** Used to signal to the current auto-scroll sequence when to stop. */\n        this._stopScrollTimers = new Subject();\n        /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n        this._cachedShadowRoot = null;\n        /** Starts the interval that'll auto-scroll the element. */\n        this._startScrollInterval = () => {\n            this._stopScrolling();\n            interval(0, animationFrameScheduler)\n                .pipe(takeUntil(this._stopScrollTimers))\n                .subscribe(() => {\n                const node = this._scrollNode;\n                const scrollStep = this.autoScrollStep;\n                if (this._verticalScrollDirection === 1 /* UP */) {\n                    incrementVerticalScroll(node, -scrollStep);\n                }\n                else if (this._verticalScrollDirection === 2 /* DOWN */) {\n                    incrementVerticalScroll(node, scrollStep);\n                }\n                if (this._horizontalScrollDirection === 1 /* LEFT */) {\n                    incrementHorizontalScroll(node, -scrollStep);\n                }\n                else if (this._horizontalScrollDirection === 2 /* RIGHT */) {\n                    incrementHorizontalScroll(node, scrollStep);\n                }\n            });\n        };\n        this.element = coerceElement(element);\n        this._document = _document;\n        this.withScrollableParents([this.element]);\n        _dragDropRegistry.registerDropContainer(this);\n        this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n    }\n    /** Removes the drop list functionality from the DOM element. */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._viewportScrollSubscription.unsubscribe();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = null;\n        this._parentPositions.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /** Whether an item from this list is currently being dragged. */\n    isDragging() {\n        return this._isDragging;\n    }\n    /** Starts dragging an item. */\n    start() {\n        this._draggingStarted();\n        this._notifyReceivingSiblings();\n    }\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        this._draggingStarted();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        let newIndex;\n        if (index == null) {\n            newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\n            if (newIndex === -1) {\n                // We use the coordinates of where the item entered the drop\n                // zone to figure out at which index it should be inserted.\n                newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n            }\n        }\n        else {\n            newIndex = index;\n        }\n        const activeDraggables = this._activeDraggables;\n        const currentIndex = activeDraggables.indexOf(item);\n        const placeholder = item.getPlaceholderElement();\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            const element = newPositionReference.getRootElement();\n            element.parentElement.insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else if (this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n            const reference = activeDraggables[0].getRootElement();\n            reference.parentNode.insertBefore(placeholder, reference);\n            activeDraggables.unshift(item);\n        }\n        else {\n            coerceElement(this.element).appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that the positions were already cached when we called `start` above,\n        // but we need to refresh them since the amount of items has changed and also parent rects.\n        this._cacheItemPositions();\n        this._cacheParentPositions();\n        // Notify siblings at the end so that the item has been inserted into the `activeDraggables`.\n        this._notifyReceivingSiblings();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousIndex Index of the item when dragging started.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param distance Distance the user has dragged since the start of the dragging sequence.\n     */\n    drop(item, currentIndex, previousIndex, previousContainer, isPointerOverContainer, distance, dropPoint) {\n        this._reset();\n        this.dropped.next({\n            item,\n            currentIndex,\n            previousIndex,\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance,\n            dropPoint\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @param items Items that are a part of this list.\n     */\n    withItems(items) {\n        const previousItems = this._draggables;\n        this._draggables = items;\n        items.forEach(item => item._withDropContainer(this));\n        if (this.isDragging()) {\n            const draggedItems = previousItems.filter(item => item.isDragging());\n            // If all of the items being dragged were removed\n            // from the list, abort the current drag sequence.\n            if (draggedItems.every(item => items.indexOf(item) === -1)) {\n                this._reset();\n            }\n            else {\n                this._cacheItems();\n            }\n        }\n        return this;\n    }\n    /** Sets the layout direction of the drop list. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @param connectedTo Other containers that the current containers should be connected to.\n     */\n    connectedTo(connectedTo) {\n        this._siblings = connectedTo.slice();\n        return this;\n    }\n    /**\n     * Sets the orientation of the container.\n     * @param orientation New orientation for the container.\n     */\n    withOrientation(orientation) {\n        this._orientation = orientation;\n        return this;\n    }\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @param elements Elements that can be scrolled.\n     */\n    withScrollableParents(elements) {\n        const element = coerceElement(this.element);\n        // We always allow the current element to be scrollable\n        // so we need to ensure that it's in the array.\n        this._scrollableElements =\n            elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n        return this;\n    }\n    /** Gets the scrollable parents that are registered with this drop container. */\n    getScrollableParents() {\n        return this._scrollableElements;\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n    getItemIndex(item) {\n        if (!this._isDragging) {\n            return this._draggables.indexOf(item);\n        }\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        const items = this._orientation === 'horizontal' && this._direction === 'rtl' ?\n            this._itemPositions.slice().reverse() : this._itemPositions;\n        return findIndex(items, currentItem => currentItem.drag === item);\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled || !this._clientRect ||\n            !isPointerNearClientRect(this._clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n            return;\n        }\n        const siblings = this._itemPositions;\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return;\n        }\n        const isHorizontal = this._orientation === 'horizontal';\n        const currentIndex = findIndex(siblings, currentItem => currentItem.drag === item);\n        const siblingAtNewPosition = siblings[newIndex];\n        const currentPosition = siblings[currentIndex].clientRect;\n        const newPosition = siblingAtNewPosition.clientRect;\n        const delta = currentIndex > newIndex ? 1 : -1;\n        // How many pixels the item's placeholder should be offset.\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        this.sorted.next({\n            previousIndex: currentIndex,\n            currentIndex: newIndex,\n            container: this,\n            item\n        });\n        siblings.forEach((sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            const isDraggedItem = sibling.drag === item;\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = combineTransforms(`translate3d(${Math.round(sibling.offset)}px, 0, 0)`, sibling.initialTransform);\n                adjustClientRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = combineTransforms(`translate3d(0, ${Math.round(sibling.offset)}px, 0)`, sibling.initialTransform);\n                adjustClientRect(sibling.clientRect, offset, 0);\n            }\n        });\n        // Note that it's important that we do this after the client rects have been adjusted.\n        this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param pointerX User's pointer position along the x axis.\n     * @param pointerY User's pointer position along the y axis.\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        let scrollNode;\n        let verticalScrollDirection = 0 /* NONE */;\n        let horizontalScrollDirection = 0 /* NONE */;\n        // Check whether we should start scrolling any of the parent containers.\n        this._parentPositions.positions.forEach((position, element) => {\n            // We have special handling for the `document` below. Also this would be\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\n            if (element === this._document || !position.clientRect || scrollNode) {\n                return;\n            }\n            if (isPointerNearClientRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n                [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, pointerX, pointerY);\n                if (verticalScrollDirection || horizontalScrollDirection) {\n                    scrollNode = element;\n                }\n            }\n        });\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            const clientRect = { width, height, top: 0, right: width, bottom: height, left: 0 };\n            verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection ||\n            horizontalScrollDirection !== this._horizontalScrollDirection ||\n            scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /** Stops any currently-running auto-scroll sequences. */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /** Starts the dragging sequence within the list. */\n    _draggingStarted() {\n        const styles = coerceElement(this.element).style;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n        // scrolling. The browser seems to round the value based on the snapping points which means\n        // that we can't increment/decrement the scroll position.\n        this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n        styles.scrollSnapType = styles.msScrollSnapType = 'none';\n        this._cacheItems();\n        this._viewportScrollSubscription.unsubscribe();\n        this._listenToScrollEvents();\n    }\n    /** Caches the positions of the configured scrollable parents. */\n    _cacheParentPositions() {\n        const element = coerceElement(this.element);\n        this._parentPositions.cache(this._scrollableElements);\n        // The list element is always in the `scrollableElements`\n        // so we can take advantage of the cached `ClientRect`.\n        this._clientRect = this._parentPositions.positions.get(element).clientRect;\n    }\n    /** Refreshes the position cache of the items and sibling containers. */\n    _cacheItemPositions() {\n        const isHorizontal = this._orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables.map(drag => {\n            const elementToMeasure = drag.getVisibleElement();\n            return {\n                drag,\n                offset: 0,\n                initialTransform: elementToMeasure.style.transform || '',\n                clientRect: getMutableClientRect(elementToMeasure),\n            };\n        }).sort((a, b) => {\n            return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                a.clientRect.top - b.clientRect.top;\n        });\n    }\n    /** Resets the container to its initial state. */\n    _reset() {\n        this._isDragging = false;\n        const styles = coerceElement(this.element).style;\n        styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables.forEach(item => {\n            var _a;\n            const rootElement = item.getRootElement();\n            if (rootElement) {\n                const initialTransform = (_a = this._itemPositions\n                    .find(current => current.drag === item)) === null || _a === void 0 ? void 0 : _a.initialTransform;\n                rootElement.style.transform = initialTransform || '';\n            }\n        });\n        this._siblings.forEach(sibling => sibling._stopReceiving(this));\n        this._activeDraggables = [];\n        this._itemPositions = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._previousSwap.overlaps = false;\n        this._stopScrolling();\n        this._viewportScrollSubscription.unsubscribe();\n        this._parentPositions.clear();\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @param currentIndex Index of the item currently being dragged.\n     * @param siblings All of the items in the list.\n     * @param delta Direction in which the user is moving.\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        const currentPosition = siblings[currentIndex].clientRect;\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            const start = isHorizontal ? 'left' : 'top';\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @param currentPosition Current position of the item.\n     * @param newPosition Position of the item where the current item should be moved.\n     * @param delta Direction in which the user is moving.\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        let itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n            newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\n                newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Checks if pointer is entering in the first position\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _shouldEnterAsFirstChild(pointerX, pointerY) {\n        if (!this._activeDraggables.length) {\n            return false;\n        }\n        const itemPositions = this._itemPositions;\n        const isHorizontal = this._orientation === 'horizontal';\n        // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n        // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n        const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n        if (reversed) {\n            const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n            return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n        }\n        else {\n            const firstItemRect = itemPositions[0].clientRect;\n            return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        const index = findIndex(this._itemPositions, ({ drag, clientRect }, _, array) => {\n            if (drag === item) {\n                // If there's only one item left in the container, it must be\n                // the dragged item itself so we use it as a reference.\n                return array.length < 2;\n            }\n            if (delta) {\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, their cursor hasn't left\n                // the item after we made the swap, and they didn't change the direction in which they're\n                // dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag && this._previousSwap.overlaps &&\n                    direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal ?\n                // Round these down since most browsers report client rects with\n                // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right) :\n                pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n        });\n        return (index === -1 || !this.sortPredicate(index, item, this)) ? -1 : index;\n    }\n    /** Caches the current items in the list and their positions. */\n    _cacheItems() {\n        this._activeDraggables = this._draggables.slice();\n        this._cacheItemPositions();\n        this._cacheParentPositions();\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n    _isOverContainer(x, y) {\n        return this._clientRect != null && isInsideClientRect(this._clientRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param item Item that is being dragged into the list.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _canReceive(item, x, y) {\n        if (!this._clientRect || !isInsideClientRect(this._clientRect, x, y) ||\n            !this.enterPredicate(item, this)) {\n            return false;\n        }\n        const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        const nativeElement = coerceElement(this.element);\n        // The `ClientRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param sibling Sibling in which dragging has started.\n     */\n    _startReceiving(sibling, items) {\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling) && items.every(item => {\n            // Note that we have to add an exception to the `enterPredicate` for items that started off\n            // in this drop list. The drag ref has logic that allows an item to return to its initial\n            // container, if it has left the initial container and none of the connected containers\n            // allow it to enter. See `DragRef._updateActiveDropContainer` for more context.\n            return this.enterPredicate(item, this) || this._draggables.indexOf(item) > -1;\n        })) {\n            activeSiblings.add(sibling);\n            this._cacheParentPositions();\n            this._listenToScrollEvents();\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param sibling Sibling whose dragging has stopped.\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(event => {\n            if (this.isDragging()) {\n                const scrollDifference = this._parentPositions.handleScroll(event);\n                if (scrollDifference) {\n                    // Since we know the amount that the user has scrolled we can shift all of the\n                    // client rectangles ourselves. This is cheaper than re-measuring everything and\n                    // we can avoid inconsistent behavior where we might be measuring the element before\n                    // its position has changed.\n                    this._itemPositions.forEach(({ clientRect }) => {\n                        adjustClientRect(clientRect, scrollDifference.top, scrollDifference.left);\n                    });\n                    // We need two loops for this, because we want all of the cached\n                    // positions to be up-to-date before we re-sort the item.\n                    this._itemPositions.forEach(({ drag }) => {\n                        if (this._dragDropRegistry.isDragging(drag)) {\n                            // We need to re-sort the item manually, because the pointer move\n                            // events won't be dispatched while the user is scrolling.\n                            drag._sortFromLastPointerPosition();\n                        }\n                    });\n                }\n            }\n            else if (this.isReceiving()) {\n                this._cacheParentPositions();\n            }\n        });\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            const shadowRoot = _getShadowRoot(coerceElement(this.element));\n            this._cachedShadowRoot = shadowRoot || this._document;\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Notifies any siblings that may potentially receive the item. */\n    _notifyReceivingSiblings() {\n        const draggedItems = this._activeDraggables.filter(item => item.isDragging());\n        this._siblings.forEach(sibling => sibling._startReceiving(this, draggedItems));\n    }\n}\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.findIndex` which isn't part of the standard Google typings.\n * @param array Array in which to look for matches.\n * @param predicate Function used to determine whether an item is a match.\n */\nfunction findIndex(array, predicate) {\n    for (let i = 0; i < array.length; i++) {\n        if (predicate(array[i], i, array)) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * Increments the vertical scroll position of a node.\n * @param node Node whose scroll position should change.\n * @param amount Amount of pixels that the `node` should be scrolled.\n */\nfunction incrementVerticalScroll(node, amount) {\n    if (node === window) {\n        node.scrollBy(0, amount);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        node.scrollTop += amount;\n    }\n}\n/**\n * Increments the horizontal scroll position of a node.\n * @param node Node whose scroll position should change.\n * @param amount Amount of pixels that the `node` should be scrolled.\n */\nfunction incrementHorizontalScroll(node, amount) {\n    if (node === window) {\n        node.scrollBy(amount, 0);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        node.scrollLeft += amount;\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return 1 /* UP */;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return 2 /* DOWN */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return 1 /* LEFT */;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return 2 /* RIGHT */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    let verticalScrollDirection = 0 /* NONE */;\n    let horizontalScrollDirection = 0 /* NONE */;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        const scrollTop = element.scrollTop;\n        if (computedVertical === 1 /* UP */) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = 1 /* UP */;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = 2 /* DOWN */;\n        }\n    }\n    if (computedHorizontal) {\n        const scrollLeft = element.scrollLeft;\n        if (computedHorizontal === 1 /* LEFT */) {\n            if (scrollLeft > 0) {\n                horizontalScrollDirection = 1 /* LEFT */;\n            }\n        }\n        else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n            horizontalScrollDirection = 2 /* RIGHT */;\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true\n});\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\nclass DragDropRegistry {\n    constructor(_ngZone, _document) {\n        this._ngZone = _ngZone;\n        /** Registered drop container instances. */\n        this._dropInstances = new Set();\n        /** Registered drag item instances. */\n        this._dragInstances = new Set();\n        /** Drag item instances that are currently being dragged. */\n        this._activeDragInstances = [];\n        /** Keeps track of the event listeners that we've bound to the `document`. */\n        this._globalListeners = new Map();\n        /**\n         * Predicate function to check if an item is being dragged.  Moved out into a property,\n         * because it'll be called a lot and we don't want to create a new function every time.\n         */\n        this._draggingPredicate = (item) => item.isDragging();\n        /**\n         * Emits the `touchmove` or `mousemove` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerMove = new Subject();\n        /**\n         * Emits the `touchend` or `mouseup` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerUp = new Subject();\n        /**\n         * Emits when the viewport has been scrolled while the user is dragging an item.\n         * @deprecated To be turned into a private member. Use the `scrolled` method instead.\n         * @breaking-change 13.0.0\n         */\n        this.scroll = new Subject();\n        /**\n         * Event listener that will prevent the default browser action while the user is dragging.\n         * @param event Event whose default action should be prevented.\n         */\n        this._preventDefaultWhileDragging = (event) => {\n            if (this._activeDragInstances.length > 0) {\n                event.preventDefault();\n            }\n        };\n        /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n        this._persistentTouchmoveListener = (event) => {\n            if (this._activeDragInstances.length > 0) {\n                // Note that we only want to prevent the default action after dragging has actually started.\n                // Usually this is the same time at which the item is added to the `_activeDragInstances`,\n                // but it could be pushed back if the user has set up a drag delay or threshold.\n                if (this._activeDragInstances.some(this._draggingPredicate)) {\n                    event.preventDefault();\n                }\n                this.pointerMove.next(event);\n            }\n        };\n        this._document = _document;\n    }\n    /** Adds a drop container to the registry. */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    }\n    /** Adds a drag item instance to the registry. */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular(() => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._document.addEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n            });\n        }\n    }\n    /** Removes a drop container from the registry. */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /** Removes a drag item instance from the registry. */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param drag Drag instance which is being dragged.\n     * @param event Event that initiated the dragging.\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances.indexOf(drag) > -1) {\n            return;\n        }\n        this._activeDragInstances.push(drag);\n        if (this._activeDragInstances.length === 1) {\n            const isTouchEvent = event.type.startsWith('touch');\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            this._globalListeners\n                .set(isTouchEvent ? 'touchend' : 'mouseup', {\n                handler: (e) => this.pointerUp.next(e),\n                options: true\n            })\n                .set('scroll', {\n                handler: (e) => this.scroll.next(e),\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                options: true\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions\n            });\n            // We don't have to bind a move event for touch drag sequences, because\n            // we already have a persistent global one bound from `registerDragItem`.\n            if (!isTouchEvent) {\n                this._globalListeners.set('mousemove', {\n                    handler: (e) => this.pointerMove.next(e),\n                    options: activeCapturingEventOptions\n                });\n            }\n            this._ngZone.runOutsideAngular(() => {\n                this._globalListeners.forEach((config, name) => {\n                    this._document.addEventListener(name, config.handler, config.options);\n                });\n            });\n        }\n    }\n    /** Stops dragging a drag item instance. */\n    stopDragging(drag) {\n        const index = this._activeDragInstances.indexOf(drag);\n        if (index > -1) {\n            this._activeDragInstances.splice(index, 1);\n            if (this._activeDragInstances.length === 0) {\n                this._clearGlobalListeners();\n            }\n        }\n    }\n    /** Gets whether a drag item instance is currently being dragged. */\n    isDragging(drag) {\n        return this._activeDragInstances.indexOf(drag) > -1;\n    }\n    /**\n     * Gets a stream that will emit when any element on the page is scrolled while an item is being\n     * dragged.\n     * @param shadowRoot Optional shadow root that the current dragging sequence started from.\n     *   Top-level listeners won't pick up events coming from the shadow DOM so this parameter can\n     *   be used to include an additional top-level listener at the shadow root level.\n     */\n    scrolled(shadowRoot) {\n        const streams = [this.scroll];\n        if (shadowRoot && shadowRoot !== this._document) {\n            // Note that this is basically the same as `fromEvent` from rjxs, but we do it ourselves,\n            // because we want to guarantee that the event is bound outside of the `NgZone`. With\n            // `fromEvent` it'll only happen if the subscription is outside the `NgZone`.\n            streams.push(new Observable((observer) => {\n                return this._ngZone.runOutsideAngular(() => {\n                    const eventOptions = true;\n                    const callback = (event) => {\n                        if (this._activeDragInstances.length) {\n                            observer.next(event);\n                        }\n                    };\n                    shadowRoot.addEventListener('scroll', callback, eventOptions);\n                    return () => {\n                        shadowRoot.removeEventListener('scroll', callback, eventOptions);\n                    };\n                });\n            }));\n        }\n        return merge(...streams);\n    }\n    ngOnDestroy() {\n        this._dragInstances.forEach(instance => this.removeDragItem(instance));\n        this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /** Clears out the global event listeners from the `document`. */\n    _clearGlobalListeners() {\n        this._globalListeners.forEach((config, name) => {\n            this._document.removeEventListener(name, config.handler, config.options);\n        });\n        this._globalListeners.clear();\n    }\n}\nDragDropRegistry.ɵfac = function DragDropRegistry_Factory(t) { return new (t || DragDropRegistry)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\nDragDropRegistry.ɵprov = i0.ɵɵdefineInjectable({ factory: function DragDropRegistry_Factory() { return new DragDropRegistry(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.DOCUMENT)); }, token: DragDropRegistry, providedIn: \"root\" });\nDragDropRegistry.ctorParameters = () => [\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DragDropRegistry, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @param element Element to which to attach the dragging functionality.\n     * @param config Object used to configure the dragging behavior.\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @param element Element to which to attach the drop list functionality.\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n}\nDragDrop.ɵfac = function DragDrop_Factory(t) { return new (t || DragDrop)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DragDropRegistry)); };\nDragDrop.ɵprov = i0.ɵɵdefineInjectable({ factory: function DragDrop_Factory() { return new DragDrop(i0.ɵɵinject(i1.DOCUMENT), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i2.ViewportRuler), i0.ɵɵinject(DragDropRegistry)); }, token: DragDrop, providedIn: \"root\" });\nDragDrop.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewportRuler },\n    { type: DragDropRegistry }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DragDrop, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.ViewportRuler }, { type: DragDropRegistry }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST_GROUP = new InjectionToken('CdkDropListGroup');\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\nclass CdkDropListGroup {\n    constructor() {\n        /** Drop lists registered inside the group. */\n        this._items = new Set();\n        this._disabled = false;\n    }\n    /** Whether starting a dragging sequence from inside this group is disabled. */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    ngOnDestroy() {\n        this._items.clear();\n    }\n}\nCdkDropListGroup.ɵfac = function CdkDropListGroup_Factory(t) { return new (t || CdkDropListGroup)(); };\nCdkDropListGroup.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkDropListGroup, selectors: [[\"\", \"cdkDropListGroup\", \"\"]], inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\"] }, exportAs: [\"cdkDropListGroup\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }])] });\nCdkDropListGroup.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDropListGroupDisabled',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDropListGroup, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDropListGroup]',\n                exportAs: 'cdkDropListGroup',\n                providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }]\n            }]\n    }], function () { return []; }, { disabled: [{\n            type: Input,\n            args: ['cdkDropListGroupDisabled']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Asserts that a particular node is an element.\n * @param node Node to be checked.\n * @param name Name to attach to the error message.\n */\nfunction assertElementNode(node, name) {\n    if (node.nodeType !== 1) {\n        throw Error(`${name} must be attached to an element node. ` +\n            `Currently attached to \"${node.nodeName}\".`);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST = new InjectionToken('CdkDropList');\nconst ɵ0 = undefined;\n/** Container that wraps a set of draggable items. */\nclass CdkDropList {\n    constructor(\n    /** Element that the drop list is attached to. */\n    element, dragDrop, _changeDetectorRef, _scrollDispatcher, _dir, _group, config) {\n        this.element = element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._dir = _dir;\n        this._group = _group;\n        /** Emits when the list has been destroyed. */\n        this._destroyed = new Subject();\n        /**\n         * Other draggable containers that this container is connected to and into which the\n         * container's items can be transferred. Can either be references to other drop containers,\n         * or their unique IDs.\n         */\n        this.connectedTo = [];\n        /**\n         * Unique ID for the drop zone. Can be used as a reference\n         * in the `connectedTo` of another `CdkDropList`.\n         */\n        this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Functions that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new EventEmitter();\n        /**\n         * Keeps track of the items that are registered with this container. Historically we used to\n         * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n         * well which means that we can't handle cases like dragging the headers of a `mat-table`\n         * correctly. What we do instead is to have the items register themselves with the container\n         * and then we sort them based on their position in the DOM.\n         */\n        this._unsortedItems = new Set();\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDropList');\n        }\n        this._dropListRef = dragDrop.createDropList(element);\n        this._dropListRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        this._dropListRef.enterPredicate = (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        };\n        this._dropListRef.sortPredicate =\n            (index, drag, drop) => {\n                return this.sortPredicate(index, drag.data, drop.data);\n            };\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (_group) {\n            _group._items.add(this);\n        }\n    }\n    /** Whether starting a dragging sequence from this container is disabled. */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    set disabled(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = coerceBooleanProperty(value);\n    }\n    /** Registers an items with the drop list. */\n    addItem(item) {\n        this._unsortedItems.add(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Removes an item from the drop list. */\n    removeItem(item) {\n        this._unsortedItems.delete(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Gets the registered items in the list, sorted by their position in the DOM. */\n    getSortedItems() {\n        return Array.from(this._unsortedItems).sort((a, b) => {\n            const documentPosition = a._dragRef.getVisibleElement().compareDocumentPosition(b._dragRef.getVisibleElement());\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n            // tslint:disable-next-line:no-bitwise\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n        });\n    }\n    ngOnDestroy() {\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._unsortedItems.clear();\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n    _setupInputSyncSubscription(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe(value => ref.withDirection(value));\n        }\n        ref.beforeStarted.subscribe(() => {\n            const siblings = coerceArray(this.connectedTo).map(drop => {\n                if (typeof drop === 'string') {\n                    const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\n                    if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                        console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\n                    }\n                    return correspondingDropList;\n                }\n                return drop;\n            });\n            if (this._group) {\n                this._group._items.forEach(drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                });\n            }\n            // Note that we resolve the scrollable parents here so that we delay the resolution\n            // as long as possible, ensuring that the element is in its final place in the DOM.\n            if (!this._scrollableParentsResolved) {\n                const scrollableParents = this._scrollDispatcher\n                    .getAncestorScrollContainers(this.element)\n                    .map(scrollable => scrollable.getElementRef().nativeElement);\n                this._dropListRef.withScrollableParents(scrollableParents);\n                // Only do this once since it involves traversing the DOM and the parents\n                // shouldn't be able to change without the drop list being destroyed.\n                this._scrollableParentsResolved = true;\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = coerceBooleanProperty(this.sortingDisabled);\n            ref.autoScrollDisabled = coerceBooleanProperty(this.autoScrollDisabled);\n            ref.autoScrollStep = coerceNumberProperty(this.autoScrollStep, 2);\n            ref\n                .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n                .withOrientation(this.orientation);\n        });\n    }\n    /** Handles events from the underlying DropListRef. */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe(() => {\n            this._syncItemsWithRef();\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data\n            });\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.sorted.subscribe(event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data\n            });\n        });\n        ref.dropped.subscribe(event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                item: event.item.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                distance: event.distance,\n                dropPoint: event.dropPoint\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n        this.orientation = listOrientation || 'vertical';\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n    }\n    /** Syncs up the registered drag items with underlying drop list ref. */\n    _syncItemsWithRef() {\n        this._dropListRef.withItems(this.getSortedItems().map(item => item._dragRef));\n    }\n}\nCdkDropList.ɵfac = function CdkDropList_Factory(t) { return new (t || CdkDropList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(CDK_DROP_LIST_GROUP, 12), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8)); };\nCdkDropList.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkDropList, selectors: [[\"\", \"cdkDropList\", \"\"], [\"cdk-drop-list\"]], hostAttrs: [1, \"cdk-drop-list\"], hostVars: 7, hostBindings: function CdkDropList_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id);\n        ɵngcc0.ɵɵclassProp(\"cdk-drop-list-disabled\", ctx.disabled)(\"cdk-drop-list-dragging\", ctx._dropListRef.isDragging())(\"cdk-drop-list-receiving\", ctx._dropListRef.isReceiving());\n    } }, inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], id: \"id\", enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], sortPredicate: [\"cdkDropListSortPredicate\", \"sortPredicate\"], disabled: [\"cdkDropListDisabled\", \"disabled\"], sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"], data: [\"cdkDropListData\", \"data\"], autoScrollStep: [\"cdkDropListAutoScrollStep\", \"autoScrollStep\"] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, exportAs: [\"cdkDropList\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            // Prevent child drop lists from picking up the same group as their parent.\n            { provide: CDK_DROP_LIST_GROUP, useValue: ɵ0 },\n            { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n        ])] });\n/** Keeps track of the drop lists that are currently on the page. */\nCdkDropList._dropLists = [];\nCdkDropList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: DragDrop },\n    { type: ChangeDetectorRef },\n    { type: ScrollDispatcher },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: CdkDropListGroup, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DROP_LIST_GROUP,] }, { type: SkipSelf }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DRAG_CONFIG,] }] }\n];\nCdkDropList.propDecorators = {\n    connectedTo: [{ type: Input, args: ['cdkDropListConnectedTo',] }],\n    data: [{ type: Input, args: ['cdkDropListData',] }],\n    orientation: [{ type: Input, args: ['cdkDropListOrientation',] }],\n    id: [{ type: Input }],\n    lockAxis: [{ type: Input, args: ['cdkDropListLockAxis',] }],\n    disabled: [{ type: Input, args: ['cdkDropListDisabled',] }],\n    sortingDisabled: [{ type: Input, args: ['cdkDropListSortingDisabled',] }],\n    enterPredicate: [{ type: Input, args: ['cdkDropListEnterPredicate',] }],\n    sortPredicate: [{ type: Input, args: ['cdkDropListSortPredicate',] }],\n    autoScrollDisabled: [{ type: Input, args: ['cdkDropListAutoScrollDisabled',] }],\n    autoScrollStep: [{ type: Input, args: ['cdkDropListAutoScrollStep',] }],\n    dropped: [{ type: Output, args: ['cdkDropListDropped',] }],\n    entered: [{ type: Output, args: ['cdkDropListEntered',] }],\n    exited: [{ type: Output, args: ['cdkDropListExited',] }],\n    sorted: [{ type: Output, args: ['cdkDropListSorted',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDropList, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDropList], cdk-drop-list',\n                exportAs: 'cdkDropList',\n                providers: [\n                    // Prevent child drop lists from picking up the same group as their parent.\n                    { provide: CDK_DROP_LIST_GROUP, useValue: ɵ0 },\n                    { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                ],\n                host: {\n                    'class': 'cdk-drop-list',\n                    '[attr.id]': 'id',\n                    '[class.cdk-drop-list-disabled]': 'disabled',\n                    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: DragDrop }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.ScrollDispatcher }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: CdkDropListGroup, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DROP_LIST_GROUP]\n            }, {\n                type: SkipSelf\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_CONFIG]\n            }] }]; }, { connectedTo: [{\n            type: Input,\n            args: ['cdkDropListConnectedTo']\n        }], id: [{\n            type: Input\n        }], enterPredicate: [{\n            type: Input,\n            args: ['cdkDropListEnterPredicate']\n        }], sortPredicate: [{\n            type: Input,\n            args: ['cdkDropListSortPredicate']\n        }], dropped: [{\n            type: Output,\n            args: ['cdkDropListDropped']\n        }], entered: [{\n            type: Output,\n            args: ['cdkDropListEntered']\n        }], exited: [{\n            type: Output,\n            args: ['cdkDropListExited']\n        }], sorted: [{\n            type: Output,\n            args: ['cdkDropListSorted']\n        }], disabled: [{\n            type: Input,\n            args: ['cdkDropListDisabled']\n        }], sortingDisabled: [{\n            type: Input,\n            args: ['cdkDropListSortingDisabled']\n        }], autoScrollDisabled: [{\n            type: Input,\n            args: ['cdkDropListAutoScrollDisabled']\n        }], orientation: [{\n            type: Input,\n            args: ['cdkDropListOrientation']\n        }], lockAxis: [{\n            type: Input,\n            args: ['cdkDropListLockAxis']\n        }], data: [{\n            type: Input,\n            args: ['cdkDropListData']\n        }], autoScrollStep: [{\n            type: Input,\n            args: ['cdkDropListAutoScrollStep']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_HANDLE = new InjectionToken('CdkDragHandle');\n/** Handle that can be used to drag a CdkDrag instance. */\nclass CdkDragHandle {\n    constructor(element, parentDrag) {\n        this.element = element;\n        /** Emits when the state of the handle has changed. */\n        this._stateChanges = new Subject();\n        this._disabled = false;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDragHandle');\n        }\n        this._parentDrag = parentDrag;\n    }\n    /** Whether starting to drag through this handle is disabled. */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._stateChanges.next(this);\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n}\nCdkDragHandle.ɵfac = function CdkDragHandle_Factory(t) { return new (t || CdkDragHandle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_PARENT, 12)); };\nCdkDragHandle.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkDragHandle, selectors: [[\"\", \"cdkDragHandle\", \"\"]], hostAttrs: [1, \"cdk-drag-handle\"], inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }])] });\nCdkDragHandle.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DRAG_PARENT,] }, { type: Optional }, { type: SkipSelf }] }\n];\nCdkDragHandle.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDragHandleDisabled',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDragHandle, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDragHandle]',\n                host: {\n                    'class': 'cdk-drag-handle'\n                },\n                providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_DRAG_PARENT]\n            }, {\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }]; }, { disabled: [{\n            type: Input,\n            args: ['cdkDragHandleDisabled']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PLACEHOLDER = new InjectionToken('CdkDragPlaceholder');\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\nclass CdkDragPlaceholder {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nCdkDragPlaceholder.ɵfac = function CdkDragPlaceholder_Factory(t) { return new (t || CdkDragPlaceholder)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkDragPlaceholder.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkDragPlaceholder, selectors: [[\"ng-template\", \"cdkDragPlaceholder\", \"\"]], inputs: { data: \"data\" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }])] });\nCdkDragPlaceholder.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPlaceholder.propDecorators = {\n    data: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDragPlaceholder, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkDragPlaceholder]',\n                providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }]\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { data: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PREVIEW = new InjectionToken('CdkDragPreview');\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\nclass CdkDragPreview {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._matchSize = false;\n    }\n    /** Whether the preview should preserve the same size as the item that is being dragged. */\n    get matchSize() { return this._matchSize; }\n    set matchSize(value) { this._matchSize = coerceBooleanProperty(value); }\n}\nCdkDragPreview.ɵfac = function CdkDragPreview_Factory(t) { return new (t || CdkDragPreview)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkDragPreview.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkDragPreview, selectors: [[\"ng-template\", \"cdkDragPreview\", \"\"]], inputs: { matchSize: \"matchSize\", data: \"data\" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }])] });\nCdkDragPreview.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPreview.propDecorators = {\n    data: [{ type: Input }],\n    matchSize: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDragPreview, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkDragPreview]',\n                providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }]\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { matchSize: [{\n            type: Input\n        }], data: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst DRAG_HOST_CLASS = 'cdk-drag';\n/** Element that can be moved inside a CdkDropList container. */\nclass CdkDrag {\n    constructor(\n    /** Element that the draggable is attached to. */\n    element, \n    /** Droppable container that the draggable is a part of. */\n    dropContainer, \n    /**\n     * @deprecated `_document` parameter no longer being used and will be removed.\n     * @breaking-change 12.0.0\n     */\n    _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, _selfHandle, _parentDrag) {\n        this.element = element;\n        this.dropContainer = dropContainer;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._selfHandle = _selfHandle;\n        this._parentDrag = _parentDrag;\n        this._destroyed = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new EventEmitter();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new EventEmitter();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new EventEmitter();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new EventEmitter();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new EventEmitter();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable((observer) => {\n            const subscription = this._dragRef.moved.pipe(map(movedEvent => ({\n                source: this,\n                pointerPosition: movedEvent.pointerPosition,\n                event: movedEvent.event,\n                delta: movedEvent.delta,\n                distance: movedEvent.distance\n            }))).subscribe(observer);\n            return () => {\n                subscription.unsubscribe();\n            };\n        });\n        this._dragRef = dragDrop.createDrag(element, {\n            dragStartThreshold: config && config.dragStartThreshold != null ?\n                config.dragStartThreshold : 5,\n            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null ?\n                config.pointerDirectionChangeThreshold : 5,\n            zIndex: config === null || config === void 0 ? void 0 : config.zIndex,\n        });\n        this._dragRef.data = this;\n        // We have to keep track of the drag instances in order to be able to match an element to\n        // a drag instance. We can't go through the global registry of `DragRef`, because the root\n        // element could be different.\n        CdkDrag._dragInstances.push(this);\n        if (config) {\n            this._assignDefaults(config);\n        }\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n        // where there are no items on the first change detection pass, but the items get picked up as\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n        // is too late since the two modes save different kinds of information. We work around it by\n        // assigning the drop container both from here and the list.\n        if (dropContainer) {\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\n            dropContainer.addItem(this);\n        }\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._dragRef.disabled = this._disabled;\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    ngAfterViewInit() {\n        // Normally this isn't in the zone, but it can cause major performance regressions for apps\n        // using `zone-patch-rxjs` because it'll trigger a change detection when it unsubscribes.\n        this._ngZone.runOutsideAngular(() => {\n            // We need to wait for the zone to stabilize, in order for the reference\n            // element to be in the proper place in the DOM. This is mostly relevant\n            // for draggable elements inside portals since they get stamped out in\n            // their original DOM position and then they get transferred to the portal.\n            this._ngZone.onStable\n                .pipe(take(1), takeUntil(this._destroyed))\n                .subscribe(() => {\n                this._updateRootElement();\n                this._setupHandlesListener();\n                if (this.freeDragPosition) {\n                    this._dragRef.setFreeDragPosition(this.freeDragPosition);\n                }\n            });\n        });\n    }\n    ngOnChanges(changes) {\n        const rootSelectorChange = changes['rootElementSelector'];\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in `ngAfterViewInit` where it needs to be deferred.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Skip the first change since it's being handled in `ngAfterViewInit`.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    ngOnDestroy() {\n        if (this.dropContainer) {\n            this.dropContainer.removeItem(this);\n        }\n        const index = CdkDrag._dragInstances.indexOf(this);\n        if (index > -1) {\n            CdkDrag._dragInstances.splice(index, 1);\n        }\n        // Unnecessary in most cases, but used to avoid extra change detections with `zone-paths-rxjs`.\n        this._ngZone.runOutsideAngular(() => {\n            this._destroyed.next();\n            this._destroyed.complete();\n            this._dragRef.dispose();\n        });\n    }\n    /** Syncs the root element with the `DragRef`. */\n    _updateRootElement() {\n        const element = this.element.nativeElement;\n        const rootElement = this.rootElementSelector ?\n            getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n        if (rootElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            assertElementNode(rootElement, 'cdkDrag');\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /** Gets the boundary element, based on the `boundaryElement` value. */\n    _getBoundaryElement() {\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return getClosestMatchingAncestor(this.element.nativeElement, boundary);\n        }\n        const element = coerceElement(boundary);\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n            !element.contains(this.element.nativeElement)) {\n            throw Error('Draggable element is not inside of the node passed into cdkDragBoundary.');\n        }\n        return element;\n    }\n    /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe(() => {\n            if (!ref.isDragging()) {\n                const dir = this._dir;\n                const dragStartDelay = this.dragStartDelay;\n                const placeholder = this._placeholderTemplate ? {\n                    template: this._placeholderTemplate.templateRef,\n                    context: this._placeholderTemplate.data,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                const preview = this._previewTemplate ? {\n                    template: this._previewTemplate.templateRef,\n                    context: this._previewTemplate.data,\n                    matchSize: this._previewTemplate.matchSize,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.dragStartDelay = (typeof dragStartDelay === 'object' && dragStartDelay) ?\n                    dragStartDelay : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref.previewClass = this.previewClass;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview)\n                    .withPreviewContainer(this.previewContainer || 'global');\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        });\n        // This only needs to be resolved once.\n        ref.beforeStarted.pipe(take(1)).subscribe(() => {\n            var _a, _b;\n            // If we managed to resolve a parent through DI, use it.\n            if (this._parentDrag) {\n                ref.withParent(this._parentDrag._dragRef);\n                return;\n            }\n            // Otherwise fall back to resolving the parent by looking up the DOM. This can happen if\n            // the item was projected into another item by something like `ngTemplateOutlet`.\n            let parent = this.element.nativeElement.parentElement;\n            while (parent) {\n                // `classList` needs to be null checked, because IE doesn't have it on some elements.\n                if ((_a = parent.classList) === null || _a === void 0 ? void 0 : _a.contains(DRAG_HOST_CLASS)) {\n                    ref.withParent(((_b = CdkDrag._dragInstances.find(drag => {\n                        return drag.element.nativeElement === parent;\n                    })) === null || _b === void 0 ? void 0 : _b._dragRef) || null);\n                    break;\n                }\n                parent = parent.parentElement;\n            }\n        });\n    }\n    /** Handles the events from the underlying `DragRef`. */\n    _handleEvents(ref) {\n        ref.started.subscribe(() => {\n            this.started.emit({ source: this });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.released.subscribe(() => {\n            this.released.emit({ source: this });\n        });\n        ref.ended.subscribe(event => {\n            this.ended.emit({\n                source: this,\n                distance: event.distance,\n                dropPoint: event.dropPoint\n            });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: event.container.data,\n                item: this,\n                currentIndex: event.currentIndex\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: event.container.data,\n                item: this\n            });\n        });\n        ref.dropped.subscribe(event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                item: this,\n                distance: event.distance,\n                dropPoint: event.dropPoint\n            });\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, dragStartDelay, constrainPosition, previewClass, boundaryElement, draggingDisabled, rootElementSelector, previewContainer } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.dragStartDelay = dragStartDelay || 0;\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n        if (constrainPosition) {\n            this.constrainPosition = constrainPosition;\n        }\n        if (previewClass) {\n            this.previewClass = previewClass;\n        }\n        if (boundaryElement) {\n            this.boundaryElement = boundaryElement;\n        }\n        if (rootElementSelector) {\n            this.rootElementSelector = rootElementSelector;\n        }\n        if (previewContainer) {\n            this.previewContainer = previewContainer;\n        }\n    }\n    /** Sets up the listener that syncs the handles with the drag ref. */\n    _setupHandlesListener() {\n        // Listen for any newly-added handles.\n        this._handles.changes.pipe(startWith(this._handles), \n        // Sync the new handles with the DragRef.\n        tap((handles) => {\n            const childHandleElements = handles\n                .filter(handle => handle._parentDrag === this)\n                .map(handle => handle.element);\n            // Usually handles are only allowed to be a descendant of the drag element, but if\n            // the consumer defined a different drag root, we should allow the drag element\n            // itself to be a handle too.\n            if (this._selfHandle && this.rootElementSelector) {\n                childHandleElements.push(this.element);\n            }\n            this._dragRef.withHandles(childHandleElements);\n        }), \n        // Listen if the state of any of the handles changes.\n        switchMap((handles) => {\n            return merge(...handles.map(item => {\n                return item._stateChanges.pipe(startWith(item));\n            }));\n        }), takeUntil(this._destroyed)).subscribe(handleInstance => {\n            // Enabled/disable the handle that changed in the DragRef.\n            const dragRef = this._dragRef;\n            const handle = handleInstance.element.nativeElement;\n            handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n        });\n    }\n}\nCdkDrag.ɵfac = function CdkDrag_Factory(t) { return new (t || CdkDrag)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DROP_LIST, 12), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_HANDLE, 10), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_PARENT, 12)); };\nCdkDrag.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkDrag, selectors: [[\"\", \"cdkDrag\", \"\"]], contentQueries: function CdkDrag_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_PREVIEW, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_PLACEHOLDER, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_HANDLE, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._previewTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._placeholderTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._handles = _t);\n    } }, hostAttrs: [1, \"cdk-drag\"], hostVars: 4, hostBindings: function CdkDrag_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"cdk-drag-disabled\", ctx.disabled)(\"cdk-drag-dragging\", ctx._dragRef.isDragging());\n    } }, inputs: { disabled: [\"cdkDragDisabled\", \"disabled\"], dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], previewContainer: [\"cdkDragPreviewContainer\", \"previewContainer\"], data: [\"cdkDragData\", \"data\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, exportAs: [\"cdkDrag\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]), ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkDrag._dragInstances = [];\nCdkDrag.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DROP_LIST,] }, { type: Optional }, { type: SkipSelf }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DRAG_CONFIG,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: DragDrop },\n    { type: ChangeDetectorRef },\n    { type: CdkDragHandle, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [CDK_DRAG_HANDLE,] }] },\n    { type: CdkDrag, decorators: [{ type: Optional }, { type: SkipSelf }, { type: Inject, args: [CDK_DRAG_PARENT,] }] }\n];\nCdkDrag.propDecorators = {\n    _handles: [{ type: ContentChildren, args: [CDK_DRAG_HANDLE, { descendants: true },] }],\n    _previewTemplate: [{ type: ContentChild, args: [CDK_DRAG_PREVIEW,] }],\n    _placeholderTemplate: [{ type: ContentChild, args: [CDK_DRAG_PLACEHOLDER,] }],\n    data: [{ type: Input, args: ['cdkDragData',] }],\n    lockAxis: [{ type: Input, args: ['cdkDragLockAxis',] }],\n    rootElementSelector: [{ type: Input, args: ['cdkDragRootElement',] }],\n    boundaryElement: [{ type: Input, args: ['cdkDragBoundary',] }],\n    dragStartDelay: [{ type: Input, args: ['cdkDragStartDelay',] }],\n    freeDragPosition: [{ type: Input, args: ['cdkDragFreeDragPosition',] }],\n    disabled: [{ type: Input, args: ['cdkDragDisabled',] }],\n    constrainPosition: [{ type: Input, args: ['cdkDragConstrainPosition',] }],\n    previewClass: [{ type: Input, args: ['cdkDragPreviewClass',] }],\n    previewContainer: [{ type: Input, args: ['cdkDragPreviewContainer',] }],\n    started: [{ type: Output, args: ['cdkDragStarted',] }],\n    released: [{ type: Output, args: ['cdkDragReleased',] }],\n    ended: [{ type: Output, args: ['cdkDragEnded',] }],\n    entered: [{ type: Output, args: ['cdkDragEntered',] }],\n    exited: [{ type: Output, args: ['cdkDragExited',] }],\n    dropped: [{ type: Output, args: ['cdkDragDropped',] }],\n    moved: [{ type: Output, args: ['cdkDragMoved',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDrag, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDrag]',\n                exportAs: 'cdkDrag',\n                host: {\n                    'class': DRAG_HOST_CLASS,\n                    '[class.cdk-drag-disabled]': 'disabled',\n                    '[class.cdk-drag-dragging]': '_dragRef.isDragging()'\n                },\n                providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_DROP_LIST]\n            }, {\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_CONFIG]\n            }] }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: DragDrop }, { type: ɵngcc0.ChangeDetectorRef }, { type: CdkDragHandle, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_HANDLE]\n            }] }, { type: CdkDrag, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_PARENT]\n            }] }]; }, { started: [{\n            type: Output,\n            args: ['cdkDragStarted']\n        }], released: [{\n            type: Output,\n            args: ['cdkDragReleased']\n        }], ended: [{\n            type: Output,\n            args: ['cdkDragEnded']\n        }], entered: [{\n            type: Output,\n            args: ['cdkDragEntered']\n        }], exited: [{\n            type: Output,\n            args: ['cdkDragExited']\n        }], dropped: [{\n            type: Output,\n            args: ['cdkDragDropped']\n        }], moved: [{\n            type: Output,\n            args: ['cdkDragMoved']\n        }], disabled: [{\n            type: Input,\n            args: ['cdkDragDisabled']\n        }], dragStartDelay: [{\n            type: Input,\n            args: ['cdkDragStartDelay']\n        }], lockAxis: [{\n            type: Input,\n            args: ['cdkDragLockAxis']\n        }], constrainPosition: [{\n            type: Input,\n            args: ['cdkDragConstrainPosition']\n        }], previewClass: [{\n            type: Input,\n            args: ['cdkDragPreviewClass']\n        }], boundaryElement: [{\n            type: Input,\n            args: ['cdkDragBoundary']\n        }], rootElementSelector: [{\n            type: Input,\n            args: ['cdkDragRootElement']\n        }], previewContainer: [{\n            type: Input,\n            args: ['cdkDragPreviewContainer']\n        }], _handles: [{\n            type: ContentChildren,\n            args: [CDK_DRAG_HANDLE, { descendants: true }]\n        }], _previewTemplate: [{\n            type: ContentChild,\n            args: [CDK_DRAG_PREVIEW]\n        }], _placeholderTemplate: [{\n            type: ContentChild,\n            args: [CDK_DRAG_PLACEHOLDER]\n        }], data: [{\n            type: Input,\n            args: ['cdkDragData']\n        }], freeDragPosition: [{\n            type: Input,\n            args: ['cdkDragFreeDragPosition']\n        }] }); })();\n/** Gets the closest ancestor of an element that matches a selector. */\nfunction getClosestMatchingAncestor(element, selector) {\n    let currentElement = element.parentElement;\n    while (currentElement) {\n        // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n        if (currentElement.matches ? currentElement.matches(selector) :\n            currentElement.msMatchesSelector(selector)) {\n            return currentElement;\n        }\n        currentElement = currentElement.parentElement;\n    }\n    return null;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass DragDropModule {\n}\nDragDropModule.ɵfac = function DragDropModule_Factory(t) { return new (t || DragDropModule)(); };\nDragDropModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DragDropModule });\nDragDropModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        DragDrop,\n    ], imports: [CdkScrollableModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DragDropModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                exports: [\n                    CdkScrollableModule,\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                providers: [\n                    DragDrop,\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DragDropModule, { declarations: function () { return [CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder]; }, exports: function () { return [CdkScrollableModule, CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_HANDLE, CDK_DRAG_PARENT, CDK_DRAG_PLACEHOLDER, CDK_DRAG_PREVIEW, CDK_DROP_LIST, CDK_DROP_LIST_GROUP, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem };\n\n"],"mappings":"AAAA,OAAO,KAAKA,EAAE,MAAM,eAAe;AACnC,SAASC,UAAU,EAAEC,MAAM,EAAEC,MAAM,EAAEC,cAAc,EAAEC,SAAS,EAAEC,KAAK,EAAEC,YAAY,EAAEC,UAAU,EAAEC,iBAAiB,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,WAAW,EAAEC,gBAAgB,EAAEC,IAAI,EAAEC,eAAe,EAAEC,YAAY,EAAEC,QAAQ,QAAQ,eAAe;AACnP,OAAO,KAAKC,EAAE,MAAM,iBAAiB;AACrC,SAASC,QAAQ,QAAQ,iBAAiB;AAC1C,OAAO,KAAKC,EAAE,MAAM,wBAAwB;AAC5C,SAASC,aAAa,EAAEC,gBAAgB,EAAEC,mBAAmB,QAAQ,wBAAwB;AAC7F,SAASC,eAAe,EAAEC,+BAA+B,EAAEC,cAAc,QAAQ,uBAAuB;AACxG,SAASC,qBAAqB,EAAEC,aAAa,EAAEC,WAAW,EAAEC,oBAAoB,QAAQ,uBAAuB;AAC/G,SAASC,gCAAgC,EAAEC,+BAA+B,QAAQ,mBAAmB;AACrG,SAASC,OAAO,EAAEC,YAAY,EAAEC,QAAQ,EAAEC,uBAAuB,EAAEC,UAAU,EAAEC,KAAK,QAAQ,MAAM;AAClG,SAASC,SAAS,EAAEC,SAAS,EAAEC,GAAG,EAAEC,IAAI,EAAEC,GAAG,EAAEC,SAAS,QAAQ,gBAAgB;AAChF,SAASC,cAAc,QAAQ,mBAAmB;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,KAAKC,MAAM,MAAM,eAAe;AACvC,OAAO,KAAKC,MAAM,MAAM,wBAAwB;AAChD,OAAO,KAAKC,MAAM,MAAM,mBAAmB;AAC3C,SAASC,YAAY,CAACC,IAAI,EAAEC,MAAM,EAAEC,mBAAmB,EAAE;EACrD,KAAK,IAAIC,GAAG,IAAIF,MAAM,EAAE;IACpB,IAAIA,MAAM,CAACG,cAAc,CAACD,GAAG,CAAC,EAAE;MAC5B,MAAME,KAAK,GAAGJ,MAAM,CAACE,GAAG,CAAC;MACzB,IAAIE,KAAK,EAAE;QACPL,IAAI,CAACM,WAAW,CAACH,GAAG,EAAEE,KAAK,EAAE,CAACH,mBAAmB,KAAK,IAAI,IAAIA,mBAAmB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,mBAAmB,CAACK,GAAG,CAACJ,GAAG,CAAC,IAAI,WAAW,GAAG,EAAE,CAAC;MAC7J,CAAC,MACI;QACDH,IAAI,CAACQ,cAAc,CAACL,GAAG,CAAC;MAC5B;IACJ;EACJ;EACA,OAAOH,IAAI;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASS,4BAA4B,CAACC,OAAO,EAAEC,MAAM,EAAE;EACnD,MAAMC,UAAU,GAAGD,MAAM,GAAG,EAAE,GAAG,MAAM;EACvCZ,YAAY,CAACW,OAAO,CAACG,KAAK,EAAE;IACxB,cAAc,EAAEF,MAAM,GAAG,EAAE,GAAG,MAAM;IACpC,mBAAmB,EAAEA,MAAM,GAAG,EAAE,GAAG,MAAM;IACzC,6BAA6B,EAAEA,MAAM,GAAG,EAAE,GAAG,aAAa;IAC1D,aAAa,EAAEC,UAAU;IACzB,iBAAiB,EAAEA,UAAU;IAC7B,qBAAqB,EAAEA,UAAU;IACjC,kBAAkB,EAAEA;EACxB,CAAC,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,gBAAgB,CAACJ,OAAO,EAAEC,MAAM,EAAET,mBAAmB,EAAE;EAC5DH,YAAY,CAACW,OAAO,CAACG,KAAK,EAAE;IACxBE,QAAQ,EAAEJ,MAAM,GAAG,EAAE,GAAG,OAAO;IAC/BK,GAAG,EAAEL,MAAM,GAAG,EAAE,GAAG,GAAG;IACtBM,OAAO,EAAEN,MAAM,GAAG,EAAE,GAAG,GAAG;IAC1BO,IAAI,EAAEP,MAAM,GAAG,EAAE,GAAG;EACxB,CAAC,EAAET,mBAAmB,CAAC;AAC3B;AACA;AACA;AACA;AACA;AACA,SAASiB,iBAAiB,CAACC,SAAS,EAAEC,gBAAgB,EAAE;EACpD,OAAOA,gBAAgB,IAAIA,gBAAgB,IAAI,MAAM,GAChDD,SAAS,GAAG,GAAG,GAAGC,gBAAgB,GACnCD,SAAS;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,qBAAqB,CAACjB,KAAK,EAAE;EAClC;EACA,MAAMkB,UAAU,GAAGlB,KAAK,CAACmB,WAAW,EAAE,CAACC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI;EACpE,OAAOC,UAAU,CAACrB,KAAK,CAAC,GAAGkB,UAAU;AACzC;AACA;AACA,SAASI,kCAAkC,CAACjB,OAAO,EAAE;EACjD,MAAMkB,aAAa,GAAGC,gBAAgB,CAACnB,OAAO,CAAC;EAC/C,MAAMoB,sBAAsB,GAAGC,qBAAqB,CAACH,aAAa,EAAE,qBAAqB,CAAC;EAC1F,MAAMI,QAAQ,GAAGF,sBAAsB,CAACG,IAAI,CAACC,IAAI,IAAIA,IAAI,KAAK,WAAW,IAAIA,IAAI,KAAK,KAAK,CAAC;EAC5F;EACA,IAAI,CAACF,QAAQ,EAAE;IACX,OAAO,CAAC;EACZ;EACA;EACA;EACA,MAAMG,aAAa,GAAGL,sBAAsB,CAACL,OAAO,CAACO,QAAQ,CAAC;EAC9D,MAAMI,YAAY,GAAGL,qBAAqB,CAACH,aAAa,EAAE,qBAAqB,CAAC;EAChF,MAAMS,SAAS,GAAGN,qBAAqB,CAACH,aAAa,EAAE,kBAAkB,CAAC;EAC1E,OAAON,qBAAqB,CAACc,YAAY,CAACD,aAAa,CAAC,CAAC,GACrDb,qBAAqB,CAACe,SAAS,CAACF,aAAa,CAAC,CAAC;AACvD;AACA;AACA,SAASJ,qBAAqB,CAACH,aAAa,EAAEU,IAAI,EAAE;EAChD,MAAMjC,KAAK,GAAGuB,aAAa,CAACW,gBAAgB,CAACD,IAAI,CAAC;EAClD,OAAOjC,KAAK,CAACmC,KAAK,CAAC,GAAG,CAAC,CAACjD,GAAG,CAACkD,IAAI,IAAIA,IAAI,CAACC,IAAI,EAAE,CAAC;AACpD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,oBAAoB,CAACjC,OAAO,EAAE;EACnC,MAAMkC,UAAU,GAAGlC,OAAO,CAACmC,qBAAqB,EAAE;EAClD;EACA;EACA;EACA;EACA,OAAO;IACH7B,GAAG,EAAE4B,UAAU,CAAC5B,GAAG;IACnB8B,KAAK,EAAEF,UAAU,CAACE,KAAK;IACvBC,MAAM,EAAEH,UAAU,CAACG,MAAM;IACzB7B,IAAI,EAAE0B,UAAU,CAAC1B,IAAI;IACrB8B,KAAK,EAAEJ,UAAU,CAACI,KAAK;IACvBC,MAAM,EAAEL,UAAU,CAACK;EACvB,CAAC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,kBAAkB,CAACN,UAAU,EAAEO,CAAC,EAAEC,CAAC,EAAE;EAC1C,MAAM;IAAEpC,GAAG;IAAE+B,MAAM;IAAE7B,IAAI;IAAE4B;EAAM,CAAC,GAAGF,UAAU;EAC/C,OAAOQ,CAAC,IAAIpC,GAAG,IAAIoC,CAAC,IAAIL,MAAM,IAAII,CAAC,IAAIjC,IAAI,IAAIiC,CAAC,IAAIL,KAAK;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASO,gBAAgB,CAACT,UAAU,EAAE5B,GAAG,EAAEE,IAAI,EAAE;EAC7C0B,UAAU,CAAC5B,GAAG,IAAIA,GAAG;EACrB4B,UAAU,CAACG,MAAM,GAAGH,UAAU,CAAC5B,GAAG,GAAG4B,UAAU,CAACK,MAAM;EACtDL,UAAU,CAAC1B,IAAI,IAAIA,IAAI;EACvB0B,UAAU,CAACE,KAAK,GAAGF,UAAU,CAAC1B,IAAI,GAAG0B,UAAU,CAACI,KAAK;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASM,uBAAuB,CAACC,IAAI,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,QAAQ,EAAE;EAClE,MAAM;IAAE1C,GAAG;IAAE8B,KAAK;IAAEC,MAAM;IAAE7B,IAAI;IAAE8B,KAAK;IAAEC;EAAO,CAAC,GAAGM,IAAI;EACxD,MAAMI,UAAU,GAAGX,KAAK,GAAGQ,SAAS;EACpC,MAAMI,UAAU,GAAGX,MAAM,GAAGO,SAAS;EACrC,OAAOE,QAAQ,GAAG1C,GAAG,GAAG4C,UAAU,IAAIF,QAAQ,GAAGX,MAAM,GAAGa,UAAU,IAChEH,QAAQ,GAAGvC,IAAI,GAAGyC,UAAU,IAAIF,QAAQ,GAAGX,KAAK,GAAGa,UAAU;AACrE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,qBAAqB,CAAC;EACxBC,WAAW,CAACC,SAAS,EAAEC,cAAc,EAAE;IACnC,IAAI,CAACD,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,cAAc,GAAGA,cAAc;IACpC;IACA,IAAI,CAACC,SAAS,GAAG,IAAIC,GAAG,EAAE;EAC9B;EACA;EACAC,KAAK,GAAG;IACJ,IAAI,CAACF,SAAS,CAACE,KAAK,EAAE;EAC1B;EACA;EACAC,KAAK,CAACC,QAAQ,EAAE;IACZ,IAAI,CAACF,KAAK,EAAE;IACZ,IAAI,CAACF,SAAS,CAACK,GAAG,CAAC,IAAI,CAACP,SAAS,EAAE;MAC/BQ,cAAc,EAAE,IAAI,CAACP,cAAc,CAACQ,yBAAyB;IACjE,CAAC,CAAC;IACFH,QAAQ,CAACI,OAAO,CAAC/D,OAAO,IAAI;MACxB,IAAI,CAACuD,SAAS,CAACK,GAAG,CAAC5D,OAAO,EAAE;QACxB6D,cAAc,EAAE;UAAEvD,GAAG,EAAEN,OAAO,CAACgE,SAAS;UAAExD,IAAI,EAAER,OAAO,CAACiE;QAAW,CAAC;QACpE/B,UAAU,EAAED,oBAAoB,CAACjC,OAAO;MAC5C,CAAC,CAAC;IACN,CAAC,CAAC;EACN;EACA;EACAkE,YAAY,CAACC,KAAK,EAAE;IAChB,MAAMC,MAAM,GAAGxG,eAAe,CAACuG,KAAK,CAAC;IACrC,MAAME,cAAc,GAAG,IAAI,CAACd,SAAS,CAACe,GAAG,CAACF,MAAM,CAAC;IACjD,IAAI,CAACC,cAAc,EAAE;MACjB,OAAO,IAAI;IACf;IACA;IACA;IACA;IACA,MAAME,kBAAkB,GAAGH,MAAM,KAAK,IAAI,CAACf,SAAS,GAAGe,MAAM,CAACI,eAAe,GAAGJ,MAAM;IACtF,MAAMP,cAAc,GAAGQ,cAAc,CAACR,cAAc;IACpD,IAAIY,MAAM;IACV,IAAIC,OAAO;IACX,IAAIN,MAAM,KAAK,IAAI,CAACf,SAAS,EAAE;MAC3B,MAAMsB,sBAAsB,GAAG,IAAI,CAACrB,cAAc,CAACQ,yBAAyB,EAAE;MAC9EW,MAAM,GAAGE,sBAAsB,CAACrE,GAAG;MACnCoE,OAAO,GAAGC,sBAAsB,CAACnE,IAAI;IACzC,CAAC,MACI;MACDiE,MAAM,GAAGL,MAAM,CAACJ,SAAS;MACzBU,OAAO,GAAGN,MAAM,CAACH,UAAU;IAC/B;IACA,MAAMW,aAAa,GAAGf,cAAc,CAACvD,GAAG,GAAGmE,MAAM;IACjD,MAAMI,cAAc,GAAGhB,cAAc,CAACrD,IAAI,GAAGkE,OAAO;IACpD;IACA;IACA,IAAI,CAACnB,SAAS,CAACQ,OAAO,CAAC,CAAC1D,QAAQ,EAAEyE,IAAI,KAAK;MACvC,IAAIzE,QAAQ,CAAC6B,UAAU,IAAIkC,MAAM,KAAKU,IAAI,IAAIP,kBAAkB,CAACQ,QAAQ,CAACD,IAAI,CAAC,EAAE;QAC7EnC,gBAAgB,CAACtC,QAAQ,CAAC6B,UAAU,EAAE0C,aAAa,EAAEC,cAAc,CAAC;MACxE;IACJ,CAAC,CAAC;IACFhB,cAAc,CAACvD,GAAG,GAAGmE,MAAM;IAC3BZ,cAAc,CAACrD,IAAI,GAAGkE,OAAO;IAC7B,OAAO;MAAEpE,GAAG,EAAEsE,aAAa;MAAEpE,IAAI,EAAEqE;IAAe,CAAC;EACvD;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,aAAa,CAACF,IAAI,EAAE;EACzB,MAAMG,KAAK,GAAGH,IAAI,CAACI,SAAS,CAAC,IAAI,CAAC;EAClC,MAAMC,iBAAiB,GAAGF,KAAK,CAACG,gBAAgB,CAAC,MAAM,CAAC;EACxD,MAAMC,QAAQ,GAAGP,IAAI,CAACO,QAAQ,CAACvE,WAAW,EAAE;EAC5C;EACAmE,KAAK,CAACK,eAAe,CAAC,IAAI,CAAC;EAC3B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,iBAAiB,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;IAC/CJ,iBAAiB,CAACI,CAAC,CAAC,CAACD,eAAe,CAAC,IAAI,CAAC;EAC9C;EACA,IAAID,QAAQ,KAAK,QAAQ,EAAE;IACvBI,kBAAkB,CAACX,IAAI,EAAEG,KAAK,CAAC;EACnC,CAAC,MACI,IAAII,QAAQ,KAAK,OAAO,IAAIA,QAAQ,KAAK,QAAQ,IAAIA,QAAQ,KAAK,UAAU,EAAE;IAC/EK,iBAAiB,CAACZ,IAAI,EAAEG,KAAK,CAAC;EAClC;EACAU,YAAY,CAAC,QAAQ,EAAEb,IAAI,EAAEG,KAAK,EAAEQ,kBAAkB,CAAC;EACvDE,YAAY,CAAC,yBAAyB,EAAEb,IAAI,EAAEG,KAAK,EAAES,iBAAiB,CAAC;EACvE,OAAOT,KAAK;AAChB;AACA;AACA,SAASU,YAAY,CAACC,QAAQ,EAAEd,IAAI,EAAEG,KAAK,EAAEY,QAAQ,EAAE;EACnD,MAAMC,kBAAkB,GAAGhB,IAAI,CAACM,gBAAgB,CAACQ,QAAQ,CAAC;EAC1D,IAAIE,kBAAkB,CAACN,MAAM,EAAE;IAC3B,MAAMO,aAAa,GAAGd,KAAK,CAACG,gBAAgB,CAACQ,QAAQ,CAAC;IACtD,KAAK,IAAIL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGO,kBAAkB,CAACN,MAAM,EAAED,CAAC,EAAE,EAAE;MAChDM,QAAQ,CAACC,kBAAkB,CAACP,CAAC,CAAC,EAAEQ,aAAa,CAACR,CAAC,CAAC,CAAC;IACrD;EACJ;AACJ;AACA;AACA,IAAIS,aAAa,GAAG,CAAC;AACrB;AACA,SAASN,iBAAiB,CAACnG,MAAM,EAAE0F,KAAK,EAAE;EACtC;EACA,IAAIA,KAAK,CAACgB,IAAI,KAAK,MAAM,EAAE;IACvBhB,KAAK,CAACtF,KAAK,GAAGJ,MAAM,CAACI,KAAK;EAC9B;EACA;EACA;EACA;EACA,IAAIsF,KAAK,CAACgB,IAAI,KAAK,OAAO,IAAIhB,KAAK,CAACrD,IAAI,EAAE;IACtCqD,KAAK,CAACrD,IAAI,GAAI,aAAYqD,KAAK,CAACrD,IAAK,IAAGoE,aAAa,EAAG,EAAC;EAC7D;AACJ;AACA;AACA,SAASP,kBAAkB,CAAClG,MAAM,EAAE0F,KAAK,EAAE;EACvC,MAAMiB,OAAO,GAAGjB,KAAK,CAACkB,UAAU,CAAC,IAAI,CAAC;EACtC,IAAID,OAAO,EAAE;IACT;IACA;IACA,IAAI;MACAA,OAAO,CAACE,SAAS,CAAC7G,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;IACnC,CAAC,CACD,OAAO8G,EAAE,EAAE,CAAE;EACjB;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,2BAA2B,GAAGzI,+BAA+B,CAAC;EAAE0I,OAAO,EAAE;AAAK,CAAC,CAAC;AACtF;AACA,MAAMC,0BAA0B,GAAG3I,+BAA+B,CAAC;EAAE0I,OAAO,EAAE;AAAM,CAAC,CAAC;AACtF;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,uBAAuB,GAAG,GAAG;AACnC;AACA,MAAMC,uBAAuB,GAAG,IAAIC,GAAG,CAAC;AACpC;AACA,UAAU,CACb,CAAC;AACF;AACA;AACA;AACA,MAAMC,OAAO,CAAC;EACVxD,WAAW,CAACpD,OAAO,EAAE6G,OAAO,EAAExD,SAAS,EAAEyD,OAAO,EAAExD,cAAc,EAAEyD,iBAAiB,EAAE;IACjF,IAAI,CAACF,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACxD,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACyD,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACxD,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACyD,iBAAiB,GAAGA,iBAAiB;IAC1C;AACR;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,iBAAiB,GAAG;MAAEvE,CAAC,EAAE,CAAC;MAAEC,CAAC,EAAE;IAAE,CAAC;IACvC;IACA,IAAI,CAACuE,gBAAgB,GAAG;MAAExE,CAAC,EAAE,CAAC;MAAEC,CAAC,EAAE;IAAE,CAAC;IACtC;AACR;AACA;AACA;IACQ,IAAI,CAACwE,mBAAmB,GAAG,KAAK;IAChC;IACA,IAAI,CAACC,WAAW,GAAG,IAAI9I,OAAO,EAAE;IAChC;IACA,IAAI,CAAC+I,wBAAwB,GAAG9I,YAAY,CAAC+I,KAAK;IAClD;IACA,IAAI,CAACC,sBAAsB,GAAGhJ,YAAY,CAAC+I,KAAK;IAChD;IACA,IAAI,CAACE,mBAAmB,GAAGjJ,YAAY,CAAC+I,KAAK;IAC7C;IACA,IAAI,CAACG,mBAAmB,GAAGlJ,YAAY,CAAC+I,KAAK;IAC7C;IACA,IAAI,CAACI,gBAAgB,GAAG,IAAI;IAC5B;IACA,IAAI,CAACC,0BAA0B,GAAG,IAAI;IACtC;IACA,IAAI,CAACC,QAAQ,GAAG,EAAE;IAClB;IACA,IAAI,CAACC,gBAAgB,GAAG,IAAIjB,GAAG,EAAE;IACjC;IACA,IAAI,CAACkB,UAAU,GAAG,KAAK;IACvB;AACR;AACA;AACA;IACQ,IAAI,CAACC,cAAc,GAAG,CAAC;IACvB,IAAI,CAACC,SAAS,GAAG,KAAK;IACtB;IACA,IAAI,CAACC,aAAa,GAAG,IAAI3J,OAAO,EAAE;IAClC;IACA,IAAI,CAAC4J,OAAO,GAAG,IAAI5J,OAAO,EAAE;IAC5B;IACA,IAAI,CAAC6J,QAAQ,GAAG,IAAI7J,OAAO,EAAE;IAC7B;IACA,IAAI,CAAC8J,KAAK,GAAG,IAAI9J,OAAO,EAAE;IAC1B;IACA,IAAI,CAAC+J,OAAO,GAAG,IAAI/J,OAAO,EAAE;IAC5B;IACA,IAAI,CAACgK,MAAM,GAAG,IAAIhK,OAAO,EAAE;IAC3B;IACA,IAAI,CAACiK,OAAO,GAAG,IAAIjK,OAAO,EAAE;IAC5B;AACR;AACA;AACA;IACQ,IAAI,CAACkK,KAAK,GAAG,IAAI,CAACpB,WAAW;IAC7B;IACA,IAAI,CAACqB,YAAY,GAAIrE,KAAK,IAAK;MAC3B,IAAI,CAAC6D,aAAa,CAACS,IAAI,EAAE;MACzB;MACA,IAAI,IAAI,CAACd,QAAQ,CAACnC,MAAM,EAAE;QACtB,MAAMkD,YAAY,GAAG,IAAI,CAACf,QAAQ,CAACpG,IAAI,CAACoH,MAAM,IAAI;UAC9C,MAAMvE,MAAM,GAAGxG,eAAe,CAACuG,KAAK,CAAC;UACrC,OAAO,CAAC,CAACC,MAAM,KAAKA,MAAM,KAAKuE,MAAM,IAAIA,MAAM,CAAC5D,QAAQ,CAACX,MAAM,CAAC,CAAC;QACrE,CAAC,CAAC;QACF,IAAIsE,YAAY,IAAI,CAAC,IAAI,CAACd,gBAAgB,CAAC/H,GAAG,CAAC6I,YAAY,CAAC,IAAI,CAAC,IAAI,CAACE,QAAQ,EAAE;UAC5E,IAAI,CAACC,uBAAuB,CAACH,YAAY,EAAEvE,KAAK,CAAC;QACrD;MACJ,CAAC,MACI,IAAI,CAAC,IAAI,CAACyE,QAAQ,EAAE;QACrB,IAAI,CAACC,uBAAuB,CAAC,IAAI,CAACC,YAAY,EAAE3E,KAAK,CAAC;MAC1D;IACJ,CAAC;IACD;IACA,IAAI,CAAC4E,YAAY,GAAI5E,KAAK,IAAK;MAC3B,MAAM6E,eAAe,GAAG,IAAI,CAACC,yBAAyB,CAAC9E,KAAK,CAAC;MAC7D,IAAI,CAAC,IAAI,CAAC+C,mBAAmB,EAAE;QAC3B,MAAMgC,SAAS,GAAGC,IAAI,CAACC,GAAG,CAACJ,eAAe,CAACvG,CAAC,GAAG,IAAI,CAAC4G,qBAAqB,CAAC5G,CAAC,CAAC;QAC5E,MAAM6G,SAAS,GAAGH,IAAI,CAACC,GAAG,CAACJ,eAAe,CAACtG,CAAC,GAAG,IAAI,CAAC2G,qBAAqB,CAAC3G,CAAC,CAAC;QAC5E,MAAM6G,eAAe,GAAGL,SAAS,GAAGI,SAAS,IAAI,IAAI,CAACzC,OAAO,CAAC2C,kBAAkB;QAChF;QACA;QACA;QACA;QACA,IAAID,eAAe,EAAE;UACjB,MAAME,cAAc,GAAGC,IAAI,CAACC,GAAG,EAAE,IAAI,IAAI,CAACC,cAAc,GAAG,IAAI,CAACC,kBAAkB,CAAC1F,KAAK,CAAC;UACzF,MAAM2F,SAAS,GAAG,IAAI,CAACC,cAAc;UACrC,IAAI,CAACN,cAAc,EAAE;YACjB,IAAI,CAACO,gBAAgB,CAAC7F,KAAK,CAAC;YAC5B;UACJ;UACA;UACA;UACA;UACA,IAAI,CAAC2F,SAAS,IAAK,CAACA,SAAS,CAACG,UAAU,EAAE,IAAI,CAACH,SAAS,CAACI,WAAW,EAAG,EAAE;YACrE;YACA;YACA/F,KAAK,CAACgG,cAAc,EAAE;YACtB,IAAI,CAACjD,mBAAmB,GAAG,IAAI;YAC/B,IAAI,CAACJ,OAAO,CAACsD,GAAG,CAAC,MAAM,IAAI,CAACC,kBAAkB,CAAClG,KAAK,CAAC,CAAC;UAC1D;QACJ;QACA;MACJ;MACA;MACA,IAAI,IAAI,CAACsD,gBAAgB,EAAE;QACvB;QACA;QACA,IAAI,CAAC,IAAI,CAAC6C,YAAY,IAAK,CAAC,IAAI,CAACA,YAAY,CAAChI,KAAK,IAAI,CAAC,IAAI,CAACgI,YAAY,CAAC/H,MAAO,EAAE;UAC/E,IAAI,CAAC+H,YAAY,GAAG,CAAC,IAAI,CAACC,QAAQ,IAAI,IAAI,CAACzB,YAAY,EAAE3G,qBAAqB,EAAE;QACpF;MACJ;MACA;MACA;MACA;MACAgC,KAAK,CAACgG,cAAc,EAAE;MACtB,MAAMK,0BAA0B,GAAG,IAAI,CAACC,8BAA8B,CAACzB,eAAe,CAAC;MACvF,IAAI,CAAC0B,SAAS,GAAG,IAAI;MACrB,IAAI,CAACC,yBAAyB,GAAG3B,eAAe;MAChD,IAAI,CAAC4B,4BAA4B,CAACJ,0BAA0B,CAAC;MAC7D,IAAI,IAAI,CAACT,cAAc,EAAE;QACrB,IAAI,CAACc,0BAA0B,CAACL,0BAA0B,EAAExB,eAAe,CAAC;MAChF,CAAC,MACI;QACD,MAAM8B,eAAe,GAAG,IAAI,CAAC7D,gBAAgB;QAC7C6D,eAAe,CAACrI,CAAC,GACb+H,0BAA0B,CAAC/H,CAAC,GAAG,IAAI,CAAC4G,qBAAqB,CAAC5G,CAAC,GAAG,IAAI,CAACuE,iBAAiB,CAACvE,CAAC;QAC1FqI,eAAe,CAACpI,CAAC,GACb8H,0BAA0B,CAAC9H,CAAC,GAAG,IAAI,CAAC2G,qBAAqB,CAAC3G,CAAC,GAAG,IAAI,CAACsE,iBAAiB,CAACtE,CAAC;QAC1F,IAAI,CAACqI,0BAA0B,CAACD,eAAe,CAACrI,CAAC,EAAEqI,eAAe,CAACpI,CAAC,CAAC;QACrE;QACA,IAAI,OAAOsI,UAAU,KAAK,WAAW,IAAI,IAAI,CAAClC,YAAY,YAAYkC,UAAU,EAAE;UAC9E,MAAMC,gBAAgB,GAAI,aAAYH,eAAe,CAACrI,CAAE,IAAGqI,eAAe,CAACpI,CAAE,GAAE;UAC/E,IAAI,CAACoG,YAAY,CAACoC,YAAY,CAAC,WAAW,EAAED,gBAAgB,CAAC;QACjE;MACJ;MACA;MACA;MACA;MACA,IAAI,IAAI,CAAC9D,WAAW,CAACgE,SAAS,CAAC3F,MAAM,EAAE;QACnC,IAAI,CAACsB,OAAO,CAACsD,GAAG,CAAC,MAAM;UACnB,IAAI,CAACjD,WAAW,CAACsB,IAAI,CAAC;YAClBlJ,MAAM,EAAE,IAAI;YACZyJ,eAAe,EAAEwB,0BAA0B;YAC3CrG,KAAK;YACLiH,QAAQ,EAAE,IAAI,CAACC,gBAAgB,CAACb,0BAA0B,CAAC;YAC3Dc,KAAK,EAAE,IAAI,CAACC;UAChB,CAAC,CAAC;QACN,CAAC,CAAC;MACN;IACJ,CAAC;IACD;IACA,IAAI,CAACC,UAAU,GAAIrH,KAAK,IAAK;MACzB,IAAI,CAAC6F,gBAAgB,CAAC7F,KAAK,CAAC;IAChC,CAAC;IACD,IAAI,CAACsH,eAAe,CAACzL,OAAO,CAAC,CAAC0L,UAAU,CAAC7E,OAAO,CAAC8E,aAAa,IAAI,IAAI,CAAC;IACvE,IAAI,CAACC,gBAAgB,GAAG,IAAIzI,qBAAqB,CAACE,SAAS,EAAEC,cAAc,CAAC;IAC5EyD,iBAAiB,CAAC8E,gBAAgB,CAAC,IAAI,CAAC;EAC5C;EACA;EACA,IAAIjD,QAAQ,GAAG;IACX,OAAO,IAAI,CAACb,SAAS,IAAI,CAAC,EAAE,IAAI,CAACgC,cAAc,IAAI,IAAI,CAACA,cAAc,CAACnB,QAAQ,CAAC;EACpF;EACA,IAAIA,QAAQ,CAACjJ,KAAK,EAAE;IAChB,MAAMmM,QAAQ,GAAG/N,qBAAqB,CAAC4B,KAAK,CAAC;IAC7C,IAAImM,QAAQ,KAAK,IAAI,CAAC/D,SAAS,EAAE;MAC7B,IAAI,CAACA,SAAS,GAAG+D,QAAQ;MACzB,IAAI,CAACC,6BAA6B,EAAE;MACpC,IAAI,CAACpE,QAAQ,CAAC5D,OAAO,CAAC4E,MAAM,IAAI5I,4BAA4B,CAAC4I,MAAM,EAAEmD,QAAQ,CAAC,CAAC;IACnF;EACJ;EACA;AACJ;AACA;AACA;EACIE,qBAAqB,GAAG;IACpB,OAAO,IAAI,CAACC,YAAY;EAC5B;EACA;EACAC,cAAc,GAAG;IACb,OAAO,IAAI,CAACpD,YAAY;EAC5B;EACA;AACJ;AACA;AACA;EACIqD,iBAAiB,GAAG;IAChB,OAAO,IAAI,CAAClC,UAAU,EAAE,GAAG,IAAI,CAAC+B,qBAAqB,EAAE,GAAG,IAAI,CAACE,cAAc,EAAE;EACnF;EACA;EACAE,WAAW,CAACC,OAAO,EAAE;IACjB,IAAI,CAAC1E,QAAQ,GAAG0E,OAAO,CAACxN,GAAG,CAAC8J,MAAM,IAAI3K,aAAa,CAAC2K,MAAM,CAAC,CAAC;IAC5D,IAAI,CAAChB,QAAQ,CAAC5D,OAAO,CAAC4E,MAAM,IAAI5I,4BAA4B,CAAC4I,MAAM,EAAE,IAAI,CAACC,QAAQ,CAAC,CAAC;IACpF,IAAI,CAACmD,6BAA6B,EAAE;IACpC;IACA;IACA;IACA;IACA,MAAMO,eAAe,GAAG,IAAI3F,GAAG,EAAE;IACjC,IAAI,CAACiB,gBAAgB,CAAC7D,OAAO,CAAC4E,MAAM,IAAI;MACpC,IAAI,IAAI,CAAChB,QAAQ,CAAC5G,OAAO,CAAC4H,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE;QACpC2D,eAAe,CAACC,GAAG,CAAC5D,MAAM,CAAC;MAC/B;IACJ,CAAC,CAAC;IACF,IAAI,CAACf,gBAAgB,GAAG0E,eAAe;IACvC,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;EACIE,mBAAmB,CAACC,QAAQ,EAAE;IAC1B,IAAI,CAACC,gBAAgB,GAAGD,QAAQ;IAChC,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;EACIE,uBAAuB,CAACF,QAAQ,EAAE;IAC9B,IAAI,CAACG,oBAAoB,GAAGH,QAAQ;IACpC,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;EACIhB,eAAe,CAACoB,WAAW,EAAE;IACzB,MAAM7M,OAAO,GAAGhC,aAAa,CAAC6O,WAAW,CAAC;IAC1C,IAAI7M,OAAO,KAAK,IAAI,CAAC8I,YAAY,EAAE;MAC/B,IAAI,IAAI,CAACA,YAAY,EAAE;QACnB,IAAI,CAACgE,2BAA2B,CAAC,IAAI,CAAChE,YAAY,CAAC;MACvD;MACA,IAAI,CAAChC,OAAO,CAACiG,iBAAiB,CAAC,MAAM;QACjC/M,OAAO,CAACgN,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAACxE,YAAY,EAAEhC,0BAA0B,CAAC;QACpFxG,OAAO,CAACgN,gBAAgB,CAAC,YAAY,EAAE,IAAI,CAACxE,YAAY,EAAElC,2BAA2B,CAAC;MAC1F,CAAC,CAAC;MACF,IAAI,CAAC2G,iBAAiB,GAAGC,SAAS;MAClC,IAAI,CAACpE,YAAY,GAAG9I,OAAO;IAC/B;IACA,IAAI,OAAOgL,UAAU,KAAK,WAAW,IAAI,IAAI,CAAClC,YAAY,YAAYkC,UAAU,EAAE;MAC9E,IAAI,CAACmC,gBAAgB,GAAG,IAAI,CAACrE,YAAY,CAACsE,eAAe;IAC7D;IACA,OAAO,IAAI;EACf;EACA;AACJ;AACA;EACIC,mBAAmB,CAACC,eAAe,EAAE;IACjC,IAAI,CAAC7F,gBAAgB,GAAG6F,eAAe,GAAGtP,aAAa,CAACsP,eAAe,CAAC,GAAG,IAAI;IAC/E,IAAI,CAAC9F,mBAAmB,CAAC+F,WAAW,EAAE;IACtC,IAAID,eAAe,EAAE;MACjB,IAAI,CAAC9F,mBAAmB,GAAG,IAAI,CAAClE,cAAc,CACzCkK,MAAM,CAAC,EAAE,CAAC,CACVC,SAAS,CAAC,MAAM,IAAI,CAACC,8BAA8B,EAAE,CAAC;IAC/D;IACA,OAAO,IAAI;EACf;EACA;EACAhC,UAAU,CAACiC,MAAM,EAAE;IACf,IAAI,CAACC,cAAc,GAAGD,MAAM;IAC5B,OAAO,IAAI;EACf;EACA;EACAE,OAAO,GAAG;IACN,IAAI,CAACf,2BAA2B,CAAC,IAAI,CAAChE,YAAY,CAAC;IACnD;IACA;IACA,IAAI,IAAI,CAACmB,UAAU,EAAE,EAAE;MACnB;MACA;MACA6D,UAAU,CAAC,IAAI,CAAChF,YAAY,CAAC;IACjC;IACAgF,UAAU,CAAC,IAAI,CAACC,OAAO,CAAC;IACxB,IAAI,CAACC,eAAe,EAAE;IACtB,IAAI,CAACC,mBAAmB,EAAE;IAC1B,IAAI,CAAClH,iBAAiB,CAACmH,cAAc,CAAC,IAAI,CAAC;IAC3C,IAAI,CAACC,oBAAoB,EAAE;IAC3B,IAAI,CAACnG,aAAa,CAACoG,QAAQ,EAAE;IAC7B,IAAI,CAACnG,OAAO,CAACmG,QAAQ,EAAE;IACvB,IAAI,CAAClG,QAAQ,CAACkG,QAAQ,EAAE;IACxB,IAAI,CAACjG,KAAK,CAACiG,QAAQ,EAAE;IACrB,IAAI,CAAChG,OAAO,CAACgG,QAAQ,EAAE;IACvB,IAAI,CAAC/F,MAAM,CAAC+F,QAAQ,EAAE;IACtB,IAAI,CAAC9F,OAAO,CAAC8F,QAAQ,EAAE;IACvB,IAAI,CAACjH,WAAW,CAACiH,QAAQ,EAAE;IAC3B,IAAI,CAACzG,QAAQ,GAAG,EAAE;IAClB,IAAI,CAACC,gBAAgB,CAACnE,KAAK,EAAE;IAC7B,IAAI,CAACsG,cAAc,GAAGmD,SAAS;IAC/B,IAAI,CAAC1F,mBAAmB,CAAC+F,WAAW,EAAE;IACtC,IAAI,CAAC3B,gBAAgB,CAACnI,KAAK,EAAE;IAC7B,IAAI,CAACgE,gBAAgB,GAAG,IAAI,CAACqB,YAAY,GAAG,IAAI,CAACqE,gBAAgB,GAAG,IAAI,CAACP,oBAAoB,GACzF,IAAI,CAACF,gBAAgB,GAAG,IAAI,CAACqB,OAAO,GAAG,IAAI,CAACH,cAAc,GAAG,IAAI;EACzE;EACA;EACA3D,UAAU,GAAG;IACT,OAAO,IAAI,CAAC/C,mBAAmB,IAAI,IAAI,CAACH,iBAAiB,CAACkD,UAAU,CAAC,IAAI,CAAC;EAC9E;EACA;EACAoE,KAAK,GAAG;IACJ,IAAI,CAACvF,YAAY,CAAC3I,KAAK,CAACO,SAAS,GAAG,IAAI,CAACuM,iBAAiB,IAAI,EAAE;IAChE,IAAI,CAAChG,gBAAgB,GAAG;MAAExE,CAAC,EAAE,CAAC;MAAEC,CAAC,EAAE;IAAE,CAAC;IACtC,IAAI,CAACsE,iBAAiB,GAAG;MAAEvE,CAAC,EAAE,CAAC;MAAEC,CAAC,EAAE;IAAE,CAAC;EAC3C;EACA;AACJ;AACA;AACA;EACI4L,aAAa,CAAC3F,MAAM,EAAE;IAClB,IAAI,CAAC,IAAI,CAACf,gBAAgB,CAAC/H,GAAG,CAAC8I,MAAM,CAAC,IAAI,IAAI,CAAChB,QAAQ,CAAC5G,OAAO,CAAC4H,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE;MAC1E,IAAI,CAACf,gBAAgB,CAAC2E,GAAG,CAAC5D,MAAM,CAAC;MACjC5I,4BAA4B,CAAC4I,MAAM,EAAE,IAAI,CAAC;IAC9C;EACJ;EACA;AACJ;AACA;AACA;EACI4F,YAAY,CAAC5F,MAAM,EAAE;IACjB,IAAI,IAAI,CAACf,gBAAgB,CAAC/H,GAAG,CAAC8I,MAAM,CAAC,EAAE;MACnC,IAAI,CAACf,gBAAgB,CAAC4G,MAAM,CAAC7F,MAAM,CAAC;MACpC5I,4BAA4B,CAAC4I,MAAM,EAAE,IAAI,CAACC,QAAQ,CAAC;IACvD;EACJ;EACA;EACA6F,aAAa,CAACC,SAAS,EAAE;IACrB,IAAI,CAAC7G,UAAU,GAAG6G,SAAS;IAC3B,OAAO,IAAI;EACf;EACA;EACAC,kBAAkB,CAAC7E,SAAS,EAAE;IAC1B,IAAI,CAACC,cAAc,GAAGD,SAAS;EACnC;EACA;AACJ;AACA;EACI8E,mBAAmB,GAAG;IAClB,MAAMvO,QAAQ,GAAG,IAAI,CAAC4J,UAAU,EAAE,GAAG,IAAI,CAAChD,gBAAgB,GAAG,IAAI,CAACD,iBAAiB;IACnF,OAAO;MAAEvE,CAAC,EAAEpC,QAAQ,CAACoC,CAAC;MAAEC,CAAC,EAAErC,QAAQ,CAACqC;IAAE,CAAC;EAC3C;EACA;AACJ;AACA;AACA;EACImM,mBAAmB,CAAClP,KAAK,EAAE;IACvB,IAAI,CAACsH,gBAAgB,GAAG;MAAExE,CAAC,EAAE,CAAC;MAAEC,CAAC,EAAE;IAAE,CAAC;IACtC,IAAI,CAACsE,iBAAiB,CAACvE,CAAC,GAAG9C,KAAK,CAAC8C,CAAC;IAClC,IAAI,CAACuE,iBAAiB,CAACtE,CAAC,GAAG/C,KAAK,CAAC+C,CAAC;IAClC,IAAI,CAAC,IAAI,CAACqH,cAAc,EAAE;MACtB,IAAI,CAACgB,0BAA0B,CAACpL,KAAK,CAAC8C,CAAC,EAAE9C,KAAK,CAAC+C,CAAC,CAAC;IACrD;IACA,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;EACIoM,oBAAoB,CAACnP,KAAK,EAAE;IACxB,IAAI,CAACoP,iBAAiB,GAAGpP,KAAK;IAC9B,OAAO,IAAI;EACf;EACA;EACAqP,4BAA4B,GAAG;IAC3B,MAAM3O,QAAQ,GAAG,IAAI,CAACsK,yBAAyB;IAC/C,IAAItK,QAAQ,IAAI,IAAI,CAAC0J,cAAc,EAAE;MACjC,IAAI,CAACc,0BAA0B,CAAC,IAAI,CAACJ,8BAA8B,CAACpK,QAAQ,CAAC,EAAEA,QAAQ,CAAC;IAC5F;EACJ;EACA;EACA8N,oBAAoB,GAAG;IACnB,IAAI,CAAC/G,wBAAwB,CAACmG,WAAW,EAAE;IAC3C,IAAI,CAACjG,sBAAsB,CAACiG,WAAW,EAAE;IACzC,IAAI,CAAChG,mBAAmB,CAACgG,WAAW,EAAE;EAC1C;EACA;EACAS,eAAe,GAAG;IACd,IAAI,IAAI,CAACzD,QAAQ,EAAE;MACfuD,UAAU,CAAC,IAAI,CAACvD,QAAQ,CAAC;IAC7B;IACA,IAAI,IAAI,CAAC0E,WAAW,EAAE;MAClB,IAAI,CAACA,WAAW,CAACC,OAAO,EAAE;IAC9B;IACA,IAAI,CAAC3E,QAAQ,GAAG,IAAI,CAAC0E,WAAW,GAAG,IAAI;EAC3C;EACA;EACAhB,mBAAmB,GAAG;IAClB,IAAI,IAAI,CAAChC,YAAY,EAAE;MACnB6B,UAAU,CAAC,IAAI,CAAC7B,YAAY,CAAC;IACjC;IACA,IAAI,IAAI,CAACkD,eAAe,EAAE;MACtB,IAAI,CAACA,eAAe,CAACD,OAAO,EAAE;IAClC;IACA,IAAI,CAACjD,YAAY,GAAG,IAAI,CAACkD,eAAe,GAAG,IAAI;EACnD;EACA;AACJ;AACA;AACA;EACInF,gBAAgB,CAAC7F,KAAK,EAAE;IACpB;IACA;IACA;IACA;IACA,IAAI,CAAC,IAAI,CAAC4C,iBAAiB,CAACkD,UAAU,CAAC,IAAI,CAAC,EAAE;MAC1C;IACJ;IACA,IAAI,CAACkE,oBAAoB,EAAE;IAC3B,IAAI,CAACpH,iBAAiB,CAACqI,YAAY,CAAC,IAAI,CAAC;IACzC,IAAI,CAACrD,6BAA6B,EAAE;IACpC,IAAI,IAAI,CAACpE,QAAQ,EAAE;MACf,IAAI,CAACmB,YAAY,CAAC3I,KAAK,CAACkP,uBAAuB,GAAG,IAAI,CAACC,wBAAwB;IACnF;IACA,IAAI,CAAC,IAAI,CAACpI,mBAAmB,EAAE;MAC3B;IACJ;IACA,IAAI,CAACgB,QAAQ,CAACO,IAAI,CAAC;MAAElJ,MAAM,EAAE;IAAK,CAAC,CAAC;IACpC,IAAI,IAAI,CAACwK,cAAc,EAAE;MACrB;MACA,IAAI,CAACA,cAAc,CAACwF,cAAc,EAAE;MACpC,IAAI,CAACC,4BAA4B,EAAE,CAACC,IAAI,CAAC,MAAM;QAC3C,IAAI,CAACC,qBAAqB,CAACvL,KAAK,CAAC;QACjC,IAAI,CAACwL,wBAAwB,EAAE;QAC/B,IAAI,CAAC5I,iBAAiB,CAACqI,YAAY,CAAC,IAAI,CAAC;MAC7C,CAAC,CAAC;IACN,CAAC,MACI;MACD;MACA;MACA;MACA,IAAI,CAACpI,iBAAiB,CAACvE,CAAC,GAAG,IAAI,CAACwE,gBAAgB,CAACxE,CAAC;MAClD,MAAMuG,eAAe,GAAG,IAAI,CAACC,yBAAyB,CAAC9E,KAAK,CAAC;MAC7D,IAAI,CAAC6C,iBAAiB,CAACtE,CAAC,GAAG,IAAI,CAACuE,gBAAgB,CAACvE,CAAC;MAClD,IAAI,CAACoE,OAAO,CAACsD,GAAG,CAAC,MAAM;QACnB,IAAI,CAACjC,KAAK,CAACM,IAAI,CAAC;UACZlJ,MAAM,EAAE,IAAI;UACZ6L,QAAQ,EAAE,IAAI,CAACC,gBAAgB,CAACrC,eAAe,CAAC;UAChD4G,SAAS,EAAE5G;QACf,CAAC,CAAC;MACN,CAAC,CAAC;MACF,IAAI,CAAC2G,wBAAwB,EAAE;MAC/B,IAAI,CAAC5I,iBAAiB,CAACqI,YAAY,CAAC,IAAI,CAAC;IAC7C;EACJ;EACA;EACA/E,kBAAkB,CAAClG,KAAK,EAAE;IACtB,IAAI0L,YAAY,CAAC1L,KAAK,CAAC,EAAE;MACrB,IAAI,CAAC2L,mBAAmB,GAAGpG,IAAI,CAACC,GAAG,EAAE;IACzC;IACA,IAAI,CAACoC,6BAA6B,EAAE;IACpC,MAAMgE,aAAa,GAAG,IAAI,CAAChG,cAAc;IACzC,IAAIgG,aAAa,EAAE;MACf,MAAM/P,OAAO,GAAG,IAAI,CAAC8I,YAAY;MACjC,MAAM6E,MAAM,GAAG3N,OAAO,CAACgQ,UAAU;MACjC,MAAMC,WAAW,GAAG,IAAI,CAAChE,YAAY,GAAG,IAAI,CAACiE,yBAAyB,EAAE;MACxE,MAAMC,MAAM,GAAG,IAAI,CAACpC,OAAO,GAAG,IAAI,CAACA,OAAO,IAAI,IAAI,CAAC1K,SAAS,CAAC+M,aAAa,CAAC,EAAE,CAAC;MAC9E;MACA,MAAMC,UAAU,GAAG,IAAI,CAACvS,cAAc,EAAE;MACxC;MACA6P,MAAM,CAAC2C,YAAY,CAACH,MAAM,EAAEnQ,OAAO,CAAC;MACpC;MACA;MACA,IAAI,CAACiN,iBAAiB,GAAGjN,OAAO,CAACG,KAAK,CAACO,SAAS,IAAI,EAAE;MACtD;MACA;MACA,IAAI,CAAC6J,QAAQ,GAAG,IAAI,CAACgG,qBAAqB,EAAE;MAC5C;MACA;MACA;MACAnQ,gBAAgB,CAACJ,OAAO,EAAE,KAAK,EAAE0G,uBAAuB,CAAC;MACzD,IAAI,CAACrD,SAAS,CAACmN,IAAI,CAACC,WAAW,CAAC9C,MAAM,CAAC+C,YAAY,CAACT,WAAW,EAAEjQ,OAAO,CAAC,CAAC;MAC1E,IAAI,CAAC2Q,yBAAyB,CAAChD,MAAM,EAAE0C,UAAU,CAAC,CAACI,WAAW,CAAC,IAAI,CAAClG,QAAQ,CAAC;MAC7E,IAAI,CAACtC,OAAO,CAACQ,IAAI,CAAC;QAAElJ,MAAM,EAAE;MAAK,CAAC,CAAC,CAAC,CAAC;MACrCwQ,aAAa,CAACa,KAAK,EAAE;MACrB,IAAI,CAACC,iBAAiB,GAAGd,aAAa;MACtC,IAAI,CAACe,aAAa,GAAGf,aAAa,CAACgB,YAAY,CAAC,IAAI,CAAC;IACzD,CAAC,MACI;MACD,IAAI,CAAC9I,OAAO,CAACQ,IAAI,CAAC;QAAElJ,MAAM,EAAE;MAAK,CAAC,CAAC;MACnC,IAAI,CAACsR,iBAAiB,GAAG,IAAI,CAACC,aAAa,GAAG5D,SAAS;IAC3D;IACA;IACA;IACA,IAAI,CAACtB,gBAAgB,CAAClI,KAAK,CAACqM,aAAa,GAAGA,aAAa,CAACiB,oBAAoB,EAAE,GAAG,EAAE,CAAC;EAC1F;EACA;AACJ;AACA;AACA;AACA;AACA;EACInI,uBAAuB,CAACoI,gBAAgB,EAAE9M,KAAK,EAAE;IAC7C;IACA;IACA,IAAI,IAAI,CAACyJ,cAAc,EAAE;MACrBzJ,KAAK,CAAC+M,eAAe,EAAE;IAC3B;IACA,MAAMjH,UAAU,GAAG,IAAI,CAACA,UAAU,EAAE;IACpC,MAAMkH,eAAe,GAAGtB,YAAY,CAAC1L,KAAK,CAAC;IAC3C,MAAMiN,sBAAsB,GAAG,CAACD,eAAe,IAAIhN,KAAK,CAACkN,MAAM,KAAK,CAAC;IACrE,MAAMxE,WAAW,GAAG,IAAI,CAAC/D,YAAY;IACrC,MAAM1E,MAAM,GAAGxG,eAAe,CAACuG,KAAK,CAAC;IACrC,MAAMmN,gBAAgB,GAAG,CAACH,eAAe,IAAI,IAAI,CAACrB,mBAAmB,IACjE,IAAI,CAACA,mBAAmB,GAAGrJ,uBAAuB,GAAGiD,IAAI,CAACC,GAAG,EAAE;IACnE,MAAM4H,WAAW,GAAGJ,eAAe,GAAGhT,gCAAgC,CAACgG,KAAK,CAAC,GACzE/F,+BAA+B,CAAC+F,KAAK,CAAC;IAC1C;IACA;IACA;IACA;IACA;IACA;IACA,IAAIC,MAAM,IAAIA,MAAM,CAACoN,SAAS,IAAIrN,KAAK,CAAC8B,IAAI,KAAK,WAAW,EAAE;MAC1D9B,KAAK,CAACgG,cAAc,EAAE;IAC1B;IACA;IACA,IAAIF,UAAU,IAAImH,sBAAsB,IAAIE,gBAAgB,IAAIC,WAAW,EAAE;MACzE;IACJ;IACA;IACA;IACA;IACA,IAAI,IAAI,CAAC5J,QAAQ,CAACnC,MAAM,EAAE;MACtB,IAAI,CAAC8J,wBAAwB,GAAGzC,WAAW,CAAC1M,KAAK,CAACkP,uBAAuB,IAAI,EAAE;MAC/ExC,WAAW,CAAC1M,KAAK,CAACkP,uBAAuB,GAAG,aAAa;IAC7D;IACA,IAAI,CAACnI,mBAAmB,GAAG,IAAI,CAACwD,SAAS,GAAG,KAAK;IACjD;IACA;IACA,IAAI,CAACyD,oBAAoB,EAAE;IAC3B,IAAI,CAAC/G,wBAAwB,GAAG,IAAI,CAACL,iBAAiB,CAAC0K,WAAW,CAAChE,SAAS,CAAC,IAAI,CAAC1E,YAAY,CAAC;IAC/F,IAAI,CAACzB,sBAAsB,GAAG,IAAI,CAACP,iBAAiB,CAAC2K,SAAS,CAACjE,SAAS,CAAC,IAAI,CAACjC,UAAU,CAAC;IACzF,IAAI,CAACjE,mBAAmB,GAAG,IAAI,CAACR,iBAAiB,CAC5C4K,QAAQ,CAAC,IAAI,CAAC7T,cAAc,EAAE,CAAC,CAC/B2P,SAAS,CAACmE,WAAW,IAAI,IAAI,CAACC,eAAe,CAACD,WAAW,CAAC,CAAC;IAChE,IAAI,IAAI,CAACnK,gBAAgB,EAAE;MACvB,IAAI,CAACqK,aAAa,GAAG7P,oBAAoB,CAAC,IAAI,CAACwF,gBAAgB,CAAC;IACpE;IACA;IACA;IACA;IACA,MAAMsK,eAAe,GAAG,IAAI,CAACrF,gBAAgB;IAC7C,IAAI,CAACsF,wBAAwB,GAAGD,eAAe,IAAIA,eAAe,CAACtF,QAAQ,IACvE,CAACsF,eAAe,CAACE,SAAS,GAAG;MAAExP,CAAC,EAAE,CAAC;MAAEC,CAAC,EAAE;IAAE,CAAC,GAC3C,IAAI,CAACwP,4BAA4B,CAACjB,gBAAgB,EAAE9M,KAAK,CAAC;IAC9D,MAAM6E,eAAe,GAAG,IAAI,CAACK,qBAAqB,GAAG,IAAI,CAACsB,yBAAyB,GAC/E,IAAI,CAAC1B,yBAAyB,CAAC9E,KAAK,CAAC;IACzC,IAAI,CAACoH,sBAAsB,GAAG;MAAE9I,CAAC,EAAE,CAAC;MAAEC,CAAC,EAAE;IAAE,CAAC;IAC5C,IAAI,CAACyP,qCAAqC,GAAG;MAAE1P,CAAC,EAAEuG,eAAe,CAACvG,CAAC;MAAEC,CAAC,EAAEsG,eAAe,CAACtG;IAAE,CAAC;IAC3F,IAAI,CAACkH,cAAc,GAAGF,IAAI,CAACC,GAAG,EAAE;IAChC,IAAI,CAAC5C,iBAAiB,CAACqL,aAAa,CAAC,IAAI,EAAEjO,KAAK,CAAC;EACrD;EACA;EACAuL,qBAAqB,CAACvL,KAAK,EAAE;IACzB;IACA;IACA;IACA;IACA/D,gBAAgB,CAAC,IAAI,CAAC0I,YAAY,EAAE,IAAI,EAAEpC,uBAAuB,CAAC;IAClE,IAAI,CAACqH,OAAO,CAACiC,UAAU,CAACU,YAAY,CAAC,IAAI,CAAC5H,YAAY,EAAE,IAAI,CAACiF,OAAO,CAAC;IACrE,IAAI,CAACC,eAAe,EAAE;IACtB,IAAI,CAACC,mBAAmB,EAAE;IAC1B,IAAI,CAAC6D,aAAa,GAAG,IAAI,CAACxH,YAAY,GAAG,IAAI,CAAC2C,iBAAiB,GAAGC,SAAS;IAC3E;IACA,IAAI,CAACpG,OAAO,CAACsD,GAAG,CAAC,MAAM;MACnB,MAAMN,SAAS,GAAG,IAAI,CAACC,cAAc;MACrC,MAAMsI,YAAY,GAAGvI,SAAS,CAACiH,YAAY,CAAC,IAAI,CAAC;MACjD,MAAM/H,eAAe,GAAG,IAAI,CAACC,yBAAyB,CAAC9E,KAAK,CAAC;MAC7D,MAAMiH,QAAQ,GAAG,IAAI,CAACC,gBAAgB,CAACrC,eAAe,CAAC;MACvD,MAAMsJ,sBAAsB,GAAGxI,SAAS,CAACyI,gBAAgB,CAACvJ,eAAe,CAACvG,CAAC,EAAEuG,eAAe,CAACtG,CAAC,CAAC;MAC/F,IAAI,CAACyF,KAAK,CAACM,IAAI,CAAC;QAAElJ,MAAM,EAAE,IAAI;QAAE6L,QAAQ;QAAEwE,SAAS,EAAE5G;MAAgB,CAAC,CAAC;MACvE,IAAI,CAACV,OAAO,CAACG,IAAI,CAAC;QACd+J,IAAI,EAAE,IAAI;QACVH,YAAY;QACZI,aAAa,EAAE,IAAI,CAAC3B,aAAa;QACjChH,SAAS,EAAEA,SAAS;QACpB4I,iBAAiB,EAAE,IAAI,CAAC7B,iBAAiB;QACzCyB,sBAAsB;QACtBlH,QAAQ;QACRwE,SAAS,EAAE5G;MACf,CAAC,CAAC;MACFc,SAAS,CAAC6I,IAAI,CAAC,IAAI,EAAEN,YAAY,EAAE,IAAI,CAACvB,aAAa,EAAE,IAAI,CAACD,iBAAiB,EAAEyB,sBAAsB,EAAElH,QAAQ,EAAEpC,eAAe,CAAC;MACjI,IAAI,CAACe,cAAc,GAAG,IAAI,CAAC8G,iBAAiB;IAChD,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;EACIhG,0BAA0B,CAAC;IAAEpI,CAAC;IAAEC;EAAE,CAAC,EAAE;IAAED,CAAC,EAAEmQ,IAAI;IAAElQ,CAAC,EAAEmQ;EAAK,CAAC,EAAE;IACvD;IACA,IAAIC,YAAY,GAAG,IAAI,CAACjC,iBAAiB,CAACkC,gCAAgC,CAAC,IAAI,EAAEtQ,CAAC,EAAEC,CAAC,CAAC;IACtF;IACA;IACA;IACA;IACA,IAAI,CAACoQ,YAAY,IAAI,IAAI,CAAC/I,cAAc,KAAK,IAAI,CAAC8G,iBAAiB,IAC/D,IAAI,CAACA,iBAAiB,CAAC0B,gBAAgB,CAAC9P,CAAC,EAAEC,CAAC,CAAC,EAAE;MAC/CoQ,YAAY,GAAG,IAAI,CAACjC,iBAAiB;IACzC;IACA,IAAIiC,YAAY,IAAIA,YAAY,KAAK,IAAI,CAAC/I,cAAc,EAAE;MACtD,IAAI,CAACjD,OAAO,CAACsD,GAAG,CAAC,MAAM;QACnB;QACA,IAAI,CAAC/B,MAAM,CAACI,IAAI,CAAC;UAAE+J,IAAI,EAAE,IAAI;UAAE1I,SAAS,EAAE,IAAI,CAACC;QAAe,CAAC,CAAC;QAChE,IAAI,CAACA,cAAc,CAACiJ,IAAI,CAAC,IAAI,CAAC;QAC9B;QACA,IAAI,CAACjJ,cAAc,GAAG+I,YAAY;QAClC,IAAI,CAAC/I,cAAc,CAACkJ,KAAK,CAAC,IAAI,EAAExQ,CAAC,EAAEC,CAAC,EAAEoQ,YAAY,KAAK,IAAI,CAACjC,iBAAiB;QACzE;QACA;QACAiC,YAAY,CAACI,eAAe,GAAG,IAAI,CAACpC,aAAa,GAAG5D,SAAS,CAAC;QAClE,IAAI,CAAC9E,OAAO,CAACK,IAAI,CAAC;UACd+J,IAAI,EAAE,IAAI;UACV1I,SAAS,EAAEgJ,YAAY;UACvBT,YAAY,EAAES,YAAY,CAAC/B,YAAY,CAAC,IAAI;QAChD,CAAC,CAAC;MACN,CAAC,CAAC;IACN;IACA;IACA,IAAI,IAAI,CAAC9G,UAAU,EAAE,EAAE;MACnB,IAAI,CAACF,cAAc,CAACoJ,0BAA0B,CAACP,IAAI,EAAEC,IAAI,CAAC;MAC1D,IAAI,CAAC9I,cAAc,CAACqJ,SAAS,CAAC,IAAI,EAAE3Q,CAAC,EAAEC,CAAC,EAAE,IAAI,CAAC6I,sBAAsB,CAAC;MACtE,IAAI,CAAC8H,sBAAsB,CAAC5Q,CAAC,GAAG,IAAI,CAACuP,wBAAwB,CAACvP,CAAC,EAAEC,CAAC,GAAG,IAAI,CAACsP,wBAAwB,CAACtP,CAAC,CAAC;IACzG;EACJ;EACA;AACJ;AACA;AACA;EACI6N,qBAAqB,GAAG;IACpB,MAAM+C,aAAa,GAAG,IAAI,CAAC5G,gBAAgB;IAC3C,MAAM6G,YAAY,GAAG,IAAI,CAACA,YAAY;IACtC,MAAMxB,eAAe,GAAGuB,aAAa,GAAGA,aAAa,CAAC7G,QAAQ,GAAG,IAAI;IACrE,IAAI+G,OAAO;IACX,IAAIzB,eAAe,IAAIuB,aAAa,EAAE;MAClC;MACA;MACA,MAAMG,QAAQ,GAAGH,aAAa,CAACrB,SAAS,GAAG,IAAI,CAACnJ,YAAY,CAAC3G,qBAAqB,EAAE,GAAG,IAAI;MAC3F,MAAMuR,OAAO,GAAGJ,aAAa,CAACK,aAAa,CAACC,kBAAkB,CAAC7B,eAAe,EAAEuB,aAAa,CAACpN,OAAO,CAAC;MACtGwN,OAAO,CAACG,aAAa,EAAE;MACvBL,OAAO,GAAGM,WAAW,CAACJ,OAAO,EAAE,IAAI,CAACrQ,SAAS,CAAC;MAC9C,IAAI,CAAC4L,WAAW,GAAGyE,OAAO;MAC1B,IAAIJ,aAAa,CAACrB,SAAS,EAAE;QACzB8B,gBAAgB,CAACP,OAAO,EAAEC,QAAQ,CAAC;MACvC,CAAC,MACI;QACDD,OAAO,CAACrT,KAAK,CAACO,SAAS,GACnBsT,YAAY,CAAC,IAAI,CAAC3K,qBAAqB,CAAC5G,CAAC,EAAE,IAAI,CAAC4G,qBAAqB,CAAC3G,CAAC,CAAC;MAChF;IACJ,CAAC,MACI;MACD,MAAM1C,OAAO,GAAG,IAAI,CAAC8I,YAAY;MACjC0K,OAAO,GAAGxO,aAAa,CAAChF,OAAO,CAAC;MAChC+T,gBAAgB,CAACP,OAAO,EAAExT,OAAO,CAACmC,qBAAqB,EAAE,CAAC;MAC1D,IAAI,IAAI,CAAC8K,iBAAiB,EAAE;QACxBuG,OAAO,CAACrT,KAAK,CAACO,SAAS,GAAG,IAAI,CAACuM,iBAAiB;MACpD;IACJ;IACA5N,YAAY,CAACmU,OAAO,CAACrT,KAAK,EAAE;MACxB;MACA;MACA,gBAAgB,EAAE,MAAM;MACxB;MACA,QAAQ,EAAE,GAAG;MACb,UAAU,EAAE,OAAO;MACnB,KAAK,EAAE,GAAG;MACV,MAAM,EAAE,GAAG;MACX,SAAS,EAAG,GAAE,IAAI,CAAC0G,OAAO,CAACoN,MAAM,IAAI,IAAK;IAC9C,CAAC,EAAEvN,uBAAuB,CAAC;IAC3B3G,4BAA4B,CAACyT,OAAO,EAAE,KAAK,CAAC;IAC5CA,OAAO,CAACU,SAAS,CAAC3H,GAAG,CAAC,kBAAkB,CAAC;IACzCiH,OAAO,CAACtI,YAAY,CAAC,KAAK,EAAE,IAAI,CAACrD,UAAU,CAAC;IAC5C,IAAI0L,YAAY,EAAE;MACd,IAAIY,KAAK,CAACC,OAAO,CAACb,YAAY,CAAC,EAAE;QAC7BA,YAAY,CAACxP,OAAO,CAACsQ,SAAS,IAAIb,OAAO,CAACU,SAAS,CAAC3H,GAAG,CAAC8H,SAAS,CAAC,CAAC;MACvE,CAAC,MACI;QACDb,OAAO,CAACU,SAAS,CAAC3H,GAAG,CAACgH,YAAY,CAAC;MACvC;IACJ;IACA,OAAOC,OAAO;EAClB;EACA;AACJ;AACA;AACA;EACIhE,4BAA4B,GAAG;IAC3B;IACA,IAAI,CAAC,IAAI,CAAC9E,SAAS,EAAE;MACjB,OAAO4J,OAAO,CAACC,OAAO,EAAE;IAC5B;IACA,MAAMC,eAAe,GAAG,IAAI,CAACvI,YAAY,CAAC9J,qBAAqB,EAAE;IACjE;IACA,IAAI,CAACoI,QAAQ,CAAC2J,SAAS,CAAC3H,GAAG,CAAC,oBAAoB,CAAC;IACjD;IACA,IAAI,CAAC8G,sBAAsB,CAACmB,eAAe,CAAChU,IAAI,EAAEgU,eAAe,CAAClU,GAAG,CAAC;IACtE;IACA;IACA;IACA;IACA,MAAMmU,QAAQ,GAAGxT,kCAAkC,CAAC,IAAI,CAACsJ,QAAQ,CAAC;IAClE,IAAIkK,QAAQ,KAAK,CAAC,EAAE;MAChB,OAAOH,OAAO,CAACC,OAAO,EAAE;IAC5B;IACA,OAAO,IAAI,CAACzN,OAAO,CAACiG,iBAAiB,CAAC,MAAM;MACxC,OAAO,IAAIuH,OAAO,CAACC,OAAO,IAAI;QAC1B,MAAMG,OAAO,GAAKvQ,KAAK,IAAK;UACxB,IAAIkC,EAAE;UACN,IAAI,CAAClC,KAAK,IAAKvG,eAAe,CAACuG,KAAK,CAAC,KAAK,IAAI,CAACoG,QAAQ,IACnDpG,KAAK,CAACwQ,YAAY,KAAK,WAAY,EAAE;YACrC,CAACtO,EAAE,GAAG,IAAI,CAACkE,QAAQ,MAAM,IAAI,IAAIlE,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACuO,mBAAmB,CAAC,eAAe,EAAEF,OAAO,CAAC;YAC1GH,OAAO,EAAE;YACTM,YAAY,CAACC,OAAO,CAAC;UACzB;QACJ,CAAE;QACF;QACA;QACA;QACA,MAAMA,OAAO,GAAGC,UAAU,CAACL,OAAO,EAAED,QAAQ,GAAG,GAAG,CAAC;QACnD,IAAI,CAAClK,QAAQ,CAACyC,gBAAgB,CAAC,eAAe,EAAE0H,OAAO,CAAC;MAC5D,CAAC,CAAC;IACN,CAAC,CAAC;EACN;EACA;EACAxE,yBAAyB,GAAG;IACxB,MAAM8E,iBAAiB,GAAG,IAAI,CAACpI,oBAAoB;IACnD,MAAMqI,mBAAmB,GAAGD,iBAAiB,GAAGA,iBAAiB,CAACvI,QAAQ,GAAG,IAAI;IACjF,IAAIwD,WAAW;IACf,IAAIgF,mBAAmB,EAAE;MACrB,IAAI,CAAC9F,eAAe,GAAG6F,iBAAiB,CAACrB,aAAa,CAACC,kBAAkB,CAACqB,mBAAmB,EAAED,iBAAiB,CAAC9O,OAAO,CAAC;MACzH,IAAI,CAACiJ,eAAe,CAAC0E,aAAa,EAAE;MACpC5D,WAAW,GAAG6D,WAAW,CAAC,IAAI,CAAC3E,eAAe,EAAE,IAAI,CAAC9L,SAAS,CAAC;IACnE,CAAC,MACI;MACD4M,WAAW,GAAGjL,aAAa,CAAC,IAAI,CAAC8D,YAAY,CAAC;IAClD;IACAmH,WAAW,CAACiE,SAAS,CAAC3H,GAAG,CAAC,sBAAsB,CAAC;IACjD,OAAO0D,WAAW;EACtB;EACA;AACJ;AACA;AACA;AACA;EACIiC,4BAA4B,CAACjB,gBAAgB,EAAE9M,KAAK,EAAE;IAClD,MAAM+Q,WAAW,GAAG,IAAI,CAACpM,YAAY,CAAC3G,qBAAqB,EAAE;IAC7D,MAAMgT,aAAa,GAAGlE,gBAAgB,KAAK,IAAI,CAACnI,YAAY,GAAG,IAAI,GAAGmI,gBAAgB;IACtF,MAAMmE,aAAa,GAAGD,aAAa,GAAGA,aAAa,CAAChT,qBAAqB,EAAE,GAAG+S,WAAW;IACzF,MAAMG,KAAK,GAAGxF,YAAY,CAAC1L,KAAK,CAAC,GAAGA,KAAK,CAACmR,aAAa,CAAC,CAAC,CAAC,GAAGnR,KAAK;IAClE,MAAMN,cAAc,GAAG,IAAI,CAAC0R,0BAA0B,EAAE;IACxD,MAAM9S,CAAC,GAAG4S,KAAK,CAACG,KAAK,GAAGJ,aAAa,CAAC5U,IAAI,GAAGqD,cAAc,CAACrD,IAAI;IAChE,MAAMkC,CAAC,GAAG2S,KAAK,CAACI,KAAK,GAAGL,aAAa,CAAC9U,GAAG,GAAGuD,cAAc,CAACvD,GAAG;IAC9D,OAAO;MACHmC,CAAC,EAAE2S,aAAa,CAAC5U,IAAI,GAAG0U,WAAW,CAAC1U,IAAI,GAAGiC,CAAC;MAC5CC,CAAC,EAAE0S,aAAa,CAAC9U,GAAG,GAAG4U,WAAW,CAAC5U,GAAG,GAAGoC;IAC7C,CAAC;EACL;EACA;EACAuG,yBAAyB,CAAC9E,KAAK,EAAE;IAC7B,MAAMN,cAAc,GAAG,IAAI,CAAC0R,0BAA0B,EAAE;IACxD,MAAMF,KAAK,GAAGxF,YAAY,CAAC1L,KAAK,CAAC;IAC7B;IACA;IACA;IACA;IACA;IACA;IACA;IACCA,KAAK,CAACuR,OAAO,CAAC,CAAC,CAAC,IAAIvR,KAAK,CAACwR,cAAc,CAAC,CAAC,CAAC,IAAI;MAAEH,KAAK,EAAE,CAAC;MAAEC,KAAK,EAAE;IAAE,CAAC,GAAItR,KAAK;IACnF,MAAM1B,CAAC,GAAG4S,KAAK,CAACG,KAAK,GAAG3R,cAAc,CAACrD,IAAI;IAC3C,MAAMkC,CAAC,GAAG2S,KAAK,CAACI,KAAK,GAAG5R,cAAc,CAACvD,GAAG;IAC1C;IACA;IACA,IAAI,IAAI,CAAC6M,gBAAgB,EAAE;MACvB,MAAMyI,SAAS,GAAG,IAAI,CAACzI,gBAAgB,CAAC0I,YAAY,EAAE;MACtD,IAAID,SAAS,EAAE;QACX,MAAME,QAAQ,GAAG,IAAI,CAAC3I,gBAAgB,CAAC4I,cAAc,EAAE;QACvDD,QAAQ,CAACrT,CAAC,GAAGA,CAAC;QACdqT,QAAQ,CAACpT,CAAC,GAAGA,CAAC;QACd,OAAOoT,QAAQ,CAACE,eAAe,CAACJ,SAAS,CAACK,OAAO,EAAE,CAAC;MACxD;IACJ;IACA,OAAO;MAAExT,CAAC;MAAEC;IAAE,CAAC;EACnB;EACA;EACA+H,8BAA8B,CAAC4K,KAAK,EAAE;IAClC,MAAMa,iBAAiB,GAAG,IAAI,CAACnM,cAAc,GAAG,IAAI,CAACA,cAAc,CAACoM,QAAQ,GAAG,IAAI;IACnF,IAAI;MAAE1T,CAAC;MAAEC;IAAE,CAAC,GAAG,IAAI,CAAC0T,iBAAiB,GAAG,IAAI,CAACA,iBAAiB,CAACf,KAAK,EAAE,IAAI,CAAC,GAAGA,KAAK;IACnF,IAAI,IAAI,CAACc,QAAQ,KAAK,GAAG,IAAID,iBAAiB,KAAK,GAAG,EAAE;MACpDxT,CAAC,GAAG,IAAI,CAAC2G,qBAAqB,CAAC3G,CAAC;IACpC,CAAC,MACI,IAAI,IAAI,CAACyT,QAAQ,KAAK,GAAG,IAAID,iBAAiB,KAAK,GAAG,EAAE;MACzDzT,CAAC,GAAG,IAAI,CAAC4G,qBAAqB,CAAC5G,CAAC;IACpC;IACA,IAAI,IAAI,CAACqP,aAAa,EAAE;MACpB,MAAM;QAAErP,CAAC,EAAE4T,OAAO;QAAE3T,CAAC,EAAE4T;MAAQ,CAAC,GAAG,IAAI,CAACtE,wBAAwB;MAChE,MAAMuE,YAAY,GAAG,IAAI,CAACzE,aAAa;MACvC,MAAM0E,WAAW,GAAG,IAAI,CAAClM,YAAY;MACrC,MAAMmM,IAAI,GAAGF,YAAY,CAACjW,GAAG,GAAGgW,OAAO;MACvC,MAAMI,IAAI,GAAGH,YAAY,CAAClU,MAAM,IAAImU,WAAW,CAACjU,MAAM,GAAG+T,OAAO,CAAC;MACjE,MAAMK,IAAI,GAAGJ,YAAY,CAAC/V,IAAI,GAAG6V,OAAO;MACxC,MAAMO,IAAI,GAAGL,YAAY,CAACnU,KAAK,IAAIoU,WAAW,CAAClU,KAAK,GAAG+T,OAAO,CAAC;MAC/D5T,CAAC,GAAGoU,OAAO,CAACpU,CAAC,EAAEkU,IAAI,EAAEC,IAAI,CAAC;MAC1BlU,CAAC,GAAGmU,OAAO,CAACnU,CAAC,EAAE+T,IAAI,EAAEC,IAAI,CAAC;IAC9B;IACA,OAAO;MAAEjU,CAAC;MAAEC;IAAE,CAAC;EACnB;EACA;EACAkI,4BAA4B,CAACkM,qBAAqB,EAAE;IAChD,MAAM;MAAErU,CAAC;MAAEC;IAAE,CAAC,GAAGoU,qBAAqB;IACtC,MAAMxL,KAAK,GAAG,IAAI,CAACC,sBAAsB;IACzC,MAAMwL,uBAAuB,GAAG,IAAI,CAAC5E,qCAAqC;IAC1E;IACA,MAAM6E,OAAO,GAAG7N,IAAI,CAACC,GAAG,CAAC3G,CAAC,GAAGsU,uBAAuB,CAACtU,CAAC,CAAC;IACvD,MAAMwU,OAAO,GAAG9N,IAAI,CAACC,GAAG,CAAC1G,CAAC,GAAGqU,uBAAuB,CAACrU,CAAC,CAAC;IACvD;IACA;IACA;IACA;IACA,IAAIsU,OAAO,GAAG,IAAI,CAACnQ,OAAO,CAACqQ,+BAA+B,EAAE;MACxD5L,KAAK,CAAC7I,CAAC,GAAGA,CAAC,GAAGsU,uBAAuB,CAACtU,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;MAChDsU,uBAAuB,CAACtU,CAAC,GAAGA,CAAC;IACjC;IACA,IAAIwU,OAAO,GAAG,IAAI,CAACpQ,OAAO,CAACqQ,+BAA+B,EAAE;MACxD5L,KAAK,CAAC5I,CAAC,GAAGA,CAAC,GAAGqU,uBAAuB,CAACrU,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;MAChDqU,uBAAuB,CAACrU,CAAC,GAAGA,CAAC;IACjC;IACA,OAAO4I,KAAK;EAChB;EACA;EACAS,6BAA6B,GAAG;IAC5B,IAAI,CAAC,IAAI,CAACjD,YAAY,IAAI,CAAC,IAAI,CAACnB,QAAQ,EAAE;MACtC;IACJ;IACA,MAAMwP,YAAY,GAAG,IAAI,CAACxP,QAAQ,CAACnC,MAAM,GAAG,CAAC,IAAI,CAAC,IAAI,CAACyE,UAAU,EAAE;IACnE,IAAIkN,YAAY,KAAK,IAAI,CAACzP,0BAA0B,EAAE;MAClD,IAAI,CAACA,0BAA0B,GAAGyP,YAAY;MAC9CpX,4BAA4B,CAAC,IAAI,CAAC+I,YAAY,EAAEqO,YAAY,CAAC;IACjE;EACJ;EACA;EACArK,2BAA2B,CAAC9M,OAAO,EAAE;IACjCA,OAAO,CAAC4U,mBAAmB,CAAC,WAAW,EAAE,IAAI,CAACpM,YAAY,EAAEhC,0BAA0B,CAAC;IACvFxG,OAAO,CAAC4U,mBAAmB,CAAC,YAAY,EAAE,IAAI,CAACpM,YAAY,EAAElC,2BAA2B,CAAC;EAC7F;EACA;AACJ;AACA;AACA;AACA;EACIyE,0BAA0B,CAACtI,CAAC,EAAEC,CAAC,EAAE;IAC7B,MAAMhC,SAAS,GAAGsT,YAAY,CAACvR,CAAC,EAAEC,CAAC,CAAC;IACpC;IACA;IACA;IACA,IAAI,IAAI,CAACuK,iBAAiB,IAAI,IAAI,EAAE;MAChC,IAAI,CAACA,iBAAiB,GAAG,IAAI,CAACnE,YAAY,CAAC3I,KAAK,CAACO,SAAS,IACnD,IAAI,CAACoI,YAAY,CAAC3I,KAAK,CAACO,SAAS,IAAI,MAAM,GAC5C,IAAI,CAACoI,YAAY,CAAC3I,KAAK,CAACO,SAAS,GACjC,EAAE;IACZ;IACA;IACA;IACA;IACA,IAAI,CAACoI,YAAY,CAAC3I,KAAK,CAACO,SAAS,GAAGD,iBAAiB,CAACC,SAAS,EAAE,IAAI,CAACuM,iBAAiB,CAAC;EAC5F;EACA;AACJ;AACA;AACA;AACA;EACIoG,sBAAsB,CAAC5Q,CAAC,EAAEC,CAAC,EAAE;IACzB,IAAI2D,EAAE;IACN;IACA;IACA,MAAM1F,gBAAgB,GAAG,CAAC,CAAC0F,EAAE,GAAG,IAAI,CAACqG,gBAAgB,MAAM,IAAI,IAAIrG,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACoG,QAAQ,IAAIS,SAAS,GAAG,IAAI,CAACD,iBAAiB;IAC7I,MAAMvM,SAAS,GAAGsT,YAAY,CAACvR,CAAC,EAAEC,CAAC,CAAC;IACpC,IAAI,CAAC6H,QAAQ,CAACpK,KAAK,CAACO,SAAS,GAAGD,iBAAiB,CAACC,SAAS,EAAEC,gBAAgB,CAAC;EAClF;EACA;AACJ;AACA;AACA;EACI0K,gBAAgB,CAAC+L,eAAe,EAAE;IAC9B,MAAMC,cAAc,GAAG,IAAI,CAAChO,qBAAqB;IACjD,IAAIgO,cAAc,EAAE;MAChB,OAAO;QAAE5U,CAAC,EAAE2U,eAAe,CAAC3U,CAAC,GAAG4U,cAAc,CAAC5U,CAAC;QAAEC,CAAC,EAAE0U,eAAe,CAAC1U,CAAC,GAAG2U,cAAc,CAAC3U;MAAE,CAAC;IAC/F;IACA,OAAO;MAAED,CAAC,EAAE,CAAC;MAAEC,CAAC,EAAE;IAAE,CAAC;EACzB;EACA;EACAiN,wBAAwB,GAAG;IACvB,IAAI,CAACmC,aAAa,GAAG,IAAI,CAACxH,YAAY,GAAG4C,SAAS;IAClD,IAAI,CAACtB,gBAAgB,CAACnI,KAAK,EAAE;EACjC;EACA;AACJ;AACA;AACA;EACIiK,8BAA8B,GAAG;IAC7B,IAAI;MAAEjL,CAAC;MAAEC;IAAE,CAAC,GAAG,IAAI,CAACsE,iBAAiB;IACrC,IAAKvE,CAAC,KAAK,CAAC,IAAIC,CAAC,KAAK,CAAC,IAAK,IAAI,CAACuH,UAAU,EAAE,IAAI,CAAC,IAAI,CAACxC,gBAAgB,EAAE;MACrE;IACJ;IACA,MAAM8O,YAAY,GAAG,IAAI,CAAC9O,gBAAgB,CAACtF,qBAAqB,EAAE;IAClE,MAAM+S,WAAW,GAAG,IAAI,CAACpM,YAAY,CAAC3G,qBAAqB,EAAE;IAC7D;IACA;IACA,IAAKoU,YAAY,CAACjU,KAAK,KAAK,CAAC,IAAIiU,YAAY,CAAChU,MAAM,KAAK,CAAC,IACrD2S,WAAW,CAAC5S,KAAK,KAAK,CAAC,IAAI4S,WAAW,CAAC3S,MAAM,KAAK,CAAE,EAAE;MACvD;IACJ;IACA,MAAM+U,YAAY,GAAGf,YAAY,CAAC/V,IAAI,GAAG0U,WAAW,CAAC1U,IAAI;IACzD,MAAM+W,aAAa,GAAGrC,WAAW,CAAC9S,KAAK,GAAGmU,YAAY,CAACnU,KAAK;IAC5D,MAAMoV,WAAW,GAAGjB,YAAY,CAACjW,GAAG,GAAG4U,WAAW,CAAC5U,GAAG;IACtD,MAAMmX,cAAc,GAAGvC,WAAW,CAAC7S,MAAM,GAAGkU,YAAY,CAAClU,MAAM;IAC/D;IACA;IACA,IAAIkU,YAAY,CAACjU,KAAK,GAAG4S,WAAW,CAAC5S,KAAK,EAAE;MACxC,IAAIgV,YAAY,GAAG,CAAC,EAAE;QAClB7U,CAAC,IAAI6U,YAAY;MACrB;MACA,IAAIC,aAAa,GAAG,CAAC,EAAE;QACnB9U,CAAC,IAAI8U,aAAa;MACtB;IACJ,CAAC,MACI;MACD9U,CAAC,GAAG,CAAC;IACT;IACA;IACA;IACA,IAAI8T,YAAY,CAAChU,MAAM,GAAG2S,WAAW,CAAC3S,MAAM,EAAE;MAC1C,IAAIiV,WAAW,GAAG,CAAC,EAAE;QACjB9U,CAAC,IAAI8U,WAAW;MACpB;MACA,IAAIC,cAAc,GAAG,CAAC,EAAE;QACpB/U,CAAC,IAAI+U,cAAc;MACvB;IACJ,CAAC,MACI;MACD/U,CAAC,GAAG,CAAC;IACT;IACA,IAAID,CAAC,KAAK,IAAI,CAACuE,iBAAiB,CAACvE,CAAC,IAAIC,CAAC,KAAK,IAAI,CAACsE,iBAAiB,CAACtE,CAAC,EAAE;MAClE,IAAI,CAACmM,mBAAmB,CAAC;QAAEnM,CAAC;QAAED;MAAE,CAAC,CAAC;IACtC;EACJ;EACA;EACAoH,kBAAkB,CAAC1F,KAAK,EAAE;IACtB,MAAMxE,KAAK,GAAG,IAAI,CAACmI,cAAc;IACjC,IAAI,OAAOnI,KAAK,KAAK,QAAQ,EAAE;MAC3B,OAAOA,KAAK;IAChB,CAAC,MACI,IAAIkQ,YAAY,CAAC1L,KAAK,CAAC,EAAE;MAC1B,OAAOxE,KAAK,CAAC+X,KAAK;IACtB;IACA,OAAO/X,KAAK,GAAGA,KAAK,CAACgY,KAAK,GAAG,CAAC;EAClC;EACA;EACA9F,eAAe,CAAC1N,KAAK,EAAE;IACnB,MAAMyT,gBAAgB,GAAG,IAAI,CAAChM,gBAAgB,CAAC1H,YAAY,CAACC,KAAK,CAAC;IAClE,IAAIyT,gBAAgB,EAAE;MAClB,MAAMxT,MAAM,GAAGxG,eAAe,CAACuG,KAAK,CAAC;MACrC;MACA;MACA;MACA,IAAI,IAAI,CAAC2N,aAAa,KAAK1N,MAAM,KAAK,IAAI,CAACf,SAAS,IAC/Ce,MAAM,KAAK,IAAI,CAACqD,gBAAgB,IAAIrD,MAAM,CAACW,QAAQ,CAAC,IAAI,CAAC0C,gBAAgB,CAAE,CAAC,EAAE;QAC/E9E,gBAAgB,CAAC,IAAI,CAACmP,aAAa,EAAE8F,gBAAgB,CAACtX,GAAG,EAAEsX,gBAAgB,CAACpX,IAAI,CAAC;MACrF;MACA,IAAI,CAAC6I,qBAAqB,CAAC5G,CAAC,IAAImV,gBAAgB,CAACpX,IAAI;MACrD,IAAI,CAAC6I,qBAAqB,CAAC3G,CAAC,IAAIkV,gBAAgB,CAACtX,GAAG;MACpD;MACA;MACA,IAAI,CAAC,IAAI,CAACyJ,cAAc,EAAE;QACtB,IAAI,CAAC9C,gBAAgB,CAACxE,CAAC,IAAImV,gBAAgB,CAACpX,IAAI;QAChD,IAAI,CAACyG,gBAAgB,CAACvE,CAAC,IAAIkV,gBAAgB,CAACtX,GAAG;QAC/C,IAAI,CAACyK,0BAA0B,CAAC,IAAI,CAAC9D,gBAAgB,CAACxE,CAAC,EAAE,IAAI,CAACwE,gBAAgB,CAACvE,CAAC,CAAC;MACrF;IACJ;EACJ;EACA;EACA6S,0BAA0B,GAAG;IACzB,MAAMlR,cAAc,GAAG,IAAI,CAACuH,gBAAgB,CAACrI,SAAS,CAACe,GAAG,CAAC,IAAI,CAACjB,SAAS,CAAC;IAC1E,OAAOgB,cAAc,GAAGA,cAAc,CAACR,cAAc,GACjD,IAAI,CAACP,cAAc,CAACQ,yBAAyB,EAAE;EACvD;EACA;AACJ;AACA;AACA;AACA;AACA;EACIhG,cAAc,GAAG;IACb,IAAI,IAAI,CAAC+Z,iBAAiB,KAAK3K,SAAS,EAAE;MACtC,IAAI,CAAC2K,iBAAiB,GAAG/Z,cAAc,CAAC,IAAI,CAACgL,YAAY,CAAC;IAC9D;IACA,OAAO,IAAI,CAAC+O,iBAAiB;EACjC;EACA;EACAlH,yBAAyB,CAACmH,aAAa,EAAEzH,UAAU,EAAE;IACjD,MAAM0H,gBAAgB,GAAG,IAAI,CAAChJ,iBAAiB,IAAI,QAAQ;IAC3D,IAAIgJ,gBAAgB,KAAK,QAAQ,EAAE;MAC/B,OAAOD,aAAa;IACxB;IACA,IAAIC,gBAAgB,KAAK,QAAQ,EAAE;MAC/B,MAAMC,WAAW,GAAG,IAAI,CAAC3U,SAAS;MAClC;MACA;MACA;MACA,OAAOgN,UAAU,IACb2H,WAAW,CAACC,iBAAiB,IAC7BD,WAAW,CAACE,uBAAuB,IACnCF,WAAW,CAACG,oBAAoB,IAChCH,WAAW,CAACI,mBAAmB,IAC/BJ,WAAW,CAACxH,IAAI;IACxB;IACA,OAAOxS,aAAa,CAAC+Z,gBAAgB,CAAC;EAC1C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,SAAS/D,YAAY,CAACvR,CAAC,EAAEC,CAAC,EAAE;EACxB;EACA;EACA,OAAQ,eAAcyG,IAAI,CAACkP,KAAK,CAAC5V,CAAC,CAAE,OAAM0G,IAAI,CAACkP,KAAK,CAAC3V,CAAC,CAAE,QAAO;AACnE;AACA;AACA,SAASmU,OAAO,CAAClX,KAAK,EAAE2Y,GAAG,EAAEC,GAAG,EAAE;EAC9B,OAAOpP,IAAI,CAACoP,GAAG,CAACD,GAAG,EAAEnP,IAAI,CAACmP,GAAG,CAACC,GAAG,EAAE5Y,KAAK,CAAC,CAAC;AAC9C;AACA;AACA;AACA;AACA;AACA,SAASmO,UAAU,CAAChJ,IAAI,EAAE;EACtB,IAAIA,IAAI,IAAIA,IAAI,CAACkL,UAAU,EAAE;IACzBlL,IAAI,CAACkL,UAAU,CAACwI,WAAW,CAAC1T,IAAI,CAAC;EACrC;AACJ;AACA;AACA,SAAS+K,YAAY,CAAC1L,KAAK,EAAE;EACzB;EACA;EACA;EACA,OAAOA,KAAK,CAAC8B,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG;AAChC;AACA;AACA;AACA;AACA;AACA,SAAS6N,WAAW,CAACJ,OAAO,EAAErQ,SAAS,EAAE;EACrC,MAAMoV,SAAS,GAAG/E,OAAO,CAAC+E,SAAS;EACnC,IAAIA,SAAS,CAACjT,MAAM,KAAK,CAAC,IAAIiT,SAAS,CAAC,CAAC,CAAC,CAACC,QAAQ,KAAKrV,SAAS,CAACsV,YAAY,EAAE;IAC5E,OAAOF,SAAS,CAAC,CAAC,CAAC;EACvB;EACA,MAAMG,OAAO,GAAGvV,SAAS,CAACwV,aAAa,CAAC,KAAK,CAAC;EAC9CJ,SAAS,CAAC1U,OAAO,CAACe,IAAI,IAAI8T,OAAO,CAACnI,WAAW,CAAC3L,IAAI,CAAC,CAAC;EACpD,OAAO8T,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS7E,gBAAgB,CAAC3P,MAAM,EAAE0U,UAAU,EAAE;EAC1C1U,MAAM,CAACjE,KAAK,CAACmC,KAAK,GAAI,GAAEwW,UAAU,CAACxW,KAAM,IAAG;EAC5C8B,MAAM,CAACjE,KAAK,CAACoC,MAAM,GAAI,GAAEuW,UAAU,CAACvW,MAAO,IAAG;EAC9C6B,MAAM,CAACjE,KAAK,CAACO,SAAS,GAAGsT,YAAY,CAAC8E,UAAU,CAACtY,IAAI,EAAEsY,UAAU,CAACxY,GAAG,CAAC;AAC1E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASyY,eAAe,CAACC,KAAK,EAAEC,SAAS,EAAEC,OAAO,EAAE;EAChD,MAAMC,IAAI,GAAGC,KAAK,CAACH,SAAS,EAAED,KAAK,CAACxT,MAAM,GAAG,CAAC,CAAC;EAC/C,MAAM6T,EAAE,GAAGD,KAAK,CAACF,OAAO,EAAEF,KAAK,CAACxT,MAAM,GAAG,CAAC,CAAC;EAC3C,IAAI2T,IAAI,KAAKE,EAAE,EAAE;IACb;EACJ;EACA,MAAMjV,MAAM,GAAG4U,KAAK,CAACG,IAAI,CAAC;EAC1B,MAAM7N,KAAK,GAAG+N,EAAE,GAAGF,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC;EAChC,KAAK,IAAI5T,CAAC,GAAG4T,IAAI,EAAE5T,CAAC,KAAK8T,EAAE,EAAE9T,CAAC,IAAI+F,KAAK,EAAE;IACrC0N,KAAK,CAACzT,CAAC,CAAC,GAAGyT,KAAK,CAACzT,CAAC,GAAG+F,KAAK,CAAC;EAC/B;EACA0N,KAAK,CAACK,EAAE,CAAC,GAAGjV,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASkV,iBAAiB,CAACC,YAAY,EAAEC,WAAW,EAAEnH,YAAY,EAAEoH,WAAW,EAAE;EAC7E,MAAMN,IAAI,GAAGC,KAAK,CAAC/G,YAAY,EAAEkH,YAAY,CAAC/T,MAAM,GAAG,CAAC,CAAC;EACzD,MAAM6T,EAAE,GAAGD,KAAK,CAACK,WAAW,EAAED,WAAW,CAAChU,MAAM,CAAC;EACjD,IAAI+T,YAAY,CAAC/T,MAAM,EAAE;IACrBgU,WAAW,CAACE,MAAM,CAACL,EAAE,EAAE,CAAC,EAAEE,YAAY,CAACG,MAAM,CAACP,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC9D;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASQ,aAAa,CAACJ,YAAY,EAAEC,WAAW,EAAEnH,YAAY,EAAEoH,WAAW,EAAE;EACzE,MAAMJ,EAAE,GAAGD,KAAK,CAACK,WAAW,EAAED,WAAW,CAAChU,MAAM,CAAC;EACjD,IAAI+T,YAAY,CAAC/T,MAAM,EAAE;IACrBgU,WAAW,CAACE,MAAM,CAACL,EAAE,EAAE,CAAC,EAAEE,YAAY,CAAClH,YAAY,CAAC,CAAC;EACzD;AACJ;AACA;AACA,SAAS+G,KAAK,CAACzZ,KAAK,EAAE4Y,GAAG,EAAE;EACvB,OAAOpP,IAAI,CAACoP,GAAG,CAAC,CAAC,EAAEpP,IAAI,CAACmP,GAAG,CAACC,GAAG,EAAE5Y,KAAK,CAAC,CAAC;AAC5C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMia,wBAAwB,GAAG,IAAI;AACrC;AACA;AACA;AACA;AACA,MAAMC,0BAA0B,GAAG,IAAI;AACvC;AACA;AACA;AACA,MAAMC,WAAW,CAAC;EACd1W,WAAW,CAACpD,OAAO,EAAE+G,iBAAiB,EAAE1D,SAAS,EAAEyD,OAAO,EAAExD,cAAc,EAAE;IACxE,IAAI,CAACyD,iBAAiB,GAAGA,iBAAiB;IAC1C,IAAI,CAACD,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACxD,cAAc,GAAGA,cAAc;IACpC;IACA,IAAI,CAACsF,QAAQ,GAAG,KAAK;IACrB;IACA,IAAI,CAACsK,eAAe,GAAG,KAAK;IAC5B;AACR;AACA;AACA;IACQ,IAAI,CAAC6G,kBAAkB,GAAG,KAAK;IAC/B;IACA,IAAI,CAACC,cAAc,GAAG,CAAC;IACvB;AACR;AACA;AACA;IACQ,IAAI,CAACC,cAAc,GAAG,MAAM,IAAI;IAChC;IACA,IAAI,CAACC,aAAa,GAAG,MAAM,IAAI;IAC/B;IACA,IAAI,CAAClS,aAAa,GAAG,IAAI3J,OAAO,EAAE;IAClC;AACR;AACA;IACQ,IAAI,CAAC+J,OAAO,GAAG,IAAI/J,OAAO,EAAE;IAC5B;AACR;AACA;AACA;IACQ,IAAI,CAACgK,MAAM,GAAG,IAAIhK,OAAO,EAAE;IAC3B;IACA,IAAI,CAACiK,OAAO,GAAG,IAAIjK,OAAO,EAAE;IAC5B;IACA,IAAI,CAAC8b,MAAM,GAAG,IAAI9b,OAAO,EAAE;IAC3B;IACA,IAAI,CAAC+b,WAAW,GAAG,KAAK;IACxB;IACA,IAAI,CAACC,cAAc,GAAG,EAAE;IACxB;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACC,aAAa,GAAG;MAAEC,IAAI,EAAE,IAAI;MAAEjP,KAAK,EAAE,CAAC;MAAEkP,QAAQ,EAAE;IAAM,CAAC;IAC9D;IACA,IAAI,CAACC,WAAW,GAAG,EAAE;IACrB;IACA,IAAI,CAACC,SAAS,GAAG,EAAE;IACnB;IACA,IAAI,CAACC,YAAY,GAAG,UAAU;IAC9B;IACA,IAAI,CAACC,eAAe,GAAG,IAAIjU,GAAG,EAAE;IAChC;IACA,IAAI,CAACkB,UAAU,GAAG,KAAK;IACvB;IACA,IAAI,CAACgT,2BAA2B,GAAGvc,YAAY,CAAC+I,KAAK;IACrD;IACA,IAAI,CAACyT,wBAAwB,GAAG,CAAC,CAAC;IAClC;IACA,IAAI,CAACC,0BAA0B,GAAG,CAAC,CAAC;IACpC;IACA,IAAI,CAACC,iBAAiB,GAAG,IAAI3c,OAAO,EAAE;IACtC;IACA,IAAI,CAACwZ,iBAAiB,GAAG,IAAI;IAC7B;IACA,IAAI,CAACoD,oBAAoB,GAAG,MAAM;MAC9B,IAAI,CAAC1L,cAAc,EAAE;MACrBhR,QAAQ,CAAC,CAAC,EAAEC,uBAAuB,CAAC,CAC/B0c,IAAI,CAACvc,SAAS,CAAC,IAAI,CAACqc,iBAAiB,CAAC,CAAC,CACvCvN,SAAS,CAAC,MAAM;QACjB,MAAM3I,IAAI,GAAG,IAAI,CAACqW,WAAW;QAC7B,MAAMC,UAAU,GAAG,IAAI,CAACpB,cAAc;QACtC,IAAI,IAAI,CAACc,wBAAwB,KAAK,CAAC,CAAC,UAAU;UAC9CO,uBAAuB,CAACvW,IAAI,EAAE,CAACsW,UAAU,CAAC;QAC9C,CAAC,MACI,IAAI,IAAI,CAACN,wBAAwB,KAAK,CAAC,CAAC,YAAY;UACrDO,uBAAuB,CAACvW,IAAI,EAAEsW,UAAU,CAAC;QAC7C;QACA,IAAI,IAAI,CAACL,0BAA0B,KAAK,CAAC,CAAC,YAAY;UAClDO,yBAAyB,CAACxW,IAAI,EAAE,CAACsW,UAAU,CAAC;QAChD,CAAC,MACI,IAAI,IAAI,CAACL,0BAA0B,KAAK,CAAC,CAAC,aAAa;UACxDO,yBAAyB,CAACxW,IAAI,EAAEsW,UAAU,CAAC;QAC/C;MACJ,CAAC,CAAC;IACN,CAAC;IACD,IAAI,CAACpb,OAAO,GAAGhC,aAAa,CAACgC,OAAO,CAAC;IACrC,IAAI,CAACqD,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACkY,qBAAqB,CAAC,CAAC,IAAI,CAACvb,OAAO,CAAC,CAAC;IAC1C+G,iBAAiB,CAACyU,qBAAqB,CAAC,IAAI,CAAC;IAC7C,IAAI,CAAC5P,gBAAgB,GAAG,IAAIzI,qBAAqB,CAACE,SAAS,EAAEC,cAAc,CAAC;EAChF;EACA;EACAuK,OAAO,GAAG;IACN,IAAI,CAAC0B,cAAc,EAAE;IACrB,IAAI,CAACyL,iBAAiB,CAAC5M,QAAQ,EAAE;IACjC,IAAI,CAACyM,2BAA2B,CAACtN,WAAW,EAAE;IAC9C,IAAI,CAACvF,aAAa,CAACoG,QAAQ,EAAE;IAC7B,IAAI,CAAChG,OAAO,CAACgG,QAAQ,EAAE;IACvB,IAAI,CAAC/F,MAAM,CAAC+F,QAAQ,EAAE;IACtB,IAAI,CAAC9F,OAAO,CAAC8F,QAAQ,EAAE;IACvB,IAAI,CAAC+L,MAAM,CAAC/L,QAAQ,EAAE;IACtB,IAAI,CAACwM,eAAe,CAACnX,KAAK,EAAE;IAC5B,IAAI,CAAC0X,WAAW,GAAG,IAAI;IACvB,IAAI,CAACvP,gBAAgB,CAACnI,KAAK,EAAE;IAC7B,IAAI,CAACsD,iBAAiB,CAAC0U,mBAAmB,CAAC,IAAI,CAAC;EACpD;EACA;EACAxR,UAAU,GAAG;IACT,OAAO,IAAI,CAACmQ,WAAW;EAC3B;EACA;EACAxJ,KAAK,GAAG;IACJ,IAAI,CAAC8K,gBAAgB,EAAE;IACvB,IAAI,CAACC,wBAAwB,EAAE;EACnC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI1I,KAAK,CAACT,IAAI,EAAEzP,QAAQ,EAAEC,QAAQ,EAAE4Y,KAAK,EAAE;IACnC,IAAI,CAACF,gBAAgB,EAAE;IACvB;IACA;IACA,IAAIG,QAAQ;IACZ,IAAID,KAAK,IAAI,IAAI,EAAE;MACfC,QAAQ,GAAG,IAAI,CAAC3I,eAAe,GAAG,IAAI,CAACuH,WAAW,CAAC1Z,OAAO,CAACyR,IAAI,CAAC,GAAG,CAAC,CAAC;MACrE,IAAIqJ,QAAQ,KAAK,CAAC,CAAC,EAAE;QACjB;QACA;QACAA,QAAQ,GAAG,IAAI,CAACC,gCAAgC,CAACtJ,IAAI,EAAEzP,QAAQ,EAAEC,QAAQ,CAAC;MAC9E;IACJ,CAAC,MACI;MACD6Y,QAAQ,GAAGD,KAAK;IACpB;IACA,MAAMG,gBAAgB,GAAG,IAAI,CAACC,iBAAiB;IAC/C,MAAM3J,YAAY,GAAG0J,gBAAgB,CAAChb,OAAO,CAACyR,IAAI,CAAC;IACnD,MAAMvC,WAAW,GAAGuC,IAAI,CAACxG,qBAAqB,EAAE;IAChD,IAAIiQ,oBAAoB,GAAGF,gBAAgB,CAACF,QAAQ,CAAC;IACrD;IACA;IACA;IACA,IAAII,oBAAoB,KAAKzJ,IAAI,EAAE;MAC/ByJ,oBAAoB,GAAGF,gBAAgB,CAACF,QAAQ,GAAG,CAAC,CAAC;IACzD;IACA;IACA;IACA,IAAIxJ,YAAY,GAAG,CAAC,CAAC,EAAE;MACnB0J,gBAAgB,CAACrC,MAAM,CAACrH,YAAY,EAAE,CAAC,CAAC;IAC5C;IACA;IACA;IACA,IAAI4J,oBAAoB,IAAI,CAAC,IAAI,CAAClV,iBAAiB,CAACkD,UAAU,CAACgS,oBAAoB,CAAC,EAAE;MAClF,MAAMjc,OAAO,GAAGic,oBAAoB,CAAC/P,cAAc,EAAE;MACrDlM,OAAO,CAACkc,aAAa,CAAC5L,YAAY,CAACL,WAAW,EAAEjQ,OAAO,CAAC;MACxD+b,gBAAgB,CAACrC,MAAM,CAACmC,QAAQ,EAAE,CAAC,EAAErJ,IAAI,CAAC;IAC9C,CAAC,MACI,IAAI,IAAI,CAAC2J,wBAAwB,CAACpZ,QAAQ,EAAEC,QAAQ,CAAC,EAAE;MACxD,MAAMoZ,SAAS,GAAGL,gBAAgB,CAAC,CAAC,CAAC,CAAC7P,cAAc,EAAE;MACtDkQ,SAAS,CAACpM,UAAU,CAACM,YAAY,CAACL,WAAW,EAAEmM,SAAS,CAAC;MACzDL,gBAAgB,CAACM,OAAO,CAAC7J,IAAI,CAAC;IAClC,CAAC,MACI;MACDxU,aAAa,CAAC,IAAI,CAACgC,OAAO,CAAC,CAACyQ,WAAW,CAACR,WAAW,CAAC;MACpD8L,gBAAgB,CAACO,IAAI,CAAC9J,IAAI,CAAC;IAC/B;IACA;IACAvC,WAAW,CAAC9P,KAAK,CAACO,SAAS,GAAG,EAAE;IAChC;IACA;IACA,IAAI,CAAC6b,mBAAmB,EAAE;IAC1B,IAAI,CAACC,qBAAqB,EAAE;IAC5B;IACA,IAAI,CAACb,wBAAwB,EAAE;IAC/B,IAAI,CAACvT,OAAO,CAACK,IAAI,CAAC;MAAE+J,IAAI;MAAE1I,SAAS,EAAE,IAAI;MAAEuI,YAAY,EAAE,IAAI,CAACtB,YAAY,CAACyB,IAAI;IAAE,CAAC,CAAC;EACvF;EACA;AACJ;AACA;AACA;EACIQ,IAAI,CAACR,IAAI,EAAE;IACP,IAAI,CAACiK,MAAM,EAAE;IACb,IAAI,CAACpU,MAAM,CAACI,IAAI,CAAC;MAAE+J,IAAI;MAAE1I,SAAS,EAAE;IAAK,CAAC,CAAC;EAC/C;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI6I,IAAI,CAACH,IAAI,EAAEH,YAAY,EAAEI,aAAa,EAAEC,iBAAiB,EAAEJ,sBAAsB,EAAElH,QAAQ,EAAEwE,SAAS,EAAE;IACpG,IAAI,CAAC6M,MAAM,EAAE;IACb,IAAI,CAACnU,OAAO,CAACG,IAAI,CAAC;MACd+J,IAAI;MACJH,YAAY;MACZI,aAAa;MACb3I,SAAS,EAAE,IAAI;MACf4I,iBAAiB;MACjBJ,sBAAsB;MACtBlH,QAAQ;MACRwE;IACJ,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;EACI8M,SAAS,CAACC,KAAK,EAAE;IACb,MAAMC,aAAa,GAAG,IAAI,CAACnC,WAAW;IACtC,IAAI,CAACA,WAAW,GAAGkC,KAAK;IACxBA,KAAK,CAAC5Y,OAAO,CAACyO,IAAI,IAAIA,IAAI,CAAC7D,kBAAkB,CAAC,IAAI,CAAC,CAAC;IACpD,IAAI,IAAI,CAAC1E,UAAU,EAAE,EAAE;MACnB,MAAM4S,YAAY,GAAGD,aAAa,CAACE,MAAM,CAACtK,IAAI,IAAIA,IAAI,CAACvI,UAAU,EAAE,CAAC;MACpE;MACA;MACA,IAAI4S,YAAY,CAACE,KAAK,CAACvK,IAAI,IAAImK,KAAK,CAAC5b,OAAO,CAACyR,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;QACxD,IAAI,CAACiK,MAAM,EAAE;MACjB,CAAC,MACI;QACD,IAAI,CAACO,WAAW,EAAE;MACtB;IACJ;IACA,OAAO,IAAI;EACf;EACA;EACAvO,aAAa,CAACC,SAAS,EAAE;IACrB,IAAI,CAAC7G,UAAU,GAAG6G,SAAS;IAC3B,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;EACIuO,WAAW,CAACA,WAAW,EAAE;IACrB,IAAI,CAACvC,SAAS,GAAGuC,WAAW,CAACC,KAAK,EAAE;IACpC,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;EACIC,eAAe,CAACC,WAAW,EAAE;IACzB,IAAI,CAACzC,YAAY,GAAGyC,WAAW;IAC/B,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;EACI7B,qBAAqB,CAAC5X,QAAQ,EAAE;IAC5B,MAAM3D,OAAO,GAAGhC,aAAa,CAAC,IAAI,CAACgC,OAAO,CAAC;IAC3C;IACA;IACA,IAAI,CAACqd,mBAAmB,GACpB1Z,QAAQ,CAAC5C,OAAO,CAACf,OAAO,CAAC,KAAK,CAAC,CAAC,GAAG,CAACA,OAAO,EAAE,GAAG2D,QAAQ,CAAC,GAAGA,QAAQ,CAACuZ,KAAK,EAAE;IAChF,OAAO,IAAI;EACf;EACA;EACAlM,oBAAoB,GAAG;IACnB,OAAO,IAAI,CAACqM,mBAAmB;EACnC;EACA;AACJ;AACA;AACA;EACItM,YAAY,CAACyB,IAAI,EAAE;IACf,IAAI,CAAC,IAAI,CAAC4H,WAAW,EAAE;MACnB,OAAO,IAAI,CAACK,WAAW,CAAC1Z,OAAO,CAACyR,IAAI,CAAC;IACzC;IACA;IACA;IACA;IACA,MAAMmK,KAAK,GAAG,IAAI,CAAChC,YAAY,KAAK,YAAY,IAAI,IAAI,CAAC9S,UAAU,KAAK,KAAK,GACzE,IAAI,CAACwS,cAAc,CAAC6C,KAAK,EAAE,CAACI,OAAO,EAAE,GAAG,IAAI,CAACjD,cAAc;IAC/D,OAAOkD,SAAS,CAACZ,KAAK,EAAEa,WAAW,IAAIA,WAAW,CAACjD,IAAI,KAAK/H,IAAI,CAAC;EACrE;EACA;AACJ;AACA;AACA;EACItI,WAAW,GAAG;IACV,OAAO,IAAI,CAAC0Q,eAAe,CAAC6C,IAAI,GAAG,CAAC;EACxC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIrK,SAAS,CAACZ,IAAI,EAAEzP,QAAQ,EAAEC,QAAQ,EAAE0a,YAAY,EAAE;IAC9C;IACA,IAAI,IAAI,CAACxK,eAAe,IAAI,CAAC,IAAI,CAACyK,WAAW,IACzC,CAAC/a,uBAAuB,CAAC,IAAI,CAAC+a,WAAW,EAAE/D,wBAAwB,EAAE7W,QAAQ,EAAEC,QAAQ,CAAC,EAAE;MAC1F;IACJ;IACA,MAAM4a,QAAQ,GAAG,IAAI,CAACvD,cAAc;IACpC,MAAMwB,QAAQ,GAAG,IAAI,CAACC,gCAAgC,CAACtJ,IAAI,EAAEzP,QAAQ,EAAEC,QAAQ,EAAE0a,YAAY,CAAC;IAC9F,IAAI7B,QAAQ,KAAK,CAAC,CAAC,IAAI+B,QAAQ,CAACpY,MAAM,GAAG,CAAC,EAAE;MACxC;IACJ;IACA,MAAMqY,YAAY,GAAG,IAAI,CAAClD,YAAY,KAAK,YAAY;IACvD,MAAMtI,YAAY,GAAGkL,SAAS,CAACK,QAAQ,EAAEJ,WAAW,IAAIA,WAAW,CAACjD,IAAI,KAAK/H,IAAI,CAAC;IAClF,MAAMsL,oBAAoB,GAAGF,QAAQ,CAAC/B,QAAQ,CAAC;IAC/C,MAAMzE,eAAe,GAAGwG,QAAQ,CAACvL,YAAY,CAAC,CAACnQ,UAAU;IACzD,MAAM6b,WAAW,GAAGD,oBAAoB,CAAC5b,UAAU;IACnD,MAAMoJ,KAAK,GAAG+G,YAAY,GAAGwJ,QAAQ,GAAG,CAAC,GAAG,CAAC,CAAC;IAC9C;IACA,MAAMmC,UAAU,GAAG,IAAI,CAACC,gBAAgB,CAAC7G,eAAe,EAAE2G,WAAW,EAAEzS,KAAK,CAAC;IAC7E;IACA,MAAM4S,aAAa,GAAG,IAAI,CAACC,mBAAmB,CAAC9L,YAAY,EAAEuL,QAAQ,EAAEtS,KAAK,CAAC;IAC7E;IACA;IACA,MAAM8S,QAAQ,GAAGR,QAAQ,CAACV,KAAK,EAAE;IACjC;IACAnE,eAAe,CAAC6E,QAAQ,EAAEvL,YAAY,EAAEwJ,QAAQ,CAAC;IACjD,IAAI,CAAC1B,MAAM,CAAC1R,IAAI,CAAC;MACbgK,aAAa,EAAEJ,YAAY;MAC3BA,YAAY,EAAEwJ,QAAQ;MACtB/R,SAAS,EAAE,IAAI;MACf0I;IACJ,CAAC,CAAC;IACFoL,QAAQ,CAAC7Z,OAAO,CAAC,CAACsa,OAAO,EAAEzC,KAAK,KAAK;MACjC;MACA,IAAIwC,QAAQ,CAACxC,KAAK,CAAC,KAAKyC,OAAO,EAAE;QAC7B;MACJ;MACA,MAAMC,aAAa,GAAGD,OAAO,CAAC9D,IAAI,KAAK/H,IAAI;MAC3C,MAAM+L,MAAM,GAAGD,aAAa,GAAGN,UAAU,GAAGE,aAAa;MACzD,MAAMM,eAAe,GAAGF,aAAa,GAAG9L,IAAI,CAACxG,qBAAqB,EAAE,GAChEqS,OAAO,CAAC9D,IAAI,CAACrO,cAAc,EAAE;MACjC;MACAmS,OAAO,CAACE,MAAM,IAAIA,MAAM;MACxB;MACA;MACA;MACA;MACA,IAAIV,YAAY,EAAE;QACd;QACA;QACAW,eAAe,CAACre,KAAK,CAACO,SAAS,GAAGD,iBAAiB,CAAE,eAAc0I,IAAI,CAACkP,KAAK,CAACgG,OAAO,CAACE,MAAM,CAAE,WAAU,EAAEF,OAAO,CAAC1d,gBAAgB,CAAC;QACnIgC,gBAAgB,CAAC0b,OAAO,CAACnc,UAAU,EAAE,CAAC,EAAEqc,MAAM,CAAC;MACnD,CAAC,MACI;QACDC,eAAe,CAACre,KAAK,CAACO,SAAS,GAAGD,iBAAiB,CAAE,kBAAiB0I,IAAI,CAACkP,KAAK,CAACgG,OAAO,CAACE,MAAM,CAAE,QAAO,EAAEF,OAAO,CAAC1d,gBAAgB,CAAC;QACnIgC,gBAAgB,CAAC0b,OAAO,CAACnc,UAAU,EAAEqc,MAAM,EAAE,CAAC,CAAC;MACnD;IACJ,CAAC,CAAC;IACF;IACA,IAAI,CAACjE,aAAa,CAACE,QAAQ,GAAGhY,kBAAkB,CAACub,WAAW,EAAEhb,QAAQ,EAAEC,QAAQ,CAAC;IACjF,IAAI,CAACsX,aAAa,CAACC,IAAI,GAAGuD,oBAAoB,CAACvD,IAAI;IACnD,IAAI,CAACD,aAAa,CAAChP,KAAK,GAAGuS,YAAY,GAAGH,YAAY,CAACjb,CAAC,GAAGib,YAAY,CAAChb,CAAC;EAC7E;EACA;AACJ;AACA;AACA;AACA;AACA;EACIyQ,0BAA0B,CAACpQ,QAAQ,EAAEC,QAAQ,EAAE;IAC3C,IAAI,IAAI,CAAC+W,kBAAkB,EAAE;MACzB;IACJ;IACA,IAAI0E,UAAU;IACd,IAAIC,uBAAuB,GAAG,CAAC,CAAC;IAChC,IAAIC,yBAAyB,GAAG,CAAC,CAAC;IAClC;IACA,IAAI,CAAC/S,gBAAgB,CAACrI,SAAS,CAACQ,OAAO,CAAC,CAAC1D,QAAQ,EAAEL,OAAO,KAAK;MAC3D;MACA;MACA,IAAIA,OAAO,KAAK,IAAI,CAACqD,SAAS,IAAI,CAAChD,QAAQ,CAAC6B,UAAU,IAAIuc,UAAU,EAAE;QAClE;MACJ;MACA,IAAI7b,uBAAuB,CAACvC,QAAQ,CAAC6B,UAAU,EAAE0X,wBAAwB,EAAE7W,QAAQ,EAAEC,QAAQ,CAAC,EAAE;QAC5F,CAAC0b,uBAAuB,EAAEC,yBAAyB,CAAC,GAAGC,0BAA0B,CAAC5e,OAAO,EAAEK,QAAQ,CAAC6B,UAAU,EAAEa,QAAQ,EAAEC,QAAQ,CAAC;QACnI,IAAI0b,uBAAuB,IAAIC,yBAAyB,EAAE;UACtDF,UAAU,GAAGze,OAAO;QACxB;MACJ;IACJ,CAAC,CAAC;IACF;IACA,IAAI,CAAC0e,uBAAuB,IAAI,CAACC,yBAAyB,EAAE;MACxD,MAAM;QAAErc,KAAK;QAAEC;MAAO,CAAC,GAAG,IAAI,CAACe,cAAc,CAACub,eAAe,EAAE;MAC/D,MAAM3c,UAAU,GAAG;QAAEI,KAAK;QAAEC,MAAM;QAAEjC,GAAG,EAAE,CAAC;QAAE8B,KAAK,EAAEE,KAAK;QAAED,MAAM,EAAEE,MAAM;QAAE/B,IAAI,EAAE;MAAE,CAAC;MACnFke,uBAAuB,GAAGI,0BAA0B,CAAC5c,UAAU,EAAEc,QAAQ,CAAC;MAC1E2b,yBAAyB,GAAGI,4BAA4B,CAAC7c,UAAU,EAAEa,QAAQ,CAAC;MAC9E0b,UAAU,GAAGO,MAAM;IACvB;IACA,IAAIP,UAAU,KAAKC,uBAAuB,KAAK,IAAI,CAAC5D,wBAAwB,IACxE6D,yBAAyB,KAAK,IAAI,CAAC5D,0BAA0B,IAC7D0D,UAAU,KAAK,IAAI,CAACtD,WAAW,CAAC,EAAE;MAClC,IAAI,CAACL,wBAAwB,GAAG4D,uBAAuB;MACvD,IAAI,CAAC3D,0BAA0B,GAAG4D,yBAAyB;MAC3D,IAAI,CAACxD,WAAW,GAAGsD,UAAU;MAC7B,IAAI,CAACC,uBAAuB,IAAIC,yBAAyB,KAAKF,UAAU,EAAE;QACtE,IAAI,CAAC3X,OAAO,CAACiG,iBAAiB,CAAC,IAAI,CAACkO,oBAAoB,CAAC;MAC7D,CAAC,MACI;QACD,IAAI,CAAC1L,cAAc,EAAE;MACzB;IACJ;EACJ;EACA;EACAA,cAAc,GAAG;IACb,IAAI,CAACyL,iBAAiB,CAACvS,IAAI,EAAE;EACjC;EACA;EACAiT,gBAAgB,GAAG;IACf,MAAMuD,MAAM,GAAGjhB,aAAa,CAAC,IAAI,CAACgC,OAAO,CAAC,CAACG,KAAK;IAChD,IAAI,CAAC6H,aAAa,CAACS,IAAI,EAAE;IACzB,IAAI,CAAC2R,WAAW,GAAG,IAAI;IACvB;IACA;IACA;IACA,IAAI,CAAC8E,kBAAkB,GAAGD,MAAM,CAACE,gBAAgB,IAAIF,MAAM,CAACG,cAAc,IAAI,EAAE;IAChFH,MAAM,CAACG,cAAc,GAAGH,MAAM,CAACE,gBAAgB,GAAG,MAAM;IACxD,IAAI,CAACnC,WAAW,EAAE;IAClB,IAAI,CAACnC,2BAA2B,CAACtN,WAAW,EAAE;IAC9C,IAAI,CAAC8R,qBAAqB,EAAE;EAChC;EACA;EACA7C,qBAAqB,GAAG;IACpB,MAAMxc,OAAO,GAAGhC,aAAa,CAAC,IAAI,CAACgC,OAAO,CAAC;IAC3C,IAAI,CAAC4L,gBAAgB,CAAClI,KAAK,CAAC,IAAI,CAAC2Z,mBAAmB,CAAC;IACrD;IACA;IACA,IAAI,CAACM,WAAW,GAAG,IAAI,CAAC/R,gBAAgB,CAACrI,SAAS,CAACe,GAAG,CAACtE,OAAO,CAAC,CAACkC,UAAU;EAC9E;EACA;EACAqa,mBAAmB,GAAG;IAClB,MAAMsB,YAAY,GAAG,IAAI,CAAClD,YAAY,KAAK,YAAY;IACvD,IAAI,CAACN,cAAc,GAAG,IAAI,CAAC2B,iBAAiB,CAACnd,GAAG,CAAC0b,IAAI,IAAI;MACrD,MAAM+E,gBAAgB,GAAG/E,IAAI,CAACpO,iBAAiB,EAAE;MACjD,OAAO;QACHoO,IAAI;QACJgE,MAAM,EAAE,CAAC;QACT5d,gBAAgB,EAAE2e,gBAAgB,CAACnf,KAAK,CAACO,SAAS,IAAI,EAAE;QACxDwB,UAAU,EAAED,oBAAoB,CAACqd,gBAAgB;MACrD,CAAC;IACL,CAAC,CAAC,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;MACd,OAAO5B,YAAY,GAAG2B,CAAC,CAACtd,UAAU,CAAC1B,IAAI,GAAGif,CAAC,CAACvd,UAAU,CAAC1B,IAAI,GACvDgf,CAAC,CAACtd,UAAU,CAAC5B,GAAG,GAAGmf,CAAC,CAACvd,UAAU,CAAC5B,GAAG;IAC3C,CAAC,CAAC;EACN;EACA;EACAmc,MAAM,GAAG;IACL,IAAI,CAACrC,WAAW,GAAG,KAAK;IACxB,MAAM6E,MAAM,GAAGjhB,aAAa,CAAC,IAAI,CAACgC,OAAO,CAAC,CAACG,KAAK;IAChD8e,MAAM,CAACG,cAAc,GAAGH,MAAM,CAACE,gBAAgB,GAAG,IAAI,CAACD,kBAAkB;IACzE;IACA,IAAI,CAAClD,iBAAiB,CAACjY,OAAO,CAACyO,IAAI,IAAI;MACnC,IAAInM,EAAE;MACN,MAAMwG,WAAW,GAAG2F,IAAI,CAACtG,cAAc,EAAE;MACzC,IAAIW,WAAW,EAAE;QACb,MAAMlM,gBAAgB,GAAG,CAAC0F,EAAE,GAAG,IAAI,CAACgU,cAAc,CAC7C9Y,IAAI,CAACme,OAAO,IAAIA,OAAO,CAACnF,IAAI,KAAK/H,IAAI,CAAC,MAAM,IAAI,IAAInM,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAAC1F,gBAAgB;QACrGkM,WAAW,CAAC1M,KAAK,CAACO,SAAS,GAAGC,gBAAgB,IAAI,EAAE;MACxD;IACJ,CAAC,CAAC;IACF,IAAI,CAAC+Z,SAAS,CAAC3W,OAAO,CAACsa,OAAO,IAAIA,OAAO,CAACsB,cAAc,CAAC,IAAI,CAAC,CAAC;IAC/D,IAAI,CAAC3D,iBAAiB,GAAG,EAAE;IAC3B,IAAI,CAAC3B,cAAc,GAAG,EAAE;IACxB,IAAI,CAACC,aAAa,CAACC,IAAI,GAAG,IAAI;IAC9B,IAAI,CAACD,aAAa,CAAChP,KAAK,GAAG,CAAC;IAC5B,IAAI,CAACgP,aAAa,CAACE,QAAQ,GAAG,KAAK;IACnC,IAAI,CAACjL,cAAc,EAAE;IACrB,IAAI,CAACsL,2BAA2B,CAACtN,WAAW,EAAE;IAC9C,IAAI,CAAC3B,gBAAgB,CAACnI,KAAK,EAAE;EACjC;EACA;AACJ;AACA;AACA;AACA;AACA;EACI0a,mBAAmB,CAAC9L,YAAY,EAAEuL,QAAQ,EAAEtS,KAAK,EAAE;IAC/C,MAAMuS,YAAY,GAAG,IAAI,CAAClD,YAAY,KAAK,YAAY;IACvD,MAAMvD,eAAe,GAAGwG,QAAQ,CAACvL,YAAY,CAAC,CAACnQ,UAAU;IACzD,MAAM0d,gBAAgB,GAAGhC,QAAQ,CAACvL,YAAY,GAAG/G,KAAK,GAAG,CAAC,CAAC,CAAC;IAC5D,IAAI4S,aAAa,GAAG9G,eAAe,CAACyG,YAAY,GAAG,OAAO,GAAG,QAAQ,CAAC,GAAGvS,KAAK;IAC9E,IAAIsU,gBAAgB,EAAE;MAClB,MAAMhP,KAAK,GAAGiN,YAAY,GAAG,MAAM,GAAG,KAAK;MAC3C,MAAMgC,GAAG,GAAGhC,YAAY,GAAG,OAAO,GAAG,QAAQ;MAC7C;MACA;MACA;MACA;MACA,IAAIvS,KAAK,KAAK,CAAC,CAAC,EAAE;QACd4S,aAAa,IAAI0B,gBAAgB,CAAC1d,UAAU,CAAC0O,KAAK,CAAC,GAAGwG,eAAe,CAACyI,GAAG,CAAC;MAC9E,CAAC,MACI;QACD3B,aAAa,IAAI9G,eAAe,CAACxG,KAAK,CAAC,GAAGgP,gBAAgB,CAAC1d,UAAU,CAAC2d,GAAG,CAAC;MAC9E;IACJ;IACA,OAAO3B,aAAa;EACxB;EACA;AACJ;AACA;AACA;AACA;AACA;EACID,gBAAgB,CAAC7G,eAAe,EAAE2G,WAAW,EAAEzS,KAAK,EAAE;IAClD,MAAMuS,YAAY,GAAG,IAAI,CAAClD,YAAY,KAAK,YAAY;IACvD,IAAIqD,UAAU,GAAGH,YAAY,GAAGE,WAAW,CAACvd,IAAI,GAAG4W,eAAe,CAAC5W,IAAI,GACnEud,WAAW,CAACzd,GAAG,GAAG8W,eAAe,CAAC9W,GAAG;IACzC;IACA,IAAIgL,KAAK,KAAK,CAAC,CAAC,EAAE;MACd0S,UAAU,IAAIH,YAAY,GAAGE,WAAW,CAACzb,KAAK,GAAG8U,eAAe,CAAC9U,KAAK,GAClEyb,WAAW,CAACxb,MAAM,GAAG6U,eAAe,CAAC7U,MAAM;IACnD;IACA,OAAOyb,UAAU;EACrB;EACA;AACJ;AACA;AACA;AACA;EACI7B,wBAAwB,CAACpZ,QAAQ,EAAEC,QAAQ,EAAE;IACzC,IAAI,CAAC,IAAI,CAACgZ,iBAAiB,CAACxW,MAAM,EAAE;MAChC,OAAO,KAAK;IAChB;IACA,MAAMsa,aAAa,GAAG,IAAI,CAACzF,cAAc;IACzC,MAAMwD,YAAY,GAAG,IAAI,CAAClD,YAAY,KAAK,YAAY;IACvD;IACA;IACA,MAAMoF,QAAQ,GAAGD,aAAa,CAAC,CAAC,CAAC,CAACvF,IAAI,KAAK,IAAI,CAACyB,iBAAiB,CAAC,CAAC,CAAC;IACpE,IAAI+D,QAAQ,EAAE;MACV,MAAMC,YAAY,GAAGF,aAAa,CAACA,aAAa,CAACta,MAAM,GAAG,CAAC,CAAC,CAACtD,UAAU;MACvE,OAAO2b,YAAY,GAAG9a,QAAQ,IAAIid,YAAY,CAAC5d,KAAK,GAAGY,QAAQ,IAAIgd,YAAY,CAAC3d,MAAM;IAC1F,CAAC,MACI;MACD,MAAM4d,aAAa,GAAGH,aAAa,CAAC,CAAC,CAAC,CAAC5d,UAAU;MACjD,OAAO2b,YAAY,GAAG9a,QAAQ,IAAIkd,aAAa,CAACzf,IAAI,GAAGwC,QAAQ,IAAIid,aAAa,CAAC3f,GAAG;IACxF;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIwb,gCAAgC,CAACtJ,IAAI,EAAEzP,QAAQ,EAAEC,QAAQ,EAAEsI,KAAK,EAAE;IAC9D,MAAMuS,YAAY,GAAG,IAAI,CAAClD,YAAY,KAAK,YAAY;IACvD,MAAMiB,KAAK,GAAG2B,SAAS,CAAC,IAAI,CAAClD,cAAc,EAAE,CAAC;MAAEE,IAAI;MAAErY;IAAW,CAAC,EAAEge,CAAC,EAAElH,KAAK,KAAK;MAC7E,IAAIuB,IAAI,KAAK/H,IAAI,EAAE;QACf;QACA;QACA,OAAOwG,KAAK,CAACxT,MAAM,GAAG,CAAC;MAC3B;MACA,IAAI8F,KAAK,EAAE;QACP,MAAMoD,SAAS,GAAGmP,YAAY,GAAGvS,KAAK,CAAC7I,CAAC,GAAG6I,KAAK,CAAC5I,CAAC;QAClD;QACA;QACA;QACA,IAAI6X,IAAI,KAAK,IAAI,CAACD,aAAa,CAACC,IAAI,IAAI,IAAI,CAACD,aAAa,CAACE,QAAQ,IAC/D9L,SAAS,KAAK,IAAI,CAAC4L,aAAa,CAAChP,KAAK,EAAE;UACxC,OAAO,KAAK;QAChB;MACJ;MACA,OAAOuS,YAAY;MACf;MACA;MACA9a,QAAQ,IAAIoG,IAAI,CAACgX,KAAK,CAACje,UAAU,CAAC1B,IAAI,CAAC,IAAIuC,QAAQ,GAAGoG,IAAI,CAACgX,KAAK,CAACje,UAAU,CAACE,KAAK,CAAC,GAClFY,QAAQ,IAAImG,IAAI,CAACgX,KAAK,CAACje,UAAU,CAAC5B,GAAG,CAAC,IAAI0C,QAAQ,GAAGmG,IAAI,CAACgX,KAAK,CAACje,UAAU,CAACG,MAAM,CAAC;IAC1F,CAAC,CAAC;IACF,OAAQuZ,KAAK,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC1B,aAAa,CAAC0B,KAAK,EAAEpJ,IAAI,EAAE,IAAI,CAAC,GAAI,CAAC,CAAC,GAAGoJ,KAAK;EAChF;EACA;EACAoB,WAAW,GAAG;IACV,IAAI,CAAChB,iBAAiB,GAAG,IAAI,CAACvB,WAAW,CAACyC,KAAK,EAAE;IACjD,IAAI,CAACX,mBAAmB,EAAE;IAC1B,IAAI,CAACC,qBAAqB,EAAE;EAChC;EACA;AACJ;AACA;AACA;AACA;EACIjK,gBAAgB,CAAC9P,CAAC,EAAEC,CAAC,EAAE;IACnB,OAAO,IAAI,CAACib,WAAW,IAAI,IAAI,IAAInb,kBAAkB,CAAC,IAAI,CAACmb,WAAW,EAAElb,CAAC,EAAEC,CAAC,CAAC;EACjF;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIqQ,gCAAgC,CAACP,IAAI,EAAE/P,CAAC,EAAEC,CAAC,EAAE;IACzC,OAAO,IAAI,CAACgY,SAAS,CAACnZ,IAAI,CAAC8c,OAAO,IAAIA,OAAO,CAAC+B,WAAW,CAAC5N,IAAI,EAAE/P,CAAC,EAAEC,CAAC,CAAC,CAAC;EAC1E;EACA;AACJ;AACA;AACA;AACA;AACA;EACI0d,WAAW,CAAC5N,IAAI,EAAE/P,CAAC,EAAEC,CAAC,EAAE;IACpB,IAAI,CAAC,IAAI,CAACib,WAAW,IAAI,CAACnb,kBAAkB,CAAC,IAAI,CAACmb,WAAW,EAAElb,CAAC,EAAEC,CAAC,CAAC,IAChE,CAAC,IAAI,CAACuX,cAAc,CAACzH,IAAI,EAAE,IAAI,CAAC,EAAE;MAClC,OAAO,KAAK;IAChB;IACA,MAAM6N,gBAAgB,GAAG,IAAI,CAACviB,cAAc,EAAE,CAACuiB,gBAAgB,CAAC5d,CAAC,EAAEC,CAAC,CAAC;IACrE;IACA;IACA,IAAI,CAAC2d,gBAAgB,EAAE;MACnB,OAAO,KAAK;IAChB;IACA,MAAMC,aAAa,GAAGtiB,aAAa,CAAC,IAAI,CAACgC,OAAO,CAAC;IACjD;IACA;IACA;IACA;IACA;IACA;IACA,OAAOqgB,gBAAgB,KAAKC,aAAa,IAAIA,aAAa,CAACvb,QAAQ,CAACsb,gBAAgB,CAAC;EACzF;EACA;AACJ;AACA;AACA;EACIE,eAAe,CAAClC,OAAO,EAAE1B,KAAK,EAAE;IAC5B,MAAM6D,cAAc,GAAG,IAAI,CAAC5F,eAAe;IAC3C,IAAI,CAAC4F,cAAc,CAAC3gB,GAAG,CAACwe,OAAO,CAAC,IAAI1B,KAAK,CAACI,KAAK,CAACvK,IAAI,IAAI;MACpD;MACA;MACA;MACA;MACA,OAAO,IAAI,CAACyH,cAAc,CAACzH,IAAI,EAAE,IAAI,CAAC,IAAI,IAAI,CAACiI,WAAW,CAAC1Z,OAAO,CAACyR,IAAI,CAAC,GAAG,CAAC,CAAC;IACjF,CAAC,CAAC,EAAE;MACAgO,cAAc,CAACjU,GAAG,CAAC8R,OAAO,CAAC;MAC3B,IAAI,CAAC7B,qBAAqB,EAAE;MAC5B,IAAI,CAAC6C,qBAAqB,EAAE;IAChC;EACJ;EACA;AACJ;AACA;AACA;EACIM,cAAc,CAACtB,OAAO,EAAE;IACpB,IAAI,CAACzD,eAAe,CAACpM,MAAM,CAAC6P,OAAO,CAAC;IACpC,IAAI,CAACxD,2BAA2B,CAACtN,WAAW,EAAE;EAClD;EACA;AACJ;AACA;AACA;EACI8R,qBAAqB,GAAG;IACpB,IAAI,CAACxE,2BAA2B,GAAG,IAAI,CAAC9T,iBAAiB,CACpD4K,QAAQ,CAAC,IAAI,CAAC7T,cAAc,EAAE,CAAC,CAC/B2P,SAAS,CAACtJ,KAAK,IAAI;MACpB,IAAI,IAAI,CAAC8F,UAAU,EAAE,EAAE;QACnB,MAAM2N,gBAAgB,GAAG,IAAI,CAAChM,gBAAgB,CAAC1H,YAAY,CAACC,KAAK,CAAC;QAClE,IAAIyT,gBAAgB,EAAE;UAClB;UACA;UACA;UACA;UACA,IAAI,CAACyC,cAAc,CAACtW,OAAO,CAAC,CAAC;YAAE7B;UAAW,CAAC,KAAK;YAC5CS,gBAAgB,CAACT,UAAU,EAAE0V,gBAAgB,CAACtX,GAAG,EAAEsX,gBAAgB,CAACpX,IAAI,CAAC;UAC7E,CAAC,CAAC;UACF;UACA;UACA,IAAI,CAAC6Z,cAAc,CAACtW,OAAO,CAAC,CAAC;YAAEwW;UAAK,CAAC,KAAK;YACtC,IAAI,IAAI,CAACxT,iBAAiB,CAACkD,UAAU,CAACsQ,IAAI,CAAC,EAAE;cACzC;cACA;cACAA,IAAI,CAACvL,4BAA4B,EAAE;YACvC;UACJ,CAAC,CAAC;QACN;MACJ,CAAC,MACI,IAAI,IAAI,CAAC9E,WAAW,EAAE,EAAE;QACzB,IAAI,CAACsS,qBAAqB,EAAE;MAChC;IACJ,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;EACI1e,cAAc,GAAG;IACb,IAAI,CAAC,IAAI,CAAC+Z,iBAAiB,EAAE;MACzB,MAAMxH,UAAU,GAAGvS,cAAc,CAACE,aAAa,CAAC,IAAI,CAACgC,OAAO,CAAC,CAAC;MAC9D,IAAI,CAAC6X,iBAAiB,GAAGxH,UAAU,IAAI,IAAI,CAAChN,SAAS;IACzD;IACA,OAAO,IAAI,CAACwU,iBAAiB;EACjC;EACA;EACA8D,wBAAwB,GAAG;IACvB,MAAMkB,YAAY,GAAG,IAAI,CAACb,iBAAiB,CAACc,MAAM,CAACtK,IAAI,IAAIA,IAAI,CAACvI,UAAU,EAAE,CAAC;IAC7E,IAAI,CAACyQ,SAAS,CAAC3W,OAAO,CAACsa,OAAO,IAAIA,OAAO,CAACkC,eAAe,CAAC,IAAI,EAAE1D,YAAY,CAAC,CAAC;EAClF;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASU,SAAS,CAACvE,KAAK,EAAEyH,SAAS,EAAE;EACjC,KAAK,IAAIlb,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGyT,KAAK,CAACxT,MAAM,EAAED,CAAC,EAAE,EAAE;IACnC,IAAIkb,SAAS,CAACzH,KAAK,CAACzT,CAAC,CAAC,EAAEA,CAAC,EAAEyT,KAAK,CAAC,EAAE;MAC/B,OAAOzT,CAAC;IACZ;EACJ;EACA,OAAO,CAAC,CAAC;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS8V,uBAAuB,CAACvW,IAAI,EAAE4b,MAAM,EAAE;EAC3C,IAAI5b,IAAI,KAAKka,MAAM,EAAE;IACjBla,IAAI,CAAC6b,QAAQ,CAAC,CAAC,EAAED,MAAM,CAAC;EAC5B,CAAC,MACI;IACD;IACA5b,IAAI,CAACd,SAAS,IAAI0c,MAAM;EAC5B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,SAASpF,yBAAyB,CAACxW,IAAI,EAAE4b,MAAM,EAAE;EAC7C,IAAI5b,IAAI,KAAKka,MAAM,EAAE;IACjBla,IAAI,CAAC6b,QAAQ,CAACD,MAAM,EAAE,CAAC,CAAC;EAC5B,CAAC,MACI;IACD;IACA5b,IAAI,CAACb,UAAU,IAAIyc,MAAM;EAC7B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,SAAS5B,0BAA0B,CAAC5c,UAAU,EAAEc,QAAQ,EAAE;EACtD,MAAM;IAAE1C,GAAG;IAAE+B,MAAM;IAAEE;EAAO,CAAC,GAAGL,UAAU;EAC1C,MAAMgB,UAAU,GAAGX,MAAM,GAAGsX,0BAA0B;EACtD,IAAI7W,QAAQ,IAAI1C,GAAG,GAAG4C,UAAU,IAAIF,QAAQ,IAAI1C,GAAG,GAAG4C,UAAU,EAAE;IAC9D,OAAO,CAAC,CAAC;EACb,CAAC,MACI,IAAIF,QAAQ,IAAIX,MAAM,GAAGa,UAAU,IAAIF,QAAQ,IAAIX,MAAM,GAAGa,UAAU,EAAE;IACzE,OAAO,CAAC,CAAC;EACb;;EACA,OAAO,CAAC,CAAC;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS6b,4BAA4B,CAAC7c,UAAU,EAAEa,QAAQ,EAAE;EACxD,MAAM;IAAEvC,IAAI;IAAE4B,KAAK;IAAEE;EAAM,CAAC,GAAGJ,UAAU;EACzC,MAAMe,UAAU,GAAGX,KAAK,GAAGuX,0BAA0B;EACrD,IAAI9W,QAAQ,IAAIvC,IAAI,GAAGyC,UAAU,IAAIF,QAAQ,IAAIvC,IAAI,GAAGyC,UAAU,EAAE;IAChE,OAAO,CAAC,CAAC;EACb,CAAC,MACI,IAAIF,QAAQ,IAAIX,KAAK,GAAGa,UAAU,IAAIF,QAAQ,IAAIX,KAAK,GAAGa,UAAU,EAAE;IACvE,OAAO,CAAC,CAAC;EACb;;EACA,OAAO,CAAC,CAAC;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS2b,0BAA0B,CAAC5e,OAAO,EAAEkC,UAAU,EAAEa,QAAQ,EAAEC,QAAQ,EAAE;EACzE,MAAM4d,gBAAgB,GAAG9B,0BAA0B,CAAC5c,UAAU,EAAEc,QAAQ,CAAC;EACzE,MAAM6d,kBAAkB,GAAG9B,4BAA4B,CAAC7c,UAAU,EAAEa,QAAQ,CAAC;EAC7E,IAAI2b,uBAAuB,GAAG,CAAC,CAAC;EAChC,IAAIC,yBAAyB,GAAG,CAAC,CAAC;EAClC;EACA;EACA;EACA;EACA,IAAIiC,gBAAgB,EAAE;IAClB,MAAM5c,SAAS,GAAGhE,OAAO,CAACgE,SAAS;IACnC,IAAI4c,gBAAgB,KAAK,CAAC,CAAC,UAAU;MACjC,IAAI5c,SAAS,GAAG,CAAC,EAAE;QACf0a,uBAAuB,GAAG,CAAC,CAAC;MAChC;IACJ,CAAC,MACI,IAAI1e,OAAO,CAAC8gB,YAAY,GAAG9c,SAAS,GAAGhE,OAAO,CAAC+gB,YAAY,EAAE;MAC9DrC,uBAAuB,GAAG,CAAC,CAAC;IAChC;EACJ;;EACA,IAAImC,kBAAkB,EAAE;IACpB,MAAM5c,UAAU,GAAGjE,OAAO,CAACiE,UAAU;IACrC,IAAI4c,kBAAkB,KAAK,CAAC,CAAC,YAAY;MACrC,IAAI5c,UAAU,GAAG,CAAC,EAAE;QAChB0a,yBAAyB,GAAG,CAAC,CAAC;MAClC;IACJ,CAAC,MACI,IAAI3e,OAAO,CAACghB,WAAW,GAAG/c,UAAU,GAAGjE,OAAO,CAACihB,WAAW,EAAE;MAC7DtC,yBAAyB,GAAG,CAAC,CAAC;IAClC;EACJ;;EACA,OAAO,CAACD,uBAAuB,EAAEC,yBAAyB,CAAC;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMuC,2BAA2B,GAAGrjB,+BAA+B,CAAC;EAChE0I,OAAO,EAAE,KAAK;EACd4a,OAAO,EAAE;AACb,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,CAAC;EACnBhe,WAAW,CAAC0D,OAAO,EAAEzD,SAAS,EAAE;IAC5B,IAAI,CAACyD,OAAO,GAAGA,OAAO;IACtB;IACA,IAAI,CAACua,cAAc,GAAG,IAAI1a,GAAG,EAAE;IAC/B;IACA,IAAI,CAAC2a,cAAc,GAAG,IAAI3a,GAAG,EAAE;IAC/B;IACA,IAAI,CAAC4a,oBAAoB,GAAG,EAAE;IAC9B;IACA,IAAI,CAACC,gBAAgB,GAAG,IAAIhe,GAAG,EAAE;IACjC;AACR;AACA;AACA;IACQ,IAAI,CAACie,kBAAkB,GAAIjP,IAAI,IAAKA,IAAI,CAACvI,UAAU,EAAE;IACrD;AACR;AACA;AACA;IACQ,IAAI,CAACwH,WAAW,GAAG,IAAIpT,OAAO,EAAE;IAChC;AACR;AACA;AACA;IACQ,IAAI,CAACqT,SAAS,GAAG,IAAIrT,OAAO,EAAE;IAC9B;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACqjB,MAAM,GAAG,IAAIrjB,OAAO,EAAE;IAC3B;AACR;AACA;AACA;IACQ,IAAI,CAACsjB,4BAA4B,GAAIxd,KAAK,IAAK;MAC3C,IAAI,IAAI,CAACod,oBAAoB,CAAC/b,MAAM,GAAG,CAAC,EAAE;QACtCrB,KAAK,CAACgG,cAAc,EAAE;MAC1B;IACJ,CAAC;IACD;IACA,IAAI,CAACyX,4BAA4B,GAAIzd,KAAK,IAAK;MAC3C,IAAI,IAAI,CAACod,oBAAoB,CAAC/b,MAAM,GAAG,CAAC,EAAE;QACtC;QACA;QACA;QACA,IAAI,IAAI,CAAC+b,oBAAoB,CAACM,IAAI,CAAC,IAAI,CAACJ,kBAAkB,CAAC,EAAE;UACzDtd,KAAK,CAACgG,cAAc,EAAE;QAC1B;QACA,IAAI,CAACsH,WAAW,CAAChJ,IAAI,CAACtE,KAAK,CAAC;MAChC;IACJ,CAAC;IACD,IAAI,CAACd,SAAS,GAAGA,SAAS;EAC9B;EACA;EACAmY,qBAAqB,CAAC7I,IAAI,EAAE;IACxB,IAAI,CAAC,IAAI,CAAC0O,cAAc,CAACxhB,GAAG,CAAC8S,IAAI,CAAC,EAAE;MAChC,IAAI,CAAC0O,cAAc,CAAC9U,GAAG,CAACoG,IAAI,CAAC;IACjC;EACJ;EACA;EACA9G,gBAAgB,CAAC0O,IAAI,EAAE;IACnB,IAAI,CAAC+G,cAAc,CAAC/U,GAAG,CAACgO,IAAI,CAAC;IAC7B;IACA;IACA;IACA,IAAI,IAAI,CAAC+G,cAAc,CAAC7D,IAAI,KAAK,CAAC,EAAE;MAChC,IAAI,CAAC3W,OAAO,CAACiG,iBAAiB,CAAC,MAAM;QACjC;QACA;QACA,IAAI,CAAC1J,SAAS,CAAC2J,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAAC4U,4BAA4B,EAAEV,2BAA2B,CAAC;MAChH,CAAC,CAAC;IACN;EACJ;EACA;EACAzF,mBAAmB,CAAC9I,IAAI,EAAE;IACtB,IAAI,CAAC0O,cAAc,CAAC7S,MAAM,CAACmE,IAAI,CAAC;EACpC;EACA;EACAzE,cAAc,CAACqM,IAAI,EAAE;IACjB,IAAI,CAAC+G,cAAc,CAAC9S,MAAM,CAAC+L,IAAI,CAAC;IAChC,IAAI,CAACnL,YAAY,CAACmL,IAAI,CAAC;IACvB,IAAI,IAAI,CAAC+G,cAAc,CAAC7D,IAAI,KAAK,CAAC,EAAE;MAChC,IAAI,CAACpa,SAAS,CAACuR,mBAAmB,CAAC,WAAW,EAAE,IAAI,CAACgN,4BAA4B,EAAEV,2BAA2B,CAAC;IACnH;EACJ;EACA;AACJ;AACA;AACA;AACA;EACI9O,aAAa,CAACmI,IAAI,EAAEpW,KAAK,EAAE;IACvB;IACA,IAAI,IAAI,CAACod,oBAAoB,CAACxgB,OAAO,CAACwZ,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE;MAC9C;IACJ;IACA,IAAI,CAACgH,oBAAoB,CAACjF,IAAI,CAAC/B,IAAI,CAAC;IACpC,IAAI,IAAI,CAACgH,oBAAoB,CAAC/b,MAAM,KAAK,CAAC,EAAE;MACxC,MAAMqK,YAAY,GAAG1L,KAAK,CAAC8B,IAAI,CAAC6b,UAAU,CAAC,OAAO,CAAC;MACnD;MACA;MACA;MACA,IAAI,CAACN,gBAAgB,CAChB5d,GAAG,CAACiM,YAAY,GAAG,UAAU,GAAG,SAAS,EAAE;QAC5C6E,OAAO,EAAGqN,CAAC,IAAK,IAAI,CAACrQ,SAAS,CAACjJ,IAAI,CAACsZ,CAAC,CAAC;QACtCC,OAAO,EAAE;MACb,CAAC,CAAC,CACGpe,GAAG,CAAC,QAAQ,EAAE;QACf8Q,OAAO,EAAGqN,CAAC,IAAK,IAAI,CAACL,MAAM,CAACjZ,IAAI,CAACsZ,CAAC,CAAC;QACnC;QACA;QACAC,OAAO,EAAE;MACb,CAAC;MACG;MACA;MACA;MACA;MAAA,CACCpe,GAAG,CAAC,aAAa,EAAE;QACpB8Q,OAAO,EAAE,IAAI,CAACiN,4BAA4B;QAC1CK,OAAO,EAAEd;MACb,CAAC,CAAC;MACF;MACA;MACA,IAAI,CAACrR,YAAY,EAAE;QACf,IAAI,CAAC2R,gBAAgB,CAAC5d,GAAG,CAAC,WAAW,EAAE;UACnC8Q,OAAO,EAAGqN,CAAC,IAAK,IAAI,CAACtQ,WAAW,CAAChJ,IAAI,CAACsZ,CAAC,CAAC;UACxCC,OAAO,EAAEd;QACb,CAAC,CAAC;MACN;MACA,IAAI,CAACpa,OAAO,CAACiG,iBAAiB,CAAC,MAAM;QACjC,IAAI,CAACyU,gBAAgB,CAACzd,OAAO,CAAC,CAACke,MAAM,EAAErgB,IAAI,KAAK;UAC5C,IAAI,CAACyB,SAAS,CAAC2J,gBAAgB,CAACpL,IAAI,EAAEqgB,MAAM,CAACvN,OAAO,EAAEuN,MAAM,CAACD,OAAO,CAAC;QACzE,CAAC,CAAC;MACN,CAAC,CAAC;IACN;EACJ;EACA;EACA5S,YAAY,CAACmL,IAAI,EAAE;IACf,MAAMqB,KAAK,GAAG,IAAI,CAAC2F,oBAAoB,CAACxgB,OAAO,CAACwZ,IAAI,CAAC;IACrD,IAAIqB,KAAK,GAAG,CAAC,CAAC,EAAE;MACZ,IAAI,CAAC2F,oBAAoB,CAAC7H,MAAM,CAACkC,KAAK,EAAE,CAAC,CAAC;MAC1C,IAAI,IAAI,CAAC2F,oBAAoB,CAAC/b,MAAM,KAAK,CAAC,EAAE;QACxC,IAAI,CAAC0c,qBAAqB,EAAE;MAChC;IACJ;EACJ;EACA;EACAjY,UAAU,CAACsQ,IAAI,EAAE;IACb,OAAO,IAAI,CAACgH,oBAAoB,CAACxgB,OAAO,CAACwZ,IAAI,CAAC,GAAG,CAAC,CAAC;EACvD;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI5I,QAAQ,CAACtB,UAAU,EAAE;IACjB,MAAM8R,OAAO,GAAG,CAAC,IAAI,CAACT,MAAM,CAAC;IAC7B,IAAIrR,UAAU,IAAIA,UAAU,KAAK,IAAI,CAAChN,SAAS,EAAE;MAC7C;MACA;MACA;MACA8e,OAAO,CAAC7F,IAAI,CAAC,IAAI7d,UAAU,CAAE2jB,QAAQ,IAAK;QACtC,OAAO,IAAI,CAACtb,OAAO,CAACiG,iBAAiB,CAAC,MAAM;UACxC,MAAMsV,YAAY,GAAG,IAAI;UACzB,MAAMxc,QAAQ,GAAI1B,KAAK,IAAK;YACxB,IAAI,IAAI,CAACod,oBAAoB,CAAC/b,MAAM,EAAE;cAClC4c,QAAQ,CAAC3Z,IAAI,CAACtE,KAAK,CAAC;YACxB;UACJ,CAAC;UACDkM,UAAU,CAACrD,gBAAgB,CAAC,QAAQ,EAAEnH,QAAQ,EAAEwc,YAAY,CAAC;UAC7D,OAAO,MAAM;YACThS,UAAU,CAACuE,mBAAmB,CAAC,QAAQ,EAAE/O,QAAQ,EAAEwc,YAAY,CAAC;UACpE,CAAC;QACL,CAAC,CAAC;MACN,CAAC,CAAC,CAAC;IACP;IACA,OAAO3jB,KAAK,CAAC,GAAGyjB,OAAO,CAAC;EAC5B;EACAG,WAAW,GAAG;IACV,IAAI,CAAChB,cAAc,CAACvd,OAAO,CAACwe,QAAQ,IAAI,IAAI,CAACrU,cAAc,CAACqU,QAAQ,CAAC,CAAC;IACtE,IAAI,CAAClB,cAAc,CAACtd,OAAO,CAACwe,QAAQ,IAAI,IAAI,CAAC9G,mBAAmB,CAAC8G,QAAQ,CAAC,CAAC;IAC3E,IAAI,CAACL,qBAAqB,EAAE;IAC5B,IAAI,CAACzQ,WAAW,CAACrD,QAAQ,EAAE;IAC3B,IAAI,CAACsD,SAAS,CAACtD,QAAQ,EAAE;EAC7B;EACA;EACA8T,qBAAqB,GAAG;IACpB,IAAI,CAACV,gBAAgB,CAACzd,OAAO,CAAC,CAACke,MAAM,EAAErgB,IAAI,KAAK;MAC5C,IAAI,CAACyB,SAAS,CAACuR,mBAAmB,CAAChT,IAAI,EAAEqgB,MAAM,CAACvN,OAAO,EAAEuN,MAAM,CAACD,OAAO,CAAC;IAC5E,CAAC,CAAC;IACF,IAAI,CAACR,gBAAgB,CAAC/d,KAAK,EAAE;EACjC;AACJ;AACA2d,gBAAgB,CAACoB,IAAI,GAAG,SAASC,wBAAwB,CAACC,CAAC,EAAE;EAAE,OAAO,KAAKA,CAAC,IAAItB,gBAAgB,EAAEliB,MAAM,CAACyjB,QAAQ,CAACzjB,MAAM,CAAC7C,MAAM,CAAC,EAAE6C,MAAM,CAACyjB,QAAQ,CAACplB,QAAQ,CAAC,CAAC;AAAE,CAAC;AAC/J6jB,gBAAgB,CAACwB,KAAK,GAAGzmB,EAAE,CAAC0mB,kBAAkB,CAAC;EAAEC,OAAO,EAAE,SAASL,wBAAwB,GAAG;IAAE,OAAO,IAAIrB,gBAAgB,CAACjlB,EAAE,CAACwmB,QAAQ,CAACxmB,EAAE,CAACE,MAAM,CAAC,EAAEF,EAAE,CAACwmB,QAAQ,CAACrlB,EAAE,CAACC,QAAQ,CAAC,CAAC;EAAE,CAAC;EAAEwlB,KAAK,EAAE3B,gBAAgB;EAAE4B,UAAU,EAAE;AAAO,CAAC,CAAC;AAChO5B,gBAAgB,CAAC6B,cAAc,GAAG,MAAM,CACpC;EAAEhd,IAAI,EAAE5J;AAAO,CAAC,EAChB;EAAE4J,IAAI,EAAEiH,SAAS;EAAEgW,UAAU,EAAE,CAAC;IAAEjd,IAAI,EAAE3J,MAAM;IAAE6mB,IAAI,EAAE,CAAC5lB,QAAQ;EAAG,CAAC;AAAE,CAAC,CACzE;AACD,CAAC,YAAY;EAAE,CAAC,OAAO6lB,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAKlkB,MAAM,CAACmkB,iBAAiB,CAACjC,gBAAgB,EAAE,CAAC;IACtGnb,IAAI,EAAE7J,UAAU;IAChB+mB,IAAI,EAAE,CAAC;MAAEH,UAAU,EAAE;IAAO,CAAC;EACjC,CAAC,CAAC,EAAE,YAAY;IAAE,OAAO,CAAC;MAAE/c,IAAI,EAAE/G,MAAM,CAAC7C;IAAO,CAAC,EAAE;MAAE4J,IAAI,EAAEiH,SAAS;MAAEgW,UAAU,EAAE,CAAC;QACvEjd,IAAI,EAAE3J,MAAM;QACZ6mB,IAAI,EAAE,CAAC5lB,QAAQ;MACnB,CAAC;IAAE,CAAC,CAAC;EAAE,CAAC,EAAE,IAAI,CAAC;AAAE,CAAC,GAAG;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM+lB,cAAc,GAAG;EACnB9Z,kBAAkB,EAAE,CAAC;EACrB0N,+BAA+B,EAAE;AACrC,CAAC;AACD;AACA;AACA;AACA,MAAMqM,QAAQ,CAAC;EACXngB,WAAW,CAACC,SAAS,EAAEyD,OAAO,EAAExD,cAAc,EAAEyD,iBAAiB,EAAE;IAC/D,IAAI,CAAC1D,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACyD,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACxD,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACyD,iBAAiB,GAAGA,iBAAiB;EAC9C;EACA;AACJ;AACA;AACA;AACA;EACIyc,UAAU,CAACxjB,OAAO,EAAEiiB,MAAM,GAAGqB,cAAc,EAAE;IACzC,OAAO,IAAI1c,OAAO,CAAC5G,OAAO,EAAEiiB,MAAM,EAAE,IAAI,CAAC5e,SAAS,EAAE,IAAI,CAACyD,OAAO,EAAE,IAAI,CAACxD,cAAc,EAAE,IAAI,CAACyD,iBAAiB,CAAC;EAClH;EACA;AACJ;AACA;AACA;EACI0c,cAAc,CAACzjB,OAAO,EAAE;IACpB,OAAO,IAAI8Z,WAAW,CAAC9Z,OAAO,EAAE,IAAI,CAAC+G,iBAAiB,EAAE,IAAI,CAAC1D,SAAS,EAAE,IAAI,CAACyD,OAAO,EAAE,IAAI,CAACxD,cAAc,CAAC;EAC9G;AACJ;AACAigB,QAAQ,CAACf,IAAI,GAAG,SAASkB,gBAAgB,CAAChB,CAAC,EAAE;EAAE,OAAO,KAAKA,CAAC,IAAIa,QAAQ,EAAErkB,MAAM,CAACyjB,QAAQ,CAACplB,QAAQ,CAAC,EAAE2B,MAAM,CAACyjB,QAAQ,CAACzjB,MAAM,CAAC7C,MAAM,CAAC,EAAE6C,MAAM,CAACyjB,QAAQ,CAACxjB,MAAM,CAAC1B,aAAa,CAAC,EAAEyB,MAAM,CAACyjB,QAAQ,CAACvB,gBAAgB,CAAC,CAAC;AAAE,CAAC;AACjNmC,QAAQ,CAACX,KAAK,GAAGzmB,EAAE,CAAC0mB,kBAAkB,CAAC;EAAEC,OAAO,EAAE,SAASY,gBAAgB,GAAG;IAAE,OAAO,IAAIH,QAAQ,CAACpnB,EAAE,CAACwmB,QAAQ,CAACrlB,EAAE,CAACC,QAAQ,CAAC,EAAEpB,EAAE,CAACwmB,QAAQ,CAACxmB,EAAE,CAACE,MAAM,CAAC,EAAEF,EAAE,CAACwmB,QAAQ,CAACnlB,EAAE,CAACC,aAAa,CAAC,EAAEtB,EAAE,CAACwmB,QAAQ,CAACvB,gBAAgB,CAAC,CAAC;EAAE,CAAC;EAAE2B,KAAK,EAAEQ,QAAQ;EAAEP,UAAU,EAAE;AAAO,CAAC,CAAC;AAC9PO,QAAQ,CAACN,cAAc,GAAG,MAAM,CAC5B;EAAEhd,IAAI,EAAEiH,SAAS;EAAEgW,UAAU,EAAE,CAAC;IAAEjd,IAAI,EAAE3J,MAAM;IAAE6mB,IAAI,EAAE,CAAC5lB,QAAQ;EAAG,CAAC;AAAE,CAAC,EACtE;EAAE0I,IAAI,EAAE5J;AAAO,CAAC,EAChB;EAAE4J,IAAI,EAAExI;AAAc,CAAC,EACvB;EAAEwI,IAAI,EAAEmb;AAAiB,CAAC,CAC7B;AACD,CAAC,YAAY;EAAE,CAAC,OAAOgC,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAKlkB,MAAM,CAACmkB,iBAAiB,CAACE,QAAQ,EAAE,CAAC;IAC9Ftd,IAAI,EAAE7J,UAAU;IAChB+mB,IAAI,EAAE,CAAC;MAAEH,UAAU,EAAE;IAAO,CAAC;EACjC,CAAC,CAAC,EAAE,YAAY;IAAE,OAAO,CAAC;MAAE/c,IAAI,EAAEiH,SAAS;MAAEgW,UAAU,EAAE,CAAC;QAC9Cjd,IAAI,EAAE3J,MAAM;QACZ6mB,IAAI,EAAE,CAAC5lB,QAAQ;MACnB,CAAC;IAAE,CAAC,EAAE;MAAE0I,IAAI,EAAE/G,MAAM,CAAC7C;IAAO,CAAC,EAAE;MAAE4J,IAAI,EAAE9G,MAAM,CAAC1B;IAAc,CAAC,EAAE;MAAEwI,IAAI,EAAEmb;IAAiB,CAAC,CAAC;EAAE,CAAC,EAAE,IAAI,CAAC;AAAE,CAAC,GAAG;;AAEtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMuC,eAAe,GAAG,IAAIpnB,cAAc,CAAC,iBAAiB,CAAC;;AAE7D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMqnB,mBAAmB,GAAG,IAAIrnB,cAAc,CAAC,kBAAkB,CAAC;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,MAAMsnB,gBAAgB,CAAC;EACnBzgB,WAAW,GAAG;IACV;IACA,IAAI,CAAC0gB,MAAM,GAAG,IAAInd,GAAG,EAAE;IACvB,IAAI,CAACoB,SAAS,GAAG,KAAK;EAC1B;EACA;EACA,IAAIa,QAAQ,GAAG;IAAE,OAAO,IAAI,CAACb,SAAS;EAAE;EACxC,IAAIa,QAAQ,CAACjJ,KAAK,EAAE;IAChB,IAAI,CAACoI,SAAS,GAAGhK,qBAAqB,CAAC4B,KAAK,CAAC;EACjD;EACA2iB,WAAW,GAAG;IACV,IAAI,CAACwB,MAAM,CAACrgB,KAAK,EAAE;EACvB;AACJ;AACAogB,gBAAgB,CAACrB,IAAI,GAAG,SAASuB,wBAAwB,CAACrB,CAAC,EAAE;EAAE,OAAO,KAAKA,CAAC,IAAImB,gBAAgB,GAAG;AAAE,CAAC;AACtGA,gBAAgB,CAACG,IAAI,GAAG,aAAc9kB,MAAM,CAAC+kB,iBAAiB,CAAC;EAAEhe,IAAI,EAAE4d,gBAAgB;EAAEK,SAAS,EAAE,CAAC,CAAC,EAAE,EAAE,kBAAkB,EAAE,EAAE,CAAC,CAAC;EAAEC,MAAM,EAAE;IAAEvb,QAAQ,EAAE,CAAC,0BAA0B,EAAE,UAAU;EAAE,CAAC;EAAEwb,QAAQ,EAAE,CAAC,kBAAkB,CAAC;EAAEC,QAAQ,EAAE,CAACnlB,MAAM,CAAColB,kBAAkB,CAAC,CAAC;IAAEC,OAAO,EAAEX,mBAAmB;IAAEY,WAAW,EAAEX;EAAiB,CAAC,CAAC,CAAC;AAAE,CAAC,CAAC;AAC/UA,gBAAgB,CAACY,cAAc,GAAG;EAC9B7b,QAAQ,EAAE,CAAC;IAAE3C,IAAI,EAAExJ,KAAK;IAAE0mB,IAAI,EAAE,CAAC,0BAA0B;EAAG,CAAC;AACnE,CAAC;AACD,CAAC,YAAY;EAAE,CAAC,OAAOC,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAKlkB,MAAM,CAACmkB,iBAAiB,CAACQ,gBAAgB,EAAE,CAAC;IACtG5d,IAAI,EAAEzJ,SAAS;IACf2mB,IAAI,EAAE,CAAC;MACCvd,QAAQ,EAAE,oBAAoB;MAC9Bwe,QAAQ,EAAE,kBAAkB;MAC5BM,SAAS,EAAE,CAAC;QAAEH,OAAO,EAAEX,mBAAmB;QAAEY,WAAW,EAAEX;MAAiB,CAAC;IAC/E,CAAC;EACT,CAAC,CAAC,EAAE,YAAY;IAAE,OAAO,EAAE;EAAE,CAAC,EAAE;IAAEjb,QAAQ,EAAE,CAAC;MACrC3C,IAAI,EAAExJ,KAAK;MACX0mB,IAAI,EAAE,CAAC,0BAA0B;IACrC,CAAC;EAAE,CAAC,CAAC;AAAE,CAAC,GAAG;;AAEnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMwB,eAAe,GAAG,IAAIpoB,cAAc,CAAC,iBAAiB,CAAC;;AAE7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASqoB,iBAAiB,CAAC9f,IAAI,EAAElD,IAAI,EAAE;EACnC,IAAIkD,IAAI,CAAC4T,QAAQ,KAAK,CAAC,EAAE;IACrB,MAAMmM,KAAK,CAAE,GAAEjjB,IAAK,wCAAuC,GACtD,0BAAyBkD,IAAI,CAACO,QAAS,IAAG,CAAC;EACpD;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIyf,gBAAgB,GAAG,CAAC;AACxB;AACA;AACA;AACA;AACA;AACA,MAAMC,aAAa,GAAG,IAAIxoB,cAAc,CAAC,aAAa,CAAC;AACvD,MAAMyoB,EAAE,GAAG9X,SAAS;AACpB;AACA,MAAM+X,WAAW,CAAC;EACd7hB,WAAW,EACX;EACApD,OAAO,EAAEklB,QAAQ,EAAEC,kBAAkB,EAAEC,iBAAiB,EAAEC,IAAI,EAAEC,MAAM,EAAErD,MAAM,EAAE;IAC5E,IAAI,CAACjiB,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACmlB,kBAAkB,GAAGA,kBAAkB;IAC5C,IAAI,CAACC,iBAAiB,GAAGA,iBAAiB;IAC1C,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB;IACA,IAAI,CAACC,UAAU,GAAG,IAAIlnB,OAAO,EAAE;IAC/B;AACR;AACA;AACA;AACA;IACQ,IAAI,CAAC4e,WAAW,GAAG,EAAE;IACrB;AACR;AACA;AACA;IACQ,IAAI,CAACuI,EAAE,GAAI,iBAAgBV,gBAAgB,EAAG,EAAC;IAC/C;AACR;AACA;AACA;IACQ,IAAI,CAAC7K,cAAc,GAAG,MAAM,IAAI;IAChC;IACA,IAAI,CAACC,aAAa,GAAG,MAAM,IAAI;IAC/B;IACA,IAAI,CAAC5R,OAAO,GAAG,IAAI5L,YAAY,EAAE;IACjC;AACR;AACA;IACQ,IAAI,CAAC0L,OAAO,GAAG,IAAI1L,YAAY,EAAE;IACjC;AACR;AACA;AACA;IACQ,IAAI,CAAC2L,MAAM,GAAG,IAAI3L,YAAY,EAAE;IAChC;IACA,IAAI,CAACyd,MAAM,GAAG,IAAIzd,YAAY,EAAE;IAChC;AACR;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAAC+oB,cAAc,GAAG,IAAI9e,GAAG,EAAE;IAC/B,IAAI,OAAOyc,SAAS,KAAK,WAAW,IAAIA,SAAS,EAAE;MAC/CwB,iBAAiB,CAAC5kB,OAAO,CAACsgB,aAAa,EAAE,aAAa,CAAC;IAC3D;IACA,IAAI,CAACoF,YAAY,GAAGR,QAAQ,CAACzB,cAAc,CAACzjB,OAAO,CAAC;IACpD,IAAI,CAAC0lB,YAAY,CAACC,IAAI,GAAG,IAAI;IAC7B,IAAI1D,MAAM,EAAE;MACR,IAAI,CAAC2D,eAAe,CAAC3D,MAAM,CAAC;IAChC;IACA,IAAI,CAACyD,YAAY,CAACzL,cAAc,GAAG,CAACM,IAAI,EAAE5H,IAAI,KAAK;MAC/C,OAAO,IAAI,CAACsH,cAAc,CAACM,IAAI,CAACoL,IAAI,EAAEhT,IAAI,CAACgT,IAAI,CAAC;IACpD,CAAC;IACD,IAAI,CAACD,YAAY,CAACxL,aAAa,GAC3B,CAAC0B,KAAK,EAAErB,IAAI,EAAE5H,IAAI,KAAK;MACnB,OAAO,IAAI,CAACuH,aAAa,CAAC0B,KAAK,EAAErB,IAAI,CAACoL,IAAI,EAAEhT,IAAI,CAACgT,IAAI,CAAC;IAC1D,CAAC;IACL,IAAI,CAACE,2BAA2B,CAAC,IAAI,CAACH,YAAY,CAAC;IACnD,IAAI,CAACI,aAAa,CAAC,IAAI,CAACJ,YAAY,CAAC;IACrCT,WAAW,CAACc,UAAU,CAACzJ,IAAI,CAAC,IAAI,CAAC;IACjC,IAAIgJ,MAAM,EAAE;MACRA,MAAM,CAACxB,MAAM,CAACvX,GAAG,CAAC,IAAI,CAAC;IAC3B;EACJ;EACA;EACA,IAAI3D,QAAQ,GAAG;IACX,OAAO,IAAI,CAACb,SAAS,IAAK,CAAC,CAAC,IAAI,CAACud,MAAM,IAAI,IAAI,CAACA,MAAM,CAAC1c,QAAS;EACpE;EACA,IAAIA,QAAQ,CAACjJ,KAAK,EAAE;IAChB;IACA;IACA;IACA;IACA,IAAI,CAAC+lB,YAAY,CAAC9c,QAAQ,GAAG,IAAI,CAACb,SAAS,GAAGhK,qBAAqB,CAAC4B,KAAK,CAAC;EAC9E;EACA;EACAqmB,OAAO,CAACxT,IAAI,EAAE;IACV,IAAI,CAACiT,cAAc,CAAClZ,GAAG,CAACiG,IAAI,CAAC;IAC7B,IAAI,IAAI,CAACkT,YAAY,CAACzb,UAAU,EAAE,EAAE;MAChC,IAAI,CAACgc,iBAAiB,EAAE;IAC5B;EACJ;EACA;EACAC,UAAU,CAAC1T,IAAI,EAAE;IACb,IAAI,CAACiT,cAAc,CAACjX,MAAM,CAACgE,IAAI,CAAC;IAChC,IAAI,IAAI,CAACkT,YAAY,CAACzb,UAAU,EAAE,EAAE;MAChC,IAAI,CAACgc,iBAAiB,EAAE;IAC5B;EACJ;EACA;EACAE,cAAc,GAAG;IACb,OAAOhS,KAAK,CAACgF,IAAI,CAAC,IAAI,CAACsM,cAAc,CAAC,CAAClG,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;MAClD,MAAM2G,gBAAgB,GAAG5G,CAAC,CAAC6G,QAAQ,CAACla,iBAAiB,EAAE,CAACma,uBAAuB,CAAC7G,CAAC,CAAC4G,QAAQ,CAACla,iBAAiB,EAAE,CAAC;MAC/G;MACA;MACA;MACA,OAAOia,gBAAgB,GAAGG,IAAI,CAACC,2BAA2B,GAAG,CAAC,CAAC,GAAG,CAAC;IACvE,CAAC,CAAC;EACN;EACAlE,WAAW,GAAG;IACV,MAAM1G,KAAK,GAAGqJ,WAAW,CAACc,UAAU,CAAChlB,OAAO,CAAC,IAAI,CAAC;IAClD,IAAI6a,KAAK,GAAG,CAAC,CAAC,EAAE;MACZqJ,WAAW,CAACc,UAAU,CAACrM,MAAM,CAACkC,KAAK,EAAE,CAAC,CAAC;IAC3C;IACA,IAAI,IAAI,CAAC0J,MAAM,EAAE;MACb,IAAI,CAACA,MAAM,CAACxB,MAAM,CAACtV,MAAM,CAAC,IAAI,CAAC;IACnC;IACA,IAAI,CAACiX,cAAc,CAAChiB,KAAK,EAAE;IAC3B,IAAI,CAACiiB,YAAY,CAAC7X,OAAO,EAAE;IAC3B,IAAI,CAAC0X,UAAU,CAAC9c,IAAI,EAAE;IACtB,IAAI,CAAC8c,UAAU,CAACnX,QAAQ,EAAE;EAC9B;EACA;EACAyX,2BAA2B,CAACY,GAAG,EAAE;IAC7B,IAAI,IAAI,CAACpB,IAAI,EAAE;MACX,IAAI,CAACA,IAAI,CAAC7X,MAAM,CACX0N,IAAI,CAACtc,SAAS,CAAC,IAAI,CAACymB,IAAI,CAAC1lB,KAAK,CAAC,EAAEhB,SAAS,CAAC,IAAI,CAAC4mB,UAAU,CAAC,CAAC,CAC5D9X,SAAS,CAAC9N,KAAK,IAAI8mB,GAAG,CAAChY,aAAa,CAAC9O,KAAK,CAAC,CAAC;IACrD;IACA8mB,GAAG,CAACze,aAAa,CAACyF,SAAS,CAAC,MAAM;MAC9B,MAAMmQ,QAAQ,GAAG3f,WAAW,CAAC,IAAI,CAACgf,WAAW,CAAC,CAACpe,GAAG,CAAC8T,IAAI,IAAI;QACvD,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;UAC1B,MAAM+T,qBAAqB,GAAGzB,WAAW,CAACc,UAAU,CAACxkB,IAAI,CAAColB,IAAI,IAAIA,IAAI,CAACnB,EAAE,KAAK7S,IAAI,CAAC;UACnF,IAAI,CAAC+T,qBAAqB,KAAK,OAAOtD,SAAS,KAAK,WAAW,IAAIA,SAAS,CAAC,EAAE;YAC3EwD,OAAO,CAACC,IAAI,CAAE,2DAA0DlU,IAAK,GAAE,CAAC;UACpF;UACA,OAAO+T,qBAAqB;QAChC;QACA,OAAO/T,IAAI;MACf,CAAC,CAAC;MACF,IAAI,IAAI,CAAC2S,MAAM,EAAE;QACb,IAAI,CAACA,MAAM,CAACxB,MAAM,CAAC/f,OAAO,CAAC4O,IAAI,IAAI;UAC/B,IAAIiL,QAAQ,CAAC7c,OAAO,CAAC4R,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;YAC/BiL,QAAQ,CAACtB,IAAI,CAAC3J,IAAI,CAAC;UACvB;QACJ,CAAC,CAAC;MACN;MACA;MACA;MACA,IAAI,CAAC,IAAI,CAACmU,0BAA0B,EAAE;QAClC,MAAMC,iBAAiB,GAAG,IAAI,CAAC3B,iBAAiB,CAC3C4B,2BAA2B,CAAC,IAAI,CAAChnB,OAAO,CAAC,CACzCnB,GAAG,CAACooB,UAAU,IAAIA,UAAU,CAACC,aAAa,EAAE,CAAC5G,aAAa,CAAC;QAChE,IAAI,CAACoF,YAAY,CAACnK,qBAAqB,CAACwL,iBAAiB,CAAC;QAC1D;QACA;QACA,IAAI,CAACD,0BAA0B,GAAG,IAAI;MAC1C;MACAL,GAAG,CAAC7d,QAAQ,GAAG,IAAI,CAACA,QAAQ;MAC5B6d,GAAG,CAACtQ,QAAQ,GAAG,IAAI,CAACA,QAAQ;MAC5BsQ,GAAG,CAACvT,eAAe,GAAGnV,qBAAqB,CAAC,IAAI,CAACmV,eAAe,CAAC;MACjEuT,GAAG,CAAC1M,kBAAkB,GAAGhc,qBAAqB,CAAC,IAAI,CAACgc,kBAAkB,CAAC;MACvE0M,GAAG,CAACzM,cAAc,GAAG9b,oBAAoB,CAAC,IAAI,CAAC8b,cAAc,EAAE,CAAC,CAAC;MACjEyM,GAAG,CACExJ,WAAW,CAACW,QAAQ,CAACd,MAAM,CAACnK,IAAI,IAAIA,IAAI,IAAIA,IAAI,KAAK,IAAI,CAAC,CAAC9T,GAAG,CAAC8nB,IAAI,IAAIA,IAAI,CAACjB,YAAY,CAAC,CAAC,CAC1FvI,eAAe,CAAC,IAAI,CAACC,WAAW,CAAC;IAC1C,CAAC,CAAC;EACN;EACA;EACA0I,aAAa,CAACW,GAAG,EAAE;IACfA,GAAG,CAACze,aAAa,CAACyF,SAAS,CAAC,MAAM;MAC9B,IAAI,CAACwY,iBAAiB,EAAE;MACxB,IAAI,CAACd,kBAAkB,CAACgC,YAAY,EAAE;IAC1C,CAAC,CAAC;IACFV,GAAG,CAACre,OAAO,CAACqF,SAAS,CAACtJ,KAAK,IAAI;MAC3B,IAAI,CAACiE,OAAO,CAACgf,IAAI,CAAC;QACdtd,SAAS,EAAE,IAAI;QACf0I,IAAI,EAAErO,KAAK,CAACqO,IAAI,CAACmT,IAAI;QACrBtT,YAAY,EAAElO,KAAK,CAACkO;MACxB,CAAC,CAAC;IACN,CAAC,CAAC;IACFoU,GAAG,CAACpe,MAAM,CAACoF,SAAS,CAACtJ,KAAK,IAAI;MAC1B,IAAI,CAACkE,MAAM,CAAC+e,IAAI,CAAC;QACbtd,SAAS,EAAE,IAAI;QACf0I,IAAI,EAAErO,KAAK,CAACqO,IAAI,CAACmT;MACrB,CAAC,CAAC;MACF,IAAI,CAACR,kBAAkB,CAACgC,YAAY,EAAE;IAC1C,CAAC,CAAC;IACFV,GAAG,CAACtM,MAAM,CAAC1M,SAAS,CAACtJ,KAAK,IAAI;MAC1B,IAAI,CAACgW,MAAM,CAACiN,IAAI,CAAC;QACb3U,aAAa,EAAEtO,KAAK,CAACsO,aAAa;QAClCJ,YAAY,EAAElO,KAAK,CAACkO,YAAY;QAChCvI,SAAS,EAAE,IAAI;QACf0I,IAAI,EAAErO,KAAK,CAACqO,IAAI,CAACmT;MACrB,CAAC,CAAC;IACN,CAAC,CAAC;IACFc,GAAG,CAACne,OAAO,CAACmF,SAAS,CAACtJ,KAAK,IAAI;MAC3B,IAAI,CAACmE,OAAO,CAAC8e,IAAI,CAAC;QACd3U,aAAa,EAAEtO,KAAK,CAACsO,aAAa;QAClCJ,YAAY,EAAElO,KAAK,CAACkO,YAAY;QAChCK,iBAAiB,EAAEvO,KAAK,CAACuO,iBAAiB,CAACiT,IAAI;QAC/C7b,SAAS,EAAE3F,KAAK,CAAC2F,SAAS,CAAC6b,IAAI;QAC/BnT,IAAI,EAAErO,KAAK,CAACqO,IAAI,CAACmT,IAAI;QACrBrT,sBAAsB,EAAEnO,KAAK,CAACmO,sBAAsB;QACpDlH,QAAQ,EAAEjH,KAAK,CAACiH,QAAQ;QACxBwE,SAAS,EAAEzL,KAAK,CAACyL;MACrB,CAAC,CAAC;MACF;MACA;MACA,IAAI,CAACuV,kBAAkB,CAACgC,YAAY,EAAE;IAC1C,CAAC,CAAC;EACN;EACA;EACAvB,eAAe,CAAC3D,MAAM,EAAE;IACpB,MAAM;MAAE9L,QAAQ;MAAEkR,gBAAgB;MAAEnU,eAAe;MAAEoU,sBAAsB;MAAEC;IAAgB,CAAC,GAAGtF,MAAM;IACvG,IAAI,CAACrZ,QAAQ,GAAGye,gBAAgB,IAAI,IAAI,GAAG,KAAK,GAAGA,gBAAgB;IACnE,IAAI,CAACnU,eAAe,GAAGA,eAAe,IAAI,IAAI,GAAG,KAAK,GAAGA,eAAe;IACxE,IAAI,CAAC6G,kBAAkB,GAAGuN,sBAAsB,IAAI,IAAI,GAAG,KAAK,GAAGA,sBAAsB;IACzF,IAAI,CAAClK,WAAW,GAAGmK,eAAe,IAAI,UAAU;IAChD,IAAIpR,QAAQ,EAAE;MACV,IAAI,CAACA,QAAQ,GAAGA,QAAQ;IAC5B;EACJ;EACA;EACA8P,iBAAiB,GAAG;IAChB,IAAI,CAACP,YAAY,CAAChJ,SAAS,CAAC,IAAI,CAACyJ,cAAc,EAAE,CAACtnB,GAAG,CAAC2T,IAAI,IAAIA,IAAI,CAAC6T,QAAQ,CAAC,CAAC;EACjF;AACJ;AACApB,WAAW,CAACzC,IAAI,GAAG,SAASgF,mBAAmB,CAAC9E,CAAC,EAAE;EAAE,OAAO,KAAKA,CAAC,IAAIuC,WAAW,EAAE/lB,MAAM,CAACuoB,iBAAiB,CAACvoB,MAAM,CAACvC,UAAU,CAAC,EAAEuC,MAAM,CAACuoB,iBAAiB,CAAClE,QAAQ,CAAC,EAAErkB,MAAM,CAACuoB,iBAAiB,CAACvoB,MAAM,CAACtC,iBAAiB,CAAC,EAAEsC,MAAM,CAACuoB,iBAAiB,CAACtoB,MAAM,CAACzB,gBAAgB,CAAC,EAAEwB,MAAM,CAACuoB,iBAAiB,CAACroB,MAAM,CAACH,cAAc,EAAE,CAAC,CAAC,EAAEC,MAAM,CAACuoB,iBAAiB,CAAC7D,mBAAmB,EAAE,EAAE,CAAC,EAAE1kB,MAAM,CAACuoB,iBAAiB,CAAC9C,eAAe,EAAE,CAAC,CAAC,CAAC;AAAE,CAAC;AAClaM,WAAW,CAACjB,IAAI,GAAG,aAAc9kB,MAAM,CAAC+kB,iBAAiB,CAAC;EAAEhe,IAAI,EAAEgf,WAAW;EAAEf,SAAS,EAAE,CAAC,CAAC,EAAE,EAAE,aAAa,EAAE,EAAE,CAAC,EAAE,CAAC,eAAe,CAAC,CAAC;EAAEwD,SAAS,EAAE,CAAC,CAAC,EAAE,eAAe,CAAC;EAAEC,QAAQ,EAAE,CAAC;EAAEC,YAAY,EAAE,SAASC,wBAAwB,CAACC,EAAE,EAAEC,GAAG,EAAE;IAAE,IAAID,EAAE,GAAG,CAAC,EAAE;MACrP5oB,MAAM,CAAC8oB,WAAW,CAAC,IAAI,EAAED,GAAG,CAACvC,EAAE,CAAC;MAChCtmB,MAAM,CAAC+oB,WAAW,CAAC,wBAAwB,EAAEF,GAAG,CAACnf,QAAQ,CAAC,CAAC,wBAAwB,EAAEmf,GAAG,CAACrC,YAAY,CAACzb,UAAU,EAAE,CAAC,CAAC,yBAAyB,EAAE8d,GAAG,CAACrC,YAAY,CAACxb,WAAW,EAAE,CAAC;IAClL;EAAE,CAAC;EAAEia,MAAM,EAAE;IAAElH,WAAW,EAAE,CAAC,wBAAwB,EAAE,aAAa,CAAC;IAAEuI,EAAE,EAAE,IAAI;IAAEvL,cAAc,EAAE,CAAC,2BAA2B,EAAE,gBAAgB,CAAC;IAAEC,aAAa,EAAE,CAAC,0BAA0B,EAAE,eAAe,CAAC;IAAEtR,QAAQ,EAAE,CAAC,qBAAqB,EAAE,UAAU,CAAC;IAAEsK,eAAe,EAAE,CAAC,4BAA4B,EAAE,iBAAiB,CAAC;IAAE6G,kBAAkB,EAAE,CAAC,+BAA+B,EAAE,oBAAoB,CAAC;IAAEqD,WAAW,EAAE,CAAC,wBAAwB,EAAE,aAAa,CAAC;IAAEjH,QAAQ,EAAE,CAAC,qBAAqB,EAAE,UAAU,CAAC;IAAEwP,IAAI,EAAE,CAAC,iBAAiB,EAAE,MAAM,CAAC;IAAE3L,cAAc,EAAE,CAAC,2BAA2B,EAAE,gBAAgB;EAAE,CAAC;EAAEkO,OAAO,EAAE;IAAE5f,OAAO,EAAE,oBAAoB;IAAEF,OAAO,EAAE,oBAAoB;IAAEC,MAAM,EAAE,mBAAmB;IAAE8R,MAAM,EAAE;EAAoB,CAAC;EAAEiK,QAAQ,EAAE,CAAC,aAAa,CAAC;EAAEC,QAAQ,EAAE,CAACnlB,MAAM,CAAColB,kBAAkB,CAAC;EAC1xB;EACA;IAAEC,OAAO,EAAEX,mBAAmB;IAAEuE,QAAQ,EAAEnD;EAAG,CAAC,EAC9C;IAAET,OAAO,EAAEQ,aAAa;IAAEP,WAAW,EAAES;EAAY,CAAC,CACvD,CAAC;AAAE,CAAC,CAAC;AACd;AACAA,WAAW,CAACc,UAAU,GAAG,EAAE;AAC3Bd,WAAW,CAAChC,cAAc,GAAG,MAAM,CAC/B;EAAEhd,IAAI,EAAEtJ;AAAW,CAAC,EACpB;EAAEsJ,IAAI,EAAEsd;AAAS,CAAC,EAClB;EAAEtd,IAAI,EAAErJ;AAAkB,CAAC,EAC3B;EAAEqJ,IAAI,EAAEvI;AAAiB,CAAC,EAC1B;EAAEuI,IAAI,EAAEhH,cAAc;EAAEikB,UAAU,EAAE,CAAC;IAAEjd,IAAI,EAAEpJ;EAAS,CAAC;AAAE,CAAC,EAC1D;EAAEoJ,IAAI,EAAE4d,gBAAgB;EAAEX,UAAU,EAAE,CAAC;IAAEjd,IAAI,EAAEpJ;EAAS,CAAC,EAAE;IAAEoJ,IAAI,EAAE3J,MAAM;IAAE6mB,IAAI,EAAE,CAACS,mBAAmB;EAAG,CAAC,EAAE;IAAE3d,IAAI,EAAEnJ;EAAS,CAAC;AAAE,CAAC,EAChI;EAAEmJ,IAAI,EAAEiH,SAAS;EAAEgW,UAAU,EAAE,CAAC;IAAEjd,IAAI,EAAEpJ;EAAS,CAAC,EAAE;IAAEoJ,IAAI,EAAE3J,MAAM;IAAE6mB,IAAI,EAAE,CAACwB,eAAe;EAAG,CAAC;AAAE,CAAC,CACpG;AACDM,WAAW,CAACR,cAAc,GAAG;EACzBxH,WAAW,EAAE,CAAC;IAAEhX,IAAI,EAAExJ,KAAK;IAAE0mB,IAAI,EAAE,CAAC,wBAAwB;EAAG,CAAC,CAAC;EACjEwC,IAAI,EAAE,CAAC;IAAE1f,IAAI,EAAExJ,KAAK;IAAE0mB,IAAI,EAAE,CAAC,iBAAiB;EAAG,CAAC,CAAC;EACnD/F,WAAW,EAAE,CAAC;IAAEnX,IAAI,EAAExJ,KAAK;IAAE0mB,IAAI,EAAE,CAAC,wBAAwB;EAAG,CAAC,CAAC;EACjEqC,EAAE,EAAE,CAAC;IAAEvf,IAAI,EAAExJ;EAAM,CAAC,CAAC;EACrB0Z,QAAQ,EAAE,CAAC;IAAElQ,IAAI,EAAExJ,KAAK;IAAE0mB,IAAI,EAAE,CAAC,qBAAqB;EAAG,CAAC,CAAC;EAC3Dva,QAAQ,EAAE,CAAC;IAAE3C,IAAI,EAAExJ,KAAK;IAAE0mB,IAAI,EAAE,CAAC,qBAAqB;EAAG,CAAC,CAAC;EAC3DjQ,eAAe,EAAE,CAAC;IAAEjN,IAAI,EAAExJ,KAAK;IAAE0mB,IAAI,EAAE,CAAC,4BAA4B;EAAG,CAAC,CAAC;EACzElJ,cAAc,EAAE,CAAC;IAAEhU,IAAI,EAAExJ,KAAK;IAAE0mB,IAAI,EAAE,CAAC,2BAA2B;EAAG,CAAC,CAAC;EACvEjJ,aAAa,EAAE,CAAC;IAAEjU,IAAI,EAAExJ,KAAK;IAAE0mB,IAAI,EAAE,CAAC,0BAA0B;EAAG,CAAC,CAAC;EACrEpJ,kBAAkB,EAAE,CAAC;IAAE9T,IAAI,EAAExJ,KAAK;IAAE0mB,IAAI,EAAE,CAAC,+BAA+B;EAAG,CAAC,CAAC;EAC/EnJ,cAAc,EAAE,CAAC;IAAE/T,IAAI,EAAExJ,KAAK;IAAE0mB,IAAI,EAAE,CAAC,2BAA2B;EAAG,CAAC,CAAC;EACvE7a,OAAO,EAAE,CAAC;IAAErC,IAAI,EAAElJ,MAAM;IAAEomB,IAAI,EAAE,CAAC,oBAAoB;EAAG,CAAC,CAAC;EAC1D/a,OAAO,EAAE,CAAC;IAAEnC,IAAI,EAAElJ,MAAM;IAAEomB,IAAI,EAAE,CAAC,oBAAoB;EAAG,CAAC,CAAC;EAC1D9a,MAAM,EAAE,CAAC;IAAEpC,IAAI,EAAElJ,MAAM;IAAEomB,IAAI,EAAE,CAAC,mBAAmB;EAAG,CAAC,CAAC;EACxDhJ,MAAM,EAAE,CAAC;IAAElU,IAAI,EAAElJ,MAAM;IAAEomB,IAAI,EAAE,CAAC,mBAAmB;EAAG,CAAC;AAC3D,CAAC;AACD,CAAC,YAAY;EAAE,CAAC,OAAOC,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAKlkB,MAAM,CAACmkB,iBAAiB,CAAC4B,WAAW,EAAE,CAAC;IACjGhf,IAAI,EAAEzJ,SAAS;IACf2mB,IAAI,EAAE,CAAC;MACCvd,QAAQ,EAAE,8BAA8B;MACxCwe,QAAQ,EAAE,aAAa;MACvBM,SAAS,EAAE;MACP;MACA;QAAEH,OAAO,EAAEX,mBAAmB;QAAEuE,QAAQ,EAAEnD;MAAG,CAAC,EAC9C;QAAET,OAAO,EAAEQ,aAAa;QAAEP,WAAW,EAAES;MAAY,CAAC,CACvD;MACDmD,IAAI,EAAE;QACF,OAAO,EAAE,eAAe;QACxB,WAAW,EAAE,IAAI;QACjB,gCAAgC,EAAE,UAAU;QAC5C,gCAAgC,EAAE,2BAA2B;QAC7D,iCAAiC,EAAE;MACvC;IACJ,CAAC;EACT,CAAC,CAAC,EAAE,YAAY;IAAE,OAAO,CAAC;MAAEniB,IAAI,EAAE/G,MAAM,CAACvC;IAAW,CAAC,EAAE;MAAEsJ,IAAI,EAAEsd;IAAS,CAAC,EAAE;MAAEtd,IAAI,EAAE/G,MAAM,CAACtC;IAAkB,CAAC,EAAE;MAAEqJ,IAAI,EAAE9G,MAAM,CAACzB;IAAiB,CAAC,EAAE;MAAEuI,IAAI,EAAE7G,MAAM,CAACH,cAAc;MAAEikB,UAAU,EAAE,CAAC;QAClLjd,IAAI,EAAEpJ;MACV,CAAC;IAAE,CAAC,EAAE;MAAEoJ,IAAI,EAAE4d,gBAAgB;MAAEX,UAAU,EAAE,CAAC;QACzCjd,IAAI,EAAEpJ;MACV,CAAC,EAAE;QACCoJ,IAAI,EAAE3J,MAAM;QACZ6mB,IAAI,EAAE,CAACS,mBAAmB;MAC9B,CAAC,EAAE;QACC3d,IAAI,EAAEnJ;MACV,CAAC;IAAE,CAAC,EAAE;MAAEmJ,IAAI,EAAEiH,SAAS;MAAEgW,UAAU,EAAE,CAAC;QAClCjd,IAAI,EAAEpJ;MACV,CAAC,EAAE;QACCoJ,IAAI,EAAE3J,MAAM;QACZ6mB,IAAI,EAAE,CAACwB,eAAe;MAC1B,CAAC;IAAE,CAAC,CAAC;EAAE,CAAC,EAAE;IAAE1H,WAAW,EAAE,CAAC;MAC1BhX,IAAI,EAAExJ,KAAK;MACX0mB,IAAI,EAAE,CAAC,wBAAwB;IACnC,CAAC,CAAC;IAAEqC,EAAE,EAAE,CAAC;MACLvf,IAAI,EAAExJ;IACV,CAAC,CAAC;IAAEwd,cAAc,EAAE,CAAC;MACjBhU,IAAI,EAAExJ,KAAK;MACX0mB,IAAI,EAAE,CAAC,2BAA2B;IACtC,CAAC,CAAC;IAAEjJ,aAAa,EAAE,CAAC;MAChBjU,IAAI,EAAExJ,KAAK;MACX0mB,IAAI,EAAE,CAAC,0BAA0B;IACrC,CAAC,CAAC;IAAE7a,OAAO,EAAE,CAAC;MACVrC,IAAI,EAAElJ,MAAM;MACZomB,IAAI,EAAE,CAAC,oBAAoB;IAC/B,CAAC,CAAC;IAAE/a,OAAO,EAAE,CAAC;MACVnC,IAAI,EAAElJ,MAAM;MACZomB,IAAI,EAAE,CAAC,oBAAoB;IAC/B,CAAC,CAAC;IAAE9a,MAAM,EAAE,CAAC;MACTpC,IAAI,EAAElJ,MAAM;MACZomB,IAAI,EAAE,CAAC,mBAAmB;IAC9B,CAAC,CAAC;IAAEhJ,MAAM,EAAE,CAAC;MACTlU,IAAI,EAAElJ,MAAM;MACZomB,IAAI,EAAE,CAAC,mBAAmB;IAC9B,CAAC,CAAC;IAAEva,QAAQ,EAAE,CAAC;MACX3C,IAAI,EAAExJ,KAAK;MACX0mB,IAAI,EAAE,CAAC,qBAAqB;IAChC,CAAC,CAAC;IAAEjQ,eAAe,EAAE,CAAC;MAClBjN,IAAI,EAAExJ,KAAK;MACX0mB,IAAI,EAAE,CAAC,4BAA4B;IACvC,CAAC,CAAC;IAAEpJ,kBAAkB,EAAE,CAAC;MACrB9T,IAAI,EAAExJ,KAAK;MACX0mB,IAAI,EAAE,CAAC,+BAA+B;IAC1C,CAAC,CAAC;IAAE/F,WAAW,EAAE,CAAC;MACdnX,IAAI,EAAExJ,KAAK;MACX0mB,IAAI,EAAE,CAAC,wBAAwB;IACnC,CAAC,CAAC;IAAEhN,QAAQ,EAAE,CAAC;MACXlQ,IAAI,EAAExJ,KAAK;MACX0mB,IAAI,EAAE,CAAC,qBAAqB;IAChC,CAAC,CAAC;IAAEwC,IAAI,EAAE,CAAC;MACP1f,IAAI,EAAExJ,KAAK;MACX0mB,IAAI,EAAE,CAAC,iBAAiB;IAC5B,CAAC,CAAC;IAAEnJ,cAAc,EAAE,CAAC;MACjB/T,IAAI,EAAExJ,KAAK;MACX0mB,IAAI,EAAE,CAAC,2BAA2B;IACtC,CAAC;EAAE,CAAC,CAAC;AAAE,CAAC,GAAG;;AAEnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMkF,eAAe,GAAG,IAAI9rB,cAAc,CAAC,eAAe,CAAC;AAC3D;AACA,MAAM+rB,aAAa,CAAC;EAChBllB,WAAW,CAACpD,OAAO,EAAEuoB,UAAU,EAAE;IAC7B,IAAI,CAACvoB,OAAO,GAAGA,OAAO;IACtB;IACA,IAAI,CAACwoB,aAAa,GAAG,IAAInqB,OAAO,EAAE;IAClC,IAAI,CAAC0J,SAAS,GAAG,KAAK;IACtB,IAAI,OAAOqb,SAAS,KAAK,WAAW,IAAIA,SAAS,EAAE;MAC/CwB,iBAAiB,CAAC5kB,OAAO,CAACsgB,aAAa,EAAE,eAAe,CAAC;IAC7D;IACA,IAAI,CAACmI,WAAW,GAAGF,UAAU;EACjC;EACA;EACA,IAAI3f,QAAQ,GAAG;IAAE,OAAO,IAAI,CAACb,SAAS;EAAE;EACxC,IAAIa,QAAQ,CAACjJ,KAAK,EAAE;IAChB,IAAI,CAACoI,SAAS,GAAGhK,qBAAqB,CAAC4B,KAAK,CAAC;IAC7C,IAAI,CAAC6oB,aAAa,CAAC/f,IAAI,CAAC,IAAI,CAAC;EACjC;EACA6Z,WAAW,GAAG;IACV,IAAI,CAACkG,aAAa,CAACpa,QAAQ,EAAE;EACjC;AACJ;AACAka,aAAa,CAAC9F,IAAI,GAAG,SAASkG,qBAAqB,CAAChG,CAAC,EAAE;EAAE,OAAO,KAAKA,CAAC,IAAI4F,aAAa,EAAEppB,MAAM,CAACuoB,iBAAiB,CAACvoB,MAAM,CAACvC,UAAU,CAAC,EAAEuC,MAAM,CAACuoB,iBAAiB,CAAC9D,eAAe,EAAE,EAAE,CAAC,CAAC;AAAE,CAAC;AACvL2E,aAAa,CAACtE,IAAI,GAAG,aAAc9kB,MAAM,CAAC+kB,iBAAiB,CAAC;EAAEhe,IAAI,EAAEqiB,aAAa;EAAEpE,SAAS,EAAE,CAAC,CAAC,EAAE,EAAE,eAAe,EAAE,EAAE,CAAC,CAAC;EAAEwD,SAAS,EAAE,CAAC,CAAC,EAAE,iBAAiB,CAAC;EAAEvD,MAAM,EAAE;IAAEvb,QAAQ,EAAE,CAAC,uBAAuB,EAAE,UAAU;EAAE,CAAC;EAAEyb,QAAQ,EAAE,CAACnlB,MAAM,CAAColB,kBAAkB,CAAC,CAAC;IAAEC,OAAO,EAAE8D,eAAe;IAAE7D,WAAW,EAAE8D;EAAc,CAAC,CAAC,CAAC;AAAE,CAAC,CAAC;AAC/TA,aAAa,CAACrF,cAAc,GAAG,MAAM,CACjC;EAAEhd,IAAI,EAAEtJ;AAAW,CAAC,EACpB;EAAEsJ,IAAI,EAAEiH,SAAS;EAAEgW,UAAU,EAAE,CAAC;IAAEjd,IAAI,EAAE3J,MAAM;IAAE6mB,IAAI,EAAE,CAACQ,eAAe;EAAG,CAAC,EAAE;IAAE1d,IAAI,EAAEpJ;EAAS,CAAC,EAAE;IAAEoJ,IAAI,EAAEnJ;EAAS,CAAC;AAAE,CAAC,CACxH;AACDwrB,aAAa,CAAC7D,cAAc,GAAG;EAC3B7b,QAAQ,EAAE,CAAC;IAAE3C,IAAI,EAAExJ,KAAK;IAAE0mB,IAAI,EAAE,CAAC,uBAAuB;EAAG,CAAC;AAChE,CAAC;AACD,CAAC,YAAY;EAAE,CAAC,OAAOC,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAKlkB,MAAM,CAACmkB,iBAAiB,CAACiF,aAAa,EAAE,CAAC;IACnGriB,IAAI,EAAEzJ,SAAS;IACf2mB,IAAI,EAAE,CAAC;MACCvd,QAAQ,EAAE,iBAAiB;MAC3BwiB,IAAI,EAAE;QACF,OAAO,EAAE;MACb,CAAC;MACD1D,SAAS,EAAE,CAAC;QAAEH,OAAO,EAAE8D,eAAe;QAAE7D,WAAW,EAAE8D;MAAc,CAAC;IACxE,CAAC;EACT,CAAC,CAAC,EAAE,YAAY;IAAE,OAAO,CAAC;MAAEriB,IAAI,EAAE/G,MAAM,CAACvC;IAAW,CAAC,EAAE;MAAEsJ,IAAI,EAAEiH,SAAS;MAAEgW,UAAU,EAAE,CAAC;QAC3Ejd,IAAI,EAAE3J,MAAM;QACZ6mB,IAAI,EAAE,CAACQ,eAAe;MAC1B,CAAC,EAAE;QACC1d,IAAI,EAAEpJ;MACV,CAAC,EAAE;QACCoJ,IAAI,EAAEnJ;MACV,CAAC;IAAE,CAAC,CAAC;EAAE,CAAC,EAAE;IAAE8L,QAAQ,EAAE,CAAC;MACvB3C,IAAI,EAAExJ,KAAK;MACX0mB,IAAI,EAAE,CAAC,uBAAuB;IAClC,CAAC;EAAE,CAAC,CAAC;AAAE,CAAC,GAAG;;AAEnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMwF,oBAAoB,GAAG,IAAIpsB,cAAc,CAAC,oBAAoB,CAAC;AACrE;AACA;AACA;AACA;AACA,MAAMqsB,kBAAkB,CAAC;EACrBxlB,WAAW,CAACylB,WAAW,EAAE;IACrB,IAAI,CAACA,WAAW,GAAGA,WAAW;EAClC;AACJ;AACAD,kBAAkB,CAACpG,IAAI,GAAG,SAASsG,0BAA0B,CAACpG,CAAC,EAAE;EAAE,OAAO,KAAKA,CAAC,IAAIkG,kBAAkB,EAAE1pB,MAAM,CAACuoB,iBAAiB,CAACvoB,MAAM,CAAClC,WAAW,CAAC,CAAC;AAAE,CAAC;AACxJ4rB,kBAAkB,CAAC5E,IAAI,GAAG,aAAc9kB,MAAM,CAAC+kB,iBAAiB,CAAC;EAAEhe,IAAI,EAAE2iB,kBAAkB;EAAE1E,SAAS,EAAE,CAAC,CAAC,aAAa,EAAE,oBAAoB,EAAE,EAAE,CAAC,CAAC;EAAEC,MAAM,EAAE;IAAEwB,IAAI,EAAE;EAAO,CAAC;EAAEtB,QAAQ,EAAE,CAACnlB,MAAM,CAAColB,kBAAkB,CAAC,CAAC;IAAEC,OAAO,EAAEoE,oBAAoB;IAAEnE,WAAW,EAAEoE;EAAmB,CAAC,CAAC,CAAC;AAAE,CAAC,CAAC;AAC7RA,kBAAkB,CAAC3F,cAAc,GAAG,MAAM,CACtC;EAAEhd,IAAI,EAAEjJ;AAAY,CAAC,CACxB;AACD4rB,kBAAkB,CAACnE,cAAc,GAAG;EAChCkB,IAAI,EAAE,CAAC;IAAE1f,IAAI,EAAExJ;EAAM,CAAC;AAC1B,CAAC;AACD,CAAC,YAAY;EAAE,CAAC,OAAO2mB,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAKlkB,MAAM,CAACmkB,iBAAiB,CAACuF,kBAAkB,EAAE,CAAC;IACxG3iB,IAAI,EAAEzJ,SAAS;IACf2mB,IAAI,EAAE,CAAC;MACCvd,QAAQ,EAAE,iCAAiC;MAC3C8e,SAAS,EAAE,CAAC;QAAEH,OAAO,EAAEoE,oBAAoB;QAAEnE,WAAW,EAAEoE;MAAmB,CAAC;IAClF,CAAC;EACT,CAAC,CAAC,EAAE,YAAY;IAAE,OAAO,CAAC;MAAE3iB,IAAI,EAAE/G,MAAM,CAAClC;IAAY,CAAC,CAAC;EAAE,CAAC,EAAE;IAAE2oB,IAAI,EAAE,CAAC;MAC7D1f,IAAI,EAAExJ;IACV,CAAC;EAAE,CAAC,CAAC;AAAE,CAAC,GAAG;;AAEnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMssB,gBAAgB,GAAG,IAAIxsB,cAAc,CAAC,gBAAgB,CAAC;AAC7D;AACA;AACA;AACA;AACA,MAAMysB,cAAc,CAAC;EACjB5lB,WAAW,CAACylB,WAAW,EAAE;IACrB,IAAI,CAACA,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACI,UAAU,GAAG,KAAK;EAC3B;EACA;EACA,IAAIhX,SAAS,GAAG;IAAE,OAAO,IAAI,CAACgX,UAAU;EAAE;EAC1C,IAAIhX,SAAS,CAACtS,KAAK,EAAE;IAAE,IAAI,CAACspB,UAAU,GAAGlrB,qBAAqB,CAAC4B,KAAK,CAAC;EAAE;AAC3E;AACAqpB,cAAc,CAACxG,IAAI,GAAG,SAAS0G,sBAAsB,CAACxG,CAAC,EAAE;EAAE,OAAO,KAAKA,CAAC,IAAIsG,cAAc,EAAE9pB,MAAM,CAACuoB,iBAAiB,CAACvoB,MAAM,CAAClC,WAAW,CAAC,CAAC;AAAE,CAAC;AAC5IgsB,cAAc,CAAChF,IAAI,GAAG,aAAc9kB,MAAM,CAAC+kB,iBAAiB,CAAC;EAAEhe,IAAI,EAAE+iB,cAAc;EAAE9E,SAAS,EAAE,CAAC,CAAC,aAAa,EAAE,gBAAgB,EAAE,EAAE,CAAC,CAAC;EAAEC,MAAM,EAAE;IAAElS,SAAS,EAAE,WAAW;IAAE0T,IAAI,EAAE;EAAO,CAAC;EAAEtB,QAAQ,EAAE,CAACnlB,MAAM,CAAColB,kBAAkB,CAAC,CAAC;IAAEC,OAAO,EAAEwE,gBAAgB;IAAEvE,WAAW,EAAEwE;EAAe,CAAC,CAAC,CAAC;AAAE,CAAC,CAAC;AACjSA,cAAc,CAAC/F,cAAc,GAAG,MAAM,CAClC;EAAEhd,IAAI,EAAEjJ;AAAY,CAAC,CACxB;AACDgsB,cAAc,CAACvE,cAAc,GAAG;EAC5BkB,IAAI,EAAE,CAAC;IAAE1f,IAAI,EAAExJ;EAAM,CAAC,CAAC;EACvBwV,SAAS,EAAE,CAAC;IAAEhM,IAAI,EAAExJ;EAAM,CAAC;AAC/B,CAAC;AACD,CAAC,YAAY;EAAE,CAAC,OAAO2mB,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAKlkB,MAAM,CAACmkB,iBAAiB,CAAC2F,cAAc,EAAE,CAAC;IACpG/iB,IAAI,EAAEzJ,SAAS;IACf2mB,IAAI,EAAE,CAAC;MACCvd,QAAQ,EAAE,6BAA6B;MACvC8e,SAAS,EAAE,CAAC;QAAEH,OAAO,EAAEwE,gBAAgB;QAAEvE,WAAW,EAAEwE;MAAe,CAAC;IAC1E,CAAC;EACT,CAAC,CAAC,EAAE,YAAY;IAAE,OAAO,CAAC;MAAE/iB,IAAI,EAAE/G,MAAM,CAAClC;IAAY,CAAC,CAAC;EAAE,CAAC,EAAE;IAAEiV,SAAS,EAAE,CAAC;MAClEhM,IAAI,EAAExJ;IACV,CAAC,CAAC;IAAEkpB,IAAI,EAAE,CAAC;MACP1f,IAAI,EAAExJ;IACV,CAAC;EAAE,CAAC,CAAC;AAAE,CAAC,GAAG;;AAEnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM0sB,eAAe,GAAG,UAAU;AAClC;AACA,MAAMC,OAAO,CAAC;EACVhmB,WAAW,EACX;EACApD,OAAO,EACP;EACA+P,aAAa;EACb;AACJ;AACA;AACA;EACI1M,SAAS,EAAEyD,OAAO,EAAEuiB,iBAAiB,EAAEpH,MAAM,EAAEoD,IAAI,EAAEH,QAAQ,EAAEC,kBAAkB,EAAEmE,WAAW,EAAEb,WAAW,EAAE;IACzG,IAAI,CAACzoB,OAAO,GAAGA,OAAO;IACtB,IAAI,CAAC+P,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACjJ,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACuiB,iBAAiB,GAAGA,iBAAiB;IAC1C,IAAI,CAAChE,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACF,kBAAkB,GAAGA,kBAAkB;IAC5C,IAAI,CAACmE,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACb,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAAClD,UAAU,GAAG,IAAIlnB,OAAO,EAAE;IAC/B;IACA,IAAI,CAAC4J,OAAO,GAAG,IAAIvL,YAAY,EAAE;IACjC;IACA,IAAI,CAACwL,QAAQ,GAAG,IAAIxL,YAAY,EAAE;IAClC;IACA,IAAI,CAACyL,KAAK,GAAG,IAAIzL,YAAY,EAAE;IAC/B;IACA,IAAI,CAAC0L,OAAO,GAAG,IAAI1L,YAAY,EAAE;IACjC;IACA,IAAI,CAAC2L,MAAM,GAAG,IAAI3L,YAAY,EAAE;IAChC;IACA,IAAI,CAAC4L,OAAO,GAAG,IAAI5L,YAAY,EAAE;IACjC;AACR;AACA;AACA;IACQ,IAAI,CAAC6L,KAAK,GAAG,IAAI9J,UAAU,CAAE2jB,QAAQ,IAAK;MACtC,MAAMmH,YAAY,GAAG,IAAI,CAAClD,QAAQ,CAAC9d,KAAK,CAAC2S,IAAI,CAACrc,GAAG,CAAC2qB,UAAU,KAAK;QAC7DjqB,MAAM,EAAE,IAAI;QACZyJ,eAAe,EAAEwgB,UAAU,CAACxgB,eAAe;QAC3C7E,KAAK,EAAEqlB,UAAU,CAACrlB,KAAK;QACvBmH,KAAK,EAAEke,UAAU,CAACle,KAAK;QACvBF,QAAQ,EAAEoe,UAAU,CAACpe;MACzB,CAAC,CAAC,CAAC,CAAC,CAACqC,SAAS,CAAC2U,QAAQ,CAAC;MACxB,OAAO,MAAM;QACTmH,YAAY,CAAChc,WAAW,EAAE;MAC9B,CAAC;IACL,CAAC,CAAC;IACF,IAAI,CAAC8Y,QAAQ,GAAGnB,QAAQ,CAAC1B,UAAU,CAACxjB,OAAO,EAAE;MACzCwJ,kBAAkB,EAAEyY,MAAM,IAAIA,MAAM,CAACzY,kBAAkB,IAAI,IAAI,GAC3DyY,MAAM,CAACzY,kBAAkB,GAAG,CAAC;MACjC0N,+BAA+B,EAAE+K,MAAM,IAAIA,MAAM,CAAC/K,+BAA+B,IAAI,IAAI,GACrF+K,MAAM,CAAC/K,+BAA+B,GAAG,CAAC;MAC9CjD,MAAM,EAAEgO,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,MAAM,CAAChO;IACnE,CAAC,CAAC;IACF,IAAI,CAACoS,QAAQ,CAACV,IAAI,GAAG,IAAI;IACzB;IACA;IACA;IACAyD,OAAO,CAAC9H,cAAc,CAAChF,IAAI,CAAC,IAAI,CAAC;IACjC,IAAI2F,MAAM,EAAE;MACR,IAAI,CAAC2D,eAAe,CAAC3D,MAAM,CAAC;IAChC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAIlS,aAAa,EAAE;MACf,IAAI,CAACsW,QAAQ,CAAC1X,kBAAkB,CAACoB,aAAa,CAAC2V,YAAY,CAAC;MAC5D3V,aAAa,CAACiW,OAAO,CAAC,IAAI,CAAC;IAC/B;IACA,IAAI,CAACyD,WAAW,CAAC,IAAI,CAACpD,QAAQ,CAAC;IAC/B,IAAI,CAACP,aAAa,CAAC,IAAI,CAACO,QAAQ,CAAC;EACrC;EACA;EACA,IAAIzd,QAAQ,GAAG;IACX,OAAO,IAAI,CAACb,SAAS,IAAK,IAAI,CAACgI,aAAa,IAAI,IAAI,CAACA,aAAa,CAACnH,QAAS;EAChF;EACA,IAAIA,QAAQ,CAACjJ,KAAK,EAAE;IAChB,IAAI,CAACoI,SAAS,GAAGhK,qBAAqB,CAAC4B,KAAK,CAAC;IAC7C,IAAI,CAAC0mB,QAAQ,CAACzd,QAAQ,GAAG,IAAI,CAACb,SAAS;EAC3C;EACA;AACJ;AACA;AACA;EACIiE,qBAAqB,GAAG;IACpB,OAAO,IAAI,CAACqa,QAAQ,CAACra,qBAAqB,EAAE;EAChD;EACA;EACAE,cAAc,GAAG;IACb,OAAO,IAAI,CAACma,QAAQ,CAACna,cAAc,EAAE;EACzC;EACA;EACAmC,KAAK,GAAG;IACJ,IAAI,CAACgY,QAAQ,CAAChY,KAAK,EAAE;EACzB;EACA;AACJ;AACA;EACIO,mBAAmB,GAAG;IAClB,OAAO,IAAI,CAACyX,QAAQ,CAACzX,mBAAmB,EAAE;EAC9C;EACA8a,eAAe,GAAG;IACd;IACA;IACA,IAAI,CAAC5iB,OAAO,CAACiG,iBAAiB,CAAC,MAAM;MACjC;MACA;MACA;MACA;MACA,IAAI,CAACjG,OAAO,CAAC6iB,QAAQ,CAChBzO,IAAI,CAACpc,IAAI,CAAC,CAAC,CAAC,EAAEH,SAAS,CAAC,IAAI,CAAC4mB,UAAU,CAAC,CAAC,CACzC9X,SAAS,CAAC,MAAM;QACjB,IAAI,CAACmc,kBAAkB,EAAE;QACzB,IAAI,CAACC,qBAAqB,EAAE;QAC5B,IAAI,IAAI,CAACC,gBAAgB,EAAE;UACvB,IAAI,CAACzD,QAAQ,CAACxX,mBAAmB,CAAC,IAAI,CAACib,gBAAgB,CAAC;QAC5D;MACJ,CAAC,CAAC;IACN,CAAC,CAAC;EACN;EACAC,WAAW,CAACC,OAAO,EAAE;IACjB,MAAMC,kBAAkB,GAAGD,OAAO,CAAC,qBAAqB,CAAC;IACzD,MAAME,cAAc,GAAGF,OAAO,CAAC,kBAAkB,CAAC;IAClD;IACA;IACA,IAAIC,kBAAkB,IAAI,CAACA,kBAAkB,CAACE,WAAW,EAAE;MACvD,IAAI,CAACP,kBAAkB,EAAE;IAC7B;IACA;IACA,IAAIM,cAAc,IAAI,CAACA,cAAc,CAACC,WAAW,IAAI,IAAI,CAACL,gBAAgB,EAAE;MACxE,IAAI,CAACzD,QAAQ,CAACxX,mBAAmB,CAAC,IAAI,CAACib,gBAAgB,CAAC;IAC5D;EACJ;EACAxH,WAAW,GAAG;IACV,IAAI,IAAI,CAACvS,aAAa,EAAE;MACpB,IAAI,CAACA,aAAa,CAACmW,UAAU,CAAC,IAAI,CAAC;IACvC;IACA,MAAMtK,KAAK,GAAGwN,OAAO,CAAC9H,cAAc,CAACvgB,OAAO,CAAC,IAAI,CAAC;IAClD,IAAI6a,KAAK,GAAG,CAAC,CAAC,EAAE;MACZwN,OAAO,CAAC9H,cAAc,CAAC5H,MAAM,CAACkC,KAAK,EAAE,CAAC,CAAC;IAC3C;IACA;IACA,IAAI,CAAC9U,OAAO,CAACiG,iBAAiB,CAAC,MAAM;MACjC,IAAI,CAACwY,UAAU,CAAC9c,IAAI,EAAE;MACtB,IAAI,CAAC8c,UAAU,CAACnX,QAAQ,EAAE;MAC1B,IAAI,CAACiY,QAAQ,CAACxY,OAAO,EAAE;IAC3B,CAAC,CAAC;EACN;EACA;EACA+b,kBAAkB,GAAG;IACjB,MAAM5pB,OAAO,GAAG,IAAI,CAACA,OAAO,CAACsgB,aAAa;IAC1C,MAAMzT,WAAW,GAAG,IAAI,CAACud,mBAAmB,GACxCC,0BAA0B,CAACrqB,OAAO,EAAE,IAAI,CAACoqB,mBAAmB,CAAC,GAAGpqB,OAAO;IAC3E,IAAI6M,WAAW,KAAK,OAAOuW,SAAS,KAAK,WAAW,IAAIA,SAAS,CAAC,EAAE;MAChEwB,iBAAiB,CAAC/X,WAAW,EAAE,SAAS,CAAC;IAC7C;IACA,IAAI,CAACwZ,QAAQ,CAAC5a,eAAe,CAACoB,WAAW,IAAI7M,OAAO,CAAC;EACzD;EACA;EACAsqB,mBAAmB,GAAG;IAClB,MAAMC,QAAQ,GAAG,IAAI,CAACjd,eAAe;IACrC,IAAI,CAACid,QAAQ,EAAE;MACX,OAAO,IAAI;IACf;IACA,IAAI,OAAOA,QAAQ,KAAK,QAAQ,EAAE;MAC9B,OAAOF,0BAA0B,CAAC,IAAI,CAACrqB,OAAO,CAACsgB,aAAa,EAAEiK,QAAQ,CAAC;IAC3E;IACA,MAAMvqB,OAAO,GAAGhC,aAAa,CAACusB,QAAQ,CAAC;IACvC,IAAI,CAAC,OAAOnH,SAAS,KAAK,WAAW,IAAIA,SAAS,KAC9C,CAACpjB,OAAO,CAAC+E,QAAQ,CAAC,IAAI,CAAC/E,OAAO,CAACsgB,aAAa,CAAC,EAAE;MAC/C,MAAMuE,KAAK,CAAC,0EAA0E,CAAC;IAC3F;IACA,OAAO7kB,OAAO;EAClB;EACA;EACAypB,WAAW,CAAChD,GAAG,EAAE;IACbA,GAAG,CAACze,aAAa,CAACyF,SAAS,CAAC,MAAM;MAC9B,IAAI,CAACgZ,GAAG,CAACxc,UAAU,EAAE,EAAE;QACnB,MAAMugB,GAAG,GAAG,IAAI,CAACnF,IAAI;QACrB,MAAMvd,cAAc,GAAG,IAAI,CAACA,cAAc;QAC1C,MAAMmI,WAAW,GAAG,IAAI,CAACrD,oBAAoB,GAAG;UAC5CH,QAAQ,EAAE,IAAI,CAACG,oBAAoB,CAACic,WAAW;UAC/C3iB,OAAO,EAAE,IAAI,CAAC0G,oBAAoB,CAAC+Y,IAAI;UACvChS,aAAa,EAAE,IAAI,CAAC0V;QACxB,CAAC,GAAG,IAAI;QACR,MAAM7V,OAAO,GAAG,IAAI,CAAC9G,gBAAgB,GAAG;UACpCD,QAAQ,EAAE,IAAI,CAACC,gBAAgB,CAACmc,WAAW;UAC3C3iB,OAAO,EAAE,IAAI,CAACwG,gBAAgB,CAACiZ,IAAI;UACnC1T,SAAS,EAAE,IAAI,CAACvF,gBAAgB,CAACuF,SAAS;UAC1C0B,aAAa,EAAE,IAAI,CAAC0V;QACxB,CAAC,GAAG,IAAI;QACR5C,GAAG,CAAC7d,QAAQ,GAAG,IAAI,CAACA,QAAQ;QAC5B6d,GAAG,CAACtQ,QAAQ,GAAG,IAAI,CAACA,QAAQ;QAC5BsQ,GAAG,CAAC3e,cAAc,GAAI,OAAOA,cAAc,KAAK,QAAQ,IAAIA,cAAc,GACtEA,cAAc,GAAG5J,oBAAoB,CAAC4J,cAAc,CAAC;QACzD2e,GAAG,CAACrQ,iBAAiB,GAAG,IAAI,CAACA,iBAAiB;QAC9CqQ,GAAG,CAAClT,YAAY,GAAG,IAAI,CAACA,YAAY;QACpCkT,GAAG,CACEpZ,mBAAmB,CAAC,IAAI,CAACid,mBAAmB,EAAE,CAAC,CAC/C3d,uBAAuB,CAACsD,WAAW,CAAC,CACpCzD,mBAAmB,CAACgH,OAAO,CAAC,CAC5B1E,oBAAoB,CAAC,IAAI,CAACiJ,gBAAgB,IAAI,QAAQ,CAAC;QAC5D,IAAIyS,GAAG,EAAE;UACL/D,GAAG,CAAChY,aAAa,CAAC+b,GAAG,CAAC7qB,KAAK,CAAC;QAChC;MACJ;IACJ,CAAC,CAAC;IACF;IACA8mB,GAAG,CAACze,aAAa,CAACkT,IAAI,CAACpc,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC2O,SAAS,CAAC,MAAM;MAC5C,IAAIpH,EAAE,EAAEokB,EAAE;MACV;MACA,IAAI,IAAI,CAAChC,WAAW,EAAE;QAClBhC,GAAG,CAAC/a,UAAU,CAAC,IAAI,CAAC+c,WAAW,CAACpC,QAAQ,CAAC;QACzC;MACJ;MACA;MACA;MACA,IAAI1Y,MAAM,GAAG,IAAI,CAAC3N,OAAO,CAACsgB,aAAa,CAACpE,aAAa;MACrD,OAAOvO,MAAM,EAAE;QACX;QACA,IAAI,CAACtH,EAAE,GAAGsH,MAAM,CAACuG,SAAS,MAAM,IAAI,IAAI7N,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACtB,QAAQ,CAACokB,eAAe,CAAC,EAAE;UAC3F1C,GAAG,CAAC/a,UAAU,CAAC,CAAC,CAAC+e,EAAE,GAAGrB,OAAO,CAAC9H,cAAc,CAAC/f,IAAI,CAACgZ,IAAI,IAAI;YACtD,OAAOA,IAAI,CAACva,OAAO,CAACsgB,aAAa,KAAK3S,MAAM;UAChD,CAAC,CAAC,MAAM,IAAI,IAAI8c,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACpE,QAAQ,KAAK,IAAI,CAAC;UAC9D;QACJ;QACA1Y,MAAM,GAAGA,MAAM,CAACuO,aAAa;MACjC;IACJ,CAAC,CAAC;EACN;EACA;EACA4J,aAAa,CAACW,GAAG,EAAE;IACfA,GAAG,CAACxe,OAAO,CAACwF,SAAS,CAAC,MAAM;MACxB,IAAI,CAACxF,OAAO,CAACmf,IAAI,CAAC;QAAE7nB,MAAM,EAAE;MAAK,CAAC,CAAC;MACnC;MACA;MACA,IAAI,CAAC4lB,kBAAkB,CAACgC,YAAY,EAAE;IAC1C,CAAC,CAAC;IACFV,GAAG,CAACve,QAAQ,CAACuF,SAAS,CAAC,MAAM;MACzB,IAAI,CAACvF,QAAQ,CAACkf,IAAI,CAAC;QAAE7nB,MAAM,EAAE;MAAK,CAAC,CAAC;IACxC,CAAC,CAAC;IACFknB,GAAG,CAACte,KAAK,CAACsF,SAAS,CAACtJ,KAAK,IAAI;MACzB,IAAI,CAACgE,KAAK,CAACif,IAAI,CAAC;QACZ7nB,MAAM,EAAE,IAAI;QACZ6L,QAAQ,EAAEjH,KAAK,CAACiH,QAAQ;QACxBwE,SAAS,EAAEzL,KAAK,CAACyL;MACrB,CAAC,CAAC;MACF;MACA;MACA,IAAI,CAACuV,kBAAkB,CAACgC,YAAY,EAAE;IAC1C,CAAC,CAAC;IACFV,GAAG,CAACre,OAAO,CAACqF,SAAS,CAACtJ,KAAK,IAAI;MAC3B,IAAI,CAACiE,OAAO,CAACgf,IAAI,CAAC;QACdtd,SAAS,EAAE3F,KAAK,CAAC2F,SAAS,CAAC6b,IAAI;QAC/BnT,IAAI,EAAE,IAAI;QACVH,YAAY,EAAElO,KAAK,CAACkO;MACxB,CAAC,CAAC;IACN,CAAC,CAAC;IACFoU,GAAG,CAACpe,MAAM,CAACoF,SAAS,CAACtJ,KAAK,IAAI;MAC1B,IAAI,CAACkE,MAAM,CAAC+e,IAAI,CAAC;QACbtd,SAAS,EAAE3F,KAAK,CAAC2F,SAAS,CAAC6b,IAAI;QAC/BnT,IAAI,EAAE;MACV,CAAC,CAAC;IACN,CAAC,CAAC;IACFiU,GAAG,CAACne,OAAO,CAACmF,SAAS,CAACtJ,KAAK,IAAI;MAC3B,IAAI,CAACmE,OAAO,CAAC8e,IAAI,CAAC;QACd3U,aAAa,EAAEtO,KAAK,CAACsO,aAAa;QAClCJ,YAAY,EAAElO,KAAK,CAACkO,YAAY;QAChCK,iBAAiB,EAAEvO,KAAK,CAACuO,iBAAiB,CAACiT,IAAI;QAC/C7b,SAAS,EAAE3F,KAAK,CAAC2F,SAAS,CAAC6b,IAAI;QAC/BrT,sBAAsB,EAAEnO,KAAK,CAACmO,sBAAsB;QACpDE,IAAI,EAAE,IAAI;QACVpH,QAAQ,EAAEjH,KAAK,CAACiH,QAAQ;QACxBwE,SAAS,EAAEzL,KAAK,CAACyL;MACrB,CAAC,CAAC;IACN,CAAC,CAAC;EACN;EACA;EACAgW,eAAe,CAAC3D,MAAM,EAAE;IACpB,MAAM;MAAE9L,QAAQ;MAAErO,cAAc;MAAEsO,iBAAiB;MAAE7C,YAAY;MAAEjG,eAAe;MAAE+Z,gBAAgB;MAAE+C,mBAAmB;MAAErS;IAAiB,CAAC,GAAGkK,MAAM;IACtJ,IAAI,CAACrZ,QAAQ,GAAGye,gBAAgB,IAAI,IAAI,GAAG,KAAK,GAAGA,gBAAgB;IACnE,IAAI,CAACvf,cAAc,GAAGA,cAAc,IAAI,CAAC;IACzC,IAAIqO,QAAQ,EAAE;MACV,IAAI,CAACA,QAAQ,GAAGA,QAAQ;IAC5B;IACA,IAAIC,iBAAiB,EAAE;MACnB,IAAI,CAACA,iBAAiB,GAAGA,iBAAiB;IAC9C;IACA,IAAI7C,YAAY,EAAE;MACd,IAAI,CAACA,YAAY,GAAGA,YAAY;IACpC;IACA,IAAIjG,eAAe,EAAE;MACjB,IAAI,CAACA,eAAe,GAAGA,eAAe;IAC1C;IACA,IAAI8c,mBAAmB,EAAE;MACrB,IAAI,CAACA,mBAAmB,GAAGA,mBAAmB;IAClD;IACA,IAAIrS,gBAAgB,EAAE;MAClB,IAAI,CAACA,gBAAgB,GAAGA,gBAAgB;IAC5C;EACJ;EACA;EACA8R,qBAAqB,GAAG;IACpB;IACA,IAAI,CAACliB,QAAQ,CAACqiB,OAAO,CAAC9O,IAAI,CAACtc,SAAS,CAAC,IAAI,CAAC+I,QAAQ,CAAC;IACnD;IACA5I,GAAG,CAAEsN,OAAO,IAAK;MACb,MAAMqe,mBAAmB,GAAGre,OAAO,CAC9ByQ,MAAM,CAACnU,MAAM,IAAIA,MAAM,CAAC8f,WAAW,KAAK,IAAI,CAAC,CAC7C5pB,GAAG,CAAC8J,MAAM,IAAIA,MAAM,CAAC3I,OAAO,CAAC;MAClC;MACA;MACA;MACA,IAAI,IAAI,CAACspB,WAAW,IAAI,IAAI,CAACc,mBAAmB,EAAE;QAC9CM,mBAAmB,CAACpO,IAAI,CAAC,IAAI,CAACtc,OAAO,CAAC;MAC1C;MACA,IAAI,CAACqmB,QAAQ,CAACja,WAAW,CAACse,mBAAmB,CAAC;IAClD,CAAC,CAAC;IACF;IACA1rB,SAAS,CAAEqN,OAAO,IAAK;MACnB,OAAO3N,KAAK,CAAC,GAAG2N,OAAO,CAACxN,GAAG,CAAC2T,IAAI,IAAI;QAChC,OAAOA,IAAI,CAACgW,aAAa,CAACtN,IAAI,CAACtc,SAAS,CAAC4T,IAAI,CAAC,CAAC;MACnD,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,EAAE7T,SAAS,CAAC,IAAI,CAAC4mB,UAAU,CAAC,CAAC,CAAC9X,SAAS,CAACkd,cAAc,IAAI;MACxD;MACA,MAAMC,OAAO,GAAG,IAAI,CAACvE,QAAQ;MAC7B,MAAM1d,MAAM,GAAGgiB,cAAc,CAAC3qB,OAAO,CAACsgB,aAAa;MACnDqK,cAAc,CAAC/hB,QAAQ,GAAGgiB,OAAO,CAACtc,aAAa,CAAC3F,MAAM,CAAC,GAAGiiB,OAAO,CAACrc,YAAY,CAAC5F,MAAM,CAAC;IAC1F,CAAC,CAAC;EACN;AACJ;AACAygB,OAAO,CAAC5G,IAAI,GAAG,SAASqI,eAAe,CAACnI,CAAC,EAAE;EAAE,OAAO,KAAKA,CAAC,IAAI0G,OAAO,EAAElqB,MAAM,CAACuoB,iBAAiB,CAACvoB,MAAM,CAACvC,UAAU,CAAC,EAAEuC,MAAM,CAACuoB,iBAAiB,CAAC1C,aAAa,EAAE,EAAE,CAAC,EAAE7lB,MAAM,CAACuoB,iBAAiB,CAAClqB,QAAQ,CAAC,EAAE2B,MAAM,CAACuoB,iBAAiB,CAACvoB,MAAM,CAAC7C,MAAM,CAAC,EAAE6C,MAAM,CAACuoB,iBAAiB,CAACvoB,MAAM,CAACjC,gBAAgB,CAAC,EAAEiC,MAAM,CAACuoB,iBAAiB,CAAC9C,eAAe,EAAE,CAAC,CAAC,EAAEzlB,MAAM,CAACuoB,iBAAiB,CAACroB,MAAM,CAACH,cAAc,EAAE,CAAC,CAAC,EAAEC,MAAM,CAACuoB,iBAAiB,CAAClE,QAAQ,CAAC,EAAErkB,MAAM,CAACuoB,iBAAiB,CAACvoB,MAAM,CAACtC,iBAAiB,CAAC,EAAEsC,MAAM,CAACuoB,iBAAiB,CAACY,eAAe,EAAE,EAAE,CAAC,EAAEnpB,MAAM,CAACuoB,iBAAiB,CAAC9D,eAAe,EAAE,EAAE,CAAC,CAAC;AAAE,CAAC;AAC3jByF,OAAO,CAACpF,IAAI,GAAG,aAAc9kB,MAAM,CAAC+kB,iBAAiB,CAAC;EAAEhe,IAAI,EAAEmjB,OAAO;EAAElF,SAAS,EAAE,CAAC,CAAC,EAAE,EAAE,SAAS,EAAE,EAAE,CAAC,CAAC;EAAE4G,cAAc,EAAE,SAASC,sBAAsB,CAACjD,EAAE,EAAEC,GAAG,EAAEiD,QAAQ,EAAE;IAAE,IAAIlD,EAAE,GAAG,CAAC,EAAE;MAClL5oB,MAAM,CAAC+rB,cAAc,CAACD,QAAQ,EAAEjC,gBAAgB,EAAE,CAAC,CAAC;MACpD7pB,MAAM,CAAC+rB,cAAc,CAACD,QAAQ,EAAErC,oBAAoB,EAAE,CAAC,CAAC;MACxDzpB,MAAM,CAAC+rB,cAAc,CAACD,QAAQ,EAAE3C,eAAe,EAAE,CAAC,CAAC;IACvD;IAAE,IAAIP,EAAE,GAAG,CAAC,EAAE;MACV,IAAIoD,EAAE;MACNhsB,MAAM,CAACisB,cAAc,CAACD,EAAE,GAAGhsB,MAAM,CAACksB,WAAW,EAAE,CAAC,KAAKrD,GAAG,CAACrb,gBAAgB,GAAGwe,EAAE,CAACG,KAAK,CAAC;MACrFnsB,MAAM,CAACisB,cAAc,CAACD,EAAE,GAAGhsB,MAAM,CAACksB,WAAW,EAAE,CAAC,KAAKrD,GAAG,CAACnb,oBAAoB,GAAGse,EAAE,CAACG,KAAK,CAAC;MACzFnsB,MAAM,CAACisB,cAAc,CAACD,EAAE,GAAGhsB,MAAM,CAACksB,WAAW,EAAE,CAAC,KAAKrD,GAAG,CAACpgB,QAAQ,GAAGujB,EAAE,CAAC;IAC3E;EAAE,CAAC;EAAExD,SAAS,EAAE,CAAC,CAAC,EAAE,UAAU,CAAC;EAAEC,QAAQ,EAAE,CAAC;EAAEC,YAAY,EAAE,SAAS0D,oBAAoB,CAACxD,EAAE,EAAEC,GAAG,EAAE;IAAE,IAAID,EAAE,GAAG,CAAC,EAAE;MAC7G5oB,MAAM,CAAC+oB,WAAW,CAAC,mBAAmB,EAAEF,GAAG,CAACnf,QAAQ,CAAC,CAAC,mBAAmB,EAAEmf,GAAG,CAAC1B,QAAQ,CAACpc,UAAU,EAAE,CAAC;IACzG;EAAE,CAAC;EAAEka,MAAM,EAAE;IAAEvb,QAAQ,EAAE,CAAC,iBAAiB,EAAE,UAAU,CAAC;IAAEd,cAAc,EAAE,CAAC,mBAAmB,EAAE,gBAAgB,CAAC;IAAEqO,QAAQ,EAAE,CAAC,iBAAiB,EAAE,UAAU,CAAC;IAAEC,iBAAiB,EAAE,CAAC,0BAA0B,EAAE,mBAAmB,CAAC;IAAE7C,YAAY,EAAE,CAAC,qBAAqB,EAAE,cAAc,CAAC;IAAEjG,eAAe,EAAE,CAAC,iBAAiB,EAAE,iBAAiB,CAAC;IAAE8c,mBAAmB,EAAE,CAAC,oBAAoB,EAAE,qBAAqB,CAAC;IAAErS,gBAAgB,EAAE,CAAC,yBAAyB,EAAE,kBAAkB,CAAC;IAAE4N,IAAI,EAAE,CAAC,aAAa,EAAE,MAAM,CAAC;IAAEmE,gBAAgB,EAAE,CAAC,yBAAyB,EAAE,kBAAkB;EAAE,CAAC;EAAE5B,OAAO,EAAE;IAAEjgB,OAAO,EAAE,gBAAgB;IAAEC,QAAQ,EAAE,iBAAiB;IAAEC,KAAK,EAAE,cAAc;IAAEC,OAAO,EAAE,gBAAgB;IAAEC,MAAM,EAAE,eAAe;IAAEC,OAAO,EAAE,gBAAgB;IAAEC,KAAK,EAAE;EAAe,CAAC;EAAE6b,QAAQ,EAAE,CAAC,SAAS,CAAC;EAAEC,QAAQ,EAAE,CAACnlB,MAAM,CAAColB,kBAAkB,CAAC,CAAC;IAAEC,OAAO,EAAEZ,eAAe;IAAEa,WAAW,EAAE4E;EAAQ,CAAC,CAAC,CAAC,EAAElqB,MAAM,CAACqsB,oBAAoB;AAAE,CAAC,CAAC;AACv5BnC,OAAO,CAAC9H,cAAc,GAAG,EAAE;AAC3B8H,OAAO,CAACnG,cAAc,GAAG,MAAM,CAC3B;EAAEhd,IAAI,EAAEtJ;AAAW,CAAC,EACpB;EAAEsJ,IAAI,EAAEiH,SAAS;EAAEgW,UAAU,EAAE,CAAC;IAAEjd,IAAI,EAAE3J,MAAM;IAAE6mB,IAAI,EAAE,CAAC4B,aAAa;EAAG,CAAC,EAAE;IAAE9e,IAAI,EAAEpJ;EAAS,CAAC,EAAE;IAAEoJ,IAAI,EAAEnJ;EAAS,CAAC;AAAE,CAAC,EACnH;EAAEmJ,IAAI,EAAEiH,SAAS;EAAEgW,UAAU,EAAE,CAAC;IAAEjd,IAAI,EAAE3J,MAAM;IAAE6mB,IAAI,EAAE,CAAC5lB,QAAQ;EAAG,CAAC;AAAE,CAAC,EACtE;EAAE0I,IAAI,EAAE5J;AAAO,CAAC,EAChB;EAAE4J,IAAI,EAAEhJ;AAAiB,CAAC,EAC1B;EAAEgJ,IAAI,EAAEiH,SAAS;EAAEgW,UAAU,EAAE,CAAC;IAAEjd,IAAI,EAAEpJ;EAAS,CAAC,EAAE;IAAEoJ,IAAI,EAAE3J,MAAM;IAAE6mB,IAAI,EAAE,CAACwB,eAAe;EAAG,CAAC;AAAE,CAAC,EACjG;EAAE1e,IAAI,EAAEhH,cAAc;EAAEikB,UAAU,EAAE,CAAC;IAAEjd,IAAI,EAAEpJ;EAAS,CAAC;AAAE,CAAC,EAC1D;EAAEoJ,IAAI,EAAEsd;AAAS,CAAC,EAClB;EAAEtd,IAAI,EAAErJ;AAAkB,CAAC,EAC3B;EAAEqJ,IAAI,EAAEqiB,aAAa;EAAEpF,UAAU,EAAE,CAAC;IAAEjd,IAAI,EAAEpJ;EAAS,CAAC,EAAE;IAAEoJ,IAAI,EAAE/I;EAAK,CAAC,EAAE;IAAE+I,IAAI,EAAE3J,MAAM;IAAE6mB,IAAI,EAAE,CAACkF,eAAe;EAAG,CAAC;AAAE,CAAC,EACrH;EAAEpiB,IAAI,EAAEmjB,OAAO;EAAElG,UAAU,EAAE,CAAC;IAAEjd,IAAI,EAAEpJ;EAAS,CAAC,EAAE;IAAEoJ,IAAI,EAAEnJ;EAAS,CAAC,EAAE;IAAEmJ,IAAI,EAAE3J,MAAM;IAAE6mB,IAAI,EAAE,CAACQ,eAAe;EAAG,CAAC;AAAE,CAAC,CACtH;AACDyF,OAAO,CAAC3E,cAAc,GAAG;EACrB9c,QAAQ,EAAE,CAAC;IAAE1B,IAAI,EAAE9I,eAAe;IAAEgmB,IAAI,EAAE,CAACkF,eAAe,EAAE;MAAEmD,WAAW,EAAE;IAAK,CAAC;EAAG,CAAC,CAAC;EACtF9e,gBAAgB,EAAE,CAAC;IAAEzG,IAAI,EAAE7I,YAAY;IAAE+lB,IAAI,EAAE,CAAC4F,gBAAgB;EAAG,CAAC,CAAC;EACrEnc,oBAAoB,EAAE,CAAC;IAAE3G,IAAI,EAAE7I,YAAY;IAAE+lB,IAAI,EAAE,CAACwF,oBAAoB;EAAG,CAAC,CAAC;EAC7EhD,IAAI,EAAE,CAAC;IAAE1f,IAAI,EAAExJ,KAAK;IAAE0mB,IAAI,EAAE,CAAC,aAAa;EAAG,CAAC,CAAC;EAC/ChN,QAAQ,EAAE,CAAC;IAAElQ,IAAI,EAAExJ,KAAK;IAAE0mB,IAAI,EAAE,CAAC,iBAAiB;EAAG,CAAC,CAAC;EACvDiH,mBAAmB,EAAE,CAAC;IAAEnkB,IAAI,EAAExJ,KAAK;IAAE0mB,IAAI,EAAE,CAAC,oBAAoB;EAAG,CAAC,CAAC;EACrE7V,eAAe,EAAE,CAAC;IAAErH,IAAI,EAAExJ,KAAK;IAAE0mB,IAAI,EAAE,CAAC,iBAAiB;EAAG,CAAC,CAAC;EAC9Drb,cAAc,EAAE,CAAC;IAAE7B,IAAI,EAAExJ,KAAK;IAAE0mB,IAAI,EAAE,CAAC,mBAAmB;EAAG,CAAC,CAAC;EAC/D2G,gBAAgB,EAAE,CAAC;IAAE7jB,IAAI,EAAExJ,KAAK;IAAE0mB,IAAI,EAAE,CAAC,yBAAyB;EAAG,CAAC,CAAC;EACvEva,QAAQ,EAAE,CAAC;IAAE3C,IAAI,EAAExJ,KAAK;IAAE0mB,IAAI,EAAE,CAAC,iBAAiB;EAAG,CAAC,CAAC;EACvD/M,iBAAiB,EAAE,CAAC;IAAEnQ,IAAI,EAAExJ,KAAK;IAAE0mB,IAAI,EAAE,CAAC,0BAA0B;EAAG,CAAC,CAAC;EACzE5P,YAAY,EAAE,CAAC;IAAEtN,IAAI,EAAExJ,KAAK;IAAE0mB,IAAI,EAAE,CAAC,qBAAqB;EAAG,CAAC,CAAC;EAC/DpL,gBAAgB,EAAE,CAAC;IAAE9R,IAAI,EAAExJ,KAAK;IAAE0mB,IAAI,EAAE,CAAC,yBAAyB;EAAG,CAAC,CAAC;EACvElb,OAAO,EAAE,CAAC;IAAEhC,IAAI,EAAElJ,MAAM;IAAEomB,IAAI,EAAE,CAAC,gBAAgB;EAAG,CAAC,CAAC;EACtDjb,QAAQ,EAAE,CAAC;IAAEjC,IAAI,EAAElJ,MAAM;IAAEomB,IAAI,EAAE,CAAC,iBAAiB;EAAG,CAAC,CAAC;EACxDhb,KAAK,EAAE,CAAC;IAAElC,IAAI,EAAElJ,MAAM;IAAEomB,IAAI,EAAE,CAAC,cAAc;EAAG,CAAC,CAAC;EAClD/a,OAAO,EAAE,CAAC;IAAEnC,IAAI,EAAElJ,MAAM;IAAEomB,IAAI,EAAE,CAAC,gBAAgB;EAAG,CAAC,CAAC;EACtD9a,MAAM,EAAE,CAAC;IAAEpC,IAAI,EAAElJ,MAAM;IAAEomB,IAAI,EAAE,CAAC,eAAe;EAAG,CAAC,CAAC;EACpD7a,OAAO,EAAE,CAAC;IAAErC,IAAI,EAAElJ,MAAM;IAAEomB,IAAI,EAAE,CAAC,gBAAgB;EAAG,CAAC,CAAC;EACtD5a,KAAK,EAAE,CAAC;IAAEtC,IAAI,EAAElJ,MAAM;IAAEomB,IAAI,EAAE,CAAC,cAAc;EAAG,CAAC;AACrD,CAAC;AACD,CAAC,YAAY;EAAE,CAAC,OAAOC,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAKlkB,MAAM,CAACmkB,iBAAiB,CAAC+F,OAAO,EAAE,CAAC;IAC7FnjB,IAAI,EAAEzJ,SAAS;IACf2mB,IAAI,EAAE,CAAC;MACCvd,QAAQ,EAAE,WAAW;MACrBwe,QAAQ,EAAE,SAAS;MACnBgE,IAAI,EAAE;QACF,OAAO,EAAEe,eAAe;QACxB,2BAA2B,EAAE,UAAU;QACvC,2BAA2B,EAAE;MACjC,CAAC;MACDzE,SAAS,EAAE,CAAC;QAAEH,OAAO,EAAEZ,eAAe;QAAEa,WAAW,EAAE4E;MAAQ,CAAC;IAClE,CAAC;EACT,CAAC,CAAC,EAAE,YAAY;IAAE,OAAO,CAAC;MAAEnjB,IAAI,EAAE/G,MAAM,CAACvC;IAAW,CAAC,EAAE;MAAEsJ,IAAI,EAAEiH,SAAS;MAAEgW,UAAU,EAAE,CAAC;QAC3Ejd,IAAI,EAAE3J,MAAM;QACZ6mB,IAAI,EAAE,CAAC4B,aAAa;MACxB,CAAC,EAAE;QACC9e,IAAI,EAAEpJ;MACV,CAAC,EAAE;QACCoJ,IAAI,EAAEnJ;MACV,CAAC;IAAE,CAAC,EAAE;MAAEmJ,IAAI,EAAEiH,SAAS;MAAEgW,UAAU,EAAE,CAAC;QAClCjd,IAAI,EAAE3J,MAAM;QACZ6mB,IAAI,EAAE,CAAC5lB,QAAQ;MACnB,CAAC;IAAE,CAAC,EAAE;MAAE0I,IAAI,EAAE/G,MAAM,CAAC7C;IAAO,CAAC,EAAE;MAAE4J,IAAI,EAAE/G,MAAM,CAACjC;IAAiB,CAAC,EAAE;MAAEgJ,IAAI,EAAEiH,SAAS;MAAEgW,UAAU,EAAE,CAAC;QAC9Fjd,IAAI,EAAEpJ;MACV,CAAC,EAAE;QACCoJ,IAAI,EAAE3J,MAAM;QACZ6mB,IAAI,EAAE,CAACwB,eAAe;MAC1B,CAAC;IAAE,CAAC,EAAE;MAAE1e,IAAI,EAAE7G,MAAM,CAACH,cAAc;MAAEikB,UAAU,EAAE,CAAC;QAC9Cjd,IAAI,EAAEpJ;MACV,CAAC;IAAE,CAAC,EAAE;MAAEoJ,IAAI,EAAEsd;IAAS,CAAC,EAAE;MAAEtd,IAAI,EAAE/G,MAAM,CAACtC;IAAkB,CAAC,EAAE;MAAEqJ,IAAI,EAAEqiB,aAAa;MAAEpF,UAAU,EAAE,CAAC;QAC9Fjd,IAAI,EAAEpJ;MACV,CAAC,EAAE;QACCoJ,IAAI,EAAE/I;MACV,CAAC,EAAE;QACC+I,IAAI,EAAE3J,MAAM;QACZ6mB,IAAI,EAAE,CAACkF,eAAe;MAC1B,CAAC;IAAE,CAAC,EAAE;MAAEpiB,IAAI,EAAEmjB,OAAO;MAAElG,UAAU,EAAE,CAAC;QAChCjd,IAAI,EAAEpJ;MACV,CAAC,EAAE;QACCoJ,IAAI,EAAEnJ;MACV,CAAC,EAAE;QACCmJ,IAAI,EAAE3J,MAAM;QACZ6mB,IAAI,EAAE,CAACQ,eAAe;MAC1B,CAAC;IAAE,CAAC,CAAC;EAAE,CAAC,EAAE;IAAE1b,OAAO,EAAE,CAAC;MACtBhC,IAAI,EAAElJ,MAAM;MACZomB,IAAI,EAAE,CAAC,gBAAgB;IAC3B,CAAC,CAAC;IAAEjb,QAAQ,EAAE,CAAC;MACXjC,IAAI,EAAElJ,MAAM;MACZomB,IAAI,EAAE,CAAC,iBAAiB;IAC5B,CAAC,CAAC;IAAEhb,KAAK,EAAE,CAAC;MACRlC,IAAI,EAAElJ,MAAM;MACZomB,IAAI,EAAE,CAAC,cAAc;IACzB,CAAC,CAAC;IAAE/a,OAAO,EAAE,CAAC;MACVnC,IAAI,EAAElJ,MAAM;MACZomB,IAAI,EAAE,CAAC,gBAAgB;IAC3B,CAAC,CAAC;IAAE9a,MAAM,EAAE,CAAC;MACTpC,IAAI,EAAElJ,MAAM;MACZomB,IAAI,EAAE,CAAC,eAAe;IAC1B,CAAC,CAAC;IAAE7a,OAAO,EAAE,CAAC;MACVrC,IAAI,EAAElJ,MAAM;MACZomB,IAAI,EAAE,CAAC,gBAAgB;IAC3B,CAAC,CAAC;IAAE5a,KAAK,EAAE,CAAC;MACRtC,IAAI,EAAElJ,MAAM;MACZomB,IAAI,EAAE,CAAC,cAAc;IACzB,CAAC,CAAC;IAAEva,QAAQ,EAAE,CAAC;MACX3C,IAAI,EAAExJ,KAAK;MACX0mB,IAAI,EAAE,CAAC,iBAAiB;IAC5B,CAAC,CAAC;IAAErb,cAAc,EAAE,CAAC;MACjB7B,IAAI,EAAExJ,KAAK;MACX0mB,IAAI,EAAE,CAAC,mBAAmB;IAC9B,CAAC,CAAC;IAAEhN,QAAQ,EAAE,CAAC;MACXlQ,IAAI,EAAExJ,KAAK;MACX0mB,IAAI,EAAE,CAAC,iBAAiB;IAC5B,CAAC,CAAC;IAAE/M,iBAAiB,EAAE,CAAC;MACpBnQ,IAAI,EAAExJ,KAAK;MACX0mB,IAAI,EAAE,CAAC,0BAA0B;IACrC,CAAC,CAAC;IAAE5P,YAAY,EAAE,CAAC;MACftN,IAAI,EAAExJ,KAAK;MACX0mB,IAAI,EAAE,CAAC,qBAAqB;IAChC,CAAC,CAAC;IAAE7V,eAAe,EAAE,CAAC;MAClBrH,IAAI,EAAExJ,KAAK;MACX0mB,IAAI,EAAE,CAAC,iBAAiB;IAC5B,CAAC,CAAC;IAAEiH,mBAAmB,EAAE,CAAC;MACtBnkB,IAAI,EAAExJ,KAAK;MACX0mB,IAAI,EAAE,CAAC,oBAAoB;IAC/B,CAAC,CAAC;IAAEpL,gBAAgB,EAAE,CAAC;MACnB9R,IAAI,EAAExJ,KAAK;MACX0mB,IAAI,EAAE,CAAC,yBAAyB;IACpC,CAAC,CAAC;IAAExb,QAAQ,EAAE,CAAC;MACX1B,IAAI,EAAE9I,eAAe;MACrBgmB,IAAI,EAAE,CAACkF,eAAe,EAAE;QAAEmD,WAAW,EAAE;MAAK,CAAC;IACjD,CAAC,CAAC;IAAE9e,gBAAgB,EAAE,CAAC;MACnBzG,IAAI,EAAE7I,YAAY;MAClB+lB,IAAI,EAAE,CAAC4F,gBAAgB;IAC3B,CAAC,CAAC;IAAEnc,oBAAoB,EAAE,CAAC;MACvB3G,IAAI,EAAE7I,YAAY;MAClB+lB,IAAI,EAAE,CAACwF,oBAAoB;IAC/B,CAAC,CAAC;IAAEhD,IAAI,EAAE,CAAC;MACP1f,IAAI,EAAExJ,KAAK;MACX0mB,IAAI,EAAE,CAAC,aAAa;IACxB,CAAC,CAAC;IAAE2G,gBAAgB,EAAE,CAAC;MACnB7jB,IAAI,EAAExJ,KAAK;MACX0mB,IAAI,EAAE,CAAC,yBAAyB;IACpC,CAAC;EAAE,CAAC,CAAC;AAAE,CAAC,GAAG;AACnB;AACA,SAASkH,0BAA0B,CAACrqB,OAAO,EAAE4F,QAAQ,EAAE;EACnD,IAAI6lB,cAAc,GAAGzrB,OAAO,CAACkc,aAAa;EAC1C,OAAOuP,cAAc,EAAE;IACnB;IACA,IAAIA,cAAc,CAACC,OAAO,GAAGD,cAAc,CAACC,OAAO,CAAC9lB,QAAQ,CAAC,GACzD6lB,cAAc,CAACE,iBAAiB,CAAC/lB,QAAQ,CAAC,EAAE;MAC5C,OAAO6lB,cAAc;IACzB;IACAA,cAAc,GAAGA,cAAc,CAACvP,aAAa;EACjD;EACA,OAAO,IAAI;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM0P,cAAc,CAAC;AAErBA,cAAc,CAACpJ,IAAI,GAAG,SAASqJ,sBAAsB,CAACnJ,CAAC,EAAE;EAAE,OAAO,KAAKA,CAAC,IAAIkJ,cAAc,GAAG;AAAE,CAAC;AAChGA,cAAc,CAACE,IAAI,GAAG,aAAc5sB,MAAM,CAAC6sB,gBAAgB,CAAC;EAAE9lB,IAAI,EAAE2lB;AAAe,CAAC,CAAC;AACrFA,cAAc,CAACI,IAAI,GAAG,aAAc9sB,MAAM,CAAC+sB,gBAAgB,CAAC;EAAEvH,SAAS,EAAE,CACjEnB,QAAQ,CACX;EAAE2I,OAAO,EAAE,CAACvuB,mBAAmB;AAAE,CAAC,CAAC;AACxC,CAAC,YAAY;EAAE,CAAC,OAAOylB,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAKlkB,MAAM,CAACmkB,iBAAiB,CAACuI,cAAc,EAAE,CAAC;IACpG3lB,IAAI,EAAE5I,QAAQ;IACd8lB,IAAI,EAAE,CAAC;MACCgJ,YAAY,EAAE,CACVlH,WAAW,EACXpB,gBAAgB,EAChBuF,OAAO,EACPd,aAAa,EACbU,cAAc,EACdJ,kBAAkB,CACrB;MACDwD,OAAO,EAAE,CACLzuB,mBAAmB,EACnBsnB,WAAW,EACXpB,gBAAgB,EAChBuF,OAAO,EACPd,aAAa,EACbU,cAAc,EACdJ,kBAAkB,CACrB;MACDlE,SAAS,EAAE,CACPnB,QAAQ;IAEhB,CAAC;EACT,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC;AAAE,CAAC,GAAG;AACzB,CAAC,YAAY;EAAE,CAAC,OAAO8I,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAKntB,MAAM,CAACotB,kBAAkB,CAACV,cAAc,EAAE;IAAEO,YAAY,EAAE,YAAY;MAAE,OAAO,CAAClH,WAAW,EAAEpB,gBAAgB,EAAEuF,OAAO,EAAEd,aAAa,EAAEU,cAAc,EAAEJ,kBAAkB,CAAC;IAAE,CAAC;IAAEwD,OAAO,EAAE,YAAY;MAAE,OAAO,CAACzuB,mBAAmB,EAAEsnB,WAAW,EAAEpB,gBAAgB,EAAEuF,OAAO,EAAEd,aAAa,EAAEU,cAAc,EAAEJ,kBAAkB,CAAC;IAAE;EAAE,CAAC,CAAC;AAAE,CAAC,GAAG;;AAE3Y;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,SAASjE,eAAe,EAAE0D,eAAe,EAAE1E,eAAe,EAAEgF,oBAAoB,EAAEI,gBAAgB,EAAEhE,aAAa,EAAEnB,mBAAmB,EAAEwF,OAAO,EAAEd,aAAa,EAAEM,kBAAkB,EAAEI,cAAc,EAAE/D,WAAW,EAAEpB,gBAAgB,EAAEN,QAAQ,EAAEqI,cAAc,EAAExK,gBAAgB,EAAExa,OAAO,EAAEkT,WAAW,EAAEH,aAAa,EAAEZ,eAAe,EAAEO,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}