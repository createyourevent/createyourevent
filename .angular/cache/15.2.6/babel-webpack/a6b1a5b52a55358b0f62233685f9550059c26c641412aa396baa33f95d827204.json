{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\nimport { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getOrderIdentifier } from '../order.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport class OrderService {\n  constructor(http, applicationConfigService) {\n    this.http = http;\n    this.applicationConfigService = applicationConfigService;\n    this.resourceUrl = this.applicationConfigService.getEndpointFor('api/orders');\n  }\n  create(order) {\n    const copy = this.convertDateFromClient(order);\n    return this.http.post(this.resourceUrl, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  update(order) {\n    const copy = this.convertDateFromClient(order);\n    return this.http.put(`${this.resourceUrl}/${getOrderIdentifier(order)}`, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  partialUpdate(order) {\n    const copy = this.convertDateFromClient(order);\n    return this.http.patch(`${this.resourceUrl}/${getOrderIdentifier(order)}`, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  find(id) {\n    return this.http.get(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  query(req) {\n    const options = createRequestOption(req);\n    return this.http.get(this.resourceUrl, {\n      params: options,\n      observe: 'response'\n    }).pipe(map(res => this.convertDateArrayFromServer(res)));\n  }\n  delete(id) {\n    return this.http.delete(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  addOrderToCollectionIfMissing(orderCollection, ...ordersToCheck) {\n    const orders = ordersToCheck.filter(isPresent);\n    if (orders.length > 0) {\n      const orderCollectionIdentifiers = orderCollection.map(orderItem => getOrderIdentifier(orderItem));\n      const ordersToAdd = orders.filter(orderItem => {\n        const orderIdentifier = getOrderIdentifier(orderItem);\n        if (orderIdentifier == null || orderCollectionIdentifiers.includes(orderIdentifier)) {\n          return false;\n        }\n        orderCollectionIdentifiers.push(orderIdentifier);\n        return true;\n      });\n      return [...ordersToAdd, ...orderCollection];\n    }\n    return orderCollection;\n  }\n  convertDateFromClient(order) {\n    return Object.assign({}, order, {\n      dateAdded: order.dateAdded?.isValid() ? order.dateAdded.toJSON() : undefined\n    });\n  }\n  convertDateFromServer(res) {\n    if (res.body) {\n      res.body.dateAdded = res.body.dateAdded ? dayjs(res.body.dateAdded) : undefined;\n    }\n    return res;\n  }\n  convertDateArrayFromServer(res) {\n    if (res.body) {\n      res.body.forEach(order => {\n        order.dateAdded = order.dateAdded ? dayjs(order.dateAdded) : undefined;\n      });\n    }\n    return res;\n  }\n}\nOrderService.ɵfac = function OrderService_Factory(t) {\n  return new (t || OrderService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n};\nOrderService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: OrderService,\n  factory: OrderService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAASA,GAAG,QAAQ,gBAAgB;AACpC,OAAO,KAAKC,KAAK,MAAM,OAAO;AAE9B,SAASC,SAAS,QAAQ,yBAAyB;AAEnD,SAASC,mBAAmB,QAAQ,+BAA+B;AACnE,SAAiBC,kBAAkB,QAAQ,gBAAgB;;;;AAM3D,OAAM,MAAOC,YAAY;EAGvBC,YAAsBC,IAAgB,EAAYC,wBAAkD;IAA9E,SAAI,GAAJD,IAAI;IAAwB,6BAAwB,GAAxBC,wBAAwB;IAFhE,gBAAW,GAAG,IAAI,CAACA,wBAAwB,CAACC,cAAc,CAAC,YAAY,CAAC;EAEqB;EAEvGC,MAAM,CAACC,KAAa;IAClB,MAAMC,IAAI,GAAG,IAAI,CAACC,qBAAqB,CAACF,KAAK,CAAC;IAC9C,OAAO,IAAI,CAACJ,IAAI,CACbO,IAAI,CAAS,IAAI,CAACC,WAAW,EAAEH,IAAI,EAAE;MAAEI,OAAO,EAAE;IAAU,CAAE,CAAC,CAC7DC,IAAI,CAACjB,GAAG,CAAEkB,GAAuB,IAAK,IAAI,CAACC,qBAAqB,CAACD,GAAG,CAAC,CAAC,CAAC;EAC5E;EAEAE,MAAM,CAACT,KAAa;IAClB,MAAMC,IAAI,GAAG,IAAI,CAACC,qBAAqB,CAACF,KAAK,CAAC;IAC9C,OAAO,IAAI,CAACJ,IAAI,CACbc,GAAG,CAAS,GAAG,IAAI,CAACN,WAAW,IAAIX,kBAAkB,CAACO,KAAK,CAAW,EAAE,EAAEC,IAAI,EAAE;MAAEI,OAAO,EAAE;IAAU,CAAE,CAAC,CACxGC,IAAI,CAACjB,GAAG,CAAEkB,GAAuB,IAAK,IAAI,CAACC,qBAAqB,CAACD,GAAG,CAAC,CAAC,CAAC;EAC5E;EAEAI,aAAa,CAACX,KAAa;IACzB,MAAMC,IAAI,GAAG,IAAI,CAACC,qBAAqB,CAACF,KAAK,CAAC;IAC9C,OAAO,IAAI,CAACJ,IAAI,CACbgB,KAAK,CAAS,GAAG,IAAI,CAACR,WAAW,IAAIX,kBAAkB,CAACO,KAAK,CAAW,EAAE,EAAEC,IAAI,EAAE;MAAEI,OAAO,EAAE;IAAU,CAAE,CAAC,CAC1GC,IAAI,CAACjB,GAAG,CAAEkB,GAAuB,IAAK,IAAI,CAACC,qBAAqB,CAACD,GAAG,CAAC,CAAC,CAAC;EAC5E;EAEAM,IAAI,CAACC,EAAU;IACb,OAAO,IAAI,CAAClB,IAAI,CACbmB,GAAG,CAAS,GAAG,IAAI,CAACX,WAAW,IAAIU,EAAE,EAAE,EAAE;MAAET,OAAO,EAAE;IAAU,CAAE,CAAC,CACjEC,IAAI,CAACjB,GAAG,CAAEkB,GAAuB,IAAK,IAAI,CAACC,qBAAqB,CAACD,GAAG,CAAC,CAAC,CAAC;EAC5E;EAEAS,KAAK,CAACC,GAAS;IACb,MAAMC,OAAO,GAAG1B,mBAAmB,CAACyB,GAAG,CAAC;IACxC,OAAO,IAAI,CAACrB,IAAI,CACbmB,GAAG,CAAW,IAAI,CAACX,WAAW,EAAE;MAAEe,MAAM,EAAED,OAAO;MAAEb,OAAO,EAAE;IAAU,CAAE,CAAC,CACzEC,IAAI,CAACjB,GAAG,CAAEkB,GAA4B,IAAK,IAAI,CAACa,0BAA0B,CAACb,GAAG,CAAC,CAAC,CAAC;EACtF;EAEAc,MAAM,CAACP,EAAU;IACf,OAAO,IAAI,CAAClB,IAAI,CAACyB,MAAM,CAAC,GAAG,IAAI,CAACjB,WAAW,IAAIU,EAAE,EAAE,EAAE;MAAET,OAAO,EAAE;IAAU,CAAE,CAAC;EAC/E;EAEAiB,6BAA6B,CAACC,eAAyB,EAAE,GAAGC,aAA4C;IACtG,MAAMC,MAAM,GAAaD,aAAa,CAACE,MAAM,CAACnC,SAAS,CAAC;IACxD,IAAIkC,MAAM,CAACE,MAAM,GAAG,CAAC,EAAE;MACrB,MAAMC,0BAA0B,GAAGL,eAAe,CAAClC,GAAG,CAACwC,SAAS,IAAIpC,kBAAkB,CAACoC,SAAS,CAAE,CAAC;MACnG,MAAMC,WAAW,GAAGL,MAAM,CAACC,MAAM,CAACG,SAAS,IAAG;QAC5C,MAAME,eAAe,GAAGtC,kBAAkB,CAACoC,SAAS,CAAC;QACrD,IAAIE,eAAe,IAAI,IAAI,IAAIH,0BAA0B,CAACI,QAAQ,CAACD,eAAe,CAAC,EAAE;UACnF,OAAO,KAAK;;QAEdH,0BAA0B,CAACK,IAAI,CAACF,eAAe,CAAC;QAChD,OAAO,IAAI;MACb,CAAC,CAAC;MACF,OAAO,CAAC,GAAGD,WAAW,EAAE,GAAGP,eAAe,CAAC;;IAE7C,OAAOA,eAAe;EACxB;EAEUrB,qBAAqB,CAACF,KAAa;IAC3C,OAAOkC,MAAM,CAACC,MAAM,CAAC,EAAE,EAAEnC,KAAK,EAAE;MAC9BoC,SAAS,EAAEpC,KAAK,CAACoC,SAAS,EAAEC,OAAO,EAAE,GAAGrC,KAAK,CAACoC,SAAS,CAACE,MAAM,EAAE,GAAGC;KACpE,CAAC;EACJ;EAEU/B,qBAAqB,CAACD,GAAuB;IACrD,IAAIA,GAAG,CAACiC,IAAI,EAAE;MACZjC,GAAG,CAACiC,IAAI,CAACJ,SAAS,GAAG7B,GAAG,CAACiC,IAAI,CAACJ,SAAS,GAAG9C,KAAK,CAACiB,GAAG,CAACiC,IAAI,CAACJ,SAAS,CAAC,GAAGG,SAAS;;IAEjF,OAAOhC,GAAG;EACZ;EAEUa,0BAA0B,CAACb,GAA4B;IAC/D,IAAIA,GAAG,CAACiC,IAAI,EAAE;MACZjC,GAAG,CAACiC,IAAI,CAACC,OAAO,CAAEzC,KAAa,IAAI;QACjCA,KAAK,CAACoC,SAAS,GAAGpC,KAAK,CAACoC,SAAS,GAAG9C,KAAK,CAACU,KAAK,CAACoC,SAAS,CAAC,GAAGG,SAAS;MACxE,CAAC,CAAC;;IAEJ,OAAOhC,GAAG;EACZ;;;mBAhFWb,YAAY;AAAA;;SAAZA,YAAY;EAAAgD,SAAZhD,YAAY;EAAAiD,YADC;AAAM","names":["map","dayjs","isPresent","createRequestOption","getOrderIdentifier","OrderService","constructor","http","applicationConfigService","getEndpointFor","create","order","copy","convertDateFromClient","post","resourceUrl","observe","pipe","res","convertDateFromServer","update","put","partialUpdate","patch","find","id","get","query","req","options","params","convertDateArrayFromServer","delete","addOrderToCollectionIfMissing","orderCollection","ordersToCheck","orders","filter","length","orderCollectionIdentifiers","orderItem","ordersToAdd","orderIdentifier","includes","push","Object","assign","dateAdded","isValid","toJSON","undefined","body","forEach","factory","providedIn"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/entities/order/service/order.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\n\nimport { isPresent } from 'app/core/util/operators';\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { IOrder, getOrderIdentifier } from '../order.model';\n\nexport type EntityResponseType = HttpResponse<IOrder>;\nexport type EntityArrayResponseType = HttpResponse<IOrder[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class OrderService {\n  protected resourceUrl = this.applicationConfigService.getEndpointFor('api/orders');\n\n  constructor(protected http: HttpClient, protected applicationConfigService: ApplicationConfigService) {}\n\n  create(order: IOrder): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(order);\n    return this.http\n      .post<IOrder>(this.resourceUrl, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  update(order: IOrder): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(order);\n    return this.http\n      .put<IOrder>(`${this.resourceUrl}/${getOrderIdentifier(order) as number}`, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  partialUpdate(order: IOrder): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(order);\n    return this.http\n      .patch<IOrder>(`${this.resourceUrl}/${getOrderIdentifier(order) as number}`, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  find(id: number): Observable<EntityResponseType> {\n    return this.http\n      .get<IOrder>(`${this.resourceUrl}/${id}`, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  query(req?: any): Observable<EntityArrayResponseType> {\n    const options = createRequestOption(req);\n    return this.http\n      .get<IOrder[]>(this.resourceUrl, { params: options, observe: 'response' })\n      .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n  }\n\n  delete(id: number): Observable<HttpResponse<{}>> {\n    return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  addOrderToCollectionIfMissing(orderCollection: IOrder[], ...ordersToCheck: (IOrder | null | undefined)[]): IOrder[] {\n    const orders: IOrder[] = ordersToCheck.filter(isPresent);\n    if (orders.length > 0) {\n      const orderCollectionIdentifiers = orderCollection.map(orderItem => getOrderIdentifier(orderItem)!);\n      const ordersToAdd = orders.filter(orderItem => {\n        const orderIdentifier = getOrderIdentifier(orderItem);\n        if (orderIdentifier == null || orderCollectionIdentifiers.includes(orderIdentifier)) {\n          return false;\n        }\n        orderCollectionIdentifiers.push(orderIdentifier);\n        return true;\n      });\n      return [...ordersToAdd, ...orderCollection];\n    }\n    return orderCollection;\n  }\n\n  protected convertDateFromClient(order: IOrder): IOrder {\n    return Object.assign({}, order, {\n      dateAdded: order.dateAdded?.isValid() ? order.dateAdded.toJSON() : undefined,\n    });\n  }\n\n  protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\n    if (res.body) {\n      res.body.dateAdded = res.body.dateAdded ? dayjs(res.body.dateAdded) : undefined;\n    }\n    return res;\n  }\n\n  protected convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\n    if (res.body) {\n      res.body.forEach((order: IOrder) => {\n        order.dateAdded = order.dateAdded ? dayjs(order.dateAdded) : undefined;\n      });\n    }\n    return res;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}