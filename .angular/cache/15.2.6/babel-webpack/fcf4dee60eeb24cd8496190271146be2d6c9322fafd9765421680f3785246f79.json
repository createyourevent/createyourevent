{"ast":null,"code":"import * as i1 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, InjectionToken, EventEmitter, Directive, NgZone, Optional, Input, Output, NgModule } from '@angular/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A pending copy-to-clipboard operation.\n *\n * The implementation of copying text to the clipboard modifies the DOM and\n * forces a relayout. This relayout can take too long if the string is large,\n * causing the execCommand('copy') to happen too long after the user clicked.\n * This results in the browser refusing to copy. This object lets the\n * relayout happen in a separate tick from copying by providing a copy function\n * that can be called later.\n *\n * Destroy must be called when no longer in use, regardless of whether `copy` is\n * called.\n */\nimport * as ɵngcc0 from '@angular/core';\nclass PendingCopy {\n  constructor(text, _document) {\n    this._document = _document;\n    const textarea = this._textarea = this._document.createElement('textarea');\n    const styles = textarea.style;\n    // Hide the element for display and accessibility. Set a fixed position so the page layout\n    // isn't affected. We use `fixed` with `top: 0`, because focus is moved into the textarea\n    // for a split second and if it's off-screen, some browsers will attempt to scroll it into view.\n    styles.position = 'fixed';\n    styles.top = styles.opacity = '0';\n    styles.left = '-999em';\n    textarea.setAttribute('aria-hidden', 'true');\n    textarea.value = text;\n    this._document.body.appendChild(textarea);\n  }\n  /** Finishes copying the text. */\n  copy() {\n    const textarea = this._textarea;\n    let successful = false;\n    try {\n      // Older browsers could throw if copy is not supported.\n      if (textarea) {\n        const currentFocus = this._document.activeElement;\n        textarea.select();\n        textarea.setSelectionRange(0, textarea.value.length);\n        successful = this._document.execCommand('copy');\n        if (currentFocus) {\n          currentFocus.focus();\n        }\n      }\n    } catch (_a) {\n      // Discard error.\n      // Initial setting of {@code successful} will represent failure here.\n    }\n    return successful;\n  }\n  /** Cleans up DOM changes used to perform the copy operation. */\n  destroy() {\n    const textarea = this._textarea;\n    if (textarea) {\n      if (textarea.parentNode) {\n        textarea.parentNode.removeChild(textarea);\n      }\n      this._textarea = undefined;\n    }\n  }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A service for copying text to the clipboard.\n */\nclass Clipboard {\n  constructor(document) {\n    this._document = document;\n  }\n  /**\n   * Copies the provided text into the user's clipboard.\n   *\n   * @param text The string to copy.\n   * @returns Whether the operation was successful.\n   */\n  copy(text) {\n    const pendingCopy = this.beginCopy(text);\n    const successful = pendingCopy.copy();\n    pendingCopy.destroy();\n    return successful;\n  }\n  /**\n   * Prepares a string to be copied later. This is useful for large strings\n   * which take too long to successfully render and be copied in the same tick.\n   *\n   * The caller must call `destroy` on the returned `PendingCopy`.\n   *\n   * @param text The string to copy.\n   * @returns the pending copy operation.\n   */\n  beginCopy(text) {\n    return new PendingCopy(text, this._document);\n  }\n}\nClipboard.ɵfac = function Clipboard_Factory(t) {\n  return new (t || Clipboard)(ɵngcc0.ɵɵinject(DOCUMENT));\n};\nClipboard.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function Clipboard_Factory() {\n    return new Clipboard(i0.ɵɵinject(i1.DOCUMENT));\n  },\n  token: Clipboard,\n  providedIn: \"root\"\n});\nClipboard.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Clipboard, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to provide the default options to `CdkCopyToClipboard`. */\nconst CDK_COPY_TO_CLIPBOARD_CONFIG = new InjectionToken('CDK_COPY_TO_CLIPBOARD_CONFIG');\n/**\n * @deprecated Use `CDK_COPY_TO_CLIPBOARD_CONFIG` instead.\n * @breaking-change 13.0.0\n */\nconst CKD_COPY_TO_CLIPBOARD_CONFIG = CDK_COPY_TO_CLIPBOARD_CONFIG;\n/**\n * Provides behavior for a button that when clicked copies content into user's\n * clipboard.\n */\nclass CdkCopyToClipboard {\n  constructor(_clipboard, _ngZone, config) {\n    this._clipboard = _clipboard;\n    this._ngZone = _ngZone;\n    /** Content to be copied. */\n    this.text = '';\n    /**\n     * How many times to attempt to copy the text. This may be necessary for longer text, because\n     * the browser needs time to fill an intermediate textarea element and copy the content.\n     */\n    this.attempts = 1;\n    /**\n     * Emits when some text is copied to the clipboard. The\n     * emitted value indicates whether copying was successful.\n     */\n    this.copied = new EventEmitter();\n    /** Copies that are currently being attempted. */\n    this._pending = new Set();\n    if (config && config.attempts != null) {\n      this.attempts = config.attempts;\n    }\n  }\n  /** Copies the current text to the clipboard. */\n  copy(attempts = this.attempts) {\n    if (attempts > 1) {\n      let remainingAttempts = attempts;\n      const pending = this._clipboard.beginCopy(this.text);\n      this._pending.add(pending);\n      const attempt = () => {\n        const successful = pending.copy();\n        if (!successful && --remainingAttempts && !this._destroyed) {\n          // We use 1 for the timeout since it's more predictable when flushing in unit tests.\n          this._currentTimeout = this._ngZone.runOutsideAngular(() => setTimeout(attempt, 1));\n        } else {\n          this._currentTimeout = null;\n          this._pending.delete(pending);\n          pending.destroy();\n          this.copied.emit(successful);\n        }\n      };\n      attempt();\n    } else {\n      this.copied.emit(this._clipboard.copy(this.text));\n    }\n  }\n  ngOnDestroy() {\n    if (this._currentTimeout) {\n      clearTimeout(this._currentTimeout);\n    }\n    this._pending.forEach(copy => copy.destroy());\n    this._pending.clear();\n    this._destroyed = true;\n  }\n}\nCdkCopyToClipboard.ɵfac = function CdkCopyToClipboard_Factory(t) {\n  return new (t || CdkCopyToClipboard)(ɵngcc0.ɵɵdirectiveInject(Clipboard), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(CKD_COPY_TO_CLIPBOARD_CONFIG, 8));\n};\nCdkCopyToClipboard.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkCopyToClipboard,\n  selectors: [[\"\", \"cdkCopyToClipboard\", \"\"]],\n  hostBindings: function CdkCopyToClipboard_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function CdkCopyToClipboard_click_HostBindingHandler() {\n        return ctx.copy();\n      });\n    }\n  },\n  inputs: {\n    text: [\"cdkCopyToClipboard\", \"text\"],\n    attempts: [\"cdkCopyToClipboardAttempts\", \"attempts\"]\n  },\n  outputs: {\n    copied: \"cdkCopyToClipboardCopied\"\n  }\n});\nCdkCopyToClipboard.ctorParameters = () => [{\n  type: Clipboard\n}, {\n  type: NgZone\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [CKD_COPY_TO_CLIPBOARD_CONFIG]\n  }]\n}];\nCdkCopyToClipboard.propDecorators = {\n  text: [{\n    type: Input,\n    args: ['cdkCopyToClipboard']\n  }],\n  attempts: [{\n    type: Input,\n    args: ['cdkCopyToClipboardAttempts']\n  }],\n  copied: [{\n    type: Output,\n    args: ['cdkCopyToClipboardCopied']\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkCopyToClipboard, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkCopyToClipboard]',\n      host: {\n        '(click)': 'copy()'\n      }\n    }]\n  }], function () {\n    return [{\n      type: Clipboard\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [CKD_COPY_TO_CLIPBOARD_CONFIG]\n      }]\n    }];\n  }, {\n    text: [{\n      type: Input,\n      args: ['cdkCopyToClipboard']\n    }],\n    attempts: [{\n      type: Input,\n      args: ['cdkCopyToClipboardAttempts']\n    }],\n    copied: [{\n      type: Output,\n      args: ['cdkCopyToClipboardCopied']\n    }]\n  });\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass ClipboardModule {}\nClipboardModule.ɵfac = function ClipboardModule_Factory(t) {\n  return new (t || ClipboardModule)();\n};\nClipboardModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: ClipboardModule\n});\nClipboardModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClipboardModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [CdkCopyToClipboard],\n      exports: [CdkCopyToClipboard]\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClipboardModule, {\n    declarations: [CdkCopyToClipboard],\n    exports: [CdkCopyToClipboard]\n  });\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_COPY_TO_CLIPBOARD_CONFIG, CKD_COPY_TO_CLIPBOARD_CONFIG, CdkCopyToClipboard, Clipboard, ClipboardModule, PendingCopy };","map":{"version":3,"names":["i1","DOCUMENT","i0","Injectable","Inject","InjectionToken","EventEmitter","Directive","NgZone","Optional","Input","Output","NgModule","ɵngcc0","PendingCopy","constructor","text","_document","textarea","_textarea","createElement","styles","style","position","top","opacity","left","setAttribute","value","body","appendChild","copy","successful","currentFocus","activeElement","select","setSelectionRange","length","execCommand","focus","_a","destroy","parentNode","removeChild","undefined","Clipboard","document","pendingCopy","beginCopy","ɵfac","Clipboard_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","factory","token","providedIn","ctorParameters","type","decorators","args","ngDevMode","ɵsetClassMetadata","CDK_COPY_TO_CLIPBOARD_CONFIG","CKD_COPY_TO_CLIPBOARD_CONFIG","CdkCopyToClipboard","_clipboard","_ngZone","config","attempts","copied","_pending","Set","remainingAttempts","pending","add","attempt","_destroyed","_currentTimeout","runOutsideAngular","setTimeout","delete","emit","ngOnDestroy","clearTimeout","forEach","clear","CdkCopyToClipboard_Factory","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","selectors","hostBindings","CdkCopyToClipboard_HostBindings","rf","ctx","ɵɵlistener","CdkCopyToClipboard_click_HostBindingHandler","inputs","outputs","propDecorators","selector","host","ClipboardModule","ClipboardModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","declarations","exports","ngJitMode","ɵɵsetNgModuleScope"],"sources":["/home/ceo/mmmm/createyourevent/node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/clipboard.js"],"sourcesContent":["import * as i1 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, InjectionToken, EventEmitter, Directive, NgZone, Optional, Input, Output, NgModule } from '@angular/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A pending copy-to-clipboard operation.\n *\n * The implementation of copying text to the clipboard modifies the DOM and\n * forces a relayout. This relayout can take too long if the string is large,\n * causing the execCommand('copy') to happen too long after the user clicked.\n * This results in the browser refusing to copy. This object lets the\n * relayout happen in a separate tick from copying by providing a copy function\n * that can be called later.\n *\n * Destroy must be called when no longer in use, regardless of whether `copy` is\n * called.\n */\nimport * as ɵngcc0 from '@angular/core';\nclass PendingCopy {\n    constructor(text, _document) {\n        this._document = _document;\n        const textarea = this._textarea = this._document.createElement('textarea');\n        const styles = textarea.style;\n        // Hide the element for display and accessibility. Set a fixed position so the page layout\n        // isn't affected. We use `fixed` with `top: 0`, because focus is moved into the textarea\n        // for a split second and if it's off-screen, some browsers will attempt to scroll it into view.\n        styles.position = 'fixed';\n        styles.top = styles.opacity = '0';\n        styles.left = '-999em';\n        textarea.setAttribute('aria-hidden', 'true');\n        textarea.value = text;\n        this._document.body.appendChild(textarea);\n    }\n    /** Finishes copying the text. */\n    copy() {\n        const textarea = this._textarea;\n        let successful = false;\n        try { // Older browsers could throw if copy is not supported.\n            if (textarea) {\n                const currentFocus = this._document.activeElement;\n                textarea.select();\n                textarea.setSelectionRange(0, textarea.value.length);\n                successful = this._document.execCommand('copy');\n                if (currentFocus) {\n                    currentFocus.focus();\n                }\n            }\n        }\n        catch (_a) {\n            // Discard error.\n            // Initial setting of {@code successful} will represent failure here.\n        }\n        return successful;\n    }\n    /** Cleans up DOM changes used to perform the copy operation. */\n    destroy() {\n        const textarea = this._textarea;\n        if (textarea) {\n            if (textarea.parentNode) {\n                textarea.parentNode.removeChild(textarea);\n            }\n            this._textarea = undefined;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A service for copying text to the clipboard.\n */\nclass Clipboard {\n    constructor(document) {\n        this._document = document;\n    }\n    /**\n     * Copies the provided text into the user's clipboard.\n     *\n     * @param text The string to copy.\n     * @returns Whether the operation was successful.\n     */\n    copy(text) {\n        const pendingCopy = this.beginCopy(text);\n        const successful = pendingCopy.copy();\n        pendingCopy.destroy();\n        return successful;\n    }\n    /**\n     * Prepares a string to be copied later. This is useful for large strings\n     * which take too long to successfully render and be copied in the same tick.\n     *\n     * The caller must call `destroy` on the returned `PendingCopy`.\n     *\n     * @param text The string to copy.\n     * @returns the pending copy operation.\n     */\n    beginCopy(text) {\n        return new PendingCopy(text, this._document);\n    }\n}\nClipboard.ɵfac = function Clipboard_Factory(t) { return new (t || Clipboard)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nClipboard.ɵprov = i0.ɵɵdefineInjectable({ factory: function Clipboard_Factory() { return new Clipboard(i0.ɵɵinject(i1.DOCUMENT)); }, token: Clipboard, providedIn: \"root\" });\nClipboard.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Clipboard, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to provide the default options to `CdkCopyToClipboard`. */\nconst CDK_COPY_TO_CLIPBOARD_CONFIG = new InjectionToken('CDK_COPY_TO_CLIPBOARD_CONFIG');\n/**\n * @deprecated Use `CDK_COPY_TO_CLIPBOARD_CONFIG` instead.\n * @breaking-change 13.0.0\n */\nconst CKD_COPY_TO_CLIPBOARD_CONFIG = CDK_COPY_TO_CLIPBOARD_CONFIG;\n/**\n * Provides behavior for a button that when clicked copies content into user's\n * clipboard.\n */\nclass CdkCopyToClipboard {\n    constructor(_clipboard, _ngZone, config) {\n        this._clipboard = _clipboard;\n        this._ngZone = _ngZone;\n        /** Content to be copied. */\n        this.text = '';\n        /**\n         * How many times to attempt to copy the text. This may be necessary for longer text, because\n         * the browser needs time to fill an intermediate textarea element and copy the content.\n         */\n        this.attempts = 1;\n        /**\n         * Emits when some text is copied to the clipboard. The\n         * emitted value indicates whether copying was successful.\n         */\n        this.copied = new EventEmitter();\n        /** Copies that are currently being attempted. */\n        this._pending = new Set();\n        if (config && config.attempts != null) {\n            this.attempts = config.attempts;\n        }\n    }\n    /** Copies the current text to the clipboard. */\n    copy(attempts = this.attempts) {\n        if (attempts > 1) {\n            let remainingAttempts = attempts;\n            const pending = this._clipboard.beginCopy(this.text);\n            this._pending.add(pending);\n            const attempt = () => {\n                const successful = pending.copy();\n                if (!successful && --remainingAttempts && !this._destroyed) {\n                    // We use 1 for the timeout since it's more predictable when flushing in unit tests.\n                    this._currentTimeout = this._ngZone.runOutsideAngular(() => setTimeout(attempt, 1));\n                }\n                else {\n                    this._currentTimeout = null;\n                    this._pending.delete(pending);\n                    pending.destroy();\n                    this.copied.emit(successful);\n                }\n            };\n            attempt();\n        }\n        else {\n            this.copied.emit(this._clipboard.copy(this.text));\n        }\n    }\n    ngOnDestroy() {\n        if (this._currentTimeout) {\n            clearTimeout(this._currentTimeout);\n        }\n        this._pending.forEach(copy => copy.destroy());\n        this._pending.clear();\n        this._destroyed = true;\n    }\n}\nCdkCopyToClipboard.ɵfac = function CdkCopyToClipboard_Factory(t) { return new (t || CdkCopyToClipboard)(ɵngcc0.ɵɵdirectiveInject(Clipboard), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(CKD_COPY_TO_CLIPBOARD_CONFIG, 8)); };\nCdkCopyToClipboard.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkCopyToClipboard, selectors: [[\"\", \"cdkCopyToClipboard\", \"\"]], hostBindings: function CdkCopyToClipboard_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function CdkCopyToClipboard_click_HostBindingHandler() { return ctx.copy(); });\n    } }, inputs: { text: [\"cdkCopyToClipboard\", \"text\"], attempts: [\"cdkCopyToClipboardAttempts\", \"attempts\"] }, outputs: { copied: \"cdkCopyToClipboardCopied\" } });\nCdkCopyToClipboard.ctorParameters = () => [\n    { type: Clipboard },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CKD_COPY_TO_CLIPBOARD_CONFIG,] }] }\n];\nCdkCopyToClipboard.propDecorators = {\n    text: [{ type: Input, args: ['cdkCopyToClipboard',] }],\n    attempts: [{ type: Input, args: ['cdkCopyToClipboardAttempts',] }],\n    copied: [{ type: Output, args: ['cdkCopyToClipboardCopied',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkCopyToClipboard, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkCopyToClipboard]',\n                host: {\n                    '(click)': 'copy()'\n                }\n            }]\n    }], function () { return [{ type: Clipboard }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CKD_COPY_TO_CLIPBOARD_CONFIG]\n            }] }]; }, { text: [{\n            type: Input,\n            args: ['cdkCopyToClipboard']\n        }], attempts: [{\n            type: Input,\n            args: ['cdkCopyToClipboardAttempts']\n        }], copied: [{\n            type: Output,\n            args: ['cdkCopyToClipboardCopied']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass ClipboardModule {\n}\nClipboardModule.ɵfac = function ClipboardModule_Factory(t) { return new (t || ClipboardModule)(); };\nClipboardModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ClipboardModule });\nClipboardModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClipboardModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [CdkCopyToClipboard],\n                exports: [CdkCopyToClipboard]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClipboardModule, { declarations: [CdkCopyToClipboard], exports: [CdkCopyToClipboard] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_COPY_TO_CLIPBOARD_CONFIG, CKD_COPY_TO_CLIPBOARD_CONFIG, CdkCopyToClipboard, Clipboard, ClipboardModule, PendingCopy };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}