{"ast":null,"code":"import { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getAddressIdentifier } from '../address.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport class AddressService {\n  constructor(http, applicationConfigService) {\n    this.http = http;\n    this.applicationConfigService = applicationConfigService;\n    this.resourceUrl = this.applicationConfigService.getEndpointFor('api/addresses');\n  }\n  create(address) {\n    return this.http.post(this.resourceUrl, address, {\n      observe: 'response'\n    });\n  }\n  update(address) {\n    return this.http.put(`${this.resourceUrl}/${getAddressIdentifier(address)}`, address, {\n      observe: 'response'\n    });\n  }\n  partialUpdate(address) {\n    return this.http.patch(`${this.resourceUrl}/${getAddressIdentifier(address)}`, address, {\n      observe: 'response'\n    });\n  }\n  find(id) {\n    return this.http.get(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  query(req) {\n    const options = createRequestOption(req);\n    return this.http.get(this.resourceUrl, {\n      params: options,\n      observe: 'response'\n    });\n  }\n  delete(id) {\n    return this.http.delete(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  addAddressToCollectionIfMissing(addressCollection, ...addressesToCheck) {\n    const addresses = addressesToCheck.filter(isPresent);\n    if (addresses.length > 0) {\n      const addressCollectionIdentifiers = addressCollection.map(addressItem => getAddressIdentifier(addressItem));\n      const addressesToAdd = addresses.filter(addressItem => {\n        const addressIdentifier = getAddressIdentifier(addressItem);\n        if (addressIdentifier == null || addressCollectionIdentifiers.includes(addressIdentifier)) {\n          return false;\n        }\n        addressCollectionIdentifiers.push(addressIdentifier);\n        return true;\n      });\n      return [...addressesToAdd, ...addressCollection];\n    }\n    return addressCollection;\n  }\n}\nAddressService.ɵfac = function AddressService_Factory(t) {\n  return new (t || AddressService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n};\nAddressService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AddressService,\n  factory: AddressService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAIA,SAASA,SAAS,QAAQ,yBAAyB;AAEnD,SAASC,mBAAmB,QAAQ,+BAA+B;AACnE,SAAmBC,oBAAoB,QAAQ,kBAAkB;;;;AAMjE,OAAM,MAAOC,cAAc;EAGzBC,YAAsBC,IAAgB,EAAYC,wBAAkD;IAA9E,SAAI,GAAJD,IAAI;IAAwB,6BAAwB,GAAxBC,wBAAwB;IAFhE,gBAAW,GAAG,IAAI,CAACA,wBAAwB,CAACC,cAAc,CAAC,eAAe,CAAC;EAEkB;EAEvGC,MAAM,CAACC,OAAiB;IACtB,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAW,IAAI,CAACC,WAAW,EAAEF,OAAO,EAAE;MAAEG,OAAO,EAAE;IAAU,CAAE,CAAC;EACrF;EAEAC,MAAM,CAACJ,OAAiB;IACtB,OAAO,IAAI,CAACJ,IAAI,CAACS,GAAG,CAAW,GAAG,IAAI,CAACH,WAAW,IAAIT,oBAAoB,CAACO,OAAO,CAAW,EAAE,EAAEA,OAAO,EAAE;MAAEG,OAAO,EAAE;IAAU,CAAE,CAAC;EACpI;EAEAG,aAAa,CAACN,OAAiB;IAC7B,OAAO,IAAI,CAACJ,IAAI,CAACW,KAAK,CAAW,GAAG,IAAI,CAACL,WAAW,IAAIT,oBAAoB,CAACO,OAAO,CAAW,EAAE,EAAEA,OAAO,EAAE;MAAEG,OAAO,EAAE;IAAU,CAAE,CAAC;EACtI;EAEAK,IAAI,CAACC,EAAU;IACb,OAAO,IAAI,CAACb,IAAI,CAACc,GAAG,CAAW,GAAG,IAAI,CAACR,WAAW,IAAIO,EAAE,EAAE,EAAE;MAAEN,OAAO,EAAE;IAAU,CAAE,CAAC;EACtF;EAEAQ,KAAK,CAACC,GAAS;IACb,MAAMC,OAAO,GAAGrB,mBAAmB,CAACoB,GAAG,CAAC;IACxC,OAAO,IAAI,CAAChB,IAAI,CAACc,GAAG,CAAa,IAAI,CAACR,WAAW,EAAE;MAAEY,MAAM,EAAED,OAAO;MAAEV,OAAO,EAAE;IAAU,CAAE,CAAC;EAC9F;EAEAY,MAAM,CAACN,EAAU;IACf,OAAO,IAAI,CAACb,IAAI,CAACmB,MAAM,CAAC,GAAG,IAAI,CAACb,WAAW,IAAIO,EAAE,EAAE,EAAE;MAAEN,OAAO,EAAE;IAAU,CAAE,CAAC;EAC/E;EAEAa,+BAA+B,CAACC,iBAA6B,EAAE,GAAGC,gBAAiD;IACjH,MAAMC,SAAS,GAAeD,gBAAgB,CAACE,MAAM,CAAC7B,SAAS,CAAC;IAChE,IAAI4B,SAAS,CAACE,MAAM,GAAG,CAAC,EAAE;MACxB,MAAMC,4BAA4B,GAAGL,iBAAiB,CAACM,GAAG,CAACC,WAAW,IAAI/B,oBAAoB,CAAC+B,WAAW,CAAE,CAAC;MAC7G,MAAMC,cAAc,GAAGN,SAAS,CAACC,MAAM,CAACI,WAAW,IAAG;QACpD,MAAME,iBAAiB,GAAGjC,oBAAoB,CAAC+B,WAAW,CAAC;QAC3D,IAAIE,iBAAiB,IAAI,IAAI,IAAIJ,4BAA4B,CAACK,QAAQ,CAACD,iBAAiB,CAAC,EAAE;UACzF,OAAO,KAAK;;QAEdJ,4BAA4B,CAACM,IAAI,CAACF,iBAAiB,CAAC;QACpD,OAAO,IAAI;MACb,CAAC,CAAC;MACF,OAAO,CAAC,GAAGD,cAAc,EAAE,GAAGR,iBAAiB,CAAC;;IAElD,OAAOA,iBAAiB;EAC1B;;;mBA7CWvB,cAAc;AAAA;;SAAdA,cAAc;EAAAmC,SAAdnC,cAAc;EAAAoC,YADD;AAAM","names":["isPresent","createRequestOption","getAddressIdentifier","AddressService","constructor","http","applicationConfigService","getEndpointFor","create","address","post","resourceUrl","observe","update","put","partialUpdate","patch","find","id","get","query","req","options","params","delete","addAddressToCollectionIfMissing","addressCollection","addressesToCheck","addresses","filter","length","addressCollectionIdentifiers","map","addressItem","addressesToAdd","addressIdentifier","includes","push","factory","providedIn"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/entities/address/service/address.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { isPresent } from 'app/core/util/operators';\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { IAddress, getAddressIdentifier } from '../address.model';\n\nexport type EntityResponseType = HttpResponse<IAddress>;\nexport type EntityArrayResponseType = HttpResponse<IAddress[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class AddressService {\n  protected resourceUrl = this.applicationConfigService.getEndpointFor('api/addresses');\n\n  constructor(protected http: HttpClient, protected applicationConfigService: ApplicationConfigService) {}\n\n  create(address: IAddress): Observable<EntityResponseType> {\n    return this.http.post<IAddress>(this.resourceUrl, address, { observe: 'response' });\n  }\n\n  update(address: IAddress): Observable<EntityResponseType> {\n    return this.http.put<IAddress>(`${this.resourceUrl}/${getAddressIdentifier(address) as number}`, address, { observe: 'response' });\n  }\n\n  partialUpdate(address: IAddress): Observable<EntityResponseType> {\n    return this.http.patch<IAddress>(`${this.resourceUrl}/${getAddressIdentifier(address) as number}`, address, { observe: 'response' });\n  }\n\n  find(id: number): Observable<EntityResponseType> {\n    return this.http.get<IAddress>(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  query(req?: any): Observable<EntityArrayResponseType> {\n    const options = createRequestOption(req);\n    return this.http.get<IAddress[]>(this.resourceUrl, { params: options, observe: 'response' });\n  }\n\n  delete(id: number): Observable<HttpResponse<{}>> {\n    return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  addAddressToCollectionIfMissing(addressCollection: IAddress[], ...addressesToCheck: (IAddress | null | undefined)[]): IAddress[] {\n    const addresses: IAddress[] = addressesToCheck.filter(isPresent);\n    if (addresses.length > 0) {\n      const addressCollectionIdentifiers = addressCollection.map(addressItem => getAddressIdentifier(addressItem)!);\n      const addressesToAdd = addresses.filter(addressItem => {\n        const addressIdentifier = getAddressIdentifier(addressItem);\n        if (addressIdentifier == null || addressCollectionIdentifiers.includes(addressIdentifier)) {\n          return false;\n        }\n        addressCollectionIdentifiers.push(addressIdentifier);\n        return true;\n      });\n      return [...addressesToAdd, ...addressCollection];\n    }\n    return addressCollection;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}