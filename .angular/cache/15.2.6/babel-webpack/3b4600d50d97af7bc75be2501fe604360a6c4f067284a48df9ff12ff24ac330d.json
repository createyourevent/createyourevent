{"ast":null,"code":"import { map, shareReplay } from 'rxjs/operators';\nimport { SERVER_API_URL } from 'app/app.constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProfileService {\n  constructor(http) {\n    this.http = http;\n    this.infoUrl = SERVER_API_URL + 'management/info';\n  }\n  getProfileInfo() {\n    if (this.profileInfo$) {\n      return this.profileInfo$;\n    }\n    this.profileInfo$ = this.http.get(this.infoUrl).pipe(map(response => {\n      const profileInfo = {\n        activeProfiles: response.activeProfiles,\n        inProduction: response.activeProfiles && response.activeProfiles.includes('prod'),\n        swaggerEnabled: response.activeProfiles && response.activeProfiles.includes('swagger')\n      };\n      if (response.activeProfiles && response['display-ribbon-on-profiles']) {\n        const displayRibbonOnProfiles = response['display-ribbon-on-profiles'].split(',');\n        const ribbonProfiles = displayRibbonOnProfiles.filter(profile => response.activeProfiles && response.activeProfiles.includes(profile));\n        if (ribbonProfiles.length > 0) {\n          profileInfo.ribbonEnv = ribbonProfiles[0];\n        }\n      }\n      return profileInfo;\n    }), shareReplay());\n    return this.profileInfo$;\n  }\n}\nProfileService.ɵfac = function ProfileService_Factory(t) {\n  return new (t || ProfileService)(i0.ɵɵinject(i1.HttpClient));\n};\nProfileService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProfileService,\n  factory: ProfileService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,GAAG,EAAEC,WAAW,QAAQ,gBAAgB;AAGjD,SAASC,cAAc,QAAQ,mBAAmB;;;AAIlD,OAAM,MAAOC,cAAc;EAIzBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAHhB,YAAO,GAAGH,cAAc,GAAG,iBAAiB;EAGb;EAEvCI,cAAc;IACZ,IAAI,IAAI,CAACC,YAAY,EAAE;MACrB,OAAO,IAAI,CAACA,YAAY;;IAG1B,IAAI,CAACA,YAAY,GAAG,IAAI,CAACF,IAAI,CAACG,GAAG,CAAe,IAAI,CAACC,OAAO,CAAC,CAACC,IAAI,CAChEV,GAAG,CAAEW,QAAsB,IAAI;MAC7B,MAAMC,WAAW,GAAgB;QAC/BC,cAAc,EAAEF,QAAQ,CAACE,cAAc;QACvCC,YAAY,EAAEH,QAAQ,CAACE,cAAc,IAAIF,QAAQ,CAACE,cAAc,CAACE,QAAQ,CAAC,MAAM,CAAC;QACjFC,cAAc,EAAEL,QAAQ,CAACE,cAAc,IAAIF,QAAQ,CAACE,cAAc,CAACE,QAAQ,CAAC,SAAS;OACtF;MACD,IAAIJ,QAAQ,CAACE,cAAc,IAAIF,QAAQ,CAAC,4BAA4B,CAAC,EAAE;QACrE,MAAMM,uBAAuB,GAAGN,QAAQ,CAAC,4BAA4B,CAAC,CAACO,KAAK,CAAC,GAAG,CAAC;QACjF,MAAMC,cAAc,GAAGF,uBAAuB,CAACG,MAAM,CACnDC,OAAO,IAAIV,QAAQ,CAACE,cAAc,IAAIF,QAAQ,CAACE,cAAc,CAACE,QAAQ,CAACM,OAAO,CAAC,CAChF;QACD,IAAIF,cAAc,CAACG,MAAM,GAAG,CAAC,EAAE;UAC7BV,WAAW,CAACW,SAAS,GAAGJ,cAAc,CAAC,CAAC,CAAC;;;MAG7C,OAAOP,WAAW;IACpB,CAAC,CAAC,EACFX,WAAW,EAAE,CACd;IACD,OAAO,IAAI,CAACM,YAAY;EAC1B;;;mBAhCWJ,cAAc;AAAA;;SAAdA,cAAc;EAAAqB,SAAdrB,cAAc;EAAAsB,YADD;AAAM","names":["map","shareReplay","SERVER_API_URL","ProfileService","constructor","http","getProfileInfo","profileInfo$","get","infoUrl","pipe","response","profileInfo","activeProfiles","inProduction","includes","swaggerEnabled","displayRibbonOnProfiles","split","ribbonProfiles","filter","profile","length","ribbonEnv","factory","providedIn"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/layouts/profiles/profile.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { map, shareReplay } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\n\nimport { SERVER_API_URL } from 'app/app.constants';\nimport { ProfileInfo, InfoResponse } from './profile-info.model';\n\n@Injectable({ providedIn: 'root' })\nexport class ProfileService {\n  private infoUrl = SERVER_API_URL + 'management/info';\n  private profileInfo$!: Observable<ProfileInfo>;\n\n  constructor(private http: HttpClient) {}\n\n  getProfileInfo(): Observable<ProfileInfo> {\n    if (this.profileInfo$) {\n      return this.profileInfo$;\n    }\n\n    this.profileInfo$ = this.http.get<InfoResponse>(this.infoUrl).pipe(\n      map((response: InfoResponse) => {\n        const profileInfo: ProfileInfo = {\n          activeProfiles: response.activeProfiles,\n          inProduction: response.activeProfiles && response.activeProfiles.includes('prod'),\n          swaggerEnabled: response.activeProfiles && response.activeProfiles.includes('swagger')\n        };\n        if (response.activeProfiles && response['display-ribbon-on-profiles']) {\n          const displayRibbonOnProfiles = response['display-ribbon-on-profiles'].split(',');\n          const ribbonProfiles = displayRibbonOnProfiles.filter(\n            profile => response.activeProfiles && response.activeProfiles.includes(profile)\n          );\n          if (ribbonProfiles.length > 0) {\n            profileInfo.ribbonEnv = ribbonProfiles[0];\n          }\n        }\n        return profileInfo;\n      }),\n      shareReplay()\n    );\n    return this.profileInfo$;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}