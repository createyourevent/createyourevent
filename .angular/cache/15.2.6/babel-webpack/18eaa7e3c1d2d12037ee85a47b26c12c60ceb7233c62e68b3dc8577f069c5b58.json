{"ast":null,"code":"import { filter, switchMap, distinctUntilChanged, shareReplay, map } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, Inject, PLATFORM_ID, NgZone, Optional, APP_INITIALIZER, NgModule } from '@angular/core';\nimport { Subject, of } from 'rxjs';\nimport { isPlatformBrowser } from '@angular/common';\nimport * as ɵngcc0 from '@angular/core';\nvar StorageStrategies;\n(function (StorageStrategies) {\n  StorageStrategies[\"Local\"] = \"local_strategy\";\n  StorageStrategies[\"Session\"] = \"session_strategy\";\n  StorageStrategies[\"InMemory\"] = \"in_memory_strategy\";\n})(StorageStrategies || (StorageStrategies = {}));\nclass CompatHelper {\n  static isStorageAvailable(storage) {\n    let available = true;\n    try {\n      if (typeof storage === 'object') {\n        storage.setItem('test-storage', 'foobar');\n        storage.removeItem('test-storage');\n      } else available = false;\n    } catch (e) {\n      available = false;\n    }\n    return available;\n  }\n}\nfunction noop() {}\nconst DefaultPrefix = 'ngx-webstorage';\nconst DefaultSeparator = '|';\nconst DefaultIsCaseSensitive = false;\nclass StorageKeyManager {\n  static normalize(raw) {\n    raw = StorageKeyManager.isCaseSensitive ? raw : raw.toLowerCase();\n    return `${StorageKeyManager.prefix}${StorageKeyManager.separator}${raw}`;\n  }\n  static isNormalizedKey(key) {\n    return key.indexOf(StorageKeyManager.prefix + StorageKeyManager.separator) === 0;\n  }\n  static setPrefix(prefix) {\n    StorageKeyManager.prefix = prefix;\n  }\n  static setSeparator(separator) {\n    StorageKeyManager.separator = separator;\n  }\n  static setCaseSensitive(enable) {\n    StorageKeyManager.isCaseSensitive = enable;\n  }\n  static consumeConfiguration(config) {\n    if ('prefix' in config) this.setPrefix(config.prefix);\n    if ('separator' in config) this.setSeparator(config.separator);\n    if ('caseSensitive' in config) this.setCaseSensitive(config.caseSensitive);\n  }\n}\nStorageKeyManager.prefix = DefaultPrefix;\nStorageKeyManager.separator = DefaultSeparator;\nStorageKeyManager.isCaseSensitive = DefaultIsCaseSensitive;\nclass SyncStorage {\n  constructor(strategy) {\n    this.strategy = strategy;\n  }\n  retrieve(key) {\n    let value;\n    this.strategy.get(StorageKeyManager.normalize(key)).subscribe(result => value = typeof result === 'undefined' ? null : result);\n    return value;\n  }\n  store(key, value) {\n    this.strategy.set(StorageKeyManager.normalize(key), value).subscribe(noop);\n    return value;\n  }\n  clear(key) {\n    if (key !== undefined) this.strategy.del(StorageKeyManager.normalize(key)).subscribe(noop);else this.strategy.clear().subscribe(noop);\n  }\n  getStrategyName() {\n    return this.strategy.name;\n  }\n  observe(key) {\n    key = StorageKeyManager.normalize(key);\n    return this.strategy.keyChanges.pipe(filter(changed => changed === null || changed === key), switchMap(() => this.strategy.get(key)), distinctUntilChanged(), shareReplay());\n  }\n}\nclass AsyncStorage {\n  constructor(strategy) {\n    this.strategy = strategy;\n  }\n  retrieve(key) {\n    return this.strategy.get(StorageKeyManager.normalize(key)).pipe(map(value => typeof value === 'undefined' ? null : value));\n  }\n  store(key, value) {\n    return this.strategy.set(StorageKeyManager.normalize(key), value);\n  }\n  clear(key) {\n    return key !== undefined ? this.strategy.del(StorageKeyManager.normalize(key)) : this.strategy.clear();\n  }\n  getStrategyName() {\n    return this.strategy.name;\n  }\n  observe(key) {\n    key = StorageKeyManager.normalize(key);\n    return this.strategy.keyChanges.pipe(filter(changed => changed === null || changed === key), switchMap(() => this.strategy.get(key)), distinctUntilChanged(), shareReplay());\n  }\n}\nclass StrategyCacheService {\n  constructor() {\n    this.caches = {};\n  }\n  get(strategyName, key) {\n    return this.getCacheStore(strategyName)[key];\n  }\n  set(strategyName, key, value) {\n    this.getCacheStore(strategyName)[key] = value;\n  }\n  del(strategyName, key) {\n    delete this.getCacheStore(strategyName)[key];\n  }\n  clear(strategyName) {\n    this.caches[strategyName] = {};\n  }\n  getCacheStore(strategyName) {\n    if (strategyName in this.caches) return this.caches[strategyName];\n    return this.caches[strategyName] = {};\n  }\n}\nStrategyCacheService.ɵfac = function StrategyCacheService_Factory(t) {\n  return new (t || StrategyCacheService)();\n};\nStrategyCacheService.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function StrategyCacheService_Factory() {\n    return new StrategyCacheService();\n  },\n  token: StrategyCacheService,\n  providedIn: \"root\"\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(StrategyCacheService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\nconst LOCAL_STORAGE = new InjectionToken('window_local_storage');\nfunction getLocalStorage() {\n  return typeof window !== 'undefined' ? window.localStorage : null;\n}\nconst LocalStorageProvider = {\n  provide: LOCAL_STORAGE,\n  useFactory: getLocalStorage\n};\nconst SESSION_STORAGE = new InjectionToken('window_session_storage');\nfunction getSessionStorage() {\n  return typeof window !== 'undefined' ? window.sessionStorage : null;\n}\nconst SessionStorageProvider = {\n  provide: SESSION_STORAGE,\n  useFactory: getSessionStorage\n};\nclass BaseSyncStorageStrategy {\n  constructor(storage, cache) {\n    this.storage = storage;\n    this.cache = cache;\n    this.keyChanges = new Subject();\n  }\n  get isAvailable() {\n    if (this._isAvailable === undefined) this._isAvailable = CompatHelper.isStorageAvailable(this.storage);\n    return this._isAvailable;\n  }\n  get(key) {\n    let data = this.cache.get(this.name, key);\n    if (data !== undefined) return of(data);\n    try {\n      const item = this.storage.getItem(key);\n      if (item !== null) {\n        data = JSON.parse(item);\n        this.cache.set(this.name, key, data);\n      }\n    } catch (err) {\n      console.warn(err);\n    }\n    return of(data);\n  }\n  set(key, value) {\n    const data = JSON.stringify(value);\n    this.storage.setItem(key, data);\n    this.cache.set(this.name, key, value);\n    this.keyChanges.next(key);\n    return of(value);\n  }\n  del(key) {\n    this.storage.removeItem(key);\n    this.cache.del(this.name, key);\n    this.keyChanges.next(key);\n    return of(null);\n  }\n  clear() {\n    this.storage.clear();\n    this.cache.clear(this.name);\n    this.keyChanges.next(null);\n    return of(null);\n  }\n}\nclass LocalStorageStrategy extends BaseSyncStorageStrategy {\n  constructor(storage, cache, platformId, zone) {\n    super(storage, cache);\n    this.storage = storage;\n    this.cache = cache;\n    this.platformId = platformId;\n    this.zone = zone;\n    this.name = LocalStorageStrategy.strategyName;\n    if (isPlatformBrowser(this.platformId)) this.listenExternalChanges();\n  }\n  listenExternalChanges() {\n    window.addEventListener('storage', event => this.zone.run(() => {\n      if (event.storageArea !== this.storage) return;\n      const key = event.key;\n      if (key !== null) this.cache.del(this.name, event.key);else this.cache.clear(this.name);\n      this.keyChanges.next(key);\n    }));\n  }\n}\nLocalStorageStrategy.ɵfac = function LocalStorageStrategy_Factory(t) {\n  return new (t || LocalStorageStrategy)(ɵngcc0.ɵɵinject(LOCAL_STORAGE), ɵngcc0.ɵɵinject(StrategyCacheService), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n};\nLocalStorageStrategy.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: LocalStorageStrategy,\n  factory: LocalStorageStrategy.ɵfac\n});\nLocalStorageStrategy.strategyName = StorageStrategies.Local;\nLocalStorageStrategy.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [LOCAL_STORAGE]\n  }]\n}, {\n  type: StrategyCacheService\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [PLATFORM_ID]\n  }]\n}, {\n  type: NgZone\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LocalStorageStrategy, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LOCAL_STORAGE]\n      }]\n    }, {\n      type: StrategyCacheService\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, null);\n})();\nclass SessionStorageStrategy extends BaseSyncStorageStrategy {\n  constructor(storage, cache, platformId, zone) {\n    super(storage, cache);\n    this.storage = storage;\n    this.cache = cache;\n    this.platformId = platformId;\n    this.zone = zone;\n    this.name = SessionStorageStrategy.strategyName;\n    if (isPlatformBrowser(this.platformId)) this.listenExternalChanges();\n  }\n  listenExternalChanges() {\n    window.addEventListener('storage', event => this.zone.run(() => {\n      if (event.storageArea !== this.storage) return;\n      const key = event.key;\n      if (event.key !== null) this.cache.del(this.name, event.key);else this.cache.clear(this.name);\n      this.keyChanges.next(key);\n    }));\n  }\n}\nSessionStorageStrategy.ɵfac = function SessionStorageStrategy_Factory(t) {\n  return new (t || SessionStorageStrategy)(ɵngcc0.ɵɵinject(SESSION_STORAGE), ɵngcc0.ɵɵinject(StrategyCacheService), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n};\nSessionStorageStrategy.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: SessionStorageStrategy,\n  factory: SessionStorageStrategy.ɵfac\n});\nSessionStorageStrategy.strategyName = StorageStrategies.Session;\nSessionStorageStrategy.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [SESSION_STORAGE]\n  }]\n}, {\n  type: StrategyCacheService\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [PLATFORM_ID]\n  }]\n}, {\n  type: NgZone\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SessionStorageStrategy, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [SESSION_STORAGE]\n      }]\n    }, {\n      type: StrategyCacheService\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, null);\n})();\nclass InMemoryStorageStrategy {\n  constructor(cache) {\n    this.cache = cache;\n    this.keyChanges = new Subject();\n    this.isAvailable = true;\n    this.name = InMemoryStorageStrategy.strategyName;\n  }\n  get(key) {\n    return of(this.cache.get(this.name, key));\n  }\n  set(key, value) {\n    this.cache.set(this.name, key, value);\n    this.keyChanges.next(key);\n    return of(value);\n  }\n  del(key) {\n    this.cache.del(this.name, key);\n    this.keyChanges.next(key);\n    return of(null);\n  }\n  clear() {\n    this.cache.clear(this.name);\n    this.keyChanges.next(null);\n    return of(null);\n  }\n}\nInMemoryStorageStrategy.ɵfac = function InMemoryStorageStrategy_Factory(t) {\n  return new (t || InMemoryStorageStrategy)(ɵngcc0.ɵɵinject(StrategyCacheService));\n};\nInMemoryStorageStrategy.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: InMemoryStorageStrategy,\n  factory: InMemoryStorageStrategy.ɵfac\n});\nInMemoryStorageStrategy.strategyName = StorageStrategies.InMemory;\nInMemoryStorageStrategy.ctorParameters = () => [{\n  type: StrategyCacheService,\n  decorators: [{\n    type: Inject,\n    args: [StrategyCacheService]\n  }]\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(InMemoryStorageStrategy, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: StrategyCacheService,\n      decorators: [{\n        type: Inject,\n        args: [StrategyCacheService]\n      }]\n    }];\n  }, null);\n})();\nconst STORAGE_STRATEGIES = new InjectionToken('STORAGE_STRATEGIES');\nconst Strategies = [{\n  provide: STORAGE_STRATEGIES,\n  useClass: InMemoryStorageStrategy,\n  multi: true\n}, {\n  provide: STORAGE_STRATEGIES,\n  useClass: LocalStorageStrategy,\n  multi: true\n}, {\n  provide: STORAGE_STRATEGIES,\n  useClass: SessionStorageStrategy,\n  multi: true\n}];\nconst StorageStrategyStubName = 'stub_strategy';\nclass StorageStrategyStub {\n  constructor(name) {\n    this.keyChanges = new Subject();\n    this.store = {};\n    this._available = true;\n    this.name = name || StorageStrategyStubName;\n  }\n  get isAvailable() {\n    return this._available;\n  }\n  get(key) {\n    return of(this.store[key]);\n  }\n  set(key, value) {\n    this.store[key] = value;\n    this.keyChanges.next(key);\n    return of(value);\n  }\n  del(key) {\n    delete this.store[key];\n    this.keyChanges.next(key);\n    return of(null);\n  }\n  clear() {\n    this.store = {};\n    this.keyChanges.next(null);\n    return of(null);\n  }\n}\nclass StorageStub {\n  constructor() {\n    this.store = {};\n  }\n  get length() {\n    return Object.keys(this.store).length;\n  }\n  clear() {\n    this.store = {};\n  }\n  getItem(key) {\n    return this.store[key] || null;\n  }\n  key(index) {\n    return Object.keys(this.store)[index];\n  }\n  removeItem(key) {\n    delete this.store[key];\n  }\n  setItem(key, value) {\n    this.store[key] = value;\n  }\n}\nconst InvalidStrategyError = 'invalid_strategy';\nclass StrategyIndex {\n  constructor(strategies) {\n    this.strategies = strategies;\n    this.registration$ = new Subject();\n    if (!strategies) strategies = [];\n    this.strategies = strategies.reverse().map((strategy, index, arr) => strategy.name).map((name, index, arr) => arr.indexOf(name) === index ? index : null).filter(index => index !== null).map(index => strategies[index]);\n  }\n  static get(name) {\n    if (!this.isStrategyRegistered(name)) throw Error(InvalidStrategyError);\n    let strategy = this.index[name];\n    if (!strategy.isAvailable) {\n      strategy = this.index[StorageStrategies.InMemory];\n    }\n    return strategy;\n  }\n  static set(name, strategy) {\n    this.index[name] = strategy;\n  }\n  static clear(name) {\n    if (name !== undefined) delete this.index[name];else this.index = {};\n  }\n  static isStrategyRegistered(name) {\n    return name in this.index;\n  }\n  static hasRegistredStrategies() {\n    return Object.keys(this.index).length > 0;\n  }\n  getStrategy(name) {\n    return StrategyIndex.get(name);\n  }\n  indexStrategies() {\n    this.strategies.forEach(strategy => this.register(strategy.name, strategy));\n  }\n  indexStrategy(name, overrideIfExists = false) {\n    if (StrategyIndex.isStrategyRegistered(name) && !overrideIfExists) return StrategyIndex.get(name);\n    const strategy = this.strategies.find(strategy => strategy.name === name);\n    if (!strategy) throw new Error(InvalidStrategyError);\n    this.register(name, strategy, overrideIfExists);\n    return strategy;\n  }\n  register(name, strategy, overrideIfExists = false) {\n    if (!StrategyIndex.isStrategyRegistered(name) || overrideIfExists) {\n      StrategyIndex.set(name, strategy);\n      this.registration$.next(name);\n    }\n  }\n}\nStrategyIndex.ɵfac = function StrategyIndex_Factory(t) {\n  return new (t || StrategyIndex)(ɵngcc0.ɵɵinject(STORAGE_STRATEGIES, 8));\n};\nStrategyIndex.index = {};\nStrategyIndex.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function StrategyIndex_Factory() {\n    return new StrategyIndex(i0.ɵɵinject(STORAGE_STRATEGIES, 8));\n  },\n  token: StrategyIndex,\n  providedIn: \"root\"\n});\nStrategyIndex.ctorParameters = () => [{\n  type: Array,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [STORAGE_STRATEGIES]\n  }]\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(StrategyIndex, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: Array,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [STORAGE_STRATEGIES]\n      }]\n    }];\n  }, null);\n})();\nclass LocalStorageService extends SyncStorage {}\nfunction buildService$1(index) {\n  const strategy = index.indexStrategy(StorageStrategies.Local);\n  return new SyncStorage(strategy);\n}\nconst LocalStorageServiceProvider = {\n  provide: LocalStorageService,\n  useFactory: buildService$1,\n  deps: [StrategyIndex]\n};\nclass SessionStorageService extends SyncStorage {}\nfunction buildService(index) {\n  const strategy = index.indexStrategy(StorageStrategies.Session);\n  return new SyncStorage(strategy);\n}\nconst SessionStorageServiceProvider = {\n  provide: SessionStorageService,\n  useFactory: buildService,\n  deps: [StrategyIndex]\n};\nclass DecoratorBuilder {\n  static buildSyncStrategyDecorator(strategyName, prototype, propName, key, defaultValue = null) {\n    const rawKey = key || propName;\n    let storageKey;\n    Object.defineProperty(prototype, propName, {\n      get: function () {\n        let value;\n        StrategyIndex.get(strategyName).get(getKey()).subscribe(result => value = result);\n        return value === undefined ? defaultValue : value;\n      },\n      set: function (value) {\n        StrategyIndex.get(strategyName).set(getKey(), value).subscribe(noop);\n      }\n    });\n    function getKey() {\n      if (storageKey !== undefined) return storageKey;\n      return storageKey = StorageKeyManager.normalize(rawKey);\n    }\n  }\n}\nfunction LocalStorage(key, defaultValue) {\n  return function (prototype, propName) {\n    DecoratorBuilder.buildSyncStrategyDecorator(StorageStrategies.Local, prototype, propName, key, defaultValue);\n  };\n}\nfunction SessionStorage(key, defaultValue) {\n  return function (prototype, propName) {\n    DecoratorBuilder.buildSyncStrategyDecorator(StorageStrategies.Session, prototype, propName, key, defaultValue);\n  };\n}\nconst Services = [LocalStorageServiceProvider, SessionStorageServiceProvider];\nconst LIB_CONFIG = new InjectionToken('ngx_webstorage_config');\nfunction appInit(index) {\n  index.indexStrategies();\n  return () => StrategyIndex.index;\n}\nclass NgxWebstorageModule {\n  constructor(index, config) {\n    if (config) StorageKeyManager.consumeConfiguration(config);else console.error('NgxWebstorage : Possible misconfiguration (The forRoot method usage is mandatory since the 3.0.0)');\n  }\n  static forRoot(config = {}) {\n    return {\n      ngModule: NgxWebstorageModule,\n      providers: [{\n        provide: LIB_CONFIG,\n        useValue: config\n      }, LocalStorageProvider, SessionStorageProvider, ...Services, ...Strategies, {\n        provide: APP_INITIALIZER,\n        useFactory: appInit,\n        deps: [StrategyIndex],\n        multi: true\n      }]\n    };\n  }\n}\nNgxWebstorageModule.ɵfac = function NgxWebstorageModule_Factory(t) {\n  return new (t || NgxWebstorageModule)(ɵngcc0.ɵɵinject(StrategyIndex), ɵngcc0.ɵɵinject(LIB_CONFIG, 8));\n};\nNgxWebstorageModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: NgxWebstorageModule\n});\nNgxWebstorageModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\nNgxWebstorageModule.ctorParameters = () => [{\n  type: StrategyIndex\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [LIB_CONFIG]\n  }]\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxWebstorageModule, [{\n    type: NgModule,\n    args: [{}]\n  }], function () {\n    return [{\n      type: StrategyIndex\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [LIB_CONFIG]\n      }]\n    }];\n  }, null);\n})();\n\n/*\n * Public API Surface of ngx-webstorage\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AsyncStorage, CompatHelper, InMemoryStorageStrategy, InvalidStrategyError, LIB_CONFIG, LOCAL_STORAGE, LocalStorage, LocalStorageService, LocalStorageStrategy, NgxWebstorageModule, SESSION_STORAGE, STORAGE_STRATEGIES, SessionStorage, SessionStorageService, SessionStorageStrategy, StorageStrategies, StorageStrategyStub, StorageStrategyStubName, StorageStub, StrategyCacheService, StrategyIndex, SyncStorage, appInit, getLocalStorage as ɵa, LocalStorageProvider as ɵb, getSessionStorage as ɵc, SessionStorageProvider as ɵd, Strategies as ɵe, buildService$1 as ɵf, LocalStorageServiceProvider as ɵg, buildService as ɵh, SessionStorageServiceProvider as ɵi, BaseSyncStorageStrategy as ɵj, STORAGE_STRATEGIES as ɵl, Services as ɵn };","map":{"version":3,"names":["filter","switchMap","distinctUntilChanged","shareReplay","map","i0","Injectable","InjectionToken","Inject","PLATFORM_ID","NgZone","Optional","APP_INITIALIZER","NgModule","Subject","of","isPlatformBrowser","ɵngcc0","StorageStrategies","CompatHelper","isStorageAvailable","storage","available","setItem","removeItem","e","noop","DefaultPrefix","DefaultSeparator","DefaultIsCaseSensitive","StorageKeyManager","normalize","raw","isCaseSensitive","toLowerCase","prefix","separator","isNormalizedKey","key","indexOf","setPrefix","setSeparator","setCaseSensitive","enable","consumeConfiguration","config","caseSensitive","SyncStorage","constructor","strategy","retrieve","value","get","subscribe","result","store","set","clear","undefined","del","getStrategyName","name","observe","keyChanges","pipe","changed","AsyncStorage","StrategyCacheService","caches","strategyName","getCacheStore","ɵfac","StrategyCacheService_Factory","t","ɵprov","ɵɵdefineInjectable","factory","token","providedIn","ngDevMode","ɵsetClassMetadata","type","args","LOCAL_STORAGE","getLocalStorage","window","localStorage","LocalStorageProvider","provide","useFactory","SESSION_STORAGE","getSessionStorage","sessionStorage","SessionStorageProvider","BaseSyncStorageStrategy","cache","isAvailable","_isAvailable","data","item","getItem","JSON","parse","err","console","warn","stringify","next","LocalStorageStrategy","platformId","zone","listenExternalChanges","addEventListener","event","run","storageArea","LocalStorageStrategy_Factory","ɵɵinject","Local","ctorParameters","decorators","SessionStorageStrategy","SessionStorageStrategy_Factory","Session","InMemoryStorageStrategy","InMemoryStorageStrategy_Factory","InMemory","STORAGE_STRATEGIES","Strategies","useClass","multi","StorageStrategyStubName","StorageStrategyStub","_available","StorageStub","length","Object","keys","index","InvalidStrategyError","StrategyIndex","strategies","registration$","reverse","arr","isStrategyRegistered","Error","hasRegistredStrategies","getStrategy","indexStrategies","forEach","register","indexStrategy","overrideIfExists","find","StrategyIndex_Factory","Array","LocalStorageService","buildService$1","LocalStorageServiceProvider","deps","SessionStorageService","buildService","SessionStorageServiceProvider","DecoratorBuilder","buildSyncStrategyDecorator","prototype","propName","defaultValue","rawKey","storageKey","defineProperty","getKey","LocalStorage","SessionStorage","Services","LIB_CONFIG","appInit","NgxWebstorageModule","error","forRoot","ngModule","providers","useValue","NgxWebstorageModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","ɵa","ɵb","ɵc","ɵd","ɵe","ɵf","ɵg","ɵh","ɵi","ɵj","ɵl","ɵn"],"sources":["/home/ceo/mmmm/createyourevent/node_modules/ngx-webstorage/__ivy_ngcc__/fesm2015/ngx-webstorage.js"],"sourcesContent":["import { filter, switchMap, distinctUntilChanged, shareReplay, map } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, Inject, PLATFORM_ID, NgZone, Optional, APP_INITIALIZER, NgModule } from '@angular/core';\nimport { Subject, of } from 'rxjs';\nimport { isPlatformBrowser } from '@angular/common';\n\nimport * as ɵngcc0 from '@angular/core';\nvar StorageStrategies;\n(function (StorageStrategies) {\n    StorageStrategies[\"Local\"] = \"local_strategy\";\n    StorageStrategies[\"Session\"] = \"session_strategy\";\n    StorageStrategies[\"InMemory\"] = \"in_memory_strategy\";\n})(StorageStrategies || (StorageStrategies = {}));\n\nclass CompatHelper {\n    static isStorageAvailable(storage) {\n        let available = true;\n        try {\n            if (typeof storage === 'object') {\n                storage.setItem('test-storage', 'foobar');\n                storage.removeItem('test-storage');\n            }\n            else\n                available = false;\n        }\n        catch (e) {\n            available = false;\n        }\n        return available;\n    }\n}\n\nfunction noop() { }\n\nconst DefaultPrefix = 'ngx-webstorage';\nconst DefaultSeparator = '|';\nconst DefaultIsCaseSensitive = false;\n\nclass StorageKeyManager {\n    static normalize(raw) {\n        raw = StorageKeyManager.isCaseSensitive ? raw : raw.toLowerCase();\n        return `${StorageKeyManager.prefix}${StorageKeyManager.separator}${raw}`;\n    }\n    static isNormalizedKey(key) {\n        return key.indexOf(StorageKeyManager.prefix + StorageKeyManager.separator) === 0;\n    }\n    static setPrefix(prefix) {\n        StorageKeyManager.prefix = prefix;\n    }\n    static setSeparator(separator) {\n        StorageKeyManager.separator = separator;\n    }\n    static setCaseSensitive(enable) {\n        StorageKeyManager.isCaseSensitive = enable;\n    }\n    static consumeConfiguration(config) {\n        if ('prefix' in config)\n            this.setPrefix(config.prefix);\n        if ('separator' in config)\n            this.setSeparator(config.separator);\n        if ('caseSensitive' in config)\n            this.setCaseSensitive(config.caseSensitive);\n    }\n}\nStorageKeyManager.prefix = DefaultPrefix;\nStorageKeyManager.separator = DefaultSeparator;\nStorageKeyManager.isCaseSensitive = DefaultIsCaseSensitive;\n\nclass SyncStorage {\n    constructor(strategy) {\n        this.strategy = strategy;\n    }\n    retrieve(key) {\n        let value;\n        this.strategy.get(StorageKeyManager.normalize(key)).subscribe((result) => value = typeof result === 'undefined' ? null : result);\n        return value;\n    }\n    store(key, value) {\n        this.strategy.set(StorageKeyManager.normalize(key), value).subscribe(noop);\n        return value;\n    }\n    clear(key) {\n        if (key !== undefined)\n            this.strategy.del(StorageKeyManager.normalize(key)).subscribe(noop);\n        else\n            this.strategy.clear().subscribe(noop);\n    }\n    getStrategyName() { return this.strategy.name; }\n    observe(key) {\n        key = StorageKeyManager.normalize(key);\n        return this.strategy.keyChanges.pipe(filter((changed) => changed === null || changed === key), switchMap(() => this.strategy.get(key)), distinctUntilChanged(), shareReplay());\n    }\n}\n\nclass AsyncStorage {\n    constructor(strategy) {\n        this.strategy = strategy;\n    }\n    retrieve(key) {\n        return this.strategy.get(StorageKeyManager.normalize(key)).pipe(map((value) => typeof value === 'undefined' ? null : value));\n    }\n    store(key, value) {\n        return this.strategy.set(StorageKeyManager.normalize(key), value);\n    }\n    clear(key) {\n        return key !== undefined ? this.strategy.del(StorageKeyManager.normalize(key)) : this.strategy.clear();\n    }\n    getStrategyName() { return this.strategy.name; }\n    observe(key) {\n        key = StorageKeyManager.normalize(key);\n        return this.strategy.keyChanges.pipe(filter((changed) => changed === null || changed === key), switchMap(() => this.strategy.get(key)), distinctUntilChanged(), shareReplay());\n    }\n}\n\nclass StrategyCacheService {\n    constructor() {\n        this.caches = {};\n    }\n    get(strategyName, key) {\n        return this.getCacheStore(strategyName)[key];\n    }\n    set(strategyName, key, value) {\n        this.getCacheStore(strategyName)[key] = value;\n    }\n    del(strategyName, key) {\n        delete this.getCacheStore(strategyName)[key];\n    }\n    clear(strategyName) {\n        this.caches[strategyName] = {};\n    }\n    getCacheStore(strategyName) {\n        if (strategyName in this.caches)\n            return this.caches[strategyName];\n        return this.caches[strategyName] = {};\n    }\n}\nStrategyCacheService.ɵfac = function StrategyCacheService_Factory(t) { return new (t || StrategyCacheService)(); };\nStrategyCacheService.ɵprov = i0.ɵɵdefineInjectable({ factory: function StrategyCacheService_Factory() { return new StrategyCacheService(); }, token: StrategyCacheService, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(StrategyCacheService, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return []; }, null); })();\n\nconst LOCAL_STORAGE = new InjectionToken('window_local_storage');\nfunction getLocalStorage() {\n    return (typeof window !== 'undefined') ? window.localStorage : null;\n}\nconst LocalStorageProvider = { provide: LOCAL_STORAGE, useFactory: getLocalStorage };\nconst SESSION_STORAGE = new InjectionToken('window_session_storage');\nfunction getSessionStorage() {\n    return (typeof window !== 'undefined') ? window.sessionStorage : null;\n}\nconst SessionStorageProvider = { provide: SESSION_STORAGE, useFactory: getSessionStorage };\n\nclass BaseSyncStorageStrategy {\n    constructor(storage, cache) {\n        this.storage = storage;\n        this.cache = cache;\n        this.keyChanges = new Subject();\n    }\n    get isAvailable() {\n        if (this._isAvailable === undefined)\n            this._isAvailable = CompatHelper.isStorageAvailable(this.storage);\n        return this._isAvailable;\n    }\n    get(key) {\n        let data = this.cache.get(this.name, key);\n        if (data !== undefined)\n            return of(data);\n        try {\n            const item = this.storage.getItem(key);\n            if (item !== null) {\n                data = JSON.parse(item);\n                this.cache.set(this.name, key, data);\n            }\n        }\n        catch (err) {\n            console.warn(err);\n        }\n        return of(data);\n    }\n    set(key, value) {\n        const data = JSON.stringify(value);\n        this.storage.setItem(key, data);\n        this.cache.set(this.name, key, value);\n        this.keyChanges.next(key);\n        return of(value);\n    }\n    del(key) {\n        this.storage.removeItem(key);\n        this.cache.del(this.name, key);\n        this.keyChanges.next(key);\n        return of(null);\n    }\n    clear() {\n        this.storage.clear();\n        this.cache.clear(this.name);\n        this.keyChanges.next(null);\n        return of(null);\n    }\n}\n\nclass LocalStorageStrategy extends BaseSyncStorageStrategy {\n    constructor(storage, cache, platformId, zone) {\n        super(storage, cache);\n        this.storage = storage;\n        this.cache = cache;\n        this.platformId = platformId;\n        this.zone = zone;\n        this.name = LocalStorageStrategy.strategyName;\n        if (isPlatformBrowser(this.platformId))\n            this.listenExternalChanges();\n    }\n    listenExternalChanges() {\n        window.addEventListener('storage', (event) => this.zone.run(() => {\n            if (event.storageArea !== this.storage)\n                return;\n            const key = event.key;\n            if (key !== null)\n                this.cache.del(this.name, event.key);\n            else\n                this.cache.clear(this.name);\n            this.keyChanges.next(key);\n        }));\n    }\n}\nLocalStorageStrategy.ɵfac = function LocalStorageStrategy_Factory(t) { return new (t || LocalStorageStrategy)(ɵngcc0.ɵɵinject(LOCAL_STORAGE), ɵngcc0.ɵɵinject(StrategyCacheService), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nLocalStorageStrategy.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: LocalStorageStrategy, factory: LocalStorageStrategy.ɵfac });\nLocalStorageStrategy.strategyName = StorageStrategies.Local;\nLocalStorageStrategy.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [LOCAL_STORAGE,] }] },\n    { type: StrategyCacheService },\n    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n    { type: NgZone }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LocalStorageStrategy, [{\n        type: Injectable\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [LOCAL_STORAGE]\n            }] }, { type: StrategyCacheService }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [PLATFORM_ID]\n            }] }, { type: ɵngcc0.NgZone }]; }, null); })();\n\nclass SessionStorageStrategy extends BaseSyncStorageStrategy {\n    constructor(storage, cache, platformId, zone) {\n        super(storage, cache);\n        this.storage = storage;\n        this.cache = cache;\n        this.platformId = platformId;\n        this.zone = zone;\n        this.name = SessionStorageStrategy.strategyName;\n        if (isPlatformBrowser(this.platformId))\n            this.listenExternalChanges();\n    }\n    listenExternalChanges() {\n        window.addEventListener('storage', (event) => this.zone.run(() => {\n            if (event.storageArea !== this.storage)\n                return;\n            const key = event.key;\n            if (event.key !== null)\n                this.cache.del(this.name, event.key);\n            else\n                this.cache.clear(this.name);\n            this.keyChanges.next(key);\n        }));\n    }\n}\nSessionStorageStrategy.ɵfac = function SessionStorageStrategy_Factory(t) { return new (t || SessionStorageStrategy)(ɵngcc0.ɵɵinject(SESSION_STORAGE), ɵngcc0.ɵɵinject(StrategyCacheService), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nSessionStorageStrategy.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: SessionStorageStrategy, factory: SessionStorageStrategy.ɵfac });\nSessionStorageStrategy.strategyName = StorageStrategies.Session;\nSessionStorageStrategy.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [SESSION_STORAGE,] }] },\n    { type: StrategyCacheService },\n    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n    { type: NgZone }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SessionStorageStrategy, [{\n        type: Injectable\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [SESSION_STORAGE]\n            }] }, { type: StrategyCacheService }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [PLATFORM_ID]\n            }] }, { type: ɵngcc0.NgZone }]; }, null); })();\n\nclass InMemoryStorageStrategy {\n    constructor(cache) {\n        this.cache = cache;\n        this.keyChanges = new Subject();\n        this.isAvailable = true;\n        this.name = InMemoryStorageStrategy.strategyName;\n    }\n    get(key) {\n        return of(this.cache.get(this.name, key));\n    }\n    set(key, value) {\n        this.cache.set(this.name, key, value);\n        this.keyChanges.next(key);\n        return of(value);\n    }\n    del(key) {\n        this.cache.del(this.name, key);\n        this.keyChanges.next(key);\n        return of(null);\n    }\n    clear() {\n        this.cache.clear(this.name);\n        this.keyChanges.next(null);\n        return of(null);\n    }\n}\nInMemoryStorageStrategy.ɵfac = function InMemoryStorageStrategy_Factory(t) { return new (t || InMemoryStorageStrategy)(ɵngcc0.ɵɵinject(StrategyCacheService)); };\nInMemoryStorageStrategy.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: InMemoryStorageStrategy, factory: InMemoryStorageStrategy.ɵfac });\nInMemoryStorageStrategy.strategyName = StorageStrategies.InMemory;\nInMemoryStorageStrategy.ctorParameters = () => [\n    { type: StrategyCacheService, decorators: [{ type: Inject, args: [StrategyCacheService,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(InMemoryStorageStrategy, [{\n        type: Injectable\n    }], function () { return [{ type: StrategyCacheService, decorators: [{\n                type: Inject,\n                args: [StrategyCacheService]\n            }] }]; }, null); })();\n\nconst STORAGE_STRATEGIES = new InjectionToken('STORAGE_STRATEGIES');\nconst Strategies = [\n    { provide: STORAGE_STRATEGIES, useClass: InMemoryStorageStrategy, multi: true },\n    { provide: STORAGE_STRATEGIES, useClass: LocalStorageStrategy, multi: true },\n    { provide: STORAGE_STRATEGIES, useClass: SessionStorageStrategy, multi: true },\n];\n\nconst StorageStrategyStubName = 'stub_strategy';\nclass StorageStrategyStub {\n    constructor(name) {\n        this.keyChanges = new Subject();\n        this.store = {};\n        this._available = true;\n        this.name = name || StorageStrategyStubName;\n    }\n    get isAvailable() {\n        return this._available;\n    }\n    get(key) {\n        return of(this.store[key]);\n    }\n    set(key, value) {\n        this.store[key] = value;\n        this.keyChanges.next(key);\n        return of(value);\n    }\n    del(key) {\n        delete this.store[key];\n        this.keyChanges.next(key);\n        return of(null);\n    }\n    clear() {\n        this.store = {};\n        this.keyChanges.next(null);\n        return of(null);\n    }\n}\n\nclass StorageStub {\n    constructor() {\n        this.store = {};\n    }\n    get length() {\n        return Object.keys(this.store).length;\n    }\n    clear() {\n        this.store = {};\n    }\n    getItem(key) {\n        return this.store[key] || null;\n    }\n    key(index) {\n        return Object.keys(this.store)[index];\n    }\n    removeItem(key) {\n        delete this.store[key];\n    }\n    setItem(key, value) {\n        this.store[key] = value;\n    }\n}\n\nconst InvalidStrategyError = 'invalid_strategy';\nclass StrategyIndex {\n    constructor(strategies) {\n        this.strategies = strategies;\n        this.registration$ = new Subject();\n        if (!strategies)\n            strategies = [];\n        this.strategies = strategies.reverse()\n            .map((strategy, index, arr) => strategy.name)\n            .map((name, index, arr) => arr.indexOf(name) === index ? index : null)\n            .filter((index) => index !== null)\n            .map((index) => strategies[index]);\n    }\n    static get(name) {\n        if (!this.isStrategyRegistered(name))\n            throw Error(InvalidStrategyError);\n        let strategy = this.index[name];\n        if (!strategy.isAvailable) {\n            strategy = this.index[StorageStrategies.InMemory];\n        }\n        return strategy;\n    }\n    static set(name, strategy) {\n        this.index[name] = strategy;\n    }\n    static clear(name) {\n        if (name !== undefined)\n            delete this.index[name];\n        else\n            this.index = {};\n    }\n    static isStrategyRegistered(name) {\n        return name in this.index;\n    }\n    static hasRegistredStrategies() {\n        return Object.keys(this.index).length > 0;\n    }\n    getStrategy(name) {\n        return StrategyIndex.get(name);\n    }\n    indexStrategies() {\n        this.strategies.forEach((strategy) => this.register(strategy.name, strategy));\n    }\n    indexStrategy(name, overrideIfExists = false) {\n        if (StrategyIndex.isStrategyRegistered(name) && !overrideIfExists)\n            return StrategyIndex.get(name);\n        const strategy = this.strategies.find((strategy) => strategy.name === name);\n        if (!strategy)\n            throw new Error(InvalidStrategyError);\n        this.register(name, strategy, overrideIfExists);\n        return strategy;\n    }\n    register(name, strategy, overrideIfExists = false) {\n        if (!StrategyIndex.isStrategyRegistered(name) || overrideIfExists) {\n            StrategyIndex.set(name, strategy);\n            this.registration$.next(name);\n        }\n    }\n}\nStrategyIndex.ɵfac = function StrategyIndex_Factory(t) { return new (t || StrategyIndex)(ɵngcc0.ɵɵinject(STORAGE_STRATEGIES, 8)); };\nStrategyIndex.index = {};\nStrategyIndex.ɵprov = i0.ɵɵdefineInjectable({ factory: function StrategyIndex_Factory() { return new StrategyIndex(i0.ɵɵinject(STORAGE_STRATEGIES, 8)); }, token: StrategyIndex, providedIn: \"root\" });\nStrategyIndex.ctorParameters = () => [\n    { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [STORAGE_STRATEGIES,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(StrategyIndex, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: Array, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [STORAGE_STRATEGIES]\n            }] }]; }, null); })();\n\nclass LocalStorageService extends SyncStorage {\n}\nfunction buildService$1(index) {\n    const strategy = index.indexStrategy(StorageStrategies.Local);\n    return new SyncStorage(strategy);\n}\nconst LocalStorageServiceProvider = {\n    provide: LocalStorageService,\n    useFactory: buildService$1,\n    deps: [StrategyIndex]\n};\n\nclass SessionStorageService extends SyncStorage {\n}\nfunction buildService(index) {\n    const strategy = index.indexStrategy(StorageStrategies.Session);\n    return new SyncStorage(strategy);\n}\nconst SessionStorageServiceProvider = {\n    provide: SessionStorageService,\n    useFactory: buildService,\n    deps: [StrategyIndex]\n};\n\nclass DecoratorBuilder {\n    static buildSyncStrategyDecorator(strategyName, prototype, propName, key, defaultValue = null) {\n        const rawKey = key || propName;\n        let storageKey;\n        Object.defineProperty(prototype, propName, {\n            get: function () {\n                let value;\n                StrategyIndex.get(strategyName).get(getKey()).subscribe((result) => value = result);\n                return value === undefined ? defaultValue : value;\n            },\n            set: function (value) {\n                StrategyIndex.get(strategyName).set(getKey(), value).subscribe(noop);\n            }\n        });\n        function getKey() {\n            if (storageKey !== undefined)\n                return storageKey;\n            return storageKey = StorageKeyManager.normalize(rawKey);\n        }\n    }\n}\n\nfunction LocalStorage(key, defaultValue) {\n    return function (prototype, propName) {\n        DecoratorBuilder.buildSyncStrategyDecorator(StorageStrategies.Local, prototype, propName, key, defaultValue);\n    };\n}\nfunction SessionStorage(key, defaultValue) {\n    return function (prototype, propName) {\n        DecoratorBuilder.buildSyncStrategyDecorator(StorageStrategies.Session, prototype, propName, key, defaultValue);\n    };\n}\n\nconst Services = [\n    LocalStorageServiceProvider,\n    SessionStorageServiceProvider\n];\n\nconst LIB_CONFIG = new InjectionToken('ngx_webstorage_config');\nfunction appInit(index) {\n    index.indexStrategies();\n    return () => StrategyIndex.index;\n}\nclass NgxWebstorageModule {\n    constructor(index, config) {\n        if (config)\n            StorageKeyManager.consumeConfiguration(config);\n        else\n            console.error('NgxWebstorage : Possible misconfiguration (The forRoot method usage is mandatory since the 3.0.0)');\n    }\n    static forRoot(config = {}) {\n        return {\n            ngModule: NgxWebstorageModule,\n            providers: [\n                {\n                    provide: LIB_CONFIG,\n                    useValue: config,\n                },\n                LocalStorageProvider,\n                SessionStorageProvider,\n                ...Services,\n                ...Strategies,\n                {\n                    provide: APP_INITIALIZER,\n                    useFactory: appInit,\n                    deps: [StrategyIndex],\n                    multi: true\n                }\n            ]\n        };\n    }\n}\nNgxWebstorageModule.ɵfac = function NgxWebstorageModule_Factory(t) { return new (t || NgxWebstorageModule)(ɵngcc0.ɵɵinject(StrategyIndex), ɵngcc0.ɵɵinject(LIB_CONFIG, 8)); };\nNgxWebstorageModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: NgxWebstorageModule });\nNgxWebstorageModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});\nNgxWebstorageModule.ctorParameters = () => [\n    { type: StrategyIndex },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LIB_CONFIG,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxWebstorageModule, [{\n        type: NgModule,\n        args: [{}]\n    }], function () { return [{ type: StrategyIndex }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [LIB_CONFIG]\n            }] }]; }, null); })();\n\n/*\n * Public API Surface of ngx-webstorage\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AsyncStorage, CompatHelper, InMemoryStorageStrategy, InvalidStrategyError, LIB_CONFIG, LOCAL_STORAGE, LocalStorage, LocalStorageService, LocalStorageStrategy, NgxWebstorageModule, SESSION_STORAGE, STORAGE_STRATEGIES, SessionStorage, SessionStorageService, SessionStorageStrategy, StorageStrategies, StorageStrategyStub, StorageStrategyStubName, StorageStub, StrategyCacheService, StrategyIndex, SyncStorage, appInit, getLocalStorage as ɵa, LocalStorageProvider as ɵb, getSessionStorage as ɵc, SessionStorageProvider as ɵd, Strategies as ɵe, buildService$1 as ɵf, LocalStorageServiceProvider as ɵg, buildService as ɵh, SessionStorageServiceProvider as ɵi, BaseSyncStorageStrategy as ɵj, STORAGE_STRATEGIES as ɵl, Services as ɵn };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}