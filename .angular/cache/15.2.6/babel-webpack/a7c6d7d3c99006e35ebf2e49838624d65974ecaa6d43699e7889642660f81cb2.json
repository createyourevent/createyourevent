{"ast":null,"code":"import { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getChipsCollectionChipsIdentifier } from '../chips-collection-chips.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport class ChipsCollectionChipsService {\n  constructor(http, applicationConfigService) {\n    this.http = http;\n    this.applicationConfigService = applicationConfigService;\n    this.resourceUrl = this.applicationConfigService.getEndpointFor('api/chips-collection-chips');\n  }\n  create(chipsCollectionChips) {\n    return this.http.post(this.resourceUrl, chipsCollectionChips, {\n      observe: 'response'\n    });\n  }\n  update(chipsCollectionChips) {\n    return this.http.put(`${this.resourceUrl}/${getChipsCollectionChipsIdentifier(chipsCollectionChips)}`, chipsCollectionChips, {\n      observe: 'response'\n    });\n  }\n  partialUpdate(chipsCollectionChips) {\n    return this.http.patch(`${this.resourceUrl}/${getChipsCollectionChipsIdentifier(chipsCollectionChips)}`, chipsCollectionChips, {\n      observe: 'response'\n    });\n  }\n  find(id) {\n    return this.http.get(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  query(req) {\n    const options = createRequestOption(req);\n    return this.http.get(this.resourceUrl, {\n      params: options,\n      observe: 'response'\n    });\n  }\n  delete(id) {\n    return this.http.delete(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  addChipsCollectionChipsToCollectionIfMissing(chipsCollectionChipsCollection, ...chipsCollectionChipsToCheck) {\n    const chipsCollectionChips = chipsCollectionChipsToCheck.filter(isPresent);\n    if (chipsCollectionChips.length > 0) {\n      const chipsCollectionChipsCollectionIdentifiers = chipsCollectionChipsCollection.map(chipsCollectionChipsItem => getChipsCollectionChipsIdentifier(chipsCollectionChipsItem));\n      const chipsCollectionChipsToAdd = chipsCollectionChips.filter(chipsCollectionChipsItem => {\n        const chipsCollectionChipsIdentifier = getChipsCollectionChipsIdentifier(chipsCollectionChipsItem);\n        if (chipsCollectionChipsIdentifier == null || chipsCollectionChipsCollectionIdentifiers.includes(chipsCollectionChipsIdentifier)) {\n          return false;\n        }\n        chipsCollectionChipsCollectionIdentifiers.push(chipsCollectionChipsIdentifier);\n        return true;\n      });\n      return [...chipsCollectionChipsToAdd, ...chipsCollectionChipsCollection];\n    }\n    return chipsCollectionChipsCollection;\n  }\n}\nChipsCollectionChipsService.ɵfac = function ChipsCollectionChipsService_Factory(t) {\n  return new (t || ChipsCollectionChipsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n};\nChipsCollectionChipsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ChipsCollectionChipsService,\n  factory: ChipsCollectionChipsService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAIA,SAASA,SAAS,QAAQ,yBAAyB;AAEnD,SAASC,mBAAmB,QAAQ,+BAA+B;AACnE,SAAgCC,iCAAiC,QAAQ,iCAAiC;;;;AAM1G,OAAM,MAAOC,2BAA2B;EAGtCC,YAAsBC,IAAgB,EAAYC,wBAAkD;IAA9E,SAAI,GAAJD,IAAI;IAAwB,6BAAwB,GAAxBC,wBAAwB;IAFhE,gBAAW,GAAG,IAAI,CAACA,wBAAwB,CAACC,cAAc,CAAC,4BAA4B,CAAC;EAEK;EAEvGC,MAAM,CAACC,oBAA2C;IAChD,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAwB,IAAI,CAACC,WAAW,EAAEF,oBAAoB,EAAE;MAAEG,OAAO,EAAE;IAAU,CAAE,CAAC;EAC/G;EAEAC,MAAM,CAACJ,oBAA2C;IAChD,OAAO,IAAI,CAACJ,IAAI,CAACS,GAAG,CAClB,GAAG,IAAI,CAACH,WAAW,IAAIT,iCAAiC,CAACO,oBAAoB,CAAW,EAAE,EAC1FA,oBAAoB,EACpB;MAAEG,OAAO,EAAE;IAAU,CAAE,CACxB;EACH;EAEAG,aAAa,CAACN,oBAA2C;IACvD,OAAO,IAAI,CAACJ,IAAI,CAACW,KAAK,CACpB,GAAG,IAAI,CAACL,WAAW,IAAIT,iCAAiC,CAACO,oBAAoB,CAAW,EAAE,EAC1FA,oBAAoB,EACpB;MAAEG,OAAO,EAAE;IAAU,CAAE,CACxB;EACH;EAEAK,IAAI,CAACC,EAAU;IACb,OAAO,IAAI,CAACb,IAAI,CAACc,GAAG,CAAwB,GAAG,IAAI,CAACR,WAAW,IAAIO,EAAE,EAAE,EAAE;MAAEN,OAAO,EAAE;IAAU,CAAE,CAAC;EACnG;EAEAQ,KAAK,CAACC,GAAS;IACb,MAAMC,OAAO,GAAGrB,mBAAmB,CAACoB,GAAG,CAAC;IACxC,OAAO,IAAI,CAAChB,IAAI,CAACc,GAAG,CAA0B,IAAI,CAACR,WAAW,EAAE;MAAEY,MAAM,EAAED,OAAO;MAAEV,OAAO,EAAE;IAAU,CAAE,CAAC;EAC3G;EAEAY,MAAM,CAACN,EAAU;IACf,OAAO,IAAI,CAACb,IAAI,CAACmB,MAAM,CAAC,GAAG,IAAI,CAACb,WAAW,IAAIO,EAAE,EAAE,EAAE;MAAEN,OAAO,EAAE;IAAU,CAAE,CAAC;EAC/E;EAEAa,4CAA4C,CAC1CC,8BAAuD,EACvD,GAAGC,2BAAyE;IAE5E,MAAMlB,oBAAoB,GAA4BkB,2BAA2B,CAACC,MAAM,CAAC5B,SAAS,CAAC;IACnG,IAAIS,oBAAoB,CAACoB,MAAM,GAAG,CAAC,EAAE;MACnC,MAAMC,yCAAyC,GAAGJ,8BAA8B,CAACK,GAAG,CAClFC,wBAAwB,IAAI9B,iCAAiC,CAAC8B,wBAAwB,CAAE,CACzF;MACD,MAAMC,yBAAyB,GAAGxB,oBAAoB,CAACmB,MAAM,CAACI,wBAAwB,IAAG;QACvF,MAAME,8BAA8B,GAAGhC,iCAAiC,CAAC8B,wBAAwB,CAAC;QAClG,IAAIE,8BAA8B,IAAI,IAAI,IAAIJ,yCAAyC,CAACK,QAAQ,CAACD,8BAA8B,CAAC,EAAE;UAChI,OAAO,KAAK;;QAEdJ,yCAAyC,CAACM,IAAI,CAACF,8BAA8B,CAAC;QAC9E,OAAO,IAAI;MACb,CAAC,CAAC;MACF,OAAO,CAAC,GAAGD,yBAAyB,EAAE,GAAGP,8BAA8B,CAAC;;IAE1E,OAAOA,8BAA8B;EACvC;;;mBA1DWvB,2BAA2B;AAAA;;SAA3BA,2BAA2B;EAAAkC,SAA3BlC,2BAA2B;EAAAmC,YADd;AAAM","names":["isPresent","createRequestOption","getChipsCollectionChipsIdentifier","ChipsCollectionChipsService","constructor","http","applicationConfigService","getEndpointFor","create","chipsCollectionChips","post","resourceUrl","observe","update","put","partialUpdate","patch","find","id","get","query","req","options","params","delete","addChipsCollectionChipsToCollectionIfMissing","chipsCollectionChipsCollection","chipsCollectionChipsToCheck","filter","length","chipsCollectionChipsCollectionIdentifiers","map","chipsCollectionChipsItem","chipsCollectionChipsToAdd","chipsCollectionChipsIdentifier","includes","push","factory","providedIn"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/entities/chips-collection-chips/service/chips-collection-chips.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { isPresent } from 'app/core/util/operators';\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { IChipsCollectionChips, getChipsCollectionChipsIdentifier } from '../chips-collection-chips.model';\n\nexport type EntityResponseType = HttpResponse<IChipsCollectionChips>;\nexport type EntityArrayResponseType = HttpResponse<IChipsCollectionChips[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class ChipsCollectionChipsService {\n  protected resourceUrl = this.applicationConfigService.getEndpointFor('api/chips-collection-chips');\n\n  constructor(protected http: HttpClient, protected applicationConfigService: ApplicationConfigService) {}\n\n  create(chipsCollectionChips: IChipsCollectionChips): Observable<EntityResponseType> {\n    return this.http.post<IChipsCollectionChips>(this.resourceUrl, chipsCollectionChips, { observe: 'response' });\n  }\n\n  update(chipsCollectionChips: IChipsCollectionChips): Observable<EntityResponseType> {\n    return this.http.put<IChipsCollectionChips>(\n      `${this.resourceUrl}/${getChipsCollectionChipsIdentifier(chipsCollectionChips) as number}`,\n      chipsCollectionChips,\n      { observe: 'response' }\n    );\n  }\n\n  partialUpdate(chipsCollectionChips: IChipsCollectionChips): Observable<EntityResponseType> {\n    return this.http.patch<IChipsCollectionChips>(\n      `${this.resourceUrl}/${getChipsCollectionChipsIdentifier(chipsCollectionChips) as number}`,\n      chipsCollectionChips,\n      { observe: 'response' }\n    );\n  }\n\n  find(id: number): Observable<EntityResponseType> {\n    return this.http.get<IChipsCollectionChips>(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  query(req?: any): Observable<EntityArrayResponseType> {\n    const options = createRequestOption(req);\n    return this.http.get<IChipsCollectionChips[]>(this.resourceUrl, { params: options, observe: 'response' });\n  }\n\n  delete(id: number): Observable<HttpResponse<{}>> {\n    return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  addChipsCollectionChipsToCollectionIfMissing(\n    chipsCollectionChipsCollection: IChipsCollectionChips[],\n    ...chipsCollectionChipsToCheck: (IChipsCollectionChips | null | undefined)[]\n  ): IChipsCollectionChips[] {\n    const chipsCollectionChips: IChipsCollectionChips[] = chipsCollectionChipsToCheck.filter(isPresent);\n    if (chipsCollectionChips.length > 0) {\n      const chipsCollectionChipsCollectionIdentifiers = chipsCollectionChipsCollection.map(\n        chipsCollectionChipsItem => getChipsCollectionChipsIdentifier(chipsCollectionChipsItem)!\n      );\n      const chipsCollectionChipsToAdd = chipsCollectionChips.filter(chipsCollectionChipsItem => {\n        const chipsCollectionChipsIdentifier = getChipsCollectionChipsIdentifier(chipsCollectionChipsItem);\n        if (chipsCollectionChipsIdentifier == null || chipsCollectionChipsCollectionIdentifiers.includes(chipsCollectionChipsIdentifier)) {\n          return false;\n        }\n        chipsCollectionChipsCollectionIdentifiers.push(chipsCollectionChipsIdentifier);\n        return true;\n      });\n      return [...chipsCollectionChipsToAdd, ...chipsCollectionChipsCollection];\n    }\n    return chipsCollectionChipsCollection;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}