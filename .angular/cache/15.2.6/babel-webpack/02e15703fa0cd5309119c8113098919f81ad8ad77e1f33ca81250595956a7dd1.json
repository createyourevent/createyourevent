{"ast":null,"code":"import { tap } from 'rxjs/operators';\nimport { EventWithContent } from 'app/core/util/event-manager.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"app/core/util/event-manager.service\";\nexport class ErrorHandlerInterceptor {\n  constructor(eventManager) {\n    this.eventManager = eventManager;\n  }\n  intercept(request, next) {\n    return next.handle(request).pipe(tap({\n      error: err => {\n        if (!(err.status === 401 && (err.message === '' || err.url?.includes('api/account')))) {\n          this.eventManager.broadcast(new EventWithContent('createyoureventApp.httpError', err));\n        }\n      }\n    }));\n  }\n}\nErrorHandlerInterceptor.ɵfac = function ErrorHandlerInterceptor_Factory(t) {\n  return new (t || ErrorHandlerInterceptor)(i0.ɵɵinject(i1.EventManager));\n};\nErrorHandlerInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ErrorHandlerInterceptor,\n  factory: ErrorHandlerInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AAGA,SAASA,GAAG,QAAQ,gBAAgB;AAEpC,SAAuBC,gBAAgB,QAAQ,qCAAqC;;;AAGpF,OAAM,MAAOC,uBAAuB;EAClCC,YAAoBC,YAA0B;IAA1B,iBAAY,GAAZA,YAAY;EAAiB;EAEjDC,SAAS,CAACC,OAAyB,EAAEC,IAAiB;IACpD,OAAOA,IAAI,CAACC,MAAM,CAACF,OAAO,CAAC,CAACG,IAAI,CAC9BT,GAAG,CAAC;MACFU,KAAK,EAAGC,GAAsB,IAAI;QAChC,IAAI,EAAEA,GAAG,CAACC,MAAM,KAAK,GAAG,KAAKD,GAAG,CAACE,OAAO,KAAK,EAAE,IAAIF,GAAG,CAACG,GAAG,EAAEC,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE;UACrF,IAAI,CAACX,YAAY,CAACY,SAAS,CAAC,IAAIf,gBAAgB,CAAC,8BAA8B,EAAEU,GAAG,CAAC,CAAC;;MAE1F;KACD,CAAC,CACH;EACH;;;mBAbWT,uBAAuB;AAAA;;SAAvBA,uBAAuB;EAAAe,SAAvBf,uBAAuB;AAAA","names":["tap","EventWithContent","ErrorHandlerInterceptor","constructor","eventManager","intercept","request","next","handle","pipe","error","err","status","message","url","includes","broadcast","factory"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/core/interceptor/error-handler.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpRequest, HttpErrorResponse, HttpHandler, HttpEvent } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { EventManager, EventWithContent } from 'app/core/util/event-manager.service';\n\n@Injectable()\nexport class ErrorHandlerInterceptor implements HttpInterceptor {\n  constructor(private eventManager: EventManager) {}\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next.handle(request).pipe(\n      tap({\n        error: (err: HttpErrorResponse) => {\n          if (!(err.status === 401 && (err.message === '' || err.url?.includes('api/account')))) {\n            this.eventManager.broadcast(new EventWithContent('createyoureventApp.httpError', err));\n          }\n        },\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}