{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\nimport { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getWorksheetIdentifier } from '../worksheet.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport class WorksheetService {\n  constructor(http, applicationConfigService) {\n    this.http = http;\n    this.applicationConfigService = applicationConfigService;\n    this.resourceUrl = this.applicationConfigService.getEndpointFor('api/worksheets');\n  }\n  create(worksheet) {\n    const copy = this.convertDateFromClient(worksheet);\n    return this.http.post(this.resourceUrl, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  update(worksheet) {\n    const copy = this.convertDateFromClient(worksheet);\n    return this.http.put(`${this.resourceUrl}/${getWorksheetIdentifier(worksheet)}`, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  partialUpdate(worksheet) {\n    const copy = this.convertDateFromClient(worksheet);\n    return this.http.patch(`${this.resourceUrl}/${getWorksheetIdentifier(worksheet)}`, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  find(id) {\n    return this.http.get(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  query(req) {\n    const options = createRequestOption(req);\n    return this.http.get(this.resourceUrl, {\n      params: options,\n      observe: 'response'\n    }).pipe(map(res => this.convertDateArrayFromServer(res)));\n  }\n  delete(id) {\n    return this.http.delete(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  addWorksheetToCollectionIfMissing(worksheetCollection, ...worksheetsToCheck) {\n    const worksheets = worksheetsToCheck.filter(isPresent);\n    if (worksheets.length > 0) {\n      const worksheetCollectionIdentifiers = worksheetCollection.map(worksheetItem => getWorksheetIdentifier(worksheetItem));\n      const worksheetsToAdd = worksheets.filter(worksheetItem => {\n        const worksheetIdentifier = getWorksheetIdentifier(worksheetItem);\n        if (worksheetIdentifier == null || worksheetCollectionIdentifiers.includes(worksheetIdentifier)) {\n          return false;\n        }\n        worksheetCollectionIdentifiers.push(worksheetIdentifier);\n        return true;\n      });\n      return [...worksheetsToAdd, ...worksheetCollection];\n    }\n    return worksheetCollection;\n  }\n  convertDateFromClient(worksheet) {\n    return Object.assign({}, worksheet, {\n      start: worksheet.start?.isValid() ? worksheet.start.toJSON() : undefined,\n      end: worksheet.end?.isValid() ? worksheet.end.toJSON() : undefined\n    });\n  }\n  convertDateFromServer(res) {\n    if (res.body) {\n      res.body.start = res.body.start ? dayjs(res.body.start) : undefined;\n      res.body.end = res.body.end ? dayjs(res.body.end) : undefined;\n    }\n    return res;\n  }\n  convertDateArrayFromServer(res) {\n    if (res.body) {\n      res.body.forEach(worksheet => {\n        worksheet.start = worksheet.start ? dayjs(worksheet.start) : undefined;\n        worksheet.end = worksheet.end ? dayjs(worksheet.end) : undefined;\n      });\n    }\n    return res;\n  }\n}\nWorksheetService.ɵfac = function WorksheetService_Factory(t) {\n  return new (t || WorksheetService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n};\nWorksheetService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WorksheetService,\n  factory: WorksheetService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["map","dayjs","isPresent","createRequestOption","getWorksheetIdentifier","WorksheetService","constructor","http","applicationConfigService","getEndpointFor","create","worksheet","copy","convertDateFromClient","post","resourceUrl","observe","pipe","res","convertDateFromServer","update","put","partialUpdate","patch","find","id","get","query","req","options","params","convertDateArrayFromServer","delete","addWorksheetToCollectionIfMissing","worksheetCollection","worksheetsToCheck","worksheets","filter","length","worksheetCollectionIdentifiers","worksheetItem","worksheetsToAdd","worksheetIdentifier","includes","push","Object","assign","start","isValid","toJSON","undefined","end","body","forEach","factory","providedIn"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/entities/worksheet/service/worksheet.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\n\nimport { isPresent } from 'app/core/util/operators';\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { IWorksheet, getWorksheetIdentifier } from '../worksheet.model';\n\nexport type EntityResponseType = HttpResponse<IWorksheet>;\nexport type EntityArrayResponseType = HttpResponse<IWorksheet[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class WorksheetService {\n  protected resourceUrl = this.applicationConfigService.getEndpointFor('api/worksheets');\n\n  constructor(protected http: HttpClient, protected applicationConfigService: ApplicationConfigService) {}\n\n  create(worksheet: IWorksheet): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(worksheet);\n    return this.http\n      .post<IWorksheet>(this.resourceUrl, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  update(worksheet: IWorksheet): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(worksheet);\n    return this.http\n      .put<IWorksheet>(`${this.resourceUrl}/${getWorksheetIdentifier(worksheet) as number}`, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  partialUpdate(worksheet: IWorksheet): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(worksheet);\n    return this.http\n      .patch<IWorksheet>(`${this.resourceUrl}/${getWorksheetIdentifier(worksheet) as number}`, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  find(id: number): Observable<EntityResponseType> {\n    return this.http\n      .get<IWorksheet>(`${this.resourceUrl}/${id}`, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  query(req?: any): Observable<EntityArrayResponseType> {\n    const options = createRequestOption(req);\n    return this.http\n      .get<IWorksheet[]>(this.resourceUrl, { params: options, observe: 'response' })\n      .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n  }\n\n  delete(id: number): Observable<HttpResponse<{}>> {\n    return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  addWorksheetToCollectionIfMissing(\n    worksheetCollection: IWorksheet[],\n    ...worksheetsToCheck: (IWorksheet | null | undefined)[]\n  ): IWorksheet[] {\n    const worksheets: IWorksheet[] = worksheetsToCheck.filter(isPresent);\n    if (worksheets.length > 0) {\n      const worksheetCollectionIdentifiers = worksheetCollection.map(worksheetItem => getWorksheetIdentifier(worksheetItem)!);\n      const worksheetsToAdd = worksheets.filter(worksheetItem => {\n        const worksheetIdentifier = getWorksheetIdentifier(worksheetItem);\n        if (worksheetIdentifier == null || worksheetCollectionIdentifiers.includes(worksheetIdentifier)) {\n          return false;\n        }\n        worksheetCollectionIdentifiers.push(worksheetIdentifier);\n        return true;\n      });\n      return [...worksheetsToAdd, ...worksheetCollection];\n    }\n    return worksheetCollection;\n  }\n\n  protected convertDateFromClient(worksheet: IWorksheet): IWorksheet {\n    return Object.assign({}, worksheet, {\n      start: worksheet.start?.isValid() ? worksheet.start.toJSON() : undefined,\n      end: worksheet.end?.isValid() ? worksheet.end.toJSON() : undefined,\n    });\n  }\n\n  protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\n    if (res.body) {\n      res.body.start = res.body.start ? dayjs(res.body.start) : undefined;\n      res.body.end = res.body.end ? dayjs(res.body.end) : undefined;\n    }\n    return res;\n  }\n\n  protected convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\n    if (res.body) {\n      res.body.forEach((worksheet: IWorksheet) => {\n        worksheet.start = worksheet.start ? dayjs(worksheet.start) : undefined;\n        worksheet.end = worksheet.end ? dayjs(worksheet.end) : undefined;\n      });\n    }\n    return res;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}