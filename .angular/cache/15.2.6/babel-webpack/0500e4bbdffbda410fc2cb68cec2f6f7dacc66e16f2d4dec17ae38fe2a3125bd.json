{"ast":null,"code":"import dayjs from 'dayjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"app/general.service\";\nimport * as i2 from \"app/entities/event/service/event.service\";\nexport class EventTickerService {\n  constructor(generalService, eventService) {\n    this.generalService = generalService;\n    this.eventService = eventService;\n  }\n  getTags() {\n    return this.tags;\n  }\n  load() {\n    return new Promise((resolve, reject) => {\n      this.generalService.find50EventTagsRandomly().subscribe(response => {\n        const md = response.body;\n        const nd = [];\n        let i = 0;\n        md.forEach(tag => {\n          this.eventService.find(tag.event.id).subscribe(e => {\n            i++;\n            if (dayjs().isBefore(dayjs(e.body.dateEnd))) {\n              nd.push({\n                text: tag.tag,\n                weight: this.getRandomInt(5, 9),\n                color: this.getRandomColor(),\n                rotate: this.getRandomInt(-30, 30),\n                link: '/events/' + tag.event.id + '/view'\n              });\n            }\n            if (i === md.length) {\n              nd.sort(() => Math.random() - 0.5);\n              this.tags = nd.slice(0, nd.length);\n              resolve(true);\n            }\n          });\n        });\n      });\n    });\n  }\n  getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n  getRandomColor() {\n    const c = '#' + (0x1000000 + Math.random() * 0xffffff).toString(16).substr(1, 6);\n    return c;\n  }\n}\nEventTickerService.ɵfac = function EventTickerService_Factory(t) {\n  return new (t || EventTickerService)(i0.ɵɵinject(i1.GeneralService), i0.ɵɵinject(i2.EventService));\n};\nEventTickerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: EventTickerService,\n  factory: EventTickerService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAIA,OAAOA,KAAK,MAAM,OAAO;;;;AAIzB,OAAM,MAAOC,kBAAkB;EAG7BC,YAAoBC,cAA8B,EAAUC,YAA0B;IAAlE,mBAAc,GAAdD,cAAc;IAA0B,iBAAY,GAAZC,YAAY;EAAiB;EAElFC,OAAO;IACZ,OAAO,IAAI,CAACC,IAAI;EAClB;EAEAC,IAAI;IACF,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;MACrC,IAAI,CAACP,cAAc,CAACQ,uBAAuB,EAAE,CAACC,SAAS,CAACC,QAAQ,IAAG;QACjE,MAAMC,EAAE,GAAGD,QAAQ,CAACE,IAAI;QACxB,MAAMC,EAAE,GAAgB,EAAE;QAC1B,IAAIC,CAAC,GAAG,CAAC;QACTH,EAAG,CAACI,OAAO,CAACC,GAAG,IAAG;UAChB,IAAI,CAACf,YAAY,CAACgB,IAAI,CAACD,GAAG,CAACE,KAAK,CAACC,EAAE,CAAC,CAACV,SAAS,CAACW,CAAC,IAAG;YACjDN,CAAC,EAAE;YACH,IAAGjB,KAAK,EAAE,CAACwB,QAAQ,CAACxB,KAAK,CAACuB,CAAC,CAACR,IAAI,CAACU,OAAO,CAAC,CAAC,EAAE;cAC1CT,EAAE,CAACU,IAAI,CAAC;gBACNC,IAAI,EAAER,GAAG,CAACA,GAAI;gBACdS,MAAM,EAAE,IAAI,CAACC,YAAY,CAAC,CAAC,EAAE,CAAC,CAAC;gBAC/BC,KAAK,EAAE,IAAI,CAACC,cAAc,EAAE;gBAC5BC,MAAM,EAAE,IAAI,CAACH,YAAY,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC;gBAClCI,IAAI,EAAE,UAAU,GAAGd,GAAG,CAACE,KAAM,CAACC,EAAE,GAAG;eACpC,CAAC;;YAEJ,IAAGL,CAAC,KAAKH,EAAE,CAACoB,MAAM,EAAE;cAClBlB,EAAE,CAACmB,IAAI,CAAC,MAAMC,IAAI,CAACC,MAAM,EAAE,GAAG,GAAG,CAAC;cAClC,IAAI,CAAC/B,IAAI,GAAGU,EAAE,CAACsB,KAAK,CAAC,CAAC,EAAEtB,EAAE,CAACkB,MAAM,CAAC;cAClCzB,OAAO,CAAC,IAAI,CAAC;;UAEjB,CAAC,CAAC;QACJ,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEAoB,YAAY,CAACU,GAAW,EAAEC,GAAW;IACnCD,GAAG,GAAGH,IAAI,CAACK,IAAI,CAACF,GAAG,CAAC;IACpBC,GAAG,GAAGJ,IAAI,CAACM,KAAK,CAACF,GAAG,CAAC;IACrB,OAAOJ,IAAI,CAACM,KAAK,CAACN,IAAI,CAACC,MAAM,EAAE,IAAIG,GAAG,GAAGD,GAAG,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG;EAC1D;EAEAR,cAAc;IACZ,MAAMY,CAAC,GAAG,GAAG,GAAG,CAAC,SAAS,GAAGP,IAAI,CAACC,MAAM,EAAE,GAAG,QAAQ,EAAEO,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;IAChF,OAAOF,CAAC;EACV;;;mBA/CW1C,kBAAkB;AAAA;;SAAlBA,kBAAkB;EAAA6C,SAAlB7C,kBAAkB;EAAA8C,YAFjB;AAAM","names":["dayjs","EventTickerService","constructor","generalService","eventService","getTags","tags","load","Promise","resolve","reject","find50EventTagsRandomly","subscribe","response","md","body","nd","i","forEach","tag","find","event","id","e","isBefore","dateEnd","push","text","weight","getRandomInt","color","getRandomColor","rotate","link","length","sort","Math","random","slice","min","max","ceil","floor","c","toString","substr","factory","providedIn"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/views/event-ticker/event-ticker.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CloudData } from 'angular-tag-cloud-module';\nimport { EventService } from 'app/entities/event/service/event.service';\nimport { GeneralService } from 'app/general.service';\nimport dayjs from 'dayjs';\n@Injectable({\n  providedIn: 'root'\n})\nexport class EventTickerService {\n  private tags!: CloudData[];\n\n  constructor(private generalService: GeneralService, private eventService: EventService) {}\n\n  public getTags(): CloudData[] {\n    return this.tags;\n  }\n\n  load(): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n      this.generalService.find50EventTagsRandomly().subscribe(response => {\n        const md = response.body;\n        const nd: CloudData[] = [];\n        let i = 0;\n        md!.forEach(tag => {\n          this.eventService.find(tag.event.id).subscribe(e => {\n            i++;\n            if(dayjs().isBefore(dayjs(e.body.dateEnd))) {\n              nd.push({\n                text: tag.tag!,\n                weight: this.getRandomInt(5, 9),\n                color: this.getRandomColor(),\n                rotate: this.getRandomInt(-30, 30),\n                link: '/events/' + tag.event!.id + '/view'\n              });\n            }\n            if(i === md.length) {\n              nd.sort(() => Math.random() - 0.5);\n              this.tags = nd.slice(0, nd.length);\n              resolve(true);\n            }\n          });\n        });\n      });\n    });\n  }\n\n  getRandomInt(min: number, max: number): number {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  getRandomColor(): string {\n    const c = '#' + (0x1000000 + Math.random() * 0xffffff).toString(16).substr(1, 6);\n    return c;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}