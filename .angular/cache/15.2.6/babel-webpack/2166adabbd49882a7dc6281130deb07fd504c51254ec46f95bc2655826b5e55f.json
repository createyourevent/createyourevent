{"ast":null,"code":"import { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getPointsExchangeIdentifier } from '../points-exchange.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport class PointsExchangeService {\n  constructor(http, applicationConfigService) {\n    this.http = http;\n    this.applicationConfigService = applicationConfigService;\n    this.resourceUrl = this.applicationConfigService.getEndpointFor('api/points-exchanges');\n  }\n  create(pointsExchange) {\n    return this.http.post(this.resourceUrl, pointsExchange, {\n      observe: 'response'\n    });\n  }\n  update(pointsExchange) {\n    return this.http.put(`${this.resourceUrl}/${getPointsExchangeIdentifier(pointsExchange)}`, pointsExchange, {\n      observe: 'response'\n    });\n  }\n  partialUpdate(pointsExchange) {\n    return this.http.patch(`${this.resourceUrl}/${getPointsExchangeIdentifier(pointsExchange)}`, pointsExchange, {\n      observe: 'response'\n    });\n  }\n  find(id) {\n    return this.http.get(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  query(req) {\n    const options = createRequestOption(req);\n    return this.http.get(this.resourceUrl, {\n      params: options,\n      observe: 'response'\n    });\n  }\n  delete(id) {\n    return this.http.delete(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  addPointsExchangeToCollectionIfMissing(pointsExchangeCollection, ...pointsExchangesToCheck) {\n    const pointsExchanges = pointsExchangesToCheck.filter(isPresent);\n    if (pointsExchanges.length > 0) {\n      const pointsExchangeCollectionIdentifiers = pointsExchangeCollection.map(pointsExchangeItem => getPointsExchangeIdentifier(pointsExchangeItem));\n      const pointsExchangesToAdd = pointsExchanges.filter(pointsExchangeItem => {\n        const pointsExchangeIdentifier = getPointsExchangeIdentifier(pointsExchangeItem);\n        if (pointsExchangeIdentifier == null || pointsExchangeCollectionIdentifiers.includes(pointsExchangeIdentifier)) {\n          return false;\n        }\n        pointsExchangeCollectionIdentifiers.push(pointsExchangeIdentifier);\n        return true;\n      });\n      return [...pointsExchangesToAdd, ...pointsExchangeCollection];\n    }\n    return pointsExchangeCollection;\n  }\n}\nPointsExchangeService.ɵfac = function PointsExchangeService_Factory(t) {\n  return new (t || PointsExchangeService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n};\nPointsExchangeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PointsExchangeService,\n  factory: PointsExchangeService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAIA,SAASA,SAAS,QAAQ,yBAAyB;AAEnD,SAASC,mBAAmB,QAAQ,+BAA+B;AACnE,SAA0BC,2BAA2B,QAAQ,0BAA0B;;;;AAMvF,OAAM,MAAOC,qBAAqB;EAGhCC,YAAsBC,IAAgB,EAAYC,wBAAkD;IAA9E,SAAI,GAAJD,IAAI;IAAwB,6BAAwB,GAAxBC,wBAAwB;IAFhE,gBAAW,GAAG,IAAI,CAACA,wBAAwB,CAACC,cAAc,CAAC,sBAAsB,CAAC;EAEW;EAEvGC,MAAM,CAACC,cAA+B;IACpC,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAkB,IAAI,CAACC,WAAW,EAAEF,cAAc,EAAE;MAAEG,OAAO,EAAE;IAAU,CAAE,CAAC;EACnG;EAEAC,MAAM,CAACJ,cAA+B;IACpC,OAAO,IAAI,CAACJ,IAAI,CAACS,GAAG,CAAkB,GAAG,IAAI,CAACH,WAAW,IAAIT,2BAA2B,CAACO,cAAc,CAAW,EAAE,EAAEA,cAAc,EAAE;MACpIG,OAAO,EAAE;KACV,CAAC;EACJ;EAEAG,aAAa,CAACN,cAA+B;IAC3C,OAAO,IAAI,CAACJ,IAAI,CAACW,KAAK,CACpB,GAAG,IAAI,CAACL,WAAW,IAAIT,2BAA2B,CAACO,cAAc,CAAW,EAAE,EAC9EA,cAAc,EACd;MAAEG,OAAO,EAAE;IAAU,CAAE,CACxB;EACH;EAEAK,IAAI,CAACC,EAAU;IACb,OAAO,IAAI,CAACb,IAAI,CAACc,GAAG,CAAkB,GAAG,IAAI,CAACR,WAAW,IAAIO,EAAE,EAAE,EAAE;MAAEN,OAAO,EAAE;IAAU,CAAE,CAAC;EAC7F;EAEAQ,KAAK,CAACC,GAAS;IACb,MAAMC,OAAO,GAAGrB,mBAAmB,CAACoB,GAAG,CAAC;IACxC,OAAO,IAAI,CAAChB,IAAI,CAACc,GAAG,CAAoB,IAAI,CAACR,WAAW,EAAE;MAAEY,MAAM,EAAED,OAAO;MAAEV,OAAO,EAAE;IAAU,CAAE,CAAC;EACrG;EAEAY,MAAM,CAACN,EAAU;IACf,OAAO,IAAI,CAACb,IAAI,CAACmB,MAAM,CAAC,GAAG,IAAI,CAACb,WAAW,IAAIO,EAAE,EAAE,EAAE;MAAEN,OAAO,EAAE;IAAU,CAAE,CAAC;EAC/E;EAEAa,sCAAsC,CACpCC,wBAA2C,EAC3C,GAAGC,sBAA8D;IAEjE,MAAMC,eAAe,GAAsBD,sBAAsB,CAACE,MAAM,CAAC7B,SAAS,CAAC;IACnF,IAAI4B,eAAe,CAACE,MAAM,GAAG,CAAC,EAAE;MAC9B,MAAMC,mCAAmC,GAAGL,wBAAwB,CAACM,GAAG,CACtEC,kBAAkB,IAAI/B,2BAA2B,CAAC+B,kBAAkB,CAAE,CACvE;MACD,MAAMC,oBAAoB,GAAGN,eAAe,CAACC,MAAM,CAACI,kBAAkB,IAAG;QACvE,MAAME,wBAAwB,GAAGjC,2BAA2B,CAAC+B,kBAAkB,CAAC;QAChF,IAAIE,wBAAwB,IAAI,IAAI,IAAIJ,mCAAmC,CAACK,QAAQ,CAACD,wBAAwB,CAAC,EAAE;UAC9G,OAAO,KAAK;;QAEdJ,mCAAmC,CAACM,IAAI,CAACF,wBAAwB,CAAC;QAClE,OAAO,IAAI;MACb,CAAC,CAAC;MACF,OAAO,CAAC,GAAGD,oBAAoB,EAAE,GAAGR,wBAAwB,CAAC;;IAE/D,OAAOA,wBAAwB;EACjC;;;mBAxDWvB,qBAAqB;AAAA;;SAArBA,qBAAqB;EAAAmC,SAArBnC,qBAAqB;EAAAoC,YADR;AAAM","names":["isPresent","createRequestOption","getPointsExchangeIdentifier","PointsExchangeService","constructor","http","applicationConfigService","getEndpointFor","create","pointsExchange","post","resourceUrl","observe","update","put","partialUpdate","patch","find","id","get","query","req","options","params","delete","addPointsExchangeToCollectionIfMissing","pointsExchangeCollection","pointsExchangesToCheck","pointsExchanges","filter","length","pointsExchangeCollectionIdentifiers","map","pointsExchangeItem","pointsExchangesToAdd","pointsExchangeIdentifier","includes","push","factory","providedIn"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/entities/points-exchange/service/points-exchange.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { isPresent } from 'app/core/util/operators';\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { IPointsExchange, getPointsExchangeIdentifier } from '../points-exchange.model';\n\nexport type EntityResponseType = HttpResponse<IPointsExchange>;\nexport type EntityArrayResponseType = HttpResponse<IPointsExchange[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class PointsExchangeService {\n  protected resourceUrl = this.applicationConfigService.getEndpointFor('api/points-exchanges');\n\n  constructor(protected http: HttpClient, protected applicationConfigService: ApplicationConfigService) {}\n\n  create(pointsExchange: IPointsExchange): Observable<EntityResponseType> {\n    return this.http.post<IPointsExchange>(this.resourceUrl, pointsExchange, { observe: 'response' });\n  }\n\n  update(pointsExchange: IPointsExchange): Observable<EntityResponseType> {\n    return this.http.put<IPointsExchange>(`${this.resourceUrl}/${getPointsExchangeIdentifier(pointsExchange) as number}`, pointsExchange, {\n      observe: 'response',\n    });\n  }\n\n  partialUpdate(pointsExchange: IPointsExchange): Observable<EntityResponseType> {\n    return this.http.patch<IPointsExchange>(\n      `${this.resourceUrl}/${getPointsExchangeIdentifier(pointsExchange) as number}`,\n      pointsExchange,\n      { observe: 'response' }\n    );\n  }\n\n  find(id: number): Observable<EntityResponseType> {\n    return this.http.get<IPointsExchange>(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  query(req?: any): Observable<EntityArrayResponseType> {\n    const options = createRequestOption(req);\n    return this.http.get<IPointsExchange[]>(this.resourceUrl, { params: options, observe: 'response' });\n  }\n\n  delete(id: number): Observable<HttpResponse<{}>> {\n    return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  addPointsExchangeToCollectionIfMissing(\n    pointsExchangeCollection: IPointsExchange[],\n    ...pointsExchangesToCheck: (IPointsExchange | null | undefined)[]\n  ): IPointsExchange[] {\n    const pointsExchanges: IPointsExchange[] = pointsExchangesToCheck.filter(isPresent);\n    if (pointsExchanges.length > 0) {\n      const pointsExchangeCollectionIdentifiers = pointsExchangeCollection.map(\n        pointsExchangeItem => getPointsExchangeIdentifier(pointsExchangeItem)!\n      );\n      const pointsExchangesToAdd = pointsExchanges.filter(pointsExchangeItem => {\n        const pointsExchangeIdentifier = getPointsExchangeIdentifier(pointsExchangeItem);\n        if (pointsExchangeIdentifier == null || pointsExchangeCollectionIdentifiers.includes(pointsExchangeIdentifier)) {\n          return false;\n        }\n        pointsExchangeCollectionIdentifiers.push(pointsExchangeIdentifier);\n        return true;\n      });\n      return [...pointsExchangesToAdd, ...pointsExchangeCollection];\n    }\n    return pointsExchangeCollection;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}