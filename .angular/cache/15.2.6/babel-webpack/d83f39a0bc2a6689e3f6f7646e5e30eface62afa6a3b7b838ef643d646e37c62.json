{"ast":null,"code":"import * as dayjs from \"dayjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"app/general.service\";\nexport class TagCloudService {\n  constructor(generalService) {\n    this.generalService = generalService;\n  }\n  getTags() {\n    return this.tags;\n  }\n  load() {\n    return new Promise((resolve, reject) => {\n      this.generalService.findAllTags().subscribe(response => {\n        const md = response.body;\n        const nd = [];\n        md.forEach(tag => {\n          if (tag.shop !== null && tag.shop.active === true && tag.shop.activeOwner === true) {\n            nd.push({\n              text: tag.tag,\n              weight: this.getRandomInt(5, 9),\n              color: this.getRandomColor(),\n              rotate: this.getRandomInt(-30, 30),\n              link: '/supplier/shop/' + tag.shop.id + '/overview'\n            });\n          } else if (tag.event !== null && tag.event.active === true && tag.event.dateStart > dayjs()) {\n            nd.push({\n              text: tag.tag,\n              weight: this.getRandomInt(5, 9),\n              color: this.getRandomColor(),\n              rotate: this.getRandomInt(-30, 30),\n              link: '/events/' + tag.event.id + '/view'\n            });\n          } else if (tag.service !== null && tag.service.active === true && tag.service.activeOwner === true) {\n            nd.push({\n              text: tag.tag,\n              weight: this.getRandomInt(5, 9),\n              color: this.getRandomColor(),\n              rotate: this.getRandomInt(-30, 30),\n              link: '/services/' + tag.service.id + '/viewService'\n            });\n          }\n        });\n        nd.sort(() => Math.random() - 0.5);\n        this.tags = nd.slice(0, 50);\n        this.tags = nd;\n        resolve(true);\n      });\n    });\n  }\n  getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n  getRandomColor() {\n    const c = '#' + (0x1000000 + Math.random() * 0xffffff).toString(16).substr(1, 6);\n    return c;\n  }\n}\nTagCloudService.ɵfac = function TagCloudService_Factory(t) {\n  return new (t || TagCloudService)(i0.ɵɵinject(i1.GeneralService));\n};\nTagCloudService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TagCloudService,\n  factory: TagCloudService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["dayjs","TagCloudService","constructor","generalService","getTags","tags","load","Promise","resolve","reject","findAllTags","subscribe","response","md","body","nd","forEach","tag","shop","active","activeOwner","push","text","weight","getRandomInt","color","getRandomColor","rotate","link","id","event","dateStart","service","sort","Math","random","slice","min","max","ceil","floor","c","toString","substr","factory","providedIn"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/views/tag-cloud/tag-cloud.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { GeneralService } from 'app/general.service';\nimport * as dayjs from \"dayjs\";\nimport { CloudData } from 'angular-tag-cloud-module';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TagCloudService {\n  private tags!: CloudData[];\n\n  constructor(private generalService: GeneralService) {}\n\n  public getTags(): CloudData[] {\n    return this.tags;\n  }\n\n  load(): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n      this.generalService.findAllTags().subscribe(response => {\n        const md = response.body!;\n        const nd: CloudData[] = [];\n        md.forEach(tag => {\n          if (tag.shop !== null && tag.shop!.active === true && tag.shop.activeOwner === true) {\n            nd.push({\n              text: tag.tag!,\n              weight: this.getRandomInt(5, 9),\n              color: this.getRandomColor(),\n              rotate: this.getRandomInt(-30, 30),\n              link: '/supplier/shop/' + tag.shop!.id + '/overview'\n            });\n          } else if (tag.event !== null && tag.event!.active === true && tag.event!.dateStart! > dayjs()) {\n            nd.push({\n              text: tag.tag!,\n              weight: this.getRandomInt(5, 9),\n              color: this.getRandomColor(),\n              rotate: this.getRandomInt(-30, 30),\n              link: '/events/' + tag.event!.id + '/view'\n            });\n          } else if (tag.service !== null && tag.service!.active === true && tag.service.activeOwner === true) {\n            nd.push({\n              text: tag.tag!,\n              weight: this.getRandomInt(5, 9),\n              color: this.getRandomColor(),\n              rotate: this.getRandomInt(-30, 30),\n              link: '/services/' + tag.service!.id + '/viewService'\n            });\n          }\n        });\n        nd.sort(() => Math.random() - 0.5);\n        this.tags = nd.slice(0, 50);\n        this.tags = nd;\n        resolve(true);\n      });\n    });\n  }\n\n  getRandomInt(min: number, max: number): number {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  getRandomColor(): string {\n    const c = '#' + (0x1000000 + Math.random() * 0xffffff).toString(16).substr(1, 6);\n    return c;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}