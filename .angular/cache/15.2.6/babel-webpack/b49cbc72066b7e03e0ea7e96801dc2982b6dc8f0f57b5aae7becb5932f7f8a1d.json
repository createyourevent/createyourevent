{"ast":null,"code":"import { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getReservationTransactionIdIdentifier } from '../reservation-transaction-id.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport class ReservationTransactionIdService {\n  constructor(http, applicationConfigService) {\n    this.http = http;\n    this.applicationConfigService = applicationConfigService;\n    this.resourceUrl = this.applicationConfigService.getEndpointFor('api/reservation-transaction-ids');\n  }\n  create(reservationTransactionId) {\n    return this.http.post(this.resourceUrl, reservationTransactionId, {\n      observe: 'response'\n    });\n  }\n  update(reservationTransactionId) {\n    return this.http.put(`${this.resourceUrl}/${getReservationTransactionIdIdentifier(reservationTransactionId)}`, reservationTransactionId, {\n      observe: 'response'\n    });\n  }\n  partialUpdate(reservationTransactionId) {\n    return this.http.patch(`${this.resourceUrl}/${getReservationTransactionIdIdentifier(reservationTransactionId)}`, reservationTransactionId, {\n      observe: 'response'\n    });\n  }\n  find(id) {\n    return this.http.get(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  query(req) {\n    const options = createRequestOption(req);\n    return this.http.get(this.resourceUrl, {\n      params: options,\n      observe: 'response'\n    });\n  }\n  delete(id) {\n    return this.http.delete(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  addReservationTransactionIdToCollectionIfMissing(reservationTransactionIdCollection, ...reservationTransactionIdsToCheck) {\n    const reservationTransactionIds = reservationTransactionIdsToCheck.filter(isPresent);\n    if (reservationTransactionIds.length > 0) {\n      const reservationTransactionIdCollectionIdentifiers = reservationTransactionIdCollection.map(reservationTransactionIdItem => getReservationTransactionIdIdentifier(reservationTransactionIdItem));\n      const reservationTransactionIdsToAdd = reservationTransactionIds.filter(reservationTransactionIdItem => {\n        const reservationTransactionIdIdentifier = getReservationTransactionIdIdentifier(reservationTransactionIdItem);\n        if (reservationTransactionIdIdentifier == null || reservationTransactionIdCollectionIdentifiers.includes(reservationTransactionIdIdentifier)) {\n          return false;\n        }\n        reservationTransactionIdCollectionIdentifiers.push(reservationTransactionIdIdentifier);\n        return true;\n      });\n      return [...reservationTransactionIdsToAdd, ...reservationTransactionIdCollection];\n    }\n    return reservationTransactionIdCollection;\n  }\n}\nReservationTransactionIdService.ɵfac = function ReservationTransactionIdService_Factory(t) {\n  return new (t || ReservationTransactionIdService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n};\nReservationTransactionIdService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ReservationTransactionIdService,\n  factory: ReservationTransactionIdService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAIA,SAASA,SAAS,QAAQ,yBAAyB;AAEnD,SAASC,mBAAmB,QAAQ,+BAA+B;AACnE,SAAoCC,qCAAqC,QAAQ,qCAAqC;;;;AAMtH,OAAM,MAAOC,+BAA+B;EAG1CC,YAAsBC,IAAgB,EAAYC,wBAAkD;IAA9E,SAAI,GAAJD,IAAI;IAAwB,6BAAwB,GAAxBC,wBAAwB;IAFhE,gBAAW,GAAG,IAAI,CAACA,wBAAwB,CAACC,cAAc,CAAC,iCAAiC,CAAC;EAEA;EAEvGC,MAAM,CAACC,wBAAmD;IACxD,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAA4B,IAAI,CAACC,WAAW,EAAEF,wBAAwB,EAAE;MAAEG,OAAO,EAAE;IAAU,CAAE,CAAC;EACvH;EAEAC,MAAM,CAACJ,wBAAmD;IACxD,OAAO,IAAI,CAACJ,IAAI,CAACS,GAAG,CAClB,GAAG,IAAI,CAACH,WAAW,IAAIT,qCAAqC,CAACO,wBAAwB,CAAW,EAAE,EAClGA,wBAAwB,EACxB;MAAEG,OAAO,EAAE;IAAU,CAAE,CACxB;EACH;EAEAG,aAAa,CAACN,wBAAmD;IAC/D,OAAO,IAAI,CAACJ,IAAI,CAACW,KAAK,CACpB,GAAG,IAAI,CAACL,WAAW,IAAIT,qCAAqC,CAACO,wBAAwB,CAAW,EAAE,EAClGA,wBAAwB,EACxB;MAAEG,OAAO,EAAE;IAAU,CAAE,CACxB;EACH;EAEAK,IAAI,CAACC,EAAU;IACb,OAAO,IAAI,CAACb,IAAI,CAACc,GAAG,CAA4B,GAAG,IAAI,CAACR,WAAW,IAAIO,EAAE,EAAE,EAAE;MAAEN,OAAO,EAAE;IAAU,CAAE,CAAC;EACvG;EAEAQ,KAAK,CAACC,GAAS;IACb,MAAMC,OAAO,GAAGrB,mBAAmB,CAACoB,GAAG,CAAC;IACxC,OAAO,IAAI,CAAChB,IAAI,CAACc,GAAG,CAA8B,IAAI,CAACR,WAAW,EAAE;MAAEY,MAAM,EAAED,OAAO;MAAEV,OAAO,EAAE;IAAU,CAAE,CAAC;EAC/G;EAEAY,MAAM,CAACN,EAAU;IACf,OAAO,IAAI,CAACb,IAAI,CAACmB,MAAM,CAAC,GAAG,IAAI,CAACb,WAAW,IAAIO,EAAE,EAAE,EAAE;MAAEN,OAAO,EAAE;IAAU,CAAE,CAAC;EAC/E;EAEAa,gDAAgD,CAC9CC,kCAA+D,EAC/D,GAAGC,gCAAkF;IAErF,MAAMC,yBAAyB,GAAgCD,gCAAgC,CAACE,MAAM,CAAC7B,SAAS,CAAC;IACjH,IAAI4B,yBAAyB,CAACE,MAAM,GAAG,CAAC,EAAE;MACxC,MAAMC,6CAA6C,GAAGL,kCAAkC,CAACM,GAAG,CAC1FC,4BAA4B,IAAI/B,qCAAqC,CAAC+B,4BAA4B,CAAE,CACrG;MACD,MAAMC,8BAA8B,GAAGN,yBAAyB,CAACC,MAAM,CAACI,4BAA4B,IAAG;QACrG,MAAME,kCAAkC,GAAGjC,qCAAqC,CAAC+B,4BAA4B,CAAC;QAC9G,IACEE,kCAAkC,IAAI,IAAI,IAC1CJ,6CAA6C,CAACK,QAAQ,CAACD,kCAAkC,CAAC,EAC1F;UACA,OAAO,KAAK;;QAEdJ,6CAA6C,CAACM,IAAI,CAACF,kCAAkC,CAAC;QACtF,OAAO,IAAI;MACb,CAAC,CAAC;MACF,OAAO,CAAC,GAAGD,8BAA8B,EAAE,GAAGR,kCAAkC,CAAC;;IAEnF,OAAOA,kCAAkC;EAC3C;;;mBA7DWvB,+BAA+B;AAAA;;SAA/BA,+BAA+B;EAAAmC,SAA/BnC,+BAA+B;EAAAoC,YADlB;AAAM","names":["isPresent","createRequestOption","getReservationTransactionIdIdentifier","ReservationTransactionIdService","constructor","http","applicationConfigService","getEndpointFor","create","reservationTransactionId","post","resourceUrl","observe","update","put","partialUpdate","patch","find","id","get","query","req","options","params","delete","addReservationTransactionIdToCollectionIfMissing","reservationTransactionIdCollection","reservationTransactionIdsToCheck","reservationTransactionIds","filter","length","reservationTransactionIdCollectionIdentifiers","map","reservationTransactionIdItem","reservationTransactionIdsToAdd","reservationTransactionIdIdentifier","includes","push","factory","providedIn"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/entities/reservation-transaction-id/service/reservation-transaction-id.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { isPresent } from 'app/core/util/operators';\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { IReservationTransactionId, getReservationTransactionIdIdentifier } from '../reservation-transaction-id.model';\n\nexport type EntityResponseType = HttpResponse<IReservationTransactionId>;\nexport type EntityArrayResponseType = HttpResponse<IReservationTransactionId[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class ReservationTransactionIdService {\n  protected resourceUrl = this.applicationConfigService.getEndpointFor('api/reservation-transaction-ids');\n\n  constructor(protected http: HttpClient, protected applicationConfigService: ApplicationConfigService) {}\n\n  create(reservationTransactionId: IReservationTransactionId): Observable<EntityResponseType> {\n    return this.http.post<IReservationTransactionId>(this.resourceUrl, reservationTransactionId, { observe: 'response' });\n  }\n\n  update(reservationTransactionId: IReservationTransactionId): Observable<EntityResponseType> {\n    return this.http.put<IReservationTransactionId>(\n      `${this.resourceUrl}/${getReservationTransactionIdIdentifier(reservationTransactionId) as number}`,\n      reservationTransactionId,\n      { observe: 'response' }\n    );\n  }\n\n  partialUpdate(reservationTransactionId: IReservationTransactionId): Observable<EntityResponseType> {\n    return this.http.patch<IReservationTransactionId>(\n      `${this.resourceUrl}/${getReservationTransactionIdIdentifier(reservationTransactionId) as number}`,\n      reservationTransactionId,\n      { observe: 'response' }\n    );\n  }\n\n  find(id: number): Observable<EntityResponseType> {\n    return this.http.get<IReservationTransactionId>(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  query(req?: any): Observable<EntityArrayResponseType> {\n    const options = createRequestOption(req);\n    return this.http.get<IReservationTransactionId[]>(this.resourceUrl, { params: options, observe: 'response' });\n  }\n\n  delete(id: number): Observable<HttpResponse<{}>> {\n    return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  addReservationTransactionIdToCollectionIfMissing(\n    reservationTransactionIdCollection: IReservationTransactionId[],\n    ...reservationTransactionIdsToCheck: (IReservationTransactionId | null | undefined)[]\n  ): IReservationTransactionId[] {\n    const reservationTransactionIds: IReservationTransactionId[] = reservationTransactionIdsToCheck.filter(isPresent);\n    if (reservationTransactionIds.length > 0) {\n      const reservationTransactionIdCollectionIdentifiers = reservationTransactionIdCollection.map(\n        reservationTransactionIdItem => getReservationTransactionIdIdentifier(reservationTransactionIdItem)!\n      );\n      const reservationTransactionIdsToAdd = reservationTransactionIds.filter(reservationTransactionIdItem => {\n        const reservationTransactionIdIdentifier = getReservationTransactionIdIdentifier(reservationTransactionIdItem);\n        if (\n          reservationTransactionIdIdentifier == null ||\n          reservationTransactionIdCollectionIdentifiers.includes(reservationTransactionIdIdentifier)\n        ) {\n          return false;\n        }\n        reservationTransactionIdCollectionIdentifiers.push(reservationTransactionIdIdentifier);\n        return true;\n      });\n      return [...reservationTransactionIdsToAdd, ...reservationTransactionIdCollection];\n    }\n    return reservationTransactionIdCollection;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}