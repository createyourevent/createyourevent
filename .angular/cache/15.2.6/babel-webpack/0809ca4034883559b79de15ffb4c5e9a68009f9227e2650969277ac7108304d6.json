{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\nimport { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getUserPointAssociationIdentifier } from '../user-point-association.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport class UserPointAssociationService {\n  constructor(http, applicationConfigService) {\n    this.http = http;\n    this.applicationConfigService = applicationConfigService;\n    this.resourceUrl = this.applicationConfigService.getEndpointFor('api/user-point-associations');\n  }\n  create(userPointAssociation) {\n    const copy = this.convertDateFromClient(userPointAssociation);\n    return this.http.post(this.resourceUrl, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  update(userPointAssociation) {\n    const copy = this.convertDateFromClient(userPointAssociation);\n    return this.http.put(`${this.resourceUrl}/${getUserPointAssociationIdentifier(userPointAssociation)}`, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  partialUpdate(userPointAssociation) {\n    const copy = this.convertDateFromClient(userPointAssociation);\n    return this.http.patch(`${this.resourceUrl}/${getUserPointAssociationIdentifier(userPointAssociation)}`, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  find(id) {\n    return this.http.get(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  query(req) {\n    const options = createRequestOption(req);\n    return this.http.get(this.resourceUrl, {\n      params: options,\n      observe: 'response'\n    }).pipe(map(res => this.convertDateArrayFromServer(res)));\n  }\n  delete(id) {\n    return this.http.delete(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  addUserPointAssociationToCollectionIfMissing(userPointAssociationCollection, ...userPointAssociationsToCheck) {\n    const userPointAssociations = userPointAssociationsToCheck.filter(isPresent);\n    if (userPointAssociations.length > 0) {\n      const userPointAssociationCollectionIdentifiers = userPointAssociationCollection.map(userPointAssociationItem => getUserPointAssociationIdentifier(userPointAssociationItem));\n      const userPointAssociationsToAdd = userPointAssociations.filter(userPointAssociationItem => {\n        const userPointAssociationIdentifier = getUserPointAssociationIdentifier(userPointAssociationItem);\n        if (userPointAssociationIdentifier == null || userPointAssociationCollectionIdentifiers.includes(userPointAssociationIdentifier)) {\n          return false;\n        }\n        userPointAssociationCollectionIdentifiers.push(userPointAssociationIdentifier);\n        return true;\n      });\n      return [...userPointAssociationsToAdd, ...userPointAssociationCollection];\n    }\n    return userPointAssociationCollection;\n  }\n  convertDateFromClient(userPointAssociation) {\n    return Object.assign({}, userPointAssociation, {\n      date: userPointAssociation.date?.isValid() ? userPointAssociation.date.toJSON() : undefined\n    });\n  }\n  convertDateFromServer(res) {\n    if (res.body) {\n      res.body.date = res.body.date ? dayjs(res.body.date) : undefined;\n    }\n    return res;\n  }\n  convertDateArrayFromServer(res) {\n    if (res.body) {\n      res.body.forEach(userPointAssociation => {\n        userPointAssociation.date = userPointAssociation.date ? dayjs(userPointAssociation.date) : undefined;\n      });\n    }\n    return res;\n  }\n}\nUserPointAssociationService.ɵfac = function UserPointAssociationService_Factory(t) {\n  return new (t || UserPointAssociationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n};\nUserPointAssociationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserPointAssociationService,\n  factory: UserPointAssociationService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["map","dayjs","isPresent","createRequestOption","getUserPointAssociationIdentifier","UserPointAssociationService","constructor","http","applicationConfigService","getEndpointFor","create","userPointAssociation","copy","convertDateFromClient","post","resourceUrl","observe","pipe","res","convertDateFromServer","update","put","partialUpdate","patch","find","id","get","query","req","options","params","convertDateArrayFromServer","delete","addUserPointAssociationToCollectionIfMissing","userPointAssociationCollection","userPointAssociationsToCheck","userPointAssociations","filter","length","userPointAssociationCollectionIdentifiers","userPointAssociationItem","userPointAssociationsToAdd","userPointAssociationIdentifier","includes","push","Object","assign","date","isValid","toJSON","undefined","body","forEach","factory","providedIn"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/entities/user-point-association/service/user-point-association.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\n\nimport { isPresent } from 'app/core/util/operators';\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { IUserPointAssociation, getUserPointAssociationIdentifier } from '../user-point-association.model';\n\nexport type EntityResponseType = HttpResponse<IUserPointAssociation>;\nexport type EntityArrayResponseType = HttpResponse<IUserPointAssociation[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class UserPointAssociationService {\n  protected resourceUrl = this.applicationConfigService.getEndpointFor('api/user-point-associations');\n\n  constructor(protected http: HttpClient, protected applicationConfigService: ApplicationConfigService) {}\n\n  create(userPointAssociation: IUserPointAssociation): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(userPointAssociation);\n    return this.http\n      .post<IUserPointAssociation>(this.resourceUrl, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  update(userPointAssociation: IUserPointAssociation): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(userPointAssociation);\n    return this.http\n      .put<IUserPointAssociation>(`${this.resourceUrl}/${getUserPointAssociationIdentifier(userPointAssociation) as number}`, copy, {\n        observe: 'response',\n      })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  partialUpdate(userPointAssociation: IUserPointAssociation): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(userPointAssociation);\n    return this.http\n      .patch<IUserPointAssociation>(`${this.resourceUrl}/${getUserPointAssociationIdentifier(userPointAssociation) as number}`, copy, {\n        observe: 'response',\n      })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  find(id: number): Observable<EntityResponseType> {\n    return this.http\n      .get<IUserPointAssociation>(`${this.resourceUrl}/${id}`, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  query(req?: any): Observable<EntityArrayResponseType> {\n    const options = createRequestOption(req);\n    return this.http\n      .get<IUserPointAssociation[]>(this.resourceUrl, { params: options, observe: 'response' })\n      .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n  }\n\n  delete(id: number): Observable<HttpResponse<{}>> {\n    return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  addUserPointAssociationToCollectionIfMissing(\n    userPointAssociationCollection: IUserPointAssociation[],\n    ...userPointAssociationsToCheck: (IUserPointAssociation | null | undefined)[]\n  ): IUserPointAssociation[] {\n    const userPointAssociations: IUserPointAssociation[] = userPointAssociationsToCheck.filter(isPresent);\n    if (userPointAssociations.length > 0) {\n      const userPointAssociationCollectionIdentifiers = userPointAssociationCollection.map(\n        userPointAssociationItem => getUserPointAssociationIdentifier(userPointAssociationItem)!\n      );\n      const userPointAssociationsToAdd = userPointAssociations.filter(userPointAssociationItem => {\n        const userPointAssociationIdentifier = getUserPointAssociationIdentifier(userPointAssociationItem);\n        if (userPointAssociationIdentifier == null || userPointAssociationCollectionIdentifiers.includes(userPointAssociationIdentifier)) {\n          return false;\n        }\n        userPointAssociationCollectionIdentifiers.push(userPointAssociationIdentifier);\n        return true;\n      });\n      return [...userPointAssociationsToAdd, ...userPointAssociationCollection];\n    }\n    return userPointAssociationCollection;\n  }\n\n  protected convertDateFromClient(userPointAssociation: IUserPointAssociation): IUserPointAssociation {\n    return Object.assign({}, userPointAssociation, {\n      date: userPointAssociation.date?.isValid() ? userPointAssociation.date.toJSON() : undefined,\n    });\n  }\n\n  protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\n    if (res.body) {\n      res.body.date = res.body.date ? dayjs(res.body.date) : undefined;\n    }\n    return res;\n  }\n\n  protected convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\n    if (res.body) {\n      res.body.forEach((userPointAssociation: IUserPointAssociation) => {\n        userPointAssociation.date = userPointAssociation.date ? dayjs(userPointAssociation.date) : undefined;\n      });\n    }\n    return res;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}