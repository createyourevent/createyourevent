{"ast":null,"code":"import { map, catchError } from 'rxjs/operators';\nimport { SERVER_API_URL } from 'app/app.constants';\nimport { Observable } from 'rxjs';\nimport { ChatAdapter, Message } from 'ng-chat';\nimport { ChatMessage } from './chat-message.model';\nexport class SocketIOAdapter extends ChatAdapter {\n  constructor(userId, socket, http, sharedChatService) {\n    super();\n    this.sharedChatService = sharedChatService;\n    this.resourceUrl = SERVER_API_URL + 'api/chatMessages';\n    this.socket = socket;\n    this.http = http;\n    this.userId = userId;\n    this.InitializeSocketListerners();\n  }\n  setNgChat(ngChatInstance) {\n    this.ngChatInstance = ngChatInstance;\n  }\n  listFriends() {\n    return this.http.post(\"https://chat.createyourevent.org/listFriends\", {\n      userId: this.userId\n    }).pipe(map(res => res.json()), catchError(error => Observable.throw(error.json().error || 'Server error')));\n  }\n  getMessageHistory(userId) {\n    const ngMessages = [];\n    let messages = [];\n    const response = this.sharedChatService.query({\n      size: 2000\n    }).pipe(map(res => {\n      messages = res.body;\n      messages.forEach(element => {\n        if (element.messageFrom === userId && element.messageTo === this.userId || element.messageFrom === this.userId && element.messageTo === userId) {\n          const m = new Message();\n          m.fromId = element.messageFrom;\n          m.toId = element.messageTo;\n          m.message = element.message;\n          m.type = element.messageType;\n          m.dateSent = element.dateSent;\n          m.dateSeen = element.dateSeen;\n          ngMessages.push(m);\n        }\n      });\n      return ngMessages;\n    }));\n    return response;\n  }\n  sendMessage(message) {\n    const msg = new ChatMessage();\n    msg.dateSent = message.dateSent;\n    msg.messageFrom = message.fromId;\n    msg.messageTo = message.toId;\n    msg.messageType = message.type;\n    msg.message = message.message;\n    this.sharedChatService.create(msg).subscribe(newInstance => {\n      this.socket.emit(\"sendMessage\", message, newInstance.body.id);\n    });\n  }\n  groupCreated(group) {\n    console.log(group);\n    // DemoAdapter.mockedParticipants.push(group);\n    /*\n    DemoAdapter.mockedParticipants = DemoAdapter.mockedParticipants.sort((first, second) =>\n        second.displayName > first.displayName ? -1 : 1\n    );\n    */\n    // Trigger update of friends list\n    this.listFriends().subscribe(response => {\n      this.onFriendsListChanged(response);\n    });\n  }\n  InitializeSocketListerners() {\n    this.socket.on(\"messageReceived\", (messageWrapper, messageId) => {\n      // Handle the received message to ng-chat\n      this.sharedChatService.find(messageId).subscribe(msg => {\n        const message = msg.body;\n        message.dateSeen = new Date();\n        this.sharedChatService.update(message).subscribe(() => {\n          this.onMessageReceived(messageWrapper.user, messageWrapper.message);\n        });\n      });\n    });\n    this.socket.on(\"friendsListChanged\", usersCollection => {\n      this.onFriendsListChanged(usersCollection.filter(x => x.participant.id !== this.userId));\n    });\n    this.socket.on(\"userLoggedOf\", id => {\n      this.ngChatInstance.triggerCloseChatWindow(id);\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["map","catchError","SERVER_API_URL","Observable","ChatAdapter","Message","ChatMessage","SocketIOAdapter","constructor","userId","socket","http","sharedChatService","InitializeSocketListerners","setNgChat","ngChatInstance","listFriends","post","pipe","res","json","error","throw","getMessageHistory","ngMessages","messages","response","query","size","body","forEach","element","messageFrom","messageTo","m","fromId","toId","message","type","messageType","dateSent","dateSeen","push","sendMessage","msg","create","subscribe","newInstance","emit","id","groupCreated","group","console","log","onFriendsListChanged","on","messageWrapper","messageId","find","Date","update","onMessageReceived","user","usersCollection","filter","x","participant","triggerCloseChatWindow"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/chat/SocketIOAdapter.ts"],"sourcesContent":["\nimport { map, catchError } from 'rxjs/operators';\nimport { Socket } from 'ngx-socket-io';\n// import { Socket } from 'socket.io-client';\nimport { Http, Response } from '@angular/http';\nimport { SharedChatService } from 'app/chat.service';\nimport { SERVER_API_URL } from 'app/app.constants';\nimport { Observable } from 'rxjs';\nimport { ChatAdapter, IChatGroupAdapter, IChatController, ParticipantResponse, Message, Group } from 'ng-chat';\nimport { ChatMessage, IChatMessage } from './chat-message.model';\n\nexport class SocketIOAdapter extends ChatAdapter implements IChatGroupAdapter\n{\n\n  public resourceUrl = SERVER_API_URL + 'api/chatMessages';\n  private socket: Socket;\n  private http: Http;\n  private userId: string;\n  private ngChatInstance!: IChatController;\n\n\n    constructor(userId: string, socket: Socket, http: Http, private sharedChatService: SharedChatService) {\n        super();\n        this.socket = socket;\n        this.http = http;\n        this.userId = userId;\n        this.InitializeSocketListerners();\n    }\n\n    public setNgChat(ngChatInstance: IChatController): void {\n      this.ngChatInstance = ngChatInstance;\n    }\n\n    listFriends(): Observable<ParticipantResponse[]>  {\n\n     return this.http\n            .post(\"https://chat.createyourevent.org/listFriends\", {userId: this.userId})\n            .pipe(\n                map((res:Response) => res.json()),\n                catchError((error:any) => Observable.throw(error.json().error || 'Server error'))\n            );\n    }\n\n    getMessageHistory(userId: any): Observable<Message[]> {\n      const ngMessages: Message[] = [];\n      let messages: IChatMessage[] = [];\n      const response = this.sharedChatService.query({size: 2000}).pipe(map(res => {\n        messages = res.body!;\n        messages.forEach(element => {\n          if((element.messageFrom === userId && element.messageTo === this.userId) || (element.messageFrom === this.userId && element.messageTo === userId)) {\n            const m = new Message();\n            m.fromId = element.messageFrom;\n            m.toId = element.messageTo;\n            m.message = element.message!;\n            m.type = element.messageType;\n            m.dateSent = element.dateSent;\n            m.dateSeen = element.dateSeen;\n            ngMessages.push(m);\n          }\n        });\n        return ngMessages;\n      }));\n      return response;\n    }\n\n\n    sendMessage(message: Message): void {\n      const msg = new ChatMessage();\n      msg.dateSent = message.dateSent;\n      msg.messageFrom = message.fromId;\n      msg.messageTo = message.toId;\n      msg.messageType = message.type;\n      msg.message = message.message;\n      this.sharedChatService.create(msg).subscribe(newInstance => {\n        this.socket.emit(\"sendMessage\", message, newInstance.body!.id);\n      });\n\n    }\n\n    groupCreated(group: Group): void {\n      console.log(group);\n      // DemoAdapter.mockedParticipants.push(group);\n\n      /*\n      DemoAdapter.mockedParticipants = DemoAdapter.mockedParticipants.sort((first, second) =>\n          second.displayName > first.displayName ? -1 : 1\n      );\n      */\n\n      // Trigger update of friends list\n      this.listFriends().subscribe(response => {\n          this.onFriendsListChanged(response);\n      });\n  }\n\n    public InitializeSocketListerners(): void\n    {\n\n      this.socket.on(\"messageReceived\", (messageWrapper: any, messageId: number) => {\n        // Handle the received message to ng-chat\n        this.sharedChatService.find(messageId).subscribe(msg => {\n          const message = msg.body;\n          message!.dateSeen = new Date();\n          this.sharedChatService.update(message!).subscribe(() => {\n            this.onMessageReceived(messageWrapper.user, messageWrapper.message);\n          }\n          );\n        });\n\n      });\n\n      this.socket.on(\"friendsListChanged\", (usersCollection: Array<ParticipantResponse>) => {\n        this.onFriendsListChanged(usersCollection.filter(x => x.participant.id !== this.userId));\n      });\n\n      this.socket.on(\"userLoggedOf\", (id: number) => {\n        this.ngChatInstance.triggerCloseChatWindow(id);\n      });\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}