{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\nimport { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getReservationIdentifier } from '../reservation.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport class ReservationService {\n  constructor(http, applicationConfigService) {\n    this.http = http;\n    this.applicationConfigService = applicationConfigService;\n    this.resourceUrl = this.applicationConfigService.getEndpointFor('api/reservations');\n  }\n  create(reservation) {\n    const copy = this.convertDateFromClient(reservation);\n    return this.http.post(this.resourceUrl, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  update(reservation) {\n    const copy = this.convertDateFromClient(reservation);\n    return this.http.put(`${this.resourceUrl}/${getReservationIdentifier(reservation)}`, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  partialUpdate(reservation) {\n    const copy = this.convertDateFromClient(reservation);\n    return this.http.patch(`${this.resourceUrl}/${getReservationIdentifier(reservation)}`, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  find(id) {\n    return this.http.get(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  query(req) {\n    const options = createRequestOption(req);\n    return this.http.get(this.resourceUrl, {\n      params: options,\n      observe: 'response'\n    }).pipe(map(res => this.convertDateArrayFromServer(res)));\n  }\n  delete(id) {\n    return this.http.delete(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  addReservationToCollectionIfMissing(reservationCollection, ...reservationsToCheck) {\n    const reservations = reservationsToCheck.filter(isPresent);\n    if (reservations.length > 0) {\n      const reservationCollectionIdentifiers = reservationCollection.map(reservationItem => getReservationIdentifier(reservationItem));\n      const reservationsToAdd = reservations.filter(reservationItem => {\n        const reservationIdentifier = getReservationIdentifier(reservationItem);\n        if (reservationIdentifier == null || reservationCollectionIdentifiers.includes(reservationIdentifier)) {\n          return false;\n        }\n        reservationCollectionIdentifiers.push(reservationIdentifier);\n        return true;\n      });\n      return [...reservationsToAdd, ...reservationCollection];\n    }\n    return reservationCollection;\n  }\n  convertDateFromClient(reservation) {\n    return Object.assign({}, reservation, {\n      date: reservation.date?.isValid() ? reservation.date.toJSON() : undefined,\n      accessDate: reservation.accessDate?.isValid() ? reservation.accessDate.toJSON() : undefined\n    });\n  }\n  convertDateFromServer(res) {\n    if (res.body) {\n      res.body.date = res.body.date ? dayjs(res.body.date) : undefined;\n      res.body.accessDate = res.body.accessDate ? dayjs(res.body.accessDate) : undefined;\n    }\n    return res;\n  }\n  convertDateArrayFromServer(res) {\n    if (res.body) {\n      res.body.forEach(reservation => {\n        reservation.date = reservation.date ? dayjs(reservation.date) : undefined;\n        reservation.accessDate = reservation.accessDate ? dayjs(reservation.accessDate) : undefined;\n      });\n    }\n    return res;\n  }\n}\nReservationService.ɵfac = function ReservationService_Factory(t) {\n  return new (t || ReservationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n};\nReservationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ReservationService,\n  factory: ReservationService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["map","dayjs","isPresent","createRequestOption","getReservationIdentifier","ReservationService","constructor","http","applicationConfigService","getEndpointFor","create","reservation","copy","convertDateFromClient","post","resourceUrl","observe","pipe","res","convertDateFromServer","update","put","partialUpdate","patch","find","id","get","query","req","options","params","convertDateArrayFromServer","delete","addReservationToCollectionIfMissing","reservationCollection","reservationsToCheck","reservations","filter","length","reservationCollectionIdentifiers","reservationItem","reservationsToAdd","reservationIdentifier","includes","push","Object","assign","date","isValid","toJSON","undefined","accessDate","body","forEach","factory","providedIn"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/entities/reservation/service/reservation.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\n\nimport { isPresent } from 'app/core/util/operators';\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { IReservation, getReservationIdentifier } from '../reservation.model';\n\nexport type EntityResponseType = HttpResponse<IReservation>;\nexport type EntityArrayResponseType = HttpResponse<IReservation[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class ReservationService {\n  protected resourceUrl = this.applicationConfigService.getEndpointFor('api/reservations');\n\n  constructor(protected http: HttpClient, protected applicationConfigService: ApplicationConfigService) {}\n\n  create(reservation: IReservation): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(reservation);\n    return this.http\n      .post<IReservation>(this.resourceUrl, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  update(reservation: IReservation): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(reservation);\n    return this.http\n      .put<IReservation>(`${this.resourceUrl}/${getReservationIdentifier(reservation) as number}`, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  partialUpdate(reservation: IReservation): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(reservation);\n    return this.http\n      .patch<IReservation>(`${this.resourceUrl}/${getReservationIdentifier(reservation) as number}`, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  find(id: number): Observable<EntityResponseType> {\n    return this.http\n      .get<IReservation>(`${this.resourceUrl}/${id}`, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  query(req?: any): Observable<EntityArrayResponseType> {\n    const options = createRequestOption(req);\n    return this.http\n      .get<IReservation[]>(this.resourceUrl, { params: options, observe: 'response' })\n      .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n  }\n\n  delete(id: number): Observable<HttpResponse<{}>> {\n    return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  addReservationToCollectionIfMissing(\n    reservationCollection: IReservation[],\n    ...reservationsToCheck: (IReservation | null | undefined)[]\n  ): IReservation[] {\n    const reservations: IReservation[] = reservationsToCheck.filter(isPresent);\n    if (reservations.length > 0) {\n      const reservationCollectionIdentifiers = reservationCollection.map(reservationItem => getReservationIdentifier(reservationItem)!);\n      const reservationsToAdd = reservations.filter(reservationItem => {\n        const reservationIdentifier = getReservationIdentifier(reservationItem);\n        if (reservationIdentifier == null || reservationCollectionIdentifiers.includes(reservationIdentifier)) {\n          return false;\n        }\n        reservationCollectionIdentifiers.push(reservationIdentifier);\n        return true;\n      });\n      return [...reservationsToAdd, ...reservationCollection];\n    }\n    return reservationCollection;\n  }\n\n  protected convertDateFromClient(reservation: IReservation): IReservation {\n    return Object.assign({}, reservation, {\n      date: reservation.date?.isValid() ? reservation.date.toJSON() : undefined,\n      accessDate: reservation.accessDate?.isValid() ? reservation.accessDate.toJSON() : undefined,\n    });\n  }\n\n  protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\n    if (res.body) {\n      res.body.date = res.body.date ? dayjs(res.body.date) : undefined;\n      res.body.accessDate = res.body.accessDate ? dayjs(res.body.accessDate) : undefined;\n    }\n    return res;\n  }\n\n  protected convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\n    if (res.body) {\n      res.body.forEach((reservation: IReservation) => {\n        reservation.date = reservation.date ? dayjs(reservation.date) : undefined;\n        reservation.accessDate = reservation.accessDate ? dayjs(reservation.accessDate) : undefined;\n      });\n    }\n    return res;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}