{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { Injectable, NgZone, EventEmitter, Component, ChangeDetectionStrategy, ChangeDetectorRef, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport * as ɵngcc0 from '@angular/core';\nconst _c0 = [\"payPalButtonContainer\"];\nclass ScriptService {\n  constructor(zone) {\n    this.zone = zone;\n  }\n  registerScript(url, globalVar, onReady) {\n    const existingGlobalVar = window[globalVar];\n    if (existingGlobalVar) {\n      // global variable is present = script was already loaded\n      this.zone.run(() => {\n        onReady(existingGlobalVar);\n      });\n      return;\n    }\n    // prepare script elem\n    const scriptElem = document.createElement('script');\n    scriptElem.id = this.getElemId(globalVar);\n    scriptElem.innerHTML = '';\n    scriptElem.onload = () => {\n      this.zone.run(() => {\n        onReady(window[globalVar]);\n      });\n    };\n    scriptElem.src = url;\n    scriptElem.async = true;\n    scriptElem.defer = true;\n    // add script to header\n    document.getElementsByTagName('head')[0].appendChild(scriptElem);\n  }\n  cleanup(globalVar) {\n    // remove script from DOM\n    const scriptElem = document.getElementById(this.getElemId(globalVar));\n    if (scriptElem) {\n      scriptElem.remove();\n    }\n  }\n  getElemId(globalVar) {\n    return `ngx-paypal-script-elem-${globalVar}`;\n  }\n}\nScriptService.ɵfac = function ScriptService_Factory(t) {\n  return new (t || ScriptService)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n};\nScriptService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: ScriptService,\n  factory: ScriptService.ɵfac\n});\n/** @nocollapse */\nScriptService.ctorParameters = () => [{\n  type: NgZone\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScriptService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ɵngcc0.NgZone\n    }];\n  }, null);\n})();\nclass PayPalScriptService {\n  constructor(scriptService) {\n    this.scriptService = scriptService;\n    this.paypalWindowName = 'paypal';\n  }\n  registerPayPalScript(config, onReady) {\n    this.scriptService.registerScript(this.getUrlForConfig(config), this.paypalWindowName, onReady);\n  }\n  destroyPayPalScript() {\n    this.scriptService.cleanup(this.paypalWindowName);\n  }\n  getUrlForConfig(config) {\n    const params = [{\n      name: 'client-id',\n      value: config.clientId\n    }];\n    if (config.currency) {\n      params.push({\n        name: 'currency',\n        value: config.currency\n      });\n    }\n    if (config.commit) {\n      params.push({\n        name: 'commit',\n        value: config.commit\n      });\n    }\n    if (config.vault) {\n      params.push({\n        name: 'vault',\n        value: config.vault\n      });\n    }\n    if (config.extraParams) {\n      params.push(...config.extraParams);\n    }\n    return `https://www.paypal.com/sdk/js${this.getQueryString(params)}`;\n  }\n  getQueryString(queryParams) {\n    let queryString = '';\n    for (let i = 0; i < queryParams.length; i++) {\n      const queryParam = queryParams[i];\n      if (i === 0) {\n        queryString += '?';\n      } else {\n        queryString += '&';\n      }\n      queryString += `${queryParam.name}=${queryParam.value}`;\n    }\n    return queryString;\n  }\n}\nPayPalScriptService.ɵfac = function PayPalScriptService_Factory(t) {\n  return new (t || PayPalScriptService)(ɵngcc0.ɵɵinject(ScriptService));\n};\nPayPalScriptService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: PayPalScriptService,\n  factory: PayPalScriptService.ɵfac\n});\n/** @nocollapse */\nPayPalScriptService.ctorParameters = () => [{\n  type: ScriptService\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PayPalScriptService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ScriptService\n    }];\n  }, null);\n})();\nclass NgxPaypalComponent {\n  constructor(paypalScriptService, cdr, ngZone) {\n    this.paypalScriptService = paypalScriptService;\n    this.cdr = cdr;\n    this.ngZone = ngZone;\n    /**\r\n     * If enabled, paypal SDK script will be loaded. Useful if you want to have multiple PayPal components on the same page\r\n     * sharing base configuration. In such a case only a single component may register script.\r\n     */\n    this.registerScript = true;\n    /**\r\n     * Emitted when paypal script is loaded\r\n     */\n    this.scriptLoaded = new EventEmitter();\n    this.ngUnsubscribe = new Subject();\n    /**\r\n     * Flag that indicates if paypal should be initialized (required for handling script load events and availability of DOM element)\r\n     */\n    this.initializePayPal = true;\n  }\n  set payPalButtonContainer(content) {\n    this.payPalButtonContainerElem = content;\n  }\n  ngOnChanges(changes) {\n    if (!this.payPalButtonContainerId) {\n      this.payPalButtonContainerId = this.generateElementId();\n    }\n    // first time config setup\n    const config = this.config;\n    if (changes.config.isFirstChange()) {\n      if (config && this.registerScript) {\n        this.initPayPalScript(config, payPal => {\n          // store reference to paypal global script\n          this.payPal = payPal;\n          this.doPayPalCheck();\n        });\n      }\n    }\n    // changes to config\n    if (!changes.config.isFirstChange()) {\n      this.reinitialize(config);\n    }\n  }\n  ngOnDestroy() {\n    this.paypalScriptService.destroyPayPalScript();\n    this.ngUnsubscribe.next();\n    this.ngUnsubscribe.complete();\n  }\n  ngAfterViewInit() {\n    this.doPayPalCheck();\n  }\n  customInit(payPal) {\n    this.payPal = payPal;\n    this.doPayPalCheck();\n  }\n  reinitialize(config) {\n    this.config = config;\n    this.payPal = undefined;\n    this.paypalScriptService.destroyPayPalScript();\n    this.payPalButtonContainerId = this.generateElementId();\n    this.initializePayPal = true;\n    if (this.payPalButtonContainerElem) {\n      while (this.payPalButtonContainerElem.nativeElement.firstChild) {\n        this.payPalButtonContainerElem.nativeElement.removeChild(this.payPalButtonContainerElem.nativeElement.firstChild);\n      }\n    }\n    this.cdr.detectChanges();\n    if (this.config) {\n      if (!this.payPal) {\n        this.initPayPalScript(this.config, payPal => {\n          // store reference to paypal global script\n          this.payPal = payPal;\n          this.doPayPalCheck();\n        });\n      } else {\n        this.doPayPalCheck();\n      }\n    }\n  }\n  doPayPalCheck() {\n    if (this.initializePayPal && this.config && this.payPal && this.payPalButtonContainerElem) {\n      // make sure that id is also set\n      if (this.payPalButtonContainerElem.nativeElement.id) {\n        this.initializePayPal = false;\n        this.initPayPal(this.config, this.payPal);\n      }\n    }\n  }\n  initPayPalScript(config, initPayPal) {\n    this.paypalScriptService.registerPayPalScript({\n      clientId: config.clientId,\n      commit: config.advanced && config.advanced.commit ? config.advanced.commit : undefined,\n      currency: config.currency,\n      vault: config.vault,\n      extraParams: config.advanced && config.advanced.extraQueryParams ? config.advanced.extraQueryParams : []\n    }, paypal => {\n      this.scriptLoaded.next(paypal);\n      initPayPal(paypal);\n    });\n  }\n  generateElementId() {\n    return `ngx-captcha-id-${new Date().valueOf()}`;\n  }\n  initPayPal(config, paypal) {\n    // Running outside angular zone prevents infinite ngDoCheck lifecycle calls\n    this.ngZone.runOutsideAngular(() => {\n      // https://developer.paypal.com/docs/checkout/integrate/#2-add-the-paypal-script-to-your-web-page\n      const createOrder = (data, actions) => {\n        return this.ngZone.run(() => {\n          if (config.createOrderOnClient && config.createOrderOnServer) {\n            throw Error(`Both 'createOrderOnClient' and 'createOrderOnServer' are defined.\n                    Please choose one or the other.`);\n          }\n          if (!config.createOrderOnClient && !config.createOrderOnServer) {\n            throw Error(`Neither 'createOrderOnClient' or 'createOrderOnServer' are defined.\n                    Please define one of these to create order.`);\n          }\n          if (config.createOrderOnClient) {\n            return actions.order.create(config.createOrderOnClient(data));\n          }\n          if (config.createOrderOnServer) {\n            return config.createOrderOnServer(data);\n          }\n          throw Error(`Invalid state for 'createOrder'.`);\n        });\n      };\n      const createSubscription = (data, actions) => {\n        return this.ngZone.run(() => {\n          if (config.createSubscription) {\n            return config.createSubscription(data, actions);\n          }\n        });\n      };\n      const onShippingChange = (data, actions) => {\n        return this.ngZone.run(() => {\n          if (config.onShippingChange) {\n            return config.onShippingChange(data, actions);\n          }\n        });\n      };\n      const buttonsConfig = Object.assign(Object.assign(Object.assign({\n        style: config.style,\n        onApprove: (data, actions) => {\n          return this.ngZone.run(() => {\n            if (config.onApprove) {\n              config.onApprove(data, actions);\n            }\n            // capture on server\n            if (config.authorizeOnServer) {\n              return config.authorizeOnServer(data, actions);\n            }\n            // capture on client\n            const onClientAuthorization = config.onClientAuthorization;\n            if (onClientAuthorization) {\n              actions.order.capture().then(details => {\n                this.ngZone.run(() => {\n                  onClientAuthorization(details);\n                });\n              });\n              return;\n            }\n          });\n        },\n        onError: error => {\n          this.ngZone.run(() => {\n            if (config.onError) {\n              config.onError(error);\n            }\n          });\n        },\n        onCancel: (data, actions) => {\n          this.ngZone.run(() => {\n            if (config.onCancel) {\n              config.onCancel(data, actions);\n            }\n          });\n        },\n        onClick: (data, actions) => {\n          this.ngZone.run(() => {\n            if (config.onClick) {\n              config.onClick(data, actions);\n            }\n          });\n        },\n        onInit: (data, actions) => {\n          this.ngZone.run(() => {\n            if (config.onInit) {\n              config.onInit(data, actions);\n            }\n          });\n        }\n      }, (config.createOrderOnClient || config.createOrderOnServer) && {\n        createOrder\n      }), config.createSubscription && {\n        createSubscription\n      }), config.onShippingChange && {\n        onShippingChange\n      });\n      paypal.Buttons(buttonsConfig).render(`#${this.payPalButtonContainerId}`);\n    });\n  }\n}\nNgxPaypalComponent.ɵfac = function NgxPaypalComponent_Factory(t) {\n  return new (t || NgxPaypalComponent)(ɵngcc0.ɵɵdirectiveInject(PayPalScriptService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\nNgxPaypalComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: NgxPaypalComponent,\n  selectors: [[\"ngx-paypal\"]],\n  viewQuery: function NgxPaypalComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.payPalButtonContainer = _t.first);\n    }\n  },\n  inputs: {\n    registerScript: \"registerScript\",\n    config: \"config\"\n  },\n  outputs: {\n    scriptLoaded: \"scriptLoaded\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  decls: 4,\n  vars: 1,\n  consts: [[3, \"id\"], [\"payPalButtonContainer\", \"\"]],\n  template: function NgxPaypalComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtext(0, \"\\n    \");\n      ɵngcc0.ɵɵelement(1, \"div\", 0, 1);\n      ɵngcc0.ɵɵtext(3, \"\\n    \");\n    }\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"id\", ctx.payPalButtonContainerId);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\nNgxPaypalComponent.ctorParameters = () => [{\n  type: PayPalScriptService\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: NgZone\n}];\nNgxPaypalComponent.propDecorators = {\n  config: [{\n    type: Input\n  }],\n  registerScript: [{\n    type: Input\n  }],\n  scriptLoaded: [{\n    type: Output\n  }],\n  payPalButtonContainer: [{\n    type: ViewChild,\n    args: ['payPalButtonContainer', {\n      static: false\n    }]\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxPaypalComponent, [{\n    type: Component,\n    args: [{\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      selector: 'ngx-paypal',\n      template: `\n    <div #payPalButtonContainer [id]=\"payPalButtonContainerId\"></div>\n    `\n    }]\n  }], function () {\n    return [{\n      type: PayPalScriptService\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, {\n    registerScript: [{\n      type: Input\n    }],\n    scriptLoaded: [{\n      type: Output\n    }],\n    payPalButtonContainer: [{\n      type: ViewChild,\n      args: ['payPalButtonContainer', {\n        static: false\n      }]\n    }],\n    config: [{\n      type: Input\n    }]\n  });\n})();\nclass NgxPayPalModule {}\nNgxPayPalModule.ɵfac = function NgxPayPalModule_Factory(t) {\n  return new (t || NgxPayPalModule)();\n};\nNgxPayPalModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: NgxPayPalModule\n});\nNgxPayPalModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [ScriptService, PayPalScriptService],\n  imports: [CommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxPayPalModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [NgxPaypalComponent],\n      exports: [NgxPaypalComponent],\n      providers: [ScriptService, PayPalScriptService]\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxPayPalModule, {\n    declarations: function () {\n      return [NgxPaypalComponent];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [NgxPaypalComponent];\n    }\n  });\n})();\n\n/** Public API */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NgxPayPalModule, NgxPaypalComponent, PayPalScriptService, ScriptService as ɵa };","map":{"version":3,"names":["CommonModule","Injectable","NgZone","EventEmitter","Component","ChangeDetectionStrategy","ChangeDetectorRef","Input","Output","ViewChild","NgModule","Subject","ɵngcc0","_c0","ScriptService","constructor","zone","registerScript","url","globalVar","onReady","existingGlobalVar","window","run","scriptElem","document","createElement","id","getElemId","innerHTML","onload","src","async","defer","getElementsByTagName","appendChild","cleanup","getElementById","remove","ɵfac","ScriptService_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","ctorParameters","type","ngDevMode","ɵsetClassMetadata","PayPalScriptService","scriptService","paypalWindowName","registerPayPalScript","config","getUrlForConfig","destroyPayPalScript","params","name","value","clientId","currency","push","commit","vault","extraParams","getQueryString","queryParams","queryString","i","length","queryParam","PayPalScriptService_Factory","NgxPaypalComponent","paypalScriptService","cdr","ngZone","scriptLoaded","ngUnsubscribe","initializePayPal","payPalButtonContainer","content","payPalButtonContainerElem","ngOnChanges","changes","payPalButtonContainerId","generateElementId","isFirstChange","initPayPalScript","payPal","doPayPalCheck","reinitialize","ngOnDestroy","next","complete","ngAfterViewInit","customInit","undefined","nativeElement","firstChild","removeChild","detectChanges","initPayPal","advanced","extraQueryParams","paypal","Date","valueOf","runOutsideAngular","createOrder","data","actions","createOrderOnClient","createOrderOnServer","Error","order","create","createSubscription","onShippingChange","buttonsConfig","Object","assign","style","onApprove","authorizeOnServer","onClientAuthorization","capture","then","details","onError","error","onCancel","onClick","onInit","Buttons","render","NgxPaypalComponent_Factory","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","selectors","viewQuery","NgxPaypalComponent_Query","rf","ctx","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","inputs","outputs","features","ɵɵNgOnChangesFeature","decls","vars","consts","template","NgxPaypalComponent_Template","ɵɵtext","ɵɵelement","ɵɵadvance","ɵɵproperty","encapsulation","changeDetection","propDecorators","args","static","OnPush","selector","NgxPayPalModule","NgxPayPalModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","imports","declarations","exports","ngJitMode","ɵɵsetNgModuleScope","ɵa"],"sources":["/home/ceo/mmmm/createyourevent/node_modules/ngx-paypal/__ivy_ngcc__/fesm2015/ngx-paypal.js"],"sourcesContent":["import { CommonModule } from '@angular/common';\nimport { Injectable, NgZone, EventEmitter, Component, ChangeDetectionStrategy, ChangeDetectorRef, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport * as ɵngcc0 from '@angular/core';\n\nconst _c0 = [\"payPalButtonContainer\"];\nclass ScriptService {\r\n    constructor(zone) {\r\n        this.zone = zone;\r\n    }\r\n    registerScript(url, globalVar, onReady) {\r\n        const existingGlobalVar = window[globalVar];\r\n        if (existingGlobalVar) {\r\n            // global variable is present = script was already loaded\r\n            this.zone.run(() => {\r\n                onReady(existingGlobalVar);\r\n            });\r\n            return;\r\n        }\r\n        // prepare script elem\r\n        const scriptElem = document.createElement('script');\r\n        scriptElem.id = this.getElemId(globalVar);\r\n        scriptElem.innerHTML = '';\r\n        scriptElem.onload = () => {\r\n            this.zone.run(() => {\r\n                onReady(window[globalVar]);\r\n            });\r\n        };\r\n        scriptElem.src = url;\r\n        scriptElem.async = true;\r\n        scriptElem.defer = true;\r\n        // add script to header\r\n        document.getElementsByTagName('head')[0].appendChild(scriptElem);\r\n    }\r\n    cleanup(globalVar) {\r\n        // remove script from DOM\r\n        const scriptElem = document.getElementById(this.getElemId(globalVar));\r\n        if (scriptElem) {\r\n            scriptElem.remove();\r\n        }\r\n    }\r\n    getElemId(globalVar) {\r\n        return `ngx-paypal-script-elem-${globalVar}`;\r\n    }\r\n}\nScriptService.ɵfac = function ScriptService_Factory(t) { return new (t || ScriptService)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nScriptService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ScriptService, factory: ScriptService.ɵfac });\r\n/** @nocollapse */\r\nScriptService.ctorParameters = () => [\r\n    { type: NgZone }\r\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScriptService, [{\n        type: Injectable\n    }], function () { return [{ type: ɵngcc0.NgZone }]; }, null); })();\n\nclass PayPalScriptService {\r\n    constructor(scriptService) {\r\n        this.scriptService = scriptService;\r\n        this.paypalWindowName = 'paypal';\r\n    }\r\n    registerPayPalScript(config, onReady) {\r\n        this.scriptService.registerScript(this.getUrlForConfig(config), this.paypalWindowName, onReady);\r\n    }\r\n    destroyPayPalScript() {\r\n        this.scriptService.cleanup(this.paypalWindowName);\r\n    }\r\n    getUrlForConfig(config) {\r\n        const params = [\r\n            {\r\n                name: 'client-id',\r\n                value: config.clientId\r\n            }\r\n        ];\r\n        if (config.currency) {\r\n            params.push({\r\n                name: 'currency',\r\n                value: config.currency\r\n            });\r\n        }\r\n        if (config.commit) {\r\n            params.push({\r\n                name: 'commit',\r\n                value: config.commit\r\n            });\r\n        }\r\n        if (config.vault) {\r\n            params.push({\r\n                name: 'vault',\r\n                value: config.vault\r\n            });\r\n        }\r\n        if (config.extraParams) {\r\n            params.push(...config.extraParams);\r\n        }\r\n        return `https://www.paypal.com/sdk/js${this.getQueryString(params)}`;\r\n    }\r\n    getQueryString(queryParams) {\r\n        let queryString = '';\r\n        for (let i = 0; i < queryParams.length; i++) {\r\n            const queryParam = queryParams[i];\r\n            if (i === 0) {\r\n                queryString += '?';\r\n            }\r\n            else {\r\n                queryString += '&';\r\n            }\r\n            queryString += `${queryParam.name}=${queryParam.value}`;\r\n        }\r\n        return queryString;\r\n    }\r\n}\nPayPalScriptService.ɵfac = function PayPalScriptService_Factory(t) { return new (t || PayPalScriptService)(ɵngcc0.ɵɵinject(ScriptService)); };\nPayPalScriptService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: PayPalScriptService, factory: PayPalScriptService.ɵfac });\r\n/** @nocollapse */\r\nPayPalScriptService.ctorParameters = () => [\r\n    { type: ScriptService }\r\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PayPalScriptService, [{\n        type: Injectable\n    }], function () { return [{ type: ScriptService }]; }, null); })();\n\nclass NgxPaypalComponent {\r\n    constructor(paypalScriptService, cdr, ngZone) {\r\n        this.paypalScriptService = paypalScriptService;\r\n        this.cdr = cdr;\r\n        this.ngZone = ngZone;\r\n        /**\r\n         * If enabled, paypal SDK script will be loaded. Useful if you want to have multiple PayPal components on the same page\r\n         * sharing base configuration. In such a case only a single component may register script.\r\n         */\r\n        this.registerScript = true;\r\n        /**\r\n         * Emitted when paypal script is loaded\r\n         */\r\n        this.scriptLoaded = new EventEmitter();\r\n        this.ngUnsubscribe = new Subject();\r\n        /**\r\n         * Flag that indicates if paypal should be initialized (required for handling script load events and availability of DOM element)\r\n         */\r\n        this.initializePayPal = true;\r\n    }\r\n    set payPalButtonContainer(content) {\r\n        this.payPalButtonContainerElem = content;\r\n    }\r\n    ngOnChanges(changes) {\r\n        if (!this.payPalButtonContainerId) {\r\n            this.payPalButtonContainerId = this.generateElementId();\r\n        }\r\n        // first time config setup\r\n        const config = this.config;\r\n        if (changes.config.isFirstChange()) {\r\n            if (config && this.registerScript) {\r\n                this.initPayPalScript(config, (payPal) => {\r\n                    // store reference to paypal global script\r\n                    this.payPal = payPal;\r\n                    this.doPayPalCheck();\r\n                });\r\n            }\r\n        }\r\n        // changes to config\r\n        if (!changes.config.isFirstChange()) {\r\n            this.reinitialize(config);\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        this.paypalScriptService.destroyPayPalScript();\r\n        this.ngUnsubscribe.next();\r\n        this.ngUnsubscribe.complete();\r\n    }\r\n    ngAfterViewInit() {\r\n        this.doPayPalCheck();\r\n    }\r\n    customInit(payPal) {\r\n        this.payPal = payPal;\r\n        this.doPayPalCheck();\r\n    }\r\n    reinitialize(config) {\r\n        this.config = config;\r\n        this.payPal = undefined;\r\n        this.paypalScriptService.destroyPayPalScript();\r\n        this.payPalButtonContainerId = this.generateElementId();\r\n        this.initializePayPal = true;\r\n        if (this.payPalButtonContainerElem) {\r\n            while (this.payPalButtonContainerElem.nativeElement.firstChild) {\r\n                this.payPalButtonContainerElem.nativeElement.removeChild(this.payPalButtonContainerElem.nativeElement.firstChild);\r\n            }\r\n        }\r\n        this.cdr.detectChanges();\r\n        if (this.config) {\r\n            if (!this.payPal) {\r\n                this.initPayPalScript(this.config, (payPal) => {\r\n                    // store reference to paypal global script\r\n                    this.payPal = payPal;\r\n                    this.doPayPalCheck();\r\n                });\r\n            }\r\n            else {\r\n                this.doPayPalCheck();\r\n            }\r\n        }\r\n    }\r\n    doPayPalCheck() {\r\n        if (this.initializePayPal && this.config && this.payPal && this.payPalButtonContainerElem) {\r\n            // make sure that id is also set\r\n            if (this.payPalButtonContainerElem.nativeElement.id) {\r\n                this.initializePayPal = false;\r\n                this.initPayPal(this.config, this.payPal);\r\n            }\r\n        }\r\n    }\r\n    initPayPalScript(config, initPayPal) {\r\n        this.paypalScriptService.registerPayPalScript({\r\n            clientId: config.clientId,\r\n            commit: config.advanced && config.advanced.commit ? config.advanced.commit : undefined,\r\n            currency: config.currency,\r\n            vault: config.vault,\r\n            extraParams: config.advanced && config.advanced.extraQueryParams ? config.advanced.extraQueryParams : []\r\n        }, (paypal) => {\r\n            this.scriptLoaded.next(paypal);\r\n            initPayPal(paypal);\r\n        });\r\n    }\r\n    generateElementId() {\r\n        return `ngx-captcha-id-${new Date().valueOf()}`;\r\n    }\r\n    initPayPal(config, paypal) {\r\n        // Running outside angular zone prevents infinite ngDoCheck lifecycle calls\r\n        this.ngZone.runOutsideAngular(() => {\r\n            // https://developer.paypal.com/docs/checkout/integrate/#2-add-the-paypal-script-to-your-web-page\r\n            const createOrder = (data, actions) => {\r\n                return this.ngZone.run(() => {\r\n                    if (config.createOrderOnClient && config.createOrderOnServer) {\r\n                        throw Error(`Both 'createOrderOnClient' and 'createOrderOnServer' are defined.\r\n                    Please choose one or the other.`);\r\n                    }\r\n                    if (!config.createOrderOnClient && !config.createOrderOnServer) {\r\n                        throw Error(`Neither 'createOrderOnClient' or 'createOrderOnServer' are defined.\r\n                    Please define one of these to create order.`);\r\n                    }\r\n                    if (config.createOrderOnClient) {\r\n                        return actions.order.create(config.createOrderOnClient(data));\r\n                    }\r\n                    if (config.createOrderOnServer) {\r\n                        return config.createOrderOnServer(data);\r\n                    }\r\n                    throw Error(`Invalid state for 'createOrder'.`);\r\n                });\r\n            };\r\n            const createSubscription = (data, actions) => {\r\n                return this.ngZone.run(() => {\r\n                    if (config.createSubscription) {\r\n                        return config.createSubscription(data, actions);\r\n                    }\r\n                });\r\n            };\r\n            const onShippingChange = (data, actions) => {\r\n                return this.ngZone.run(() => {\r\n                    if (config.onShippingChange) {\r\n                        return config.onShippingChange(data, actions);\r\n                    }\r\n                });\r\n            };\r\n            const buttonsConfig = Object.assign(Object.assign(Object.assign({ style: config.style, onApprove: (data, actions) => {\r\n                    return this.ngZone.run(() => {\r\n                        if (config.onApprove) {\r\n                            config.onApprove(data, actions);\r\n                        }\r\n                        // capture on server\r\n                        if (config.authorizeOnServer) {\r\n                            return config.authorizeOnServer(data, actions);\r\n                        }\r\n                        // capture on client\r\n                        const onClientAuthorization = config.onClientAuthorization;\r\n                        if (onClientAuthorization) {\r\n                            actions.order.capture().then((details) => {\r\n                                this.ngZone.run(() => {\r\n                                    onClientAuthorization(details);\r\n                                });\r\n                            });\r\n                            return;\r\n                        }\r\n                    });\r\n                }, onError: (error) => {\r\n                    this.ngZone.run(() => {\r\n                        if (config.onError) {\r\n                            config.onError(error);\r\n                        }\r\n                    });\r\n                }, onCancel: (data, actions) => {\r\n                    this.ngZone.run(() => {\r\n                        if (config.onCancel) {\r\n                            config.onCancel(data, actions);\r\n                        }\r\n                    });\r\n                }, onClick: (data, actions) => {\r\n                    this.ngZone.run(() => {\r\n                        if (config.onClick) {\r\n                            config.onClick(data, actions);\r\n                        }\r\n                    });\r\n                }, onInit: (data, actions) => {\r\n                    this.ngZone.run(() => {\r\n                        if (config.onInit) {\r\n                            config.onInit(data, actions);\r\n                        }\r\n                    });\r\n                } }, ((config.createOrderOnClient || config.createOrderOnServer) && { createOrder })), (config.createSubscription && { createSubscription })), (config.onShippingChange && { onShippingChange }));\r\n            paypal.Buttons(buttonsConfig).render(`#${this.payPalButtonContainerId}`);\r\n        });\r\n    }\r\n}\nNgxPaypalComponent.ɵfac = function NgxPaypalComponent_Factory(t) { return new (t || NgxPaypalComponent)(ɵngcc0.ɵɵdirectiveInject(PayPalScriptService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nNgxPaypalComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: NgxPaypalComponent, selectors: [[\"ngx-paypal\"]], viewQuery: function NgxPaypalComponent_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.payPalButtonContainer = _t.first);\n    } }, inputs: { registerScript: \"registerScript\", config: \"config\" }, outputs: { scriptLoaded: \"scriptLoaded\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 4, vars: 1, consts: [[3, \"id\"], [\"payPalButtonContainer\", \"\"]], template: function NgxPaypalComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtext(0, \"\\n    \");\n        ɵngcc0.ɵɵelement(1, \"div\", 0, 1);\n        ɵngcc0.ɵɵtext(3, \"\\n    \");\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.payPalButtonContainerId);\n    } }, encapsulation: 2, changeDetection: 0 });\r\n/** @nocollapse */\r\nNgxPaypalComponent.ctorParameters = () => [\r\n    { type: PayPalScriptService },\r\n    { type: ChangeDetectorRef },\r\n    { type: NgZone }\r\n];\r\nNgxPaypalComponent.propDecorators = {\r\n    config: [{ type: Input }],\r\n    registerScript: [{ type: Input }],\r\n    scriptLoaded: [{ type: Output }],\r\n    payPalButtonContainer: [{ type: ViewChild, args: ['payPalButtonContainer', { static: false },] }]\r\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxPaypalComponent, [{\n        type: Component,\n        args: [{\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                selector: 'ngx-paypal',\n                template: `\r\n    <div #payPalButtonContainer [id]=\"payPalButtonContainerId\"></div>\r\n    `\n            }]\n    }], function () { return [{ type: PayPalScriptService }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.NgZone }]; }, { registerScript: [{\n            type: Input\n        }], scriptLoaded: [{\n            type: Output\n        }], payPalButtonContainer: [{\n            type: ViewChild,\n            args: ['payPalButtonContainer', { static: false }]\n        }], config: [{\n            type: Input\n        }] }); })();\n\nclass NgxPayPalModule {\r\n}\nNgxPayPalModule.ɵfac = function NgxPayPalModule_Factory(t) { return new (t || NgxPayPalModule)(); };\nNgxPayPalModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: NgxPayPalModule });\nNgxPayPalModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        ScriptService,\n        PayPalScriptService\n    ], imports: [CommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxPayPalModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule\n                ],\n                declarations: [\n                    NgxPaypalComponent,\n                ],\n                exports: [\n                    NgxPaypalComponent,\n                ],\n                providers: [\n                    ScriptService,\n                    PayPalScriptService\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxPayPalModule, { declarations: function () { return [NgxPaypalComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [NgxPaypalComponent]; } }); })();\n\n/** Public API */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NgxPayPalModule, NgxPaypalComponent, PayPalScriptService, ScriptService as ɵa };\n\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,UAAU,EAAEC,MAAM,EAAEC,YAAY,EAAEC,SAAS,EAAEC,uBAAuB,EAAEC,iBAAiB,EAAEC,KAAK,EAAEC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,eAAe;AAC3J,SAASC,OAAO,QAAQ,MAAM;AAE9B,OAAO,KAAKC,MAAM,MAAM,eAAe;AAEvC,MAAMC,GAAG,GAAG,CAAC,uBAAuB,CAAC;AACrC,MAAMC,aAAa,CAAC;EAChBC,WAAW,CAACC,IAAI,EAAE;IACd,IAAI,CAACA,IAAI,GAAGA,IAAI;EACpB;EACAC,cAAc,CAACC,GAAG,EAAEC,SAAS,EAAEC,OAAO,EAAE;IACpC,MAAMC,iBAAiB,GAAGC,MAAM,CAACH,SAAS,CAAC;IAC3C,IAAIE,iBAAiB,EAAE;MACnB;MACA,IAAI,CAACL,IAAI,CAACO,GAAG,CAAC,MAAM;QAChBH,OAAO,CAACC,iBAAiB,CAAC;MAC9B,CAAC,CAAC;MACF;IACJ;IACA;IACA,MAAMG,UAAU,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;IACnDF,UAAU,CAACG,EAAE,GAAG,IAAI,CAACC,SAAS,CAACT,SAAS,CAAC;IACzCK,UAAU,CAACK,SAAS,GAAG,EAAE;IACzBL,UAAU,CAACM,MAAM,GAAG,MAAM;MACtB,IAAI,CAACd,IAAI,CAACO,GAAG,CAAC,MAAM;QAChBH,OAAO,CAACE,MAAM,CAACH,SAAS,CAAC,CAAC;MAC9B,CAAC,CAAC;IACN,CAAC;IACDK,UAAU,CAACO,GAAG,GAAGb,GAAG;IACpBM,UAAU,CAACQ,KAAK,GAAG,IAAI;IACvBR,UAAU,CAACS,KAAK,GAAG,IAAI;IACvB;IACAR,QAAQ,CAACS,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAACC,WAAW,CAACX,UAAU,CAAC;EACpE;EACAY,OAAO,CAACjB,SAAS,EAAE;IACf;IACA,MAAMK,UAAU,GAAGC,QAAQ,CAACY,cAAc,CAAC,IAAI,CAACT,SAAS,CAACT,SAAS,CAAC,CAAC;IACrE,IAAIK,UAAU,EAAE;MACZA,UAAU,CAACc,MAAM,EAAE;IACvB;EACJ;EACAV,SAAS,CAACT,SAAS,EAAE;IACjB,OAAQ,0BAAyBA,SAAU,EAAC;EAChD;AACJ;AACAL,aAAa,CAACyB,IAAI,GAAG,SAASC,qBAAqB,CAACC,CAAC,EAAE;EAAE,OAAO,KAAKA,CAAC,IAAI3B,aAAa,EAAEF,MAAM,CAAC8B,QAAQ,CAAC9B,MAAM,CAACV,MAAM,CAAC,CAAC;AAAE,CAAC;AAC3HY,aAAa,CAAC6B,KAAK,GAAG,aAAc/B,MAAM,CAACgC,kBAAkB,CAAC;EAAEC,KAAK,EAAE/B,aAAa;EAAEgC,OAAO,EAAEhC,aAAa,CAACyB;AAAK,CAAC,CAAC;AACpH;AACAzB,aAAa,CAACiC,cAAc,GAAG,MAAM,CACjC;EAAEC,IAAI,EAAE9C;AAAO,CAAC,CACnB;AACD,CAAC,YAAY;EAAE,CAAC,OAAO+C,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAKrC,MAAM,CAACsC,iBAAiB,CAACpC,aAAa,EAAE,CAAC;IACnGkC,IAAI,EAAE/C;EACV,CAAC,CAAC,EAAE,YAAY;IAAE,OAAO,CAAC;MAAE+C,IAAI,EAAEpC,MAAM,CAACV;IAAO,CAAC,CAAC;EAAE,CAAC,EAAE,IAAI,CAAC;AAAE,CAAC,GAAG;AAEtE,MAAMiD,mBAAmB,CAAC;EACtBpC,WAAW,CAACqC,aAAa,EAAE;IACvB,IAAI,CAACA,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACC,gBAAgB,GAAG,QAAQ;EACpC;EACAC,oBAAoB,CAACC,MAAM,EAAEnC,OAAO,EAAE;IAClC,IAAI,CAACgC,aAAa,CAACnC,cAAc,CAAC,IAAI,CAACuC,eAAe,CAACD,MAAM,CAAC,EAAE,IAAI,CAACF,gBAAgB,EAAEjC,OAAO,CAAC;EACnG;EACAqC,mBAAmB,GAAG;IAClB,IAAI,CAACL,aAAa,CAAChB,OAAO,CAAC,IAAI,CAACiB,gBAAgB,CAAC;EACrD;EACAG,eAAe,CAACD,MAAM,EAAE;IACpB,MAAMG,MAAM,GAAG,CACX;MACIC,IAAI,EAAE,WAAW;MACjBC,KAAK,EAAEL,MAAM,CAACM;IAClB,CAAC,CACJ;IACD,IAAIN,MAAM,CAACO,QAAQ,EAAE;MACjBJ,MAAM,CAACK,IAAI,CAAC;QACRJ,IAAI,EAAE,UAAU;QAChBC,KAAK,EAAEL,MAAM,CAACO;MAClB,CAAC,CAAC;IACN;IACA,IAAIP,MAAM,CAACS,MAAM,EAAE;MACfN,MAAM,CAACK,IAAI,CAAC;QACRJ,IAAI,EAAE,QAAQ;QACdC,KAAK,EAAEL,MAAM,CAACS;MAClB,CAAC,CAAC;IACN;IACA,IAAIT,MAAM,CAACU,KAAK,EAAE;MACdP,MAAM,CAACK,IAAI,CAAC;QACRJ,IAAI,EAAE,OAAO;QACbC,KAAK,EAAEL,MAAM,CAACU;MAClB,CAAC,CAAC;IACN;IACA,IAAIV,MAAM,CAACW,WAAW,EAAE;MACpBR,MAAM,CAACK,IAAI,CAAC,GAAGR,MAAM,CAACW,WAAW,CAAC;IACtC;IACA,OAAQ,gCAA+B,IAAI,CAACC,cAAc,CAACT,MAAM,CAAE,EAAC;EACxE;EACAS,cAAc,CAACC,WAAW,EAAE;IACxB,IAAIC,WAAW,GAAG,EAAE;IACpB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,WAAW,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;MACzC,MAAME,UAAU,GAAGJ,WAAW,CAACE,CAAC,CAAC;MACjC,IAAIA,CAAC,KAAK,CAAC,EAAE;QACTD,WAAW,IAAI,GAAG;MACtB,CAAC,MACI;QACDA,WAAW,IAAI,GAAG;MACtB;MACAA,WAAW,IAAK,GAAEG,UAAU,CAACb,IAAK,IAAGa,UAAU,CAACZ,KAAM,EAAC;IAC3D;IACA,OAAOS,WAAW;EACtB;AACJ;AACAlB,mBAAmB,CAACZ,IAAI,GAAG,SAASkC,2BAA2B,CAAChC,CAAC,EAAE;EAAE,OAAO,KAAKA,CAAC,IAAIU,mBAAmB,EAAEvC,MAAM,CAAC8B,QAAQ,CAAC5B,aAAa,CAAC,CAAC;AAAE,CAAC;AAC7IqC,mBAAmB,CAACR,KAAK,GAAG,aAAc/B,MAAM,CAACgC,kBAAkB,CAAC;EAAEC,KAAK,EAAEM,mBAAmB;EAAEL,OAAO,EAAEK,mBAAmB,CAACZ;AAAK,CAAC,CAAC;AACtI;AACAY,mBAAmB,CAACJ,cAAc,GAAG,MAAM,CACvC;EAAEC,IAAI,EAAElC;AAAc,CAAC,CAC1B;AACD,CAAC,YAAY;EAAE,CAAC,OAAOmC,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAKrC,MAAM,CAACsC,iBAAiB,CAACC,mBAAmB,EAAE,CAAC;IACzGH,IAAI,EAAE/C;EACV,CAAC,CAAC,EAAE,YAAY;IAAE,OAAO,CAAC;MAAE+C,IAAI,EAAElC;IAAc,CAAC,CAAC;EAAE,CAAC,EAAE,IAAI,CAAC;AAAE,CAAC,GAAG;AAEtE,MAAM4D,kBAAkB,CAAC;EACrB3D,WAAW,CAAC4D,mBAAmB,EAAEC,GAAG,EAAEC,MAAM,EAAE;IAC1C,IAAI,CAACF,mBAAmB,GAAGA,mBAAmB;IAC9C,IAAI,CAACC,GAAG,GAAGA,GAAG;IACd,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB;AACR;AACA;AACA;IACQ,IAAI,CAAC5D,cAAc,GAAG,IAAI;IAC1B;AACR;AACA;IACQ,IAAI,CAAC6D,YAAY,GAAG,IAAI3E,YAAY,EAAE;IACtC,IAAI,CAAC4E,aAAa,GAAG,IAAIpE,OAAO,EAAE;IAClC;AACR;AACA;IACQ,IAAI,CAACqE,gBAAgB,GAAG,IAAI;EAChC;EACA,IAAIC,qBAAqB,CAACC,OAAO,EAAE;IAC/B,IAAI,CAACC,yBAAyB,GAAGD,OAAO;EAC5C;EACAE,WAAW,CAACC,OAAO,EAAE;IACjB,IAAI,CAAC,IAAI,CAACC,uBAAuB,EAAE;MAC/B,IAAI,CAACA,uBAAuB,GAAG,IAAI,CAACC,iBAAiB,EAAE;IAC3D;IACA;IACA,MAAMhC,MAAM,GAAG,IAAI,CAACA,MAAM;IAC1B,IAAI8B,OAAO,CAAC9B,MAAM,CAACiC,aAAa,EAAE,EAAE;MAChC,IAAIjC,MAAM,IAAI,IAAI,CAACtC,cAAc,EAAE;QAC/B,IAAI,CAACwE,gBAAgB,CAAClC,MAAM,EAAGmC,MAAM,IAAK;UACtC;UACA,IAAI,CAACA,MAAM,GAAGA,MAAM;UACpB,IAAI,CAACC,aAAa,EAAE;QACxB,CAAC,CAAC;MACN;IACJ;IACA;IACA,IAAI,CAACN,OAAO,CAAC9B,MAAM,CAACiC,aAAa,EAAE,EAAE;MACjC,IAAI,CAACI,YAAY,CAACrC,MAAM,CAAC;IAC7B;EACJ;EACAsC,WAAW,GAAG;IACV,IAAI,CAAClB,mBAAmB,CAAClB,mBAAmB,EAAE;IAC9C,IAAI,CAACsB,aAAa,CAACe,IAAI,EAAE;IACzB,IAAI,CAACf,aAAa,CAACgB,QAAQ,EAAE;EACjC;EACAC,eAAe,GAAG;IACd,IAAI,CAACL,aAAa,EAAE;EACxB;EACAM,UAAU,CAACP,MAAM,EAAE;IACf,IAAI,CAACA,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,aAAa,EAAE;EACxB;EACAC,YAAY,CAACrC,MAAM,EAAE;IACjB,IAAI,CAACA,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACmC,MAAM,GAAGQ,SAAS;IACvB,IAAI,CAACvB,mBAAmB,CAAClB,mBAAmB,EAAE;IAC9C,IAAI,CAAC6B,uBAAuB,GAAG,IAAI,CAACC,iBAAiB,EAAE;IACvD,IAAI,CAACP,gBAAgB,GAAG,IAAI;IAC5B,IAAI,IAAI,CAACG,yBAAyB,EAAE;MAChC,OAAO,IAAI,CAACA,yBAAyB,CAACgB,aAAa,CAACC,UAAU,EAAE;QAC5D,IAAI,CAACjB,yBAAyB,CAACgB,aAAa,CAACE,WAAW,CAAC,IAAI,CAAClB,yBAAyB,CAACgB,aAAa,CAACC,UAAU,CAAC;MACrH;IACJ;IACA,IAAI,CAACxB,GAAG,CAAC0B,aAAa,EAAE;IACxB,IAAI,IAAI,CAAC/C,MAAM,EAAE;MACb,IAAI,CAAC,IAAI,CAACmC,MAAM,EAAE;QACd,IAAI,CAACD,gBAAgB,CAAC,IAAI,CAAClC,MAAM,EAAGmC,MAAM,IAAK;UAC3C;UACA,IAAI,CAACA,MAAM,GAAGA,MAAM;UACpB,IAAI,CAACC,aAAa,EAAE;QACxB,CAAC,CAAC;MACN,CAAC,MACI;QACD,IAAI,CAACA,aAAa,EAAE;MACxB;IACJ;EACJ;EACAA,aAAa,GAAG;IACZ,IAAI,IAAI,CAACX,gBAAgB,IAAI,IAAI,CAACzB,MAAM,IAAI,IAAI,CAACmC,MAAM,IAAI,IAAI,CAACP,yBAAyB,EAAE;MACvF;MACA,IAAI,IAAI,CAACA,yBAAyB,CAACgB,aAAa,CAACxE,EAAE,EAAE;QACjD,IAAI,CAACqD,gBAAgB,GAAG,KAAK;QAC7B,IAAI,CAACuB,UAAU,CAAC,IAAI,CAAChD,MAAM,EAAE,IAAI,CAACmC,MAAM,CAAC;MAC7C;IACJ;EACJ;EACAD,gBAAgB,CAAClC,MAAM,EAAEgD,UAAU,EAAE;IACjC,IAAI,CAAC5B,mBAAmB,CAACrB,oBAAoB,CAAC;MAC1CO,QAAQ,EAAEN,MAAM,CAACM,QAAQ;MACzBG,MAAM,EAAET,MAAM,CAACiD,QAAQ,IAAIjD,MAAM,CAACiD,QAAQ,CAACxC,MAAM,GAAGT,MAAM,CAACiD,QAAQ,CAACxC,MAAM,GAAGkC,SAAS;MACtFpC,QAAQ,EAAEP,MAAM,CAACO,QAAQ;MACzBG,KAAK,EAAEV,MAAM,CAACU,KAAK;MACnBC,WAAW,EAAEX,MAAM,CAACiD,QAAQ,IAAIjD,MAAM,CAACiD,QAAQ,CAACC,gBAAgB,GAAGlD,MAAM,CAACiD,QAAQ,CAACC,gBAAgB,GAAG;IAC1G,CAAC,EAAGC,MAAM,IAAK;MACX,IAAI,CAAC5B,YAAY,CAACgB,IAAI,CAACY,MAAM,CAAC;MAC9BH,UAAU,CAACG,MAAM,CAAC;IACtB,CAAC,CAAC;EACN;EACAnB,iBAAiB,GAAG;IAChB,OAAQ,kBAAiB,IAAIoB,IAAI,EAAE,CAACC,OAAO,EAAG,EAAC;EACnD;EACAL,UAAU,CAAChD,MAAM,EAAEmD,MAAM,EAAE;IACvB;IACA,IAAI,CAAC7B,MAAM,CAACgC,iBAAiB,CAAC,MAAM;MAChC;MACA,MAAMC,WAAW,GAAG,CAACC,IAAI,EAAEC,OAAO,KAAK;QACnC,OAAO,IAAI,CAACnC,MAAM,CAACtD,GAAG,CAAC,MAAM;UACzB,IAAIgC,MAAM,CAAC0D,mBAAmB,IAAI1D,MAAM,CAAC2D,mBAAmB,EAAE;YAC1D,MAAMC,KAAK,CAAE;AACrC,oDAAoD,CAAC;UACjC;UACA,IAAI,CAAC5D,MAAM,CAAC0D,mBAAmB,IAAI,CAAC1D,MAAM,CAAC2D,mBAAmB,EAAE;YAC5D,MAAMC,KAAK,CAAE;AACrC,gEAAgE,CAAC;UAC7C;UACA,IAAI5D,MAAM,CAAC0D,mBAAmB,EAAE;YAC5B,OAAOD,OAAO,CAACI,KAAK,CAACC,MAAM,CAAC9D,MAAM,CAAC0D,mBAAmB,CAACF,IAAI,CAAC,CAAC;UACjE;UACA,IAAIxD,MAAM,CAAC2D,mBAAmB,EAAE;YAC5B,OAAO3D,MAAM,CAAC2D,mBAAmB,CAACH,IAAI,CAAC;UAC3C;UACA,MAAMI,KAAK,CAAE,kCAAiC,CAAC;QACnD,CAAC,CAAC;MACN,CAAC;MACD,MAAMG,kBAAkB,GAAG,CAACP,IAAI,EAAEC,OAAO,KAAK;QAC1C,OAAO,IAAI,CAACnC,MAAM,CAACtD,GAAG,CAAC,MAAM;UACzB,IAAIgC,MAAM,CAAC+D,kBAAkB,EAAE;YAC3B,OAAO/D,MAAM,CAAC+D,kBAAkB,CAACP,IAAI,EAAEC,OAAO,CAAC;UACnD;QACJ,CAAC,CAAC;MACN,CAAC;MACD,MAAMO,gBAAgB,GAAG,CAACR,IAAI,EAAEC,OAAO,KAAK;QACxC,OAAO,IAAI,CAACnC,MAAM,CAACtD,GAAG,CAAC,MAAM;UACzB,IAAIgC,MAAM,CAACgE,gBAAgB,EAAE;YACzB,OAAOhE,MAAM,CAACgE,gBAAgB,CAACR,IAAI,EAAEC,OAAO,CAAC;UACjD;QACJ,CAAC,CAAC;MACN,CAAC;MACD,MAAMQ,aAAa,GAAGC,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC;QAAEC,KAAK,EAAEpE,MAAM,CAACoE,KAAK;QAAEC,SAAS,EAAE,CAACb,IAAI,EAAEC,OAAO,KAAK;UAC7G,OAAO,IAAI,CAACnC,MAAM,CAACtD,GAAG,CAAC,MAAM;YACzB,IAAIgC,MAAM,CAACqE,SAAS,EAAE;cAClBrE,MAAM,CAACqE,SAAS,CAACb,IAAI,EAAEC,OAAO,CAAC;YACnC;YACA;YACA,IAAIzD,MAAM,CAACsE,iBAAiB,EAAE;cAC1B,OAAOtE,MAAM,CAACsE,iBAAiB,CAACd,IAAI,EAAEC,OAAO,CAAC;YAClD;YACA;YACA,MAAMc,qBAAqB,GAAGvE,MAAM,CAACuE,qBAAqB;YAC1D,IAAIA,qBAAqB,EAAE;cACvBd,OAAO,CAACI,KAAK,CAACW,OAAO,EAAE,CAACC,IAAI,CAAEC,OAAO,IAAK;gBACtC,IAAI,CAACpD,MAAM,CAACtD,GAAG,CAAC,MAAM;kBAClBuG,qBAAqB,CAACG,OAAO,CAAC;gBAClC,CAAC,CAAC;cACN,CAAC,CAAC;cACF;YACJ;UACJ,CAAC,CAAC;QACN,CAAC;QAAEC,OAAO,EAAGC,KAAK,IAAK;UACnB,IAAI,CAACtD,MAAM,CAACtD,GAAG,CAAC,MAAM;YAClB,IAAIgC,MAAM,CAAC2E,OAAO,EAAE;cAChB3E,MAAM,CAAC2E,OAAO,CAACC,KAAK,CAAC;YACzB;UACJ,CAAC,CAAC;QACN,CAAC;QAAEC,QAAQ,EAAE,CAACrB,IAAI,EAAEC,OAAO,KAAK;UAC5B,IAAI,CAACnC,MAAM,CAACtD,GAAG,CAAC,MAAM;YAClB,IAAIgC,MAAM,CAAC6E,QAAQ,EAAE;cACjB7E,MAAM,CAAC6E,QAAQ,CAACrB,IAAI,EAAEC,OAAO,CAAC;YAClC;UACJ,CAAC,CAAC;QACN,CAAC;QAAEqB,OAAO,EAAE,CAACtB,IAAI,EAAEC,OAAO,KAAK;UAC3B,IAAI,CAACnC,MAAM,CAACtD,GAAG,CAAC,MAAM;YAClB,IAAIgC,MAAM,CAAC8E,OAAO,EAAE;cAChB9E,MAAM,CAAC8E,OAAO,CAACtB,IAAI,EAAEC,OAAO,CAAC;YACjC;UACJ,CAAC,CAAC;QACN,CAAC;QAAEsB,MAAM,EAAE,CAACvB,IAAI,EAAEC,OAAO,KAAK;UAC1B,IAAI,CAACnC,MAAM,CAACtD,GAAG,CAAC,MAAM;YAClB,IAAIgC,MAAM,CAAC+E,MAAM,EAAE;cACf/E,MAAM,CAAC+E,MAAM,CAACvB,IAAI,EAAEC,OAAO,CAAC;YAChC;UACJ,CAAC,CAAC;QACN;MAAE,CAAC,EAAG,CAACzD,MAAM,CAAC0D,mBAAmB,IAAI1D,MAAM,CAAC2D,mBAAmB,KAAK;QAAEJ;MAAY,CAAC,CAAE,EAAGvD,MAAM,CAAC+D,kBAAkB,IAAI;QAAEA;MAAmB,CAAC,CAAE,EAAG/D,MAAM,CAACgE,gBAAgB,IAAI;QAAEA;MAAiB,CAAC,CAAE;MACrMb,MAAM,CAAC6B,OAAO,CAACf,aAAa,CAAC,CAACgB,MAAM,CAAE,IAAG,IAAI,CAAClD,uBAAwB,EAAC,CAAC;IAC5E,CAAC,CAAC;EACN;AACJ;AACAZ,kBAAkB,CAACnC,IAAI,GAAG,SAASkG,0BAA0B,CAAChG,CAAC,EAAE;EAAE,OAAO,KAAKA,CAAC,IAAIiC,kBAAkB,EAAE9D,MAAM,CAAC8H,iBAAiB,CAACvF,mBAAmB,CAAC,EAAEvC,MAAM,CAAC8H,iBAAiB,CAAC9H,MAAM,CAACN,iBAAiB,CAAC,EAAEM,MAAM,CAAC8H,iBAAiB,CAAC9H,MAAM,CAACV,MAAM,CAAC,CAAC;AAAE,CAAC;AACtPwE,kBAAkB,CAACiE,IAAI,GAAG,aAAc/H,MAAM,CAACgI,iBAAiB,CAAC;EAAE5F,IAAI,EAAE0B,kBAAkB;EAAEmE,SAAS,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC;EAAEC,SAAS,EAAE,SAASC,wBAAwB,CAACC,EAAE,EAAEC,GAAG,EAAE;IAAE,IAAID,EAAE,GAAG,CAAC,EAAE;MACtLpI,MAAM,CAACsI,WAAW,CAACrI,GAAG,EAAE,CAAC,CAAC;IAC9B;IAAE,IAAImI,EAAE,GAAG,CAAC,EAAE;MACV,IAAIG,EAAE;MACNvI,MAAM,CAACwI,cAAc,CAACD,EAAE,GAAGvI,MAAM,CAACyI,WAAW,EAAE,CAAC,KAAKJ,GAAG,CAAChE,qBAAqB,GAAGkE,EAAE,CAACG,KAAK,CAAC;IAC9F;EAAE,CAAC;EAAEC,MAAM,EAAE;IAAEtI,cAAc,EAAE,gBAAgB;IAAEsC,MAAM,EAAE;EAAS,CAAC;EAAEiG,OAAO,EAAE;IAAE1E,YAAY,EAAE;EAAe,CAAC;EAAE2E,QAAQ,EAAE,CAAC7I,MAAM,CAAC8I,oBAAoB,CAAC;EAAEC,KAAK,EAAE,CAAC;EAAEC,IAAI,EAAE,CAAC;EAAEC,MAAM,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,uBAAuB,EAAE,EAAE,CAAC,CAAC;EAAEC,QAAQ,EAAE,SAASC,2BAA2B,CAACf,EAAE,EAAEC,GAAG,EAAE;IAAE,IAAID,EAAE,GAAG,CAAC,EAAE;MAClSpI,MAAM,CAACoJ,MAAM,CAAC,CAAC,EAAE,QAAQ,CAAC;MAC1BpJ,MAAM,CAACqJ,SAAS,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;MAChCrJ,MAAM,CAACoJ,MAAM,CAAC,CAAC,EAAE,QAAQ,CAAC;IAC9B;IAAE,IAAIhB,EAAE,GAAG,CAAC,EAAE;MACVpI,MAAM,CAACsJ,SAAS,CAAC,CAAC,CAAC;MACnBtJ,MAAM,CAACuJ,UAAU,CAAC,IAAI,EAAElB,GAAG,CAAC3D,uBAAuB,CAAC;IACxD;EAAE,CAAC;EAAE8E,aAAa,EAAE,CAAC;EAAEC,eAAe,EAAE;AAAE,CAAC,CAAC;AAChD;AACA3F,kBAAkB,CAAC3B,cAAc,GAAG,MAAM,CACtC;EAAEC,IAAI,EAAEG;AAAoB,CAAC,EAC7B;EAAEH,IAAI,EAAE1C;AAAkB,CAAC,EAC3B;EAAE0C,IAAI,EAAE9C;AAAO,CAAC,CACnB;AACDwE,kBAAkB,CAAC4F,cAAc,GAAG;EAChC/G,MAAM,EAAE,CAAC;IAAEP,IAAI,EAAEzC;EAAM,CAAC,CAAC;EACzBU,cAAc,EAAE,CAAC;IAAE+B,IAAI,EAAEzC;EAAM,CAAC,CAAC;EACjCuE,YAAY,EAAE,CAAC;IAAE9B,IAAI,EAAExC;EAAO,CAAC,CAAC;EAChCyE,qBAAqB,EAAE,CAAC;IAAEjC,IAAI,EAAEvC,SAAS;IAAE8J,IAAI,EAAE,CAAC,uBAAuB,EAAE;MAAEC,MAAM,EAAE;IAAM,CAAC;EAAG,CAAC;AACpG,CAAC;AACD,CAAC,YAAY;EAAE,CAAC,OAAOvH,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAKrC,MAAM,CAACsC,iBAAiB,CAACwB,kBAAkB,EAAE,CAAC;IACxG1B,IAAI,EAAE5C,SAAS;IACfmK,IAAI,EAAE,CAAC;MACCF,eAAe,EAAEhK,uBAAuB,CAACoK,MAAM;MAC/CC,QAAQ,EAAE,YAAY;MACtBZ,QAAQ,EAAG;AAC3B;AACA;IACY,CAAC;EACT,CAAC,CAAC,EAAE,YAAY;IAAE,OAAO,CAAC;MAAE9G,IAAI,EAAEG;IAAoB,CAAC,EAAE;MAAEH,IAAI,EAAEpC,MAAM,CAACN;IAAkB,CAAC,EAAE;MAAE0C,IAAI,EAAEpC,MAAM,CAACV;IAAO,CAAC,CAAC;EAAE,CAAC,EAAE;IAAEe,cAAc,EAAE,CAAC;MACrI+B,IAAI,EAAEzC;IACV,CAAC,CAAC;IAAEuE,YAAY,EAAE,CAAC;MACf9B,IAAI,EAAExC;IACV,CAAC,CAAC;IAAEyE,qBAAqB,EAAE,CAAC;MACxBjC,IAAI,EAAEvC,SAAS;MACf8J,IAAI,EAAE,CAAC,uBAAuB,EAAE;QAAEC,MAAM,EAAE;MAAM,CAAC;IACrD,CAAC,CAAC;IAAEjH,MAAM,EAAE,CAAC;MACTP,IAAI,EAAEzC;IACV,CAAC;EAAE,CAAC,CAAC;AAAE,CAAC,GAAG;AAEnB,MAAMoK,eAAe,CAAC;AAEtBA,eAAe,CAACpI,IAAI,GAAG,SAASqI,uBAAuB,CAACnI,CAAC,EAAE;EAAE,OAAO,KAAKA,CAAC,IAAIkI,eAAe,GAAG;AAAE,CAAC;AACnGA,eAAe,CAACE,IAAI,GAAG,aAAcjK,MAAM,CAACkK,gBAAgB,CAAC;EAAE9H,IAAI,EAAE2H;AAAgB,CAAC,CAAC;AACvFA,eAAe,CAACI,IAAI,GAAG,aAAcnK,MAAM,CAACoK,gBAAgB,CAAC;EAAEC,SAAS,EAAE,CAClEnK,aAAa,EACbqC,mBAAmB,CACtB;EAAE+H,OAAO,EAAE,CAAClL,YAAY;AAAE,CAAC,CAAC;AACjC,CAAC,YAAY;EAAE,CAAC,OAAOiD,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAKrC,MAAM,CAACsC,iBAAiB,CAACyH,eAAe,EAAE,CAAC;IACrG3H,IAAI,EAAEtC,QAAQ;IACd6J,IAAI,EAAE,CAAC;MACCW,OAAO,EAAE,CACLlL,YAAY,CACf;MACDmL,YAAY,EAAE,CACVzG,kBAAkB,CACrB;MACD0G,OAAO,EAAE,CACL1G,kBAAkB,CACrB;MACDuG,SAAS,EAAE,CACPnK,aAAa,EACbqC,mBAAmB;IAE3B,CAAC;EACT,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC;AAAE,CAAC,GAAG;AACzB,CAAC,YAAY;EAAE,CAAC,OAAOkI,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAKzK,MAAM,CAAC0K,kBAAkB,CAACX,eAAe,EAAE;IAAEQ,YAAY,EAAE,YAAY;MAAE,OAAO,CAACzG,kBAAkB,CAAC;IAAE,CAAC;IAAEwG,OAAO,EAAE,YAAY;MAAE,OAAO,CAAClL,YAAY,CAAC;IAAE,CAAC;IAAEoL,OAAO,EAAE,YAAY;MAAE,OAAO,CAAC1G,kBAAkB,CAAC;IAAE;EAAE,CAAC,CAAC;AAAE,CAAC,GAAG;;AAE1R;;AAEA;AACA;AACA;;AAEA,SAASiG,eAAe,EAAEjG,kBAAkB,EAAEvB,mBAAmB,EAAErC,aAAa,IAAIyK,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}