{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"app/chat.service\";\nimport * as i2 from \"app/general.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"../../shared/auth/has-any-authority.directive\";\nfunction ChatNotificationComponent_ng_container_0_ng_container_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1, \"\\n            \");\n    i0.ɵɵelementStart(2, \"div\", 5)(3, \"a\", 6);\n    i0.ɵɵlistener(\"click\", function ChatNotificationComponent_ng_container_0_ng_container_9_Template_a_click_3_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const user_count_r2 = restoredCtx.$implicit;\n      const ctx_r3 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r3.openChatWindow(user_count_r2.user));\n    });\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtext(5, \"\\n            \");\n    i0.ɵɵelementStart(6, \"div\", 7);\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(8, \"\\n        \");\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const user_count_r2 = ctx.$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate2(\"\", user_count_r2.user.firstName, \" \", user_count_r2.user.lastName, \"\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(user_count_r2.count);\n  }\n}\nfunction ChatNotificationComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1, \"\\n    \");\n    i0.ɵɵelementStart(2, \"div\", 1);\n    i0.ɵɵlistener(\"click\", function ChatNotificationComponent_ng_container_0_Template_div_click_2_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.openChatNames());\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3, \"\\n\\n        \");\n    i0.ɵɵelementStart(4, \"div\", 2);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(6, \"\\n\\n    \");\n    i0.ɵɵelementStart(7, \"div\", 3);\n    i0.ɵɵtext(8, \"\\n        \");\n    i0.ɵɵtemplate(9, ChatNotificationComponent_ng_container_0_ng_container_9_Template, 9, 3, \"ng-container\", 4);\n    i0.ɵɵtext(10, \"\\n    \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(11, \"\\n\");\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(ctx_r0.totalMessages);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"hidden\", ctx_r0.isShowUsers);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.usersAndCount);\n  }\n}\nexport class ChatNotificationComponent {\n  constructor(sharedChatService, generalService) {\n    this.sharedChatService = sharedChatService;\n    this.generalService = generalService;\n    this.isShowUsers = true;\n    this.messages = [];\n    this.users = [];\n    this.usersAndCount = [];\n    this.totalMessages = 0;\n    if (this.sharedChatService.subsVar === undefined) {\n      this.sharedChatService.subsVar = this.sharedChatService.invokeChatNotification.subscribe(() => {\n        this.loadMessages();\n      });\n    }\n  }\n  loadMessages() {\n    this.generalService.findWidthAuthorities().subscribe(u => {\n      this.user = u.body;\n      this.generalService.findAllChatMessagesByMessageToAndDateSeenIsNull(this.user.id).subscribe(m => {\n        this.messages = m.body;\n        this.totalMessages = this.messages.length;\n      });\n    });\n  }\n  openChatWindow(user) {\n    this.sharedChatService.callClickName(user);\n    const uM = this.usersAndCount.find(element => element.user.id === user.id);\n    this.totalMessages -= uM.count;\n    this.usersAndCount = this.usersAndCount.filter(element => element.user.id !== user.id);\n    this.messages.forEach(element => {\n      element.dateSeen = new Date();\n      this.sharedChatService.update(element).subscribe();\n    });\n    if (this.users.length > 0) {\n      this.isShowUsers = !this.isShowUsers;\n    }\n  }\n  openChatNames() {\n    this.messages.forEach(message => {\n      this.generalService.findWidthAuthoritiesWidthId(message.messageFrom).subscribe(user => {\n        const found = this.users.find(element => element.id === message.messageFrom);\n        if (!found) {\n          this.users.push(user.body);\n          const messagesUser = this.messages.filter(element => element.messageFrom === user.body.id);\n          this.usersAndCount.push({\n            user: user.body,\n            count: messagesUser.length\n          });\n        }\n      });\n    });\n    if (this.usersAndCount.length > 0) {\n      this.isShowUsers = !this.isShowUsers;\n    }\n  }\n}\nChatNotificationComponent.ɵfac = function ChatNotificationComponent_Factory(t) {\n  return new (t || ChatNotificationComponent)(i0.ɵɵdirectiveInject(i1.SharedChatService), i0.ɵɵdirectiveInject(i2.GeneralService));\n};\nChatNotificationComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ChatNotificationComponent,\n  selectors: [[\"jhi-chat-notification\"]],\n  decls: 2,\n  vars: 1,\n  consts: [[4, \"jhiHasAnyAuthority\"], [1, \"chat-notification\", 3, \"click\"], [1, \"totalMessage\"], [1, \"chat-notification-users\", 3, \"hidden\"], [4, \"ngFor\", \"ngForOf\"], [1, \"user\"], [3, \"click\"], [1, \"counterMessages\"]],\n  template: function ChatNotificationComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, ChatNotificationComponent_ng_container_0_Template, 12, 3, \"ng-container\", 0);\n      i0.ɵɵtext(1, \"\\n\\n\");\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"jhiHasAnyAuthority\", \"ROLE_USER\");\n    }\n  },\n  dependencies: [i3.NgForOf, i4.HasAnyAuthorityDirective],\n  styles: [\".chat-notification[_ngcontent-%COMP%] {\\n  background-image: url('Chat-2-75.png');\\n  width: 75px;\\n  height: 75px;\\n  position: absolute;\\n  right: 75px;\\n  top: 175px;\\n  z-index: 6;\\n}\\n\\n.totalMessage[_ngcontent-%COMP%] {\\n  position: absolute;\\n  right: 60px;\\n  top: 160px;\\n  background-color: aqua;\\n  text-align: center;\\n  width: 40px;\\n  font-weight: bold;\\n  color: white;\\n  border-radius: 20px;\\n  z-index: 6;\\n  font-size: large;\\n}\\n\\n.chat-notification-users[_ngcontent-%COMP%] {\\n  background-color: black;\\n  opacity: 0.6;\\n  width: 250px;\\n  min-height: 55px;\\n  position: absolute;\\n  right: 37.5px;\\n  top: 245px;\\n  z-index: 5;\\n  border-radius: 10px;\\n  border: white 1px solid;\\n  color: white;\\n  padding: 5px;\\n  padding-top: 20px;\\n  font-weight: bold;\\n}\\n\\n.user[_ngcontent-%COMP%] {\\n  width: 75%;\\n  float: left;\\n}\\n\\n.counterMessages[_ngcontent-%COMP%] {\\n  background-color: aqua;\\n  border-radius: 12.5px;\\n  margin-bottom: 5px;\\n  width: 25px;\\n  margin: 0 auto;\\n  float: left;\\n  text-align: center;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9tYWluL3dlYmFwcC9hcHAvY2hhdC9jaGF0LW5vdGlmaWNhdGlvbi9jaGF0LW5vdGlmaWNhdGlvbi5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLHNDQUFBO0VBQ0EsV0FBQTtFQUNBLFlBQUE7RUFDQSxrQkFBQTtFQUNBLFdBQUE7RUFDQSxVQUFBO0VBQ0EsVUFBQTtBQUNGOztBQUVBO0VBQ0Usa0JBQUE7RUFDQSxXQUFBO0VBQ0EsVUFBQTtFQUNBLHNCQUFBO0VBQ0Esa0JBQUE7RUFDQSxXQUFBO0VBQ0EsaUJBQUE7RUFDQSxZQUFBO0VBQ0EsbUJBQUE7RUFDQSxVQUFBO0VBQ0EsZ0JBQUE7QUFDRjs7QUFFQTtFQUNFLHVCQUFBO0VBQ0EsWUFBQTtFQUNBLFlBQUE7RUFDQSxnQkFBQTtFQUNBLGtCQUFBO0VBQ0EsYUFBQTtFQUNBLFVBQUE7RUFDQSxVQUFBO0VBQ0EsbUJBQUE7RUFDQSx1QkFBQTtFQUNBLFlBQUE7RUFDQSxZQUFBO0VBQ0EsaUJBQUE7RUFDQSxpQkFBQTtBQUNGOztBQUVBO0VBQ0UsVUFBQTtFQUNBLFdBQUE7QUFDRjs7QUFFQTtFQUNFLHNCQUFBO0VBQ0EscUJBQUE7RUFDQSxrQkFBQTtFQUNBLFdBQUE7RUFDQSxjQUFBO0VBQ0EsV0FBQTtFQUNBLGtCQUFBO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIuY2hhdC1ub3RpZmljYXRpb24ge1xuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJy4uLy4uLy4uL2NvbnRlbnQvaW1hZ2VzL0NoYXQtMi03NS5wbmcnKTtcbiAgd2lkdGg6IDc1cHg7XG4gIGhlaWdodDogNzVweDtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICByaWdodDogNzVweDtcbiAgdG9wOiAxNzVweDtcbiAgei1pbmRleDogNjtcbn1cblxuLnRvdGFsTWVzc2FnZSB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgcmlnaHQ6IDYwcHg7XG4gIHRvcDogMTYwcHg7XG4gIGJhY2tncm91bmQtY29sb3I6IGFxdWE7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgd2lkdGg6IDQwcHg7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xuICBjb2xvcjogd2hpdGU7XG4gIGJvcmRlci1yYWRpdXM6IDIwcHg7XG4gIHotaW5kZXg6IDY7XG4gIGZvbnQtc2l6ZTogbGFyZ2U7XG59XG5cbi5jaGF0LW5vdGlmaWNhdGlvbi11c2VycyB7XG4gIGJhY2tncm91bmQtY29sb3I6IGJsYWNrO1xuICBvcGFjaXR5OiAwLjY7XG4gIHdpZHRoOiAyNTBweDtcbiAgbWluLWhlaWdodDogNTVweDtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICByaWdodDogMzcuNXB4O1xuICB0b3A6IDI0NXB4O1xuICB6LWluZGV4OiA1O1xuICBib3JkZXItcmFkaXVzOiAxMHB4O1xuICBib3JkZXI6IHdoaXRlIDFweCBzb2xpZDtcbiAgY29sb3I6IHdoaXRlO1xuICBwYWRkaW5nOiA1cHg7XG4gIHBhZGRpbmctdG9wOiAyMHB4O1xuICBmb250LXdlaWdodDogYm9sZDtcbn1cblxuLnVzZXIge1xuICB3aWR0aDogNzUlO1xuICBmbG9hdDogbGVmdDtcbn1cblxuLmNvdW50ZXJNZXNzYWdlcyB7XG4gIGJhY2tncm91bmQtY29sb3I6IGFxdWE7XG4gIGJvcmRlci1yYWRpdXM6IDEyLjVweDtcbiAgbWFyZ2luLWJvdHRvbTogNXB4O1xuICB3aWR0aDogMjVweDtcbiAgbWFyZ2luOiAwIGF1dG87XG4gIGZsb2F0OiBsZWZ0O1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"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","names":["i0","ChatNotificationComponent","constructor","sharedChatService","generalService","subsVar","undefined","invokeChatNotification","subscribe","loadMessages","findWidthAuthorities","u","user","body","findAllChatMessagesByMessageToAndDateSeenIsNull","id","m","messages","totalMessages","length","openChatWindow","callClickName","uM","usersAndCount","find","element","count","filter","forEach","dateSeen","Date","update","users","isShowUsers","openChatNames","message","findWidthAuthoritiesWidthId","messageFrom","found","push","messagesUser","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/chat/chat-notification/chat-notification.component.html","/home/ceo/mmmm/createyourevent/src/main/webapp/app/chat/chat-notification/chat-notification.component.ts"],"sourcesContent":["<ng-container *jhiHasAnyAuthority=\"'ROLE_USER'\">\n    <div class=\"chat-notification\" (click)=\"openChatNames()\"></div>\n\n        <div class=\"totalMessage\">{{ totalMessages }}</div>\n\n    <div class=\"chat-notification-users\" [hidden]=\"isShowUsers\">\n        <ng-container *ngFor=\"let user_count of usersAndCount\">\n            <div class=\"user\"><a (click)=\"openChatWindow(user_count.user)\">{{ user_count.user.firstName }} {{ user_count.user.lastName }}</a></div>\n            <div class=\"counterMessages\">{{ user_count.count }}</div>\n        </ng-container>\n    </div>\n</ng-container>\n\n","import { Component } from \"@angular/core\";\nimport { SharedChatService } from \"app/chat.service\";\nimport { IUser } from \"app/entities/user/user.model\";\nimport { GeneralService } from \"app/general.service\";\nimport { IChatMessage } from \"../chat-message.model\";\n\n\n@Component({\n  selector: 'jhi-chat-notification',\n  templateUrl: './chat-notification.component.html',\n  styleUrls: ['./chat-notification.component.scss']\n})\nexport class ChatNotificationComponent {\n\n  user!: IUser;\n  isShowUsers = true;\n  messages: IChatMessage[] = [];\n  users: IUser[] = [];\n  usersAndCount: any[] = [];\n  totalMessages  = 0;\n\n  constructor(private sharedChatService: SharedChatService,\n              private generalService: GeneralService){\n                if (this.sharedChatService.subsVar === undefined) {\n                  this.sharedChatService.subsVar = this.sharedChatService.\n                  invokeChatNotification.subscribe(() => {\n                    this.loadMessages();\n                  });\n                }\n              }\n\n\n  loadMessages(): void {\n    this.generalService.findWidthAuthorities().subscribe(u => {\n      this.user = u.body!;\n      this.generalService.findAllChatMessagesByMessageToAndDateSeenIsNull(this.user.id).subscribe(m => {\n        this.messages = m.body!;\n        this.totalMessages = this.messages.length;\n        });\n      });\n  }\n\n  openChatWindow(user: IUser): void {\n    this.sharedChatService.callClickName(user);\n    const uM = this.usersAndCount.find(element => element.user.id === user.id);\n    this.totalMessages -= uM.count;\n    this.usersAndCount = this.usersAndCount.filter(element => element.user.id !== user.id);\n    this.messages.forEach(element => {\n      element.dateSeen = new Date();\n      this.sharedChatService.update(element).subscribe();\n    });\n    if(this.users.length > 0) {\n        this.isShowUsers = !this.isShowUsers;\n    }\n  }\n\n  openChatNames(): void {\n      this.messages.forEach(message => {\n      this.generalService.findWidthAuthoritiesWidthId(message.messageFrom!).subscribe(user => {\n        const found = this.users.find(element => element.id === message.messageFrom)\n        if(!found) {\n          this.users.push(user.body!);\n          const messagesUser = this.messages.filter(element => element.messageFrom === user.body!.id);\n          this.usersAndCount.push({user: user.body!, count: messagesUser.length});\n        }\n      });\n    });\n\n    if(this.usersAndCount.length > 0) {\n      this.isShowUsers = !this.isShowUsers;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}