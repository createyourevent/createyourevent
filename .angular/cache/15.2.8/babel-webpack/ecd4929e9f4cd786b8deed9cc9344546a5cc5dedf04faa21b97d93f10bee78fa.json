{"ast":null,"code":"import { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getUserExtensionIdentifier } from '../user-extension.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport let UserExtensionService = /*#__PURE__*/(() => {\n  class UserExtensionService {\n    constructor(http, applicationConfigService) {\n      this.http = http;\n      this.applicationConfigService = applicationConfigService;\n      this.resourceUrl = this.applicationConfigService.getEndpointFor('api/user-extensions');\n    }\n    create(userExtension) {\n      return this.http.post(this.resourceUrl, userExtension, {\n        observe: 'response'\n      });\n    }\n    update(userExtension) {\n      return this.http.put(`${this.resourceUrl}/${getUserExtensionIdentifier(userExtension)}`, userExtension, {\n        observe: 'response'\n      });\n    }\n    partialUpdate(userExtension) {\n      return this.http.patch(`${this.resourceUrl}/${getUserExtensionIdentifier(userExtension)}`, userExtension, {\n        observe: 'response'\n      });\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    addUserExtensionToCollectionIfMissing(userExtensionCollection, ...userExtensionsToCheck) {\n      const userExtensions = userExtensionsToCheck.filter(isPresent);\n      if (userExtensions.length > 0) {\n        const userExtensionCollectionIdentifiers = userExtensionCollection.map(userExtensionItem => getUserExtensionIdentifier(userExtensionItem));\n        const userExtensionsToAdd = userExtensions.filter(userExtensionItem => {\n          const userExtensionIdentifier = getUserExtensionIdentifier(userExtensionItem);\n          if (userExtensionIdentifier == null || userExtensionCollectionIdentifiers.includes(userExtensionIdentifier)) {\n            return false;\n          }\n          userExtensionCollectionIdentifiers.push(userExtensionIdentifier);\n          return true;\n        });\n        return [...userExtensionsToAdd, ...userExtensionCollection];\n      }\n      return userExtensionCollection;\n    }\n  }\n  UserExtensionService.ɵfac = function UserExtensionService_Factory(t) {\n    return new (t || UserExtensionService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n  };\n  UserExtensionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserExtensionService,\n    factory: UserExtensionService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserExtensionService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}