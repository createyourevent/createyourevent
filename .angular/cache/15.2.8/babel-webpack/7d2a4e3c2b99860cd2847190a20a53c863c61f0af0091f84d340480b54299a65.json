{"ast":null,"code":"import { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getPartnerIdentifier } from '../partner.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport let PartnerService = /*#__PURE__*/(() => {\n  class PartnerService {\n    constructor(http, applicationConfigService) {\n      this.http = http;\n      this.applicationConfigService = applicationConfigService;\n      this.resourceUrl = this.applicationConfigService.getEndpointFor('api/partners');\n    }\n    create(partner) {\n      return this.http.post(this.resourceUrl, partner, {\n        observe: 'response'\n      });\n    }\n    update(partner) {\n      return this.http.put(`${this.resourceUrl}/${getPartnerIdentifier(partner)}`, partner, {\n        observe: 'response'\n      });\n    }\n    partialUpdate(partner) {\n      return this.http.patch(`${this.resourceUrl}/${getPartnerIdentifier(partner)}`, partner, {\n        observe: 'response'\n      });\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    addPartnerToCollectionIfMissing(partnerCollection, ...partnersToCheck) {\n      const partners = partnersToCheck.filter(isPresent);\n      if (partners.length > 0) {\n        const partnerCollectionIdentifiers = partnerCollection.map(partnerItem => getPartnerIdentifier(partnerItem));\n        const partnersToAdd = partners.filter(partnerItem => {\n          const partnerIdentifier = getPartnerIdentifier(partnerItem);\n          if (partnerIdentifier == null || partnerCollectionIdentifiers.includes(partnerIdentifier)) {\n            return false;\n          }\n          partnerCollectionIdentifiers.push(partnerIdentifier);\n          return true;\n        });\n        return [...partnersToAdd, ...partnerCollection];\n      }\n      return partnerCollection;\n    }\n  }\n  PartnerService.ɵfac = function PartnerService_Factory(t) {\n    return new (t || PartnerService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n  };\n  PartnerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PartnerService,\n    factory: PartnerService.ɵfac,\n    providedIn: 'root'\n  });\n  return PartnerService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}