{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\nimport { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getOrderIdentifier } from '../order.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport let OrderService = /*#__PURE__*/(() => {\n  class OrderService {\n    constructor(http, applicationConfigService) {\n      this.http = http;\n      this.applicationConfigService = applicationConfigService;\n      this.resourceUrl = this.applicationConfigService.getEndpointFor('api/orders');\n    }\n    create(order) {\n      const copy = this.convertDateFromClient(order);\n      return this.http.post(this.resourceUrl, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    update(order) {\n      const copy = this.convertDateFromClient(order);\n      return this.http.put(`${this.resourceUrl}/${getOrderIdentifier(order)}`, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    partialUpdate(order) {\n      const copy = this.convertDateFromClient(order);\n      return this.http.patch(`${this.resourceUrl}/${getOrderIdentifier(order)}`, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      }).pipe(map(res => this.convertDateArrayFromServer(res)));\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    addOrderToCollectionIfMissing(orderCollection, ...ordersToCheck) {\n      const orders = ordersToCheck.filter(isPresent);\n      if (orders.length > 0) {\n        const orderCollectionIdentifiers = orderCollection.map(orderItem => getOrderIdentifier(orderItem));\n        const ordersToAdd = orders.filter(orderItem => {\n          const orderIdentifier = getOrderIdentifier(orderItem);\n          if (orderIdentifier == null || orderCollectionIdentifiers.includes(orderIdentifier)) {\n            return false;\n          }\n          orderCollectionIdentifiers.push(orderIdentifier);\n          return true;\n        });\n        return [...ordersToAdd, ...orderCollection];\n      }\n      return orderCollection;\n    }\n    convertDateFromClient(order) {\n      return Object.assign({}, order, {\n        dateAdded: order.dateAdded?.isValid() ? order.dateAdded.toJSON() : undefined\n      });\n    }\n    convertDateFromServer(res) {\n      if (res.body) {\n        res.body.dateAdded = res.body.dateAdded ? dayjs(res.body.dateAdded) : undefined;\n      }\n      return res;\n    }\n    convertDateArrayFromServer(res) {\n      if (res.body) {\n        res.body.forEach(order => {\n          order.dateAdded = order.dateAdded ? dayjs(order.dateAdded) : undefined;\n        });\n      }\n      return res;\n    }\n  }\n  OrderService.ɵfac = function OrderService_Factory(t) {\n    return new (t || OrderService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n  };\n  OrderService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OrderService,\n    factory: OrderService.ɵfac,\n    providedIn: 'root'\n  });\n  return OrderService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}