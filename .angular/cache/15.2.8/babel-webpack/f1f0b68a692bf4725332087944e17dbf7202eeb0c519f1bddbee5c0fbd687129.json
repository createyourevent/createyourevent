{"ast":null,"code":"import { of, EMPTY } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\nimport { EventDetailComponent } from './event-detail.component';\nimport { EventUpdateComponent } from './event-update.component';\nimport { EventToProductRatingComponent } from './evaluate/evaluate-event-product.component';\nimport { EditLocationUpdateComponent } from './location-update.component';\nimport { AddressUpdateComponent } from './address-update.component';\nimport { EditProductsComponent } from './edit-products.component';\nimport { DashboardEventComponent } from './dashboard-event/dashboard-event.component';\nimport { CalculationComponent } from './dashboard-event/calculation/calculation.component';\nimport { CommentsComponent } from './dashboard-event/comments/comments.component';\nimport { GalleryComponent } from './dashboard-event/gallery/gallery.component';\nimport { RatingsComponent } from './dashboard-event/ratings/ratings.component';\nimport { WorkflowComponent } from './dashboard-event/workflow/workflow.component';\nimport { StarRatingsComponent } from './dashboard-event/star-ratings/star-ratings.component';\nimport { AddProductComponent } from './add-product.component';\nimport { EditServicesComponent } from './edit-services.component';\nimport { Authority } from 'app/config/authority.constants';\nimport { UserRouteAccessService } from 'app/core/auth/user-route-access.service';\nimport { Event as Party } from 'app/entities/event/event.model';\nimport { MP3Component } from './dashboard-event/mp3/mp3.component';\nimport { InFavoritsComponent } from './dashboard-event/in-favorits/in-favorits.component';\nimport { BuyTicketComponent } from '../buy-ticket/buy-ticket.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"app/entities/event/service/event.service\";\nimport * as i2 from \"@angular/router\";\nexport let EventResolve = /*#__PURE__*/(() => {\n  class EventResolve {\n    constructor(service, router) {\n      this.service = service;\n      this.router = router;\n    }\n    resolve(route) {\n      const id = route.params['id'];\n      if (id) {\n        return this.service.find(id).pipe(mergeMap(event => {\n          if (event.body) {\n            return of(event.body);\n          } else {\n            this.router.navigate(['404']);\n            return EMPTY;\n          }\n        }));\n      }\n      return of(new Party());\n    }\n  }\n  EventResolve.ɵfac = function EventResolve_Factory(t) {\n    return new (t || EventResolve)(i0.ɵɵinject(i1.EventService), i0.ɵɵinject(i2.Router));\n  };\n  EventResolve.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EventResolve,\n    factory: EventResolve.ɵfac,\n    providedIn: 'root'\n  });\n  return EventResolve;\n})();\nexport const eventRoute = [{\n  path: ':id/view',\n  component: EventDetailComponent,\n  resolve: {\n    event: EventResolve\n  },\n  data: {\n    pageTitle: 'createyoureventApp.event.home.title'\n  }\n}, {\n  path: ':id/edit',\n  component: EventUpdateComponent,\n  resolve: {\n    event: EventResolve\n  },\n  data: {\n    authorities: [Authority.USER],\n    pageTitle: 'createyoureventApp.event.home.title'\n  },\n  canActivate: [UserRouteAccessService]\n}, {\n  path: ':eventId/:productId/eventproductrating',\n  component: EventToProductRatingComponent,\n  data: {\n    authorities: [Authority.USER],\n    pageTitle: 'createyoureventApp.event.home.title'\n  },\n  canActivate: [UserRouteAccessService]\n}, {\n  path: ':eventId/edit-location',\n  component: EditLocationUpdateComponent,\n  data: {\n    authorities: [Authority.USER],\n    pageTitle: 'createyoureventApp.event.home.title'\n  },\n  canActivate: [UserRouteAccessService]\n}, {\n  path: ':locationId/edit-address',\n  component: AddressUpdateComponent,\n  data: {\n    authorities: [Authority.USER],\n    pageTitle: 'createyoureventApp.event.home.title'\n  },\n  canActivate: [UserRouteAccessService]\n}, {\n  path: ':eventId/edit-products',\n  component: EditProductsComponent,\n  data: {\n    authorities: [Authority.USER],\n    pageTitle: 'createyoureventApp.event.home.title'\n  },\n  canActivate: [UserRouteAccessService]\n}, {\n  path: ':eventId/edit-services',\n  component: EditServicesComponent,\n  data: {\n    authorities: [Authority.USER],\n    pageTitle: 'createyoureventApp.event.home.title'\n  },\n  canActivate: [UserRouteAccessService]\n}, {\n  path: ':eventId/dashboard-event',\n  component: DashboardEventComponent,\n  data: {\n    authorities: [Authority.USER],\n    pageTitle: 'createyoureventApp.event.home.title'\n  },\n  canActivate: [UserRouteAccessService],\n  children: [{\n    path: 'calculation',\n    pathMatch: 'full',\n    component: CalculationComponent\n  }, {\n    path: 'comments',\n    pathMatch: 'full',\n    component: CommentsComponent\n  }, {\n    path: 'ratings',\n    pathMatch: 'full',\n    component: RatingsComponent\n  }, {\n    path: 'gallery',\n    pathMatch: 'full',\n    component: GalleryComponent\n  }, {\n    path: 'mp3',\n    pathMatch: 'full',\n    component: MP3Component\n  }, {\n    path: 'workflow',\n    pathMatch: 'full',\n    component: WorkflowComponent\n  }, {\n    path: 'stars',\n    pathMatch: 'full',\n    component: StarRatingsComponent\n  }, {\n    path: 'inFavorits',\n    pathMatch: 'full',\n    component: InFavoritsComponent\n  }]\n}, {\n  path: ':eventId/add-product',\n  component: AddProductComponent,\n  data: {\n    authorities: [Authority.USER],\n    pageTitle: 'createyoureventApp.event.home.title'\n  },\n  canActivate: [UserRouteAccessService]\n}, {\n  path: ':eventId/buy-tickets',\n  component: BuyTicketComponent,\n  data: {\n    authorities: [Authority.USER],\n    pageTitle: 'createyoureventApp.event.buy-ticket.title'\n  },\n  canActivate: [UserRouteAccessService]\n}];","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}