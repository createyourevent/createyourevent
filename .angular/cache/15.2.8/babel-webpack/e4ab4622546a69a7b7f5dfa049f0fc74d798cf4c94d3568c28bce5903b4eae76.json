{"ast":null,"code":"import { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getMp3Identifier } from '../mp-3.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport let Mp3Service = /*#__PURE__*/(() => {\n  class Mp3Service {\n    constructor(http, applicationConfigService) {\n      this.http = http;\n      this.applicationConfigService = applicationConfigService;\n      this.resourceUrl = this.applicationConfigService.getEndpointFor('api/mp-3-s');\n    }\n    create(mp3) {\n      return this.http.post(this.resourceUrl, mp3, {\n        observe: 'response'\n      });\n    }\n    update(mp3) {\n      return this.http.put(`${this.resourceUrl}/${getMp3Identifier(mp3)}`, mp3, {\n        observe: 'response'\n      });\n    }\n    partialUpdate(mp3) {\n      return this.http.patch(`${this.resourceUrl}/${getMp3Identifier(mp3)}`, mp3, {\n        observe: 'response'\n      });\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    addMp3ToCollectionIfMissing(mp3Collection, ...mp3sToCheck) {\n      const mp3s = mp3sToCheck.filter(isPresent);\n      if (mp3s.length > 0) {\n        const mp3CollectionIdentifiers = mp3Collection.map(mp3Item => getMp3Identifier(mp3Item));\n        const mp3sToAdd = mp3s.filter(mp3Item => {\n          const mp3Identifier = getMp3Identifier(mp3Item);\n          if (mp3Identifier == null || mp3CollectionIdentifiers.includes(mp3Identifier)) {\n            return false;\n          }\n          mp3CollectionIdentifiers.push(mp3Identifier);\n          return true;\n        });\n        return [...mp3sToAdd, ...mp3Collection];\n      }\n      return mp3Collection;\n    }\n  }\n  Mp3Service.ɵfac = function Mp3Service_Factory(t) {\n    return new (t || Mp3Service)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n  };\n  Mp3Service.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: Mp3Service,\n    factory: Mp3Service.ɵfac,\n    providedIn: 'root'\n  });\n  return Mp3Service;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}