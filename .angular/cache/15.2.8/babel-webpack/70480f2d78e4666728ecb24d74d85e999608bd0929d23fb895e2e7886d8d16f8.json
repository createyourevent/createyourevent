{"ast":null,"code":"import { __decorate } from 'tslib';\nimport { EventEmitter, Input, Output, Component, NgModule } from '@angular/core';\nimport * as ɵngcc0 from '@angular/core';\nvar TextAlignment = /*#__PURE__*/(() => {\n  (function (TextAlignment) {\n    TextAlignment[\"INNER\"] = \"inner\";\n    TextAlignment[\"OUTER\"] = \"outer\";\n    TextAlignment[\"CENTER\"] = \"center\";\n  })(TextAlignment || (TextAlignment = {}));\n  return TextAlignment;\n})();\nvar TextOrientation = /*#__PURE__*/(() => {\n  (function (TextOrientation) {\n    TextOrientation[\"HORIZONTAL\"] = \"horizontal\";\n    TextOrientation[\"VERTICAL\"] = \"vertical\";\n    TextOrientation[\"CURVED\"] = \"curved\";\n  })(TextOrientation || (TextOrientation = {}));\n  return TextOrientation;\n})();\nlet NgxWheelComponent = /*#__PURE__*/(() => {\n  let NgxWheelComponent = class NgxWheelComponent {\n    constructor() {\n      this.onSpinStart = new EventEmitter();\n      this.onSpinComplete = new EventEmitter();\n      this.completedSpin = false;\n      this.isSpinning = false;\n    }\n    reset() {\n      this.wheel.stopAnimation(false);\n      this.wheel.rotationAngle = 0;\n      this.wheel.ctx.clearRect(0, 0, this.wheel.ctx.canvas.width, this.wheel.ctx.canvas.height);\n      this.isSpinning = false;\n      this.completedSpin = false;\n      this.ngAfterViewInit();\n    }\n    ngOnInit() {}\n    spin() {\n      if (this.completedSpin || this.isSpinning) return;\n      this.isSpinning = true;\n      this.onSpinStart.emit(null);\n      const segmentToLandOn = this.wheel.segments.filter(x => !!x).find(({\n        id\n      }) => this.idToLandOn === id);\n      const segmentTheta = segmentToLandOn.endAngle - segmentToLandOn.startAngle;\n      this.wheel.animation.stopAngle = segmentToLandOn.endAngle - segmentTheta / 4;\n      this.wheel.startAnimation();\n      setTimeout(() => {\n        this.completedSpin = true;\n        this.onSpinComplete.emit(null);\n      }, this.spinDuration * 1000);\n    }\n    ngAfterViewInit() {\n      const segments = this.items;\n      // @ts-ignore\n      this.wheel = new Winwheel({\n        numSegments: segments.length,\n        segments,\n        innerRadius: this.innerRadius || 0,\n        outerRadius: this.height / 2 - 20,\n        centerY: this.height / 2 + 20,\n        textOrientation: this.textOrientation,\n        textAligment: this.textAlignment,\n        animation: {\n          type: 'spinToStop',\n          duration: this.spinDuration,\n          spins: this.spinAmount // The number of complete 360 degree rotations the wheel is to do.\n        }\n      });\n      // @ts-ignore\n      TweenMax.ticker.addEventListener(\"tick\", this.drawPointer.bind(this));\n    }\n    ngOnDestroy() {\n      // @ts-ignore\n      TweenMax.ticker.removeEventListener(\"tick\");\n    }\n    drawPointer() {\n      let c = this.wheel.ctx;\n      // Create pointer.\n      if (c) {\n        c.save();\n        c.lineWidth = 2;\n        c.strokeStyle = this.pointerStrokeColor;\n        c.fillStyle = this.pointerFillColor;\n        c.beginPath();\n        c.moveTo(this.width / 2 - 20, 2);\n        c.lineTo(this.width / 2 + 20, 2);\n        c.lineTo(this.width / 2, 42);\n        c.lineTo(this.width / 2 - 20, 2);\n        c.stroke();\n        c.fill();\n        c.restore();\n      }\n    }\n  };\n  NgxWheelComponent.ɵfac = function NgxWheelComponent_Factory(t) {\n    return new (t || NgxWheelComponent)();\n  };\n  NgxWheelComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: NgxWheelComponent,\n    selectors: [[\"ngx-wheel\"]],\n    inputs: {\n      height: \"height\",\n      idToLandOn: \"idToLandOn\",\n      width: \"width\",\n      items: \"items\",\n      spinDuration: \"spinDuration\",\n      spinAmount: \"spinAmount\",\n      innerRadius: \"innerRadius\",\n      pointerStrokeColor: \"pointerStrokeColor\",\n      pointerFillColor: \"pointerFillColor\",\n      disableSpinOnClick: \"disableSpinOnClick\",\n      textOrientation: \"textOrientation\",\n      textAlignment: \"textAlignment\"\n    },\n    outputs: {\n      onSpinStart: \"onSpinStart\",\n      onSpinComplete: \"onSpinComplete\"\n    },\n    decls: 4,\n    vars: 2,\n    consts: [[\"id\", \"canvas\", 3, \"width\", \"height\", \"click\"]],\n    template: function NgxWheelComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtext(0, \"\\n    \");\n        ɵngcc0.ɵɵelementStart(1, \"canvas\", 0);\n        ɵngcc0.ɵɵlistener(\"click\", function NgxWheelComponent_Template_canvas_click_1_listener() {\n          return !ctx.disableSpinOnClick && ctx.spin();\n        });\n        ɵngcc0.ɵɵtext(2, \"\\n    \\u00A0\\u00A0\\u00A0\\u00A0Canvas not supported, use another browser.\\n    \");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtext(3, \"\\n\");\n      }\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"width\", ctx.width)(\"height\", ctx.height);\n      }\n    },\n    encapsulation: 2\n  });\n  __decorate([Input()], NgxWheelComponent.prototype, \"height\", void 0);\n  __decorate([Input()], NgxWheelComponent.prototype, \"idToLandOn\", void 0);\n  __decorate([Input()], NgxWheelComponent.prototype, \"width\", void 0);\n  __decorate([Input()], NgxWheelComponent.prototype, \"items\", void 0);\n  __decorate([Input()], NgxWheelComponent.prototype, \"spinDuration\", void 0);\n  __decorate([Input()], NgxWheelComponent.prototype, \"spinAmount\", void 0);\n  __decorate([Input()], NgxWheelComponent.prototype, \"innerRadius\", void 0);\n  __decorate([Input()], NgxWheelComponent.prototype, \"pointerStrokeColor\", void 0);\n  __decorate([Input()], NgxWheelComponent.prototype, \"pointerFillColor\", void 0);\n  __decorate([Input()], NgxWheelComponent.prototype, \"disableSpinOnClick\", void 0);\n  __decorate([Input()], NgxWheelComponent.prototype, \"textOrientation\", void 0);\n  __decorate([Input()], NgxWheelComponent.prototype, \"textAlignment\", void 0);\n  __decorate([Output()], NgxWheelComponent.prototype, \"onSpinStart\", void 0);\n  __decorate([Output()], NgxWheelComponent.prototype, \"onSpinComplete\", void 0);\n  return NgxWheelComponent;\n})();\nlet NgxWheelModule = /*#__PURE__*/(() => {\n  let NgxWheelModule = class NgxWheelModule {};\n  NgxWheelModule.ɵfac = function NgxWheelModule_Factory(t) {\n    return new (t || NgxWheelModule)();\n  };\n  NgxWheelModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: NgxWheelModule\n  });\n  NgxWheelModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return NgxWheelModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxWheelModule, {\n    declarations: [NgxWheelComponent],\n    exports: [NgxWheelComponent]\n  });\n})();\n\n/*\n * Public API Surface of ngx-wheel\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgxWheelComponent, NgxWheelModule, TextAlignment, TextOrientation };\n\n//# sourceMappingURL=ngx-wheel.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}