{"ast":null,"code":"import { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getFeeTransactionIdIdentifier } from '../fee-transaction-id.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport let FeeTransactionIdService = /*#__PURE__*/(() => {\n  class FeeTransactionIdService {\n    constructor(http, applicationConfigService) {\n      this.http = http;\n      this.applicationConfigService = applicationConfigService;\n      this.resourceUrl = this.applicationConfigService.getEndpointFor('api/fee-transaction-ids');\n    }\n    create(feeTransactionId) {\n      return this.http.post(this.resourceUrl, feeTransactionId, {\n        observe: 'response'\n      });\n    }\n    update(feeTransactionId) {\n      return this.http.put(`${this.resourceUrl}/${getFeeTransactionIdIdentifier(feeTransactionId)}`, feeTransactionId, {\n        observe: 'response'\n      });\n    }\n    partialUpdate(feeTransactionId) {\n      return this.http.patch(`${this.resourceUrl}/${getFeeTransactionIdIdentifier(feeTransactionId)}`, feeTransactionId, {\n        observe: 'response'\n      });\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    addFeeTransactionIdToCollectionIfMissing(feeTransactionIdCollection, ...feeTransactionIdsToCheck) {\n      const feeTransactionIds = feeTransactionIdsToCheck.filter(isPresent);\n      if (feeTransactionIds.length > 0) {\n        const feeTransactionIdCollectionIdentifiers = feeTransactionIdCollection.map(feeTransactionIdItem => getFeeTransactionIdIdentifier(feeTransactionIdItem));\n        const feeTransactionIdsToAdd = feeTransactionIds.filter(feeTransactionIdItem => {\n          const feeTransactionIdIdentifier = getFeeTransactionIdIdentifier(feeTransactionIdItem);\n          if (feeTransactionIdIdentifier == null || feeTransactionIdCollectionIdentifiers.includes(feeTransactionIdIdentifier)) {\n            return false;\n          }\n          feeTransactionIdCollectionIdentifiers.push(feeTransactionIdIdentifier);\n          return true;\n        });\n        return [...feeTransactionIdsToAdd, ...feeTransactionIdCollection];\n      }\n      return feeTransactionIdCollection;\n    }\n  }\n  FeeTransactionIdService.ɵfac = function FeeTransactionIdService_Factory(t) {\n    return new (t || FeeTransactionIdService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n  };\n  FeeTransactionIdService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FeeTransactionIdService,\n    factory: FeeTransactionIdService.ɵfac,\n    providedIn: 'root'\n  });\n  return FeeTransactionIdService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}