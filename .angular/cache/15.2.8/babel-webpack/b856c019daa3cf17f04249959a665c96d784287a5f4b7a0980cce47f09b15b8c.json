{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\nimport { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getContactIdentifier } from '../contact.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport let ContactService = /*#__PURE__*/(() => {\n  class ContactService {\n    constructor(http, applicationConfigService) {\n      this.http = http;\n      this.applicationConfigService = applicationConfigService;\n      this.resourceUrl = this.applicationConfigService.getEndpointFor('api/contacts');\n    }\n    create(contact) {\n      const copy = this.convertDateFromClient(contact);\n      return this.http.post(this.resourceUrl, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    update(contact) {\n      const copy = this.convertDateFromClient(contact);\n      return this.http.put(`${this.resourceUrl}/${getContactIdentifier(contact)}`, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    partialUpdate(contact) {\n      const copy = this.convertDateFromClient(contact);\n      return this.http.patch(`${this.resourceUrl}/${getContactIdentifier(contact)}`, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      }).pipe(map(res => this.convertDateArrayFromServer(res)));\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    addContactToCollectionIfMissing(contactCollection, ...contactsToCheck) {\n      const contacts = contactsToCheck.filter(isPresent);\n      if (contacts.length > 0) {\n        const contactCollectionIdentifiers = contactCollection.map(contactItem => getContactIdentifier(contactItem));\n        const contactsToAdd = contacts.filter(contactItem => {\n          const contactIdentifier = getContactIdentifier(contactItem);\n          if (contactIdentifier == null || contactCollectionIdentifiers.includes(contactIdentifier)) {\n            return false;\n          }\n          contactCollectionIdentifiers.push(contactIdentifier);\n          return true;\n        });\n        return [...contactsToAdd, ...contactCollection];\n      }\n      return contactCollection;\n    }\n    convertDateFromClient(contact) {\n      return Object.assign({}, contact, {\n        date: contact.date?.isValid() ? contact.date.toJSON() : undefined\n      });\n    }\n    convertDateFromServer(res) {\n      if (res.body) {\n        res.body.date = res.body.date ? dayjs(res.body.date) : undefined;\n      }\n      return res;\n    }\n    convertDateArrayFromServer(res) {\n      if (res.body) {\n        res.body.forEach(contact => {\n          contact.date = contact.date ? dayjs(contact.date) : undefined;\n        });\n      }\n      return res;\n    }\n  }\n  ContactService.ɵfac = function ContactService_Factory(t) {\n    return new (t || ContactService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n  };\n  ContactService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ContactService,\n    factory: ContactService.ɵfac,\n    providedIn: 'root'\n  });\n  return ContactService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}