{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\nimport { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getProductLikeDislikeIdentifier } from '../product-like-dislike.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport let ProductLikeDislikeService = /*#__PURE__*/(() => {\n  class ProductLikeDislikeService {\n    constructor(http, applicationConfigService) {\n      this.http = http;\n      this.applicationConfigService = applicationConfigService;\n      this.resourceUrl = this.applicationConfigService.getEndpointFor('api/product-like-dislikes');\n    }\n    create(productLikeDislike) {\n      const copy = this.convertDateFromClient(productLikeDislike);\n      return this.http.post(this.resourceUrl, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    update(productLikeDislike) {\n      const copy = this.convertDateFromClient(productLikeDislike);\n      return this.http.put(`${this.resourceUrl}/${getProductLikeDislikeIdentifier(productLikeDislike)}`, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    partialUpdate(productLikeDislike) {\n      const copy = this.convertDateFromClient(productLikeDislike);\n      return this.http.patch(`${this.resourceUrl}/${getProductLikeDislikeIdentifier(productLikeDislike)}`, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      }).pipe(map(res => this.convertDateArrayFromServer(res)));\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    addProductLikeDislikeToCollectionIfMissing(productLikeDislikeCollection, ...productLikeDislikesToCheck) {\n      const productLikeDislikes = productLikeDislikesToCheck.filter(isPresent);\n      if (productLikeDislikes.length > 0) {\n        const productLikeDislikeCollectionIdentifiers = productLikeDislikeCollection.map(productLikeDislikeItem => getProductLikeDislikeIdentifier(productLikeDislikeItem));\n        const productLikeDislikesToAdd = productLikeDislikes.filter(productLikeDislikeItem => {\n          const productLikeDislikeIdentifier = getProductLikeDislikeIdentifier(productLikeDislikeItem);\n          if (productLikeDislikeIdentifier == null || productLikeDislikeCollectionIdentifiers.includes(productLikeDislikeIdentifier)) {\n            return false;\n          }\n          productLikeDislikeCollectionIdentifiers.push(productLikeDislikeIdentifier);\n          return true;\n        });\n        return [...productLikeDislikesToAdd, ...productLikeDislikeCollection];\n      }\n      return productLikeDislikeCollection;\n    }\n    convertDateFromClient(productLikeDislike) {\n      return Object.assign({}, productLikeDislike, {\n        date: productLikeDislike.date?.isValid() ? productLikeDislike.date.toJSON() : undefined\n      });\n    }\n    convertDateFromServer(res) {\n      if (res.body) {\n        res.body.date = res.body.date ? dayjs(res.body.date) : undefined;\n      }\n      return res;\n    }\n    convertDateArrayFromServer(res) {\n      if (res.body) {\n        res.body.forEach(productLikeDislike => {\n          productLikeDislike.date = productLikeDislike.date ? dayjs(productLikeDislike.date) : undefined;\n        });\n      }\n      return res;\n    }\n  }\n  ProductLikeDislikeService.ɵfac = function ProductLikeDislikeService_Factory(t) {\n    return new (t || ProductLikeDislikeService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n  };\n  ProductLikeDislikeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductLikeDislikeService,\n    factory: ProductLikeDislikeService.ɵfac,\n    providedIn: 'root'\n  });\n  return ProductLikeDislikeService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}