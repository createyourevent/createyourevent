{"ast":null,"code":"import { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getImageIdentifier } from '../image.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport let ImageService = /*#__PURE__*/(() => {\n  class ImageService {\n    constructor(http, applicationConfigService) {\n      this.http = http;\n      this.applicationConfigService = applicationConfigService;\n      this.resourceUrl = this.applicationConfigService.getEndpointFor('api/images');\n    }\n    create(image) {\n      return this.http.post(this.resourceUrl, image, {\n        observe: 'response'\n      });\n    }\n    update(image) {\n      return this.http.put(`${this.resourceUrl}/${getImageIdentifier(image)}`, image, {\n        observe: 'response'\n      });\n    }\n    partialUpdate(image) {\n      return this.http.patch(`${this.resourceUrl}/${getImageIdentifier(image)}`, image, {\n        observe: 'response'\n      });\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    addImageToCollectionIfMissing(imageCollection, ...imagesToCheck) {\n      const images = imagesToCheck.filter(isPresent);\n      if (images.length > 0) {\n        const imageCollectionIdentifiers = imageCollection.map(imageItem => getImageIdentifier(imageItem));\n        const imagesToAdd = images.filter(imageItem => {\n          const imageIdentifier = getImageIdentifier(imageItem);\n          if (imageIdentifier == null || imageCollectionIdentifiers.includes(imageIdentifier)) {\n            return false;\n          }\n          imageCollectionIdentifiers.push(imageIdentifier);\n          return true;\n        });\n        return [...imagesToAdd, ...imageCollection];\n      }\n      return imageCollection;\n    }\n  }\n  ImageService.ɵfac = function ImageService_Factory(t) {\n    return new (t || ImageService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n  };\n  ImageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ImageService,\n    factory: ImageService.ɵfac,\n    providedIn: 'root'\n  });\n  return ImageService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}