{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\nimport { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getProductIdentifier } from '../product.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport let ProductService = /*#__PURE__*/(() => {\n  class ProductService {\n    constructor(http, applicationConfigService) {\n      this.http = http;\n      this.applicationConfigService = applicationConfigService;\n      this.resourceUrl = this.applicationConfigService.getEndpointFor('api/products');\n    }\n    create(product) {\n      const copy = this.convertDateFromClient(product);\n      return this.http.post(this.resourceUrl, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    update(product) {\n      const copy = this.convertDateFromClient(product);\n      return this.http.put(`${this.resourceUrl}/${getProductIdentifier(product)}`, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    partialUpdate(product) {\n      const copy = this.convertDateFromClient(product);\n      return this.http.patch(`${this.resourceUrl}/${getProductIdentifier(product)}`, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      }).pipe(map(res => this.convertDateArrayFromServer(res)));\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    addProductToCollectionIfMissing(productCollection, ...productsToCheck) {\n      const products = productsToCheck.filter(isPresent);\n      if (products.length > 0) {\n        const productCollectionIdentifiers = productCollection.map(productItem => getProductIdentifier(productItem));\n        const productsToAdd = products.filter(productItem => {\n          const productIdentifier = getProductIdentifier(productItem);\n          if (productIdentifier == null || productCollectionIdentifiers.includes(productIdentifier)) {\n            return false;\n          }\n          productCollectionIdentifiers.push(productIdentifier);\n          return true;\n        });\n        return [...productsToAdd, ...productCollection];\n      }\n      return productCollection;\n    }\n    convertDateFromClient(product) {\n      return Object.assign({}, product, {\n        dateAdded: product.dateAdded?.isValid() ? product.dateAdded.toJSON() : undefined,\n        dateModified: product.dateModified?.isValid() ? product.dateModified.toJSON() : undefined\n      });\n    }\n    convertDateFromServer(res) {\n      if (res.body) {\n        res.body.dateAdded = res.body.dateAdded ? dayjs(res.body.dateAdded) : undefined;\n        res.body.dateModified = res.body.dateModified ? dayjs(res.body.dateModified) : undefined;\n      }\n      return res;\n    }\n    convertDateArrayFromServer(res) {\n      if (res.body) {\n        res.body.forEach(product => {\n          product.dateAdded = product.dateAdded ? dayjs(product.dateAdded) : undefined;\n          product.dateModified = product.dateModified ? dayjs(product.dateModified) : undefined;\n        });\n      }\n      return res;\n    }\n  }\n  ProductService.ɵfac = function ProductService_Factory(t) {\n    return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n  };\n  ProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductService,\n    factory: ProductService.ɵfac,\n    providedIn: 'root'\n  });\n  return ProductService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}