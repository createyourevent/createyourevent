{"ast":null,"code":"import _defineProperty from \"/home/ceo/mmmm/createyourevent/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\nimport { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getFeeBalanceIdentifier } from '../fee-balance.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport class FeeBalanceService {\n  constructor(http, applicationConfigService) {\n    _defineProperty(this, \"http\", void 0);\n    _defineProperty(this, \"applicationConfigService\", void 0);\n    _defineProperty(this, \"resourceUrl\", this.applicationConfigService.getEndpointFor('api/fee-balances'));\n    this.http = http;\n    this.applicationConfigService = applicationConfigService;\n  }\n  create(feeBalance) {\n    const copy = this.convertDateFromClient(feeBalance);\n    return this.http.post(this.resourceUrl, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  update(feeBalance) {\n    const copy = this.convertDateFromClient(feeBalance);\n    return this.http.put(`${this.resourceUrl}/${getFeeBalanceIdentifier(feeBalance)}`, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  partialUpdate(feeBalance) {\n    const copy = this.convertDateFromClient(feeBalance);\n    return this.http.patch(`${this.resourceUrl}/${getFeeBalanceIdentifier(feeBalance)}`, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  find(id) {\n    return this.http.get(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  query(req) {\n    const options = createRequestOption(req);\n    return this.http.get(this.resourceUrl, {\n      params: options,\n      observe: 'response'\n    }).pipe(map(res => this.convertDateArrayFromServer(res)));\n  }\n  delete(id) {\n    return this.http.delete(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  addFeeBalanceToCollectionIfMissing(feeBalanceCollection, ...feeBalancesToCheck) {\n    const feeBalances = feeBalancesToCheck.filter(isPresent);\n    if (feeBalances.length > 0) {\n      const feeBalanceCollectionIdentifiers = feeBalanceCollection.map(feeBalanceItem => getFeeBalanceIdentifier(feeBalanceItem));\n      const feeBalancesToAdd = feeBalances.filter(feeBalanceItem => {\n        const feeBalanceIdentifier = getFeeBalanceIdentifier(feeBalanceItem);\n        if (feeBalanceIdentifier == null || feeBalanceCollectionIdentifiers.includes(feeBalanceIdentifier)) {\n          return false;\n        }\n        feeBalanceCollectionIdentifiers.push(feeBalanceIdentifier);\n        return true;\n      });\n      return [...feeBalancesToAdd, ...feeBalanceCollection];\n    }\n    return feeBalanceCollection;\n  }\n  convertDateFromClient(feeBalance) {\n    return Object.assign({}, feeBalance, {\n      date: feeBalance.date?.isValid() ? feeBalance.date.toJSON() : undefined\n    });\n  }\n  convertDateFromServer(res) {\n    if (res.body) {\n      res.body.date = res.body.date ? dayjs(res.body.date) : undefined;\n    }\n    return res;\n  }\n  convertDateArrayFromServer(res) {\n    if (res.body) {\n      res.body.forEach(feeBalance => {\n        feeBalance.date = feeBalance.date ? dayjs(feeBalance.date) : undefined;\n      });\n    }\n    return res;\n  }\n}\n_defineProperty(FeeBalanceService, \"\\u0275fac\", function FeeBalanceService_Factory(t) {\n  return new (t || FeeBalanceService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n});\n_defineProperty(FeeBalanceService, \"\\u0275prov\", /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FeeBalanceService,\n  factory: FeeBalanceService.ɵfac,\n  providedIn: 'root'\n}));","map":{"version":3,"mappings":"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","names":["map","dayjs","isPresent","createRequestOption","getFeeBalanceIdentifier","FeeBalanceService","constructor","http","applicationConfigService","getEndpointFor","create","feeBalance","copy","convertDateFromClient","post","resourceUrl","observe","pipe","res","convertDateFromServer","update","put","partialUpdate","patch","find","id","get","query","req","options","params","convertDateArrayFromServer","delete","addFeeBalanceToCollectionIfMissing","feeBalanceCollection","feeBalancesToCheck","feeBalances","filter","length","feeBalanceCollectionIdentifiers","feeBalanceItem","feeBalancesToAdd","feeBalanceIdentifier","includes","push","Object","assign","date","isValid","toJSON","undefined","body","forEach","factory","providedIn"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/entities/fee-balance/service/fee-balance.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\n\nimport { isPresent } from 'app/core/util/operators';\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { IFeeBalance, getFeeBalanceIdentifier } from '../fee-balance.model';\n\nexport type EntityResponseType = HttpResponse<IFeeBalance>;\nexport type EntityArrayResponseType = HttpResponse<IFeeBalance[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class FeeBalanceService {\n  protected resourceUrl = this.applicationConfigService.getEndpointFor('api/fee-balances');\n\n  constructor(protected http: HttpClient, protected applicationConfigService: ApplicationConfigService) {}\n\n  create(feeBalance: IFeeBalance): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(feeBalance);\n    return this.http\n      .post<IFeeBalance>(this.resourceUrl, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  update(feeBalance: IFeeBalance): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(feeBalance);\n    return this.http\n      .put<IFeeBalance>(`${this.resourceUrl}/${getFeeBalanceIdentifier(feeBalance) as number}`, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  partialUpdate(feeBalance: IFeeBalance): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(feeBalance);\n    return this.http\n      .patch<IFeeBalance>(`${this.resourceUrl}/${getFeeBalanceIdentifier(feeBalance) as number}`, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  find(id: number): Observable<EntityResponseType> {\n    return this.http\n      .get<IFeeBalance>(`${this.resourceUrl}/${id}`, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  query(req?: any): Observable<EntityArrayResponseType> {\n    const options = createRequestOption(req);\n    return this.http\n      .get<IFeeBalance[]>(this.resourceUrl, { params: options, observe: 'response' })\n      .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n  }\n\n  delete(id: number): Observable<HttpResponse<{}>> {\n    return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  addFeeBalanceToCollectionIfMissing(\n    feeBalanceCollection: IFeeBalance[],\n    ...feeBalancesToCheck: (IFeeBalance | null | undefined)[]\n  ): IFeeBalance[] {\n    const feeBalances: IFeeBalance[] = feeBalancesToCheck.filter(isPresent);\n    if (feeBalances.length > 0) {\n      const feeBalanceCollectionIdentifiers = feeBalanceCollection.map(feeBalanceItem => getFeeBalanceIdentifier(feeBalanceItem)!);\n      const feeBalancesToAdd = feeBalances.filter(feeBalanceItem => {\n        const feeBalanceIdentifier = getFeeBalanceIdentifier(feeBalanceItem);\n        if (feeBalanceIdentifier == null || feeBalanceCollectionIdentifiers.includes(feeBalanceIdentifier)) {\n          return false;\n        }\n        feeBalanceCollectionIdentifiers.push(feeBalanceIdentifier);\n        return true;\n      });\n      return [...feeBalancesToAdd, ...feeBalanceCollection];\n    }\n    return feeBalanceCollection;\n  }\n\n  protected convertDateFromClient(feeBalance: IFeeBalance): IFeeBalance {\n    return Object.assign({}, feeBalance, {\n      date: feeBalance.date?.isValid() ? feeBalance.date.toJSON() : undefined,\n    });\n  }\n\n  protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\n    if (res.body) {\n      res.body.date = res.body.date ? dayjs(res.body.date) : undefined;\n    }\n    return res;\n  }\n\n  protected convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\n    if (res.body) {\n      res.body.forEach((feeBalance: IFeeBalance) => {\n        feeBalance.date = feeBalance.date ? dayjs(feeBalance.date) : undefined;\n      });\n    }\n    return res;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}