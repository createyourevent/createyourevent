{"ast":null,"code":"import { HttpResponse } from '@angular/common/http';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"app/core/util/alert.service\";\nexport class NotificationInterceptor {\n  constructor(alertService) {\n    this.alertService = alertService;\n  }\n  intercept(request, next) {\n    return next.handle(request).pipe(tap(event => {\n      if (event instanceof HttpResponse) {\n        let alert = null;\n        let alertParams = null;\n        for (const headerKey of event.headers.keys()) {\n          if (headerKey.toLowerCase().endsWith('app-alert')) {\n            alert = event.headers.get(headerKey);\n          } else if (headerKey.toLowerCase().endsWith('app-params')) {\n            alertParams = decodeURIComponent(event.headers.get(headerKey).replace(/\\+/g, ' '));\n          }\n        }\n        if (alert) {\n          this.alertService.addAlert({\n            type: 'success',\n            translationKey: alert,\n            translationParams: {\n              param: alertParams\n            }\n          });\n        }\n      }\n    }));\n  }\n}\nNotificationInterceptor.ɵfac = function NotificationInterceptor_Factory(t) {\n  return new (t || NotificationInterceptor)(i0.ɵɵinject(i1.AlertService));\n};\nNotificationInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: NotificationInterceptor,\n  factory: NotificationInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AAAA,SAAuCA,YAAY,QAAgC,sBAAsB;AAGzG,SAASC,GAAG,QAAQ,gBAAgB;;;AAKpC,OAAM,MAAOC,uBAAuB;EAClCC,YAAoBC,YAA0B;IAA1B,iBAAY,GAAZA,YAAY;EAAiB;EAEjDC,SAAS,CAACC,OAAyB,EAAEC,IAAiB;IACpD,OAAOA,IAAI,CAACC,MAAM,CAACF,OAAO,CAAC,CAACG,IAAI,CAC9BR,GAAG,CAAES,KAAqB,IAAI;MAC5B,IAAIA,KAAK,YAAYV,YAAY,EAAE;QACjC,IAAIW,KAAK,GAAkB,IAAI;QAC/B,IAAIC,WAAW,GAAkB,IAAI;QAErC,KAAK,MAAMC,SAAS,IAAIH,KAAK,CAACI,OAAO,CAACC,IAAI,EAAE,EAAE;UAC5C,IAAIF,SAAS,CAACG,WAAW,EAAE,CAACC,QAAQ,CAAC,WAAW,CAAC,EAAE;YACjDN,KAAK,GAAGD,KAAK,CAACI,OAAO,CAACI,GAAG,CAACL,SAAS,CAAC;WACrC,MAAM,IAAIA,SAAS,CAACG,WAAW,EAAE,CAACC,QAAQ,CAAC,YAAY,CAAC,EAAE;YACzDL,WAAW,GAAGO,kBAAkB,CAACT,KAAK,CAACI,OAAO,CAACI,GAAG,CAACL,SAAS,CAAE,CAACO,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;;;QAIvF,IAAIT,KAAK,EAAE;UACT,IAAI,CAACP,YAAY,CAACiB,QAAQ,CAAC;YACzBC,IAAI,EAAE,SAAS;YACfC,cAAc,EAAEZ,KAAK;YACrBa,iBAAiB,EAAE;cAAEC,KAAK,EAAEb;YAAW;WACxC,CAAC;;;IAGR,CAAC,CAAC,CACH;EACH;;;mBA5BWV,uBAAuB;AAAA;;SAAvBA,uBAAuB;EAAAwB,SAAvBxB,uBAAuB;AAAA","names":["HttpResponse","tap","NotificationInterceptor","constructor","alertService","intercept","request","next","handle","pipe","event","alert","alertParams","headerKey","headers","keys","toLowerCase","endsWith","get","decodeURIComponent","replace","addAlert","type","translationKey","translationParams","param","factory"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/core/interceptor/notification.interceptor.ts"],"sourcesContent":["import { HttpInterceptor, HttpRequest, HttpResponse, HttpHandler, HttpEvent } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { AlertService } from 'app/core/util/alert.service';\n\n@Injectable()\nexport class NotificationInterceptor implements HttpInterceptor {\n  constructor(private alertService: AlertService) {}\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next.handle(request).pipe(\n      tap((event: HttpEvent<any>) => {\n        if (event instanceof HttpResponse) {\n          let alert: string | null = null;\n          let alertParams: string | null = null;\n\n          for (const headerKey of event.headers.keys()) {\n            if (headerKey.toLowerCase().endsWith('app-alert')) {\n              alert = event.headers.get(headerKey);\n            } else if (headerKey.toLowerCase().endsWith('app-params')) {\n              alertParams = decodeURIComponent(event.headers.get(headerKey)!.replace(/\\+/g, ' '));\n            }\n          }\n\n          if (alert) {\n            this.alertService.addAlert({\n              type: 'success',\n              translationKey: alert,\n              translationParams: { param: alertParams },\n            });\n          }\n        }\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}