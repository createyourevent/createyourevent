{"ast":null,"code":"import _defineProperty from \"/home/ceo/mmmm/createyourevent/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getSlotListCherryIdentifier } from '../slot-list-cherry.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport class SlotListCherryService {\n  constructor(http, applicationConfigService) {\n    _defineProperty(this, \"http\", void 0);\n    _defineProperty(this, \"applicationConfigService\", void 0);\n    _defineProperty(this, \"resourceUrl\", this.applicationConfigService.getEndpointFor('api/slot-list-cherries'));\n    this.http = http;\n    this.applicationConfigService = applicationConfigService;\n  }\n  create(slotListCherry) {\n    return this.http.post(this.resourceUrl, slotListCherry, {\n      observe: 'response'\n    });\n  }\n  update(slotListCherry) {\n    return this.http.put(`${this.resourceUrl}/${getSlotListCherryIdentifier(slotListCherry)}`, slotListCherry, {\n      observe: 'response'\n    });\n  }\n  partialUpdate(slotListCherry) {\n    return this.http.patch(`${this.resourceUrl}/${getSlotListCherryIdentifier(slotListCherry)}`, slotListCherry, {\n      observe: 'response'\n    });\n  }\n  find(id) {\n    return this.http.get(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  query(req) {\n    const options = createRequestOption(req);\n    return this.http.get(this.resourceUrl, {\n      params: options,\n      observe: 'response'\n    });\n  }\n  delete(id) {\n    return this.http.delete(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  addSlotListCherryToCollectionIfMissing(slotListCherryCollection, ...slotListCherriesToCheck) {\n    const slotListCherries = slotListCherriesToCheck.filter(isPresent);\n    if (slotListCherries.length > 0) {\n      const slotListCherryCollectionIdentifiers = slotListCherryCollection.map(slotListCherryItem => getSlotListCherryIdentifier(slotListCherryItem));\n      const slotListCherriesToAdd = slotListCherries.filter(slotListCherryItem => {\n        const slotListCherryIdentifier = getSlotListCherryIdentifier(slotListCherryItem);\n        if (slotListCherryIdentifier == null || slotListCherryCollectionIdentifiers.includes(slotListCherryIdentifier)) {\n          return false;\n        }\n        slotListCherryCollectionIdentifiers.push(slotListCherryIdentifier);\n        return true;\n      });\n      return [...slotListCherriesToAdd, ...slotListCherryCollection];\n    }\n    return slotListCherryCollection;\n  }\n}\n_defineProperty(SlotListCherryService, \"\\u0275fac\", function SlotListCherryService_Factory(t) {\n  return new (t || SlotListCherryService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n});\n_defineProperty(SlotListCherryService, \"\\u0275prov\", /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SlotListCherryService,\n  factory: SlotListCherryService.ɵfac,\n  providedIn: 'root'\n}));","map":{"version":3,"mappings":";AAIA,SAASA,SAAS,QAAQ,yBAAyB;AAEnD,SAASC,mBAAmB,QAAQ,+BAA+B;AACnE,SAA0BC,2BAA2B,QAAQ,2BAA2B;;;;AAMxF,OAAM,MAAOC,qBAAqB;EAGhCC,YAAsBC,IAAgB,EAAYC,wBAAkD;IAAA;IAAA;IAAA,qCAF5E,IAAI,CAACA,wBAAwB,CAACC,cAAc,CAAC,wBAAwB,CAAC;IAExE,SAAI,GAAJF,IAAI;IAAwB,6BAAwB,GAAxBC,wBAAwB;EAA6B;EAEvGE,MAAM,CAACC,cAA+B;IACpC,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAkB,IAAI,CAACC,WAAW,EAAEF,cAAc,EAAE;MAAEG,OAAO,EAAE;IAAU,CAAE,CAAC;EACnG;EAEAC,MAAM,CAACJ,cAA+B;IACpC,OAAO,IAAI,CAACJ,IAAI,CAACS,GAAG,CAAkB,GAAG,IAAI,CAACH,WAAW,IAAIT,2BAA2B,CAACO,cAAc,CAAW,EAAE,EAAEA,cAAc,EAAE;MACpIG,OAAO,EAAE;KACV,CAAC;EACJ;EAEAG,aAAa,CAACN,cAA+B;IAC3C,OAAO,IAAI,CAACJ,IAAI,CAACW,KAAK,CACpB,GAAG,IAAI,CAACL,WAAW,IAAIT,2BAA2B,CAACO,cAAc,CAAW,EAAE,EAC9EA,cAAc,EACd;MAAEG,OAAO,EAAE;IAAU,CAAE,CACxB;EACH;EAEAK,IAAI,CAACC,EAAU;IACb,OAAO,IAAI,CAACb,IAAI,CAACc,GAAG,CAAkB,GAAG,IAAI,CAACR,WAAW,IAAIO,EAAE,EAAE,EAAE;MAAEN,OAAO,EAAE;IAAU,CAAE,CAAC;EAC7F;EAEAQ,KAAK,CAACC,GAAS;IACb,MAAMC,OAAO,GAAGrB,mBAAmB,CAACoB,GAAG,CAAC;IACxC,OAAO,IAAI,CAAChB,IAAI,CAACc,GAAG,CAAoB,IAAI,CAACR,WAAW,EAAE;MAAEY,MAAM,EAAED,OAAO;MAAEV,OAAO,EAAE;IAAU,CAAE,CAAC;EACrG;EAEAY,MAAM,CAACN,EAAU;IACf,OAAO,IAAI,CAACb,IAAI,CAACmB,MAAM,CAAC,GAAG,IAAI,CAACb,WAAW,IAAIO,EAAE,EAAE,EAAE;MAAEN,OAAO,EAAE;IAAU,CAAE,CAAC;EAC/E;EAEAa,sCAAsC,CACpCC,wBAA2C,EAC3C,GAAGC,uBAA+D;IAElE,MAAMC,gBAAgB,GAAsBD,uBAAuB,CAACE,MAAM,CAAC7B,SAAS,CAAC;IACrF,IAAI4B,gBAAgB,CAACE,MAAM,GAAG,CAAC,EAAE;MAC/B,MAAMC,mCAAmC,GAAGL,wBAAwB,CAACM,GAAG,CACtEC,kBAAkB,IAAI/B,2BAA2B,CAAC+B,kBAAkB,CAAE,CACvE;MACD,MAAMC,qBAAqB,GAAGN,gBAAgB,CAACC,MAAM,CAACI,kBAAkB,IAAG;QACzE,MAAME,wBAAwB,GAAGjC,2BAA2B,CAAC+B,kBAAkB,CAAC;QAChF,IAAIE,wBAAwB,IAAI,IAAI,IAAIJ,mCAAmC,CAACK,QAAQ,CAACD,wBAAwB,CAAC,EAAE;UAC9G,OAAO,KAAK;;QAEdJ,mCAAmC,CAACM,IAAI,CAACF,wBAAwB,CAAC;QAClE,OAAO,IAAI;MACb,CAAC,CAAC;MACF,OAAO,CAAC,GAAGD,qBAAqB,EAAE,GAAGR,wBAAwB,CAAC;;IAEhE,OAAOA,wBAAwB;EACjC;;gBAxDWvB,qBAAqB;mBAArBA,qBAAqB;AAAA;AAAA,gBAArBA,qBAAqB;SAArBA,qBAAqB;EAAAmC,SAArBnC,qBAAqB;EAAAoC,YADR;AAAM","names":["isPresent","createRequestOption","getSlotListCherryIdentifier","SlotListCherryService","constructor","http","applicationConfigService","getEndpointFor","create","slotListCherry","post","resourceUrl","observe","update","put","partialUpdate","patch","find","id","get","query","req","options","params","delete","addSlotListCherryToCollectionIfMissing","slotListCherryCollection","slotListCherriesToCheck","slotListCherries","filter","length","slotListCherryCollectionIdentifiers","map","slotListCherryItem","slotListCherriesToAdd","slotListCherryIdentifier","includes","push","factory","providedIn"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/entities/slot-list-cherry/service/slot-list-cherry.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { isPresent } from 'app/core/util/operators';\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { ISlotListCherry, getSlotListCherryIdentifier } from '../slot-list-cherry.model';\n\nexport type EntityResponseType = HttpResponse<ISlotListCherry>;\nexport type EntityArrayResponseType = HttpResponse<ISlotListCherry[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class SlotListCherryService {\n  protected resourceUrl = this.applicationConfigService.getEndpointFor('api/slot-list-cherries');\n\n  constructor(protected http: HttpClient, protected applicationConfigService: ApplicationConfigService) {}\n\n  create(slotListCherry: ISlotListCherry): Observable<EntityResponseType> {\n    return this.http.post<ISlotListCherry>(this.resourceUrl, slotListCherry, { observe: 'response' });\n  }\n\n  update(slotListCherry: ISlotListCherry): Observable<EntityResponseType> {\n    return this.http.put<ISlotListCherry>(`${this.resourceUrl}/${getSlotListCherryIdentifier(slotListCherry) as number}`, slotListCherry, {\n      observe: 'response',\n    });\n  }\n\n  partialUpdate(slotListCherry: ISlotListCherry): Observable<EntityResponseType> {\n    return this.http.patch<ISlotListCherry>(\n      `${this.resourceUrl}/${getSlotListCherryIdentifier(slotListCherry) as number}`,\n      slotListCherry,\n      { observe: 'response' }\n    );\n  }\n\n  find(id: number): Observable<EntityResponseType> {\n    return this.http.get<ISlotListCherry>(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  query(req?: any): Observable<EntityArrayResponseType> {\n    const options = createRequestOption(req);\n    return this.http.get<ISlotListCherry[]>(this.resourceUrl, { params: options, observe: 'response' });\n  }\n\n  delete(id: number): Observable<HttpResponse<{}>> {\n    return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  addSlotListCherryToCollectionIfMissing(\n    slotListCherryCollection: ISlotListCherry[],\n    ...slotListCherriesToCheck: (ISlotListCherry | null | undefined)[]\n  ): ISlotListCherry[] {\n    const slotListCherries: ISlotListCherry[] = slotListCherriesToCheck.filter(isPresent);\n    if (slotListCherries.length > 0) {\n      const slotListCherryCollectionIdentifiers = slotListCherryCollection.map(\n        slotListCherryItem => getSlotListCherryIdentifier(slotListCherryItem)!\n      );\n      const slotListCherriesToAdd = slotListCherries.filter(slotListCherryItem => {\n        const slotListCherryIdentifier = getSlotListCherryIdentifier(slotListCherryItem);\n        if (slotListCherryIdentifier == null || slotListCherryCollectionIdentifiers.includes(slotListCherryIdentifier)) {\n          return false;\n        }\n        slotListCherryCollectionIdentifiers.push(slotListCherryIdentifier);\n        return true;\n      });\n      return [...slotListCherriesToAdd, ...slotListCherryCollection];\n    }\n    return slotListCherryCollection;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}