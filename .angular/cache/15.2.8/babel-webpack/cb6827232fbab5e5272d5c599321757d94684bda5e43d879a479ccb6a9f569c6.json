{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\nimport { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getEventProductOrderIdentifier } from '../event-product-order.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport let EventProductOrderService = /*#__PURE__*/(() => {\n  class EventProductOrderService {\n    constructor(http, applicationConfigService) {\n      this.http = http;\n      this.applicationConfigService = applicationConfigService;\n      this.resourceUrl = this.applicationConfigService.getEndpointFor('api/event-product-orders');\n    }\n    create(eventProductOrder) {\n      const copy = this.convertDateFromClient(eventProductOrder);\n      return this.http.post(this.resourceUrl, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    update(eventProductOrder) {\n      const copy = this.convertDateFromClient(eventProductOrder);\n      return this.http.put(`${this.resourceUrl}/${getEventProductOrderIdentifier(eventProductOrder)}`, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    partialUpdate(eventProductOrder) {\n      const copy = this.convertDateFromClient(eventProductOrder);\n      return this.http.patch(`${this.resourceUrl}/${getEventProductOrderIdentifier(eventProductOrder)}`, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      }).pipe(map(res => this.convertDateArrayFromServer(res)));\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    addEventProductOrderToCollectionIfMissing(eventProductOrderCollection, ...eventProductOrdersToCheck) {\n      const eventProductOrders = eventProductOrdersToCheck.filter(isPresent);\n      if (eventProductOrders.length > 0) {\n        const eventProductOrderCollectionIdentifiers = eventProductOrderCollection.map(eventProductOrderItem => getEventProductOrderIdentifier(eventProductOrderItem));\n        const eventProductOrdersToAdd = eventProductOrders.filter(eventProductOrderItem => {\n          const eventProductOrderIdentifier = getEventProductOrderIdentifier(eventProductOrderItem);\n          if (eventProductOrderIdentifier == null || eventProductOrderCollectionIdentifiers.includes(eventProductOrderIdentifier)) {\n            return false;\n          }\n          eventProductOrderCollectionIdentifiers.push(eventProductOrderIdentifier);\n          return true;\n        });\n        return [...eventProductOrdersToAdd, ...eventProductOrderCollection];\n      }\n      return eventProductOrderCollection;\n    }\n    convertDateFromClient(eventProductOrder) {\n      return Object.assign({}, eventProductOrder, {\n        date: eventProductOrder.date?.isValid() ? eventProductOrder.date.toJSON() : undefined,\n        dateFrom: eventProductOrder.dateFrom?.isValid() ? eventProductOrder.dateFrom.toJSON() : undefined,\n        dateUntil: eventProductOrder.dateUntil?.isValid() ? eventProductOrder.dateUntil.toJSON() : undefined\n      });\n    }\n    convertDateFromServer(res) {\n      if (res.body) {\n        res.body.date = res.body.date ? dayjs(res.body.date) : undefined;\n        res.body.dateFrom = res.body.dateFrom ? dayjs(res.body.dateFrom) : undefined;\n        res.body.dateUntil = res.body.dateUntil ? dayjs(res.body.dateUntil) : undefined;\n      }\n      return res;\n    }\n    convertDateArrayFromServer(res) {\n      if (res.body) {\n        res.body.forEach(eventProductOrder => {\n          eventProductOrder.date = eventProductOrder.date ? dayjs(eventProductOrder.date) : undefined;\n          eventProductOrder.dateFrom = eventProductOrder.dateFrom ? dayjs(eventProductOrder.dateFrom) : undefined;\n          eventProductOrder.dateUntil = eventProductOrder.dateUntil ? dayjs(eventProductOrder.dateUntil) : undefined;\n        });\n      }\n      return res;\n    }\n  }\n  EventProductOrderService.ɵfac = function EventProductOrderService_Factory(t) {\n    return new (t || EventProductOrderService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n  };\n  EventProductOrderService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EventProductOrderService,\n    factory: EventProductOrderService.ɵfac,\n    providedIn: 'root'\n  });\n  return EventProductOrderService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}