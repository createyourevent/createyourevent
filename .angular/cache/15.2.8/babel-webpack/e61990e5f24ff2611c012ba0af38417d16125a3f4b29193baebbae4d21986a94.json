{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"app/core/auth/account.service\";\n/**\n * @whatItDoes Conditionally includes an HTML element if current user has any\n * of the authorities passed as the `expression`.\n *\n * @howToUse\n * ```\n *     <some-element *jhiHasAnyAuthority=\"'ROLE_ADMIN'\">...</some-element>\n *\n *     <some-element *jhiHasAnyAuthority=\"['ROLE_ADMIN', 'ROLE_USER']\">...</some-element>\n * ```\n */\nexport let HasAnyAuthorityDirective = /*#__PURE__*/(() => {\n  class HasAnyAuthorityDirective {\n    constructor(accountService, templateRef, viewContainerRef) {\n      this.accountService = accountService;\n      this.templateRef = templateRef;\n      this.viewContainerRef = viewContainerRef;\n      this.destroy$ = new Subject();\n    }\n    set jhiHasAnyAuthority(value) {\n      this.authorities = value;\n      this.updateView();\n      // Get notified each time authentication state changes.\n      this.accountService.getAuthenticationState().pipe(takeUntil(this.destroy$)).subscribe(() => {\n        this.updateView();\n      });\n    }\n    ngOnDestroy() {\n      this.destroy$.next();\n      this.destroy$.complete();\n    }\n    updateView() {\n      const hasAnyAuthority = this.accountService.hasAnyAuthority(this.authorities);\n      this.viewContainerRef.clear();\n      if (hasAnyAuthority) {\n        this.viewContainerRef.createEmbeddedView(this.templateRef);\n      }\n    }\n  }\n  HasAnyAuthorityDirective.ɵfac = function HasAnyAuthorityDirective_Factory(t) {\n    return new (t || HasAnyAuthorityDirective)(i0.ɵɵdirectiveInject(i1.AccountService), i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.ViewContainerRef));\n  };\n  HasAnyAuthorityDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: HasAnyAuthorityDirective,\n    selectors: [[\"\", \"jhiHasAnyAuthority\", \"\"]],\n    inputs: {\n      jhiHasAnyAuthority: \"jhiHasAnyAuthority\"\n    }\n  });\n  return HasAnyAuthorityDirective;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}