{"ast":null,"code":"import { Observable } from 'rxjs';\nimport { filter, share } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport class EventWithContent {\n  constructor(name, content) {\n    this.name = name;\n    this.content = content;\n  }\n}\n/**\n * An utility class to manage RX events\n */\nexport let EventManager = /*#__PURE__*/(() => {\n  class EventManager {\n    constructor() {\n      this.observable = new Observable(observer => {\n        this.observer = observer;\n      }).pipe(share());\n    }\n    /**\n     * Method to broadcast the event to observer\n     */\n    broadcast(event) {\n      if (this.observer) {\n        this.observer.next(event);\n      }\n    }\n    /**\n     * Method to subscribe to an event with callback\n     * @param eventNames  Single event name or array of event names to what subscribe\n     * @param callback    Callback to run when the event occurs\n     */\n    subscribe(eventNames, callback) {\n      if (typeof eventNames === 'string') {\n        eventNames = [eventNames];\n      }\n      return this.observable.pipe(filter(event => {\n        for (const eventName of eventNames) {\n          if (typeof event === 'string' && event === eventName || typeof event !== 'string' && event.name === eventName) {\n            return true;\n          }\n        }\n        return false;\n      })).subscribe(callback);\n    }\n    /**\n     * Method to unsubscribe the subscription\n     */\n    destroy(subscriber) {\n      subscriber.unsubscribe();\n    }\n  }\n  EventManager.ɵfac = function EventManager_Factory(t) {\n    return new (t || EventManager)();\n  };\n  EventManager.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EventManager,\n    factory: EventManager.ɵfac,\n    providedIn: 'root'\n  });\n  return EventManager;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}