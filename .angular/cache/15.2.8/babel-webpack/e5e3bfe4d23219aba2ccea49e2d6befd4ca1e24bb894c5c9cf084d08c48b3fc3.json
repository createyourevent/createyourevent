{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\nimport { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getTicketIdentifier } from '../ticket.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport class TicketService {\n  constructor(http, applicationConfigService) {\n    this.http = http;\n    this.applicationConfigService = applicationConfigService;\n    this.resourceUrl = this.applicationConfigService.getEndpointFor('api/tickets');\n  }\n  create(ticket) {\n    const copy = this.convertDateFromClient(ticket);\n    return this.http.post(this.resourceUrl, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  update(ticket) {\n    const copy = this.convertDateFromClient(ticket);\n    return this.http.put(`${this.resourceUrl}/${getTicketIdentifier(ticket)}`, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  partialUpdate(ticket) {\n    const copy = this.convertDateFromClient(ticket);\n    return this.http.patch(`${this.resourceUrl}/${getTicketIdentifier(ticket)}`, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  find(id) {\n    return this.http.get(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  query(req) {\n    const options = createRequestOption(req);\n    return this.http.get(this.resourceUrl, {\n      params: options,\n      observe: 'response'\n    }).pipe(map(res => this.convertDateArrayFromServer(res)));\n  }\n  delete(id) {\n    return this.http.delete(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  addTicketToCollectionIfMissing(ticketCollection, ...ticketsToCheck) {\n    const tickets = ticketsToCheck.filter(isPresent);\n    if (tickets.length > 0) {\n      const ticketCollectionIdentifiers = ticketCollection.map(ticketItem => getTicketIdentifier(ticketItem));\n      const ticketsToAdd = tickets.filter(ticketItem => {\n        const ticketIdentifier = getTicketIdentifier(ticketItem);\n        if (ticketIdentifier == null || ticketCollectionIdentifiers.includes(ticketIdentifier)) {\n          return false;\n        }\n        ticketCollectionIdentifiers.push(ticketIdentifier);\n        return true;\n      });\n      return [...ticketsToAdd, ...ticketCollection];\n    }\n    return ticketCollection;\n  }\n  convertDateFromClient(ticket) {\n    return Object.assign({}, ticket, {\n      date: ticket.date?.isValid() ? ticket.date.toJSON() : undefined,\n      accessDate: ticket.accessDate?.isValid() ? ticket.accessDate.toJSON() : undefined\n    });\n  }\n  convertDateFromServer(res) {\n    if (res.body) {\n      res.body.date = res.body.date ? dayjs(res.body.date) : undefined;\n      res.body.accessDate = res.body.accessDate ? dayjs(res.body.accessDate) : undefined;\n    }\n    return res;\n  }\n  convertDateArrayFromServer(res) {\n    if (res.body) {\n      res.body.forEach(ticket => {\n        ticket.date = ticket.date ? dayjs(ticket.date) : undefined;\n        ticket.accessDate = ticket.accessDate ? dayjs(ticket.accessDate) : undefined;\n      });\n    }\n    return res;\n  }\n}\nTicketService.ɵfac = function TicketService_Factory(t) {\n  return new (t || TicketService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n};\nTicketService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TicketService,\n  factory: TicketService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["map","dayjs","isPresent","createRequestOption","getTicketIdentifier","TicketService","constructor","http","applicationConfigService","getEndpointFor","create","ticket","copy","convertDateFromClient","post","resourceUrl","observe","pipe","res","convertDateFromServer","update","put","partialUpdate","patch","find","id","get","query","req","options","params","convertDateArrayFromServer","delete","addTicketToCollectionIfMissing","ticketCollection","ticketsToCheck","tickets","filter","length","ticketCollectionIdentifiers","ticketItem","ticketsToAdd","ticketIdentifier","includes","push","Object","assign","date","isValid","toJSON","undefined","accessDate","body","forEach","factory","providedIn"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/entities/ticket/service/ticket.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\n\nimport { isPresent } from 'app/core/util/operators';\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { ITicket, getTicketIdentifier } from '../ticket.model';\n\nexport type EntityResponseType = HttpResponse<ITicket>;\nexport type EntityArrayResponseType = HttpResponse<ITicket[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class TicketService {\n  protected resourceUrl = this.applicationConfigService.getEndpointFor('api/tickets');\n\n  constructor(protected http: HttpClient, protected applicationConfigService: ApplicationConfigService) {}\n\n  create(ticket: ITicket): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(ticket);\n    return this.http\n      .post<ITicket>(this.resourceUrl, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  update(ticket: ITicket): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(ticket);\n    return this.http\n      .put<ITicket>(`${this.resourceUrl}/${getTicketIdentifier(ticket) as number}`, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  partialUpdate(ticket: ITicket): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(ticket);\n    return this.http\n      .patch<ITicket>(`${this.resourceUrl}/${getTicketIdentifier(ticket) as number}`, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  find(id: number): Observable<EntityResponseType> {\n    return this.http\n      .get<ITicket>(`${this.resourceUrl}/${id}`, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  query(req?: any): Observable<EntityArrayResponseType> {\n    const options = createRequestOption(req);\n    return this.http\n      .get<ITicket[]>(this.resourceUrl, { params: options, observe: 'response' })\n      .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n  }\n\n  delete(id: number): Observable<HttpResponse<{}>> {\n    return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  addTicketToCollectionIfMissing(ticketCollection: ITicket[], ...ticketsToCheck: (ITicket | null | undefined)[]): ITicket[] {\n    const tickets: ITicket[] = ticketsToCheck.filter(isPresent);\n    if (tickets.length > 0) {\n      const ticketCollectionIdentifiers = ticketCollection.map(ticketItem => getTicketIdentifier(ticketItem)!);\n      const ticketsToAdd = tickets.filter(ticketItem => {\n        const ticketIdentifier = getTicketIdentifier(ticketItem);\n        if (ticketIdentifier == null || ticketCollectionIdentifiers.includes(ticketIdentifier)) {\n          return false;\n        }\n        ticketCollectionIdentifiers.push(ticketIdentifier);\n        return true;\n      });\n      return [...ticketsToAdd, ...ticketCollection];\n    }\n    return ticketCollection;\n  }\n\n  protected convertDateFromClient(ticket: ITicket): ITicket {\n    return Object.assign({}, ticket, {\n      date: ticket.date?.isValid() ? ticket.date.toJSON() : undefined,\n      accessDate: ticket.accessDate?.isValid() ? ticket.accessDate.toJSON() : undefined,\n    });\n  }\n\n  protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\n    if (res.body) {\n      res.body.date = res.body.date ? dayjs(res.body.date) : undefined;\n      res.body.accessDate = res.body.accessDate ? dayjs(res.body.accessDate) : undefined;\n    }\n    return res;\n  }\n\n  protected convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\n    if (res.body) {\n      res.body.forEach((ticket: ITicket) => {\n        ticket.date = ticket.date ? dayjs(ticket.date) : undefined;\n        ticket.accessDate = ticket.accessDate ? dayjs(ticket.accessDate) : undefined;\n      });\n    }\n    return res;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}