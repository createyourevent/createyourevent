{"ast":null,"code":"import _defineProperty from \"/home/ceo/mmmm/createyourevent/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\nimport { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getProductStarRatingIdentifier } from '../product-star-rating.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport class ProductStarRatingService {\n  constructor(http, applicationConfigService) {\n    _defineProperty(this, \"http\", void 0);\n    _defineProperty(this, \"applicationConfigService\", void 0);\n    _defineProperty(this, \"resourceUrl\", this.applicationConfigService.getEndpointFor('api/product-star-ratings'));\n    this.http = http;\n    this.applicationConfigService = applicationConfigService;\n  }\n  create(productStarRating) {\n    const copy = this.convertDateFromClient(productStarRating);\n    return this.http.post(this.resourceUrl, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  update(productStarRating) {\n    const copy = this.convertDateFromClient(productStarRating);\n    return this.http.put(`${this.resourceUrl}/${getProductStarRatingIdentifier(productStarRating)}`, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  partialUpdate(productStarRating) {\n    const copy = this.convertDateFromClient(productStarRating);\n    return this.http.patch(`${this.resourceUrl}/${getProductStarRatingIdentifier(productStarRating)}`, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  find(id) {\n    return this.http.get(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  query(req) {\n    const options = createRequestOption(req);\n    return this.http.get(this.resourceUrl, {\n      params: options,\n      observe: 'response'\n    }).pipe(map(res => this.convertDateArrayFromServer(res)));\n  }\n  delete(id) {\n    return this.http.delete(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  addProductStarRatingToCollectionIfMissing(productStarRatingCollection, ...productStarRatingsToCheck) {\n    const productStarRatings = productStarRatingsToCheck.filter(isPresent);\n    if (productStarRatings.length > 0) {\n      const productStarRatingCollectionIdentifiers = productStarRatingCollection.map(productStarRatingItem => getProductStarRatingIdentifier(productStarRatingItem));\n      const productStarRatingsToAdd = productStarRatings.filter(productStarRatingItem => {\n        const productStarRatingIdentifier = getProductStarRatingIdentifier(productStarRatingItem);\n        if (productStarRatingIdentifier == null || productStarRatingCollectionIdentifiers.includes(productStarRatingIdentifier)) {\n          return false;\n        }\n        productStarRatingCollectionIdentifiers.push(productStarRatingIdentifier);\n        return true;\n      });\n      return [...productStarRatingsToAdd, ...productStarRatingCollection];\n    }\n    return productStarRatingCollection;\n  }\n  convertDateFromClient(productStarRating) {\n    return Object.assign({}, productStarRating, {\n      date: productStarRating.date?.isValid() ? productStarRating.date.toJSON() : undefined\n    });\n  }\n  convertDateFromServer(res) {\n    if (res.body) {\n      res.body.date = res.body.date ? dayjs(res.body.date) : undefined;\n    }\n    return res;\n  }\n  convertDateArrayFromServer(res) {\n    if (res.body) {\n      res.body.forEach(productStarRating => {\n        productStarRating.date = productStarRating.date ? dayjs(productStarRating.date) : undefined;\n      });\n    }\n    return res;\n  }\n}\n_defineProperty(ProductStarRatingService, \"\\u0275fac\", function ProductStarRatingService_Factory(t) {\n  return new (t || ProductStarRatingService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n});\n_defineProperty(ProductStarRatingService, \"\\u0275prov\", /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductStarRatingService,\n  factory: ProductStarRatingService.ɵfac,\n  providedIn: 'root'\n}));","map":{"version":3,"mappings":"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","names":["map","dayjs","isPresent","createRequestOption","getProductStarRatingIdentifier","ProductStarRatingService","constructor","http","applicationConfigService","getEndpointFor","create","productStarRating","copy","convertDateFromClient","post","resourceUrl","observe","pipe","res","convertDateFromServer","update","put","partialUpdate","patch","find","id","get","query","req","options","params","convertDateArrayFromServer","delete","addProductStarRatingToCollectionIfMissing","productStarRatingCollection","productStarRatingsToCheck","productStarRatings","filter","length","productStarRatingCollectionIdentifiers","productStarRatingItem","productStarRatingsToAdd","productStarRatingIdentifier","includes","push","Object","assign","date","isValid","toJSON","undefined","body","forEach","factory","providedIn"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/entities/product-star-rating/service/product-star-rating.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\n\nimport { isPresent } from 'app/core/util/operators';\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { IProductStarRating, getProductStarRatingIdentifier } from '../product-star-rating.model';\n\nexport type EntityResponseType = HttpResponse<IProductStarRating>;\nexport type EntityArrayResponseType = HttpResponse<IProductStarRating[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class ProductStarRatingService {\n  protected resourceUrl = this.applicationConfigService.getEndpointFor('api/product-star-ratings');\n\n  constructor(protected http: HttpClient, protected applicationConfigService: ApplicationConfigService) {}\n\n  create(productStarRating: IProductStarRating): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(productStarRating);\n    return this.http\n      .post<IProductStarRating>(this.resourceUrl, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  update(productStarRating: IProductStarRating): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(productStarRating);\n    return this.http\n      .put<IProductStarRating>(`${this.resourceUrl}/${getProductStarRatingIdentifier(productStarRating) as number}`, copy, {\n        observe: 'response',\n      })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  partialUpdate(productStarRating: IProductStarRating): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(productStarRating);\n    return this.http\n      .patch<IProductStarRating>(`${this.resourceUrl}/${getProductStarRatingIdentifier(productStarRating) as number}`, copy, {\n        observe: 'response',\n      })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  find(id: number): Observable<EntityResponseType> {\n    return this.http\n      .get<IProductStarRating>(`${this.resourceUrl}/${id}`, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  query(req?: any): Observable<EntityArrayResponseType> {\n    const options = createRequestOption(req);\n    return this.http\n      .get<IProductStarRating[]>(this.resourceUrl, { params: options, observe: 'response' })\n      .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n  }\n\n  delete(id: number): Observable<HttpResponse<{}>> {\n    return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  addProductStarRatingToCollectionIfMissing(\n    productStarRatingCollection: IProductStarRating[],\n    ...productStarRatingsToCheck: (IProductStarRating | null | undefined)[]\n  ): IProductStarRating[] {\n    const productStarRatings: IProductStarRating[] = productStarRatingsToCheck.filter(isPresent);\n    if (productStarRatings.length > 0) {\n      const productStarRatingCollectionIdentifiers = productStarRatingCollection.map(\n        productStarRatingItem => getProductStarRatingIdentifier(productStarRatingItem)!\n      );\n      const productStarRatingsToAdd = productStarRatings.filter(productStarRatingItem => {\n        const productStarRatingIdentifier = getProductStarRatingIdentifier(productStarRatingItem);\n        if (productStarRatingIdentifier == null || productStarRatingCollectionIdentifiers.includes(productStarRatingIdentifier)) {\n          return false;\n        }\n        productStarRatingCollectionIdentifiers.push(productStarRatingIdentifier);\n        return true;\n      });\n      return [...productStarRatingsToAdd, ...productStarRatingCollection];\n    }\n    return productStarRatingCollection;\n  }\n\n  protected convertDateFromClient(productStarRating: IProductStarRating): IProductStarRating {\n    return Object.assign({}, productStarRating, {\n      date: productStarRating.date?.isValid() ? productStarRating.date.toJSON() : undefined,\n    });\n  }\n\n  protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\n    if (res.body) {\n      res.body.date = res.body.date ? dayjs(res.body.date) : undefined;\n    }\n    return res;\n  }\n\n  protected convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\n    if (res.body) {\n      res.body.forEach((productStarRating: IProductStarRating) => {\n        productStarRating.date = productStarRating.date ? dayjs(productStarRating.date) : undefined;\n      });\n    }\n    return res;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}