{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\nimport { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getEventProductRatingIdentifier } from '../event-product-rating.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport let EventProductRatingService = /*#__PURE__*/(() => {\n  class EventProductRatingService {\n    constructor(http, applicationConfigService) {\n      this.http = http;\n      this.applicationConfigService = applicationConfigService;\n      this.resourceUrl = this.applicationConfigService.getEndpointFor('api/event-product-ratings');\n    }\n    create(eventProductRating) {\n      const copy = this.convertDateFromClient(eventProductRating);\n      return this.http.post(this.resourceUrl, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    update(eventProductRating) {\n      const copy = this.convertDateFromClient(eventProductRating);\n      return this.http.put(`${this.resourceUrl}/${getEventProductRatingIdentifier(eventProductRating)}`, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    partialUpdate(eventProductRating) {\n      const copy = this.convertDateFromClient(eventProductRating);\n      return this.http.patch(`${this.resourceUrl}/${getEventProductRatingIdentifier(eventProductRating)}`, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      }).pipe(map(res => this.convertDateArrayFromServer(res)));\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    addEventProductRatingToCollectionIfMissing(eventProductRatingCollection, ...eventProductRatingsToCheck) {\n      const eventProductRatings = eventProductRatingsToCheck.filter(isPresent);\n      if (eventProductRatings.length > 0) {\n        const eventProductRatingCollectionIdentifiers = eventProductRatingCollection.map(eventProductRatingItem => getEventProductRatingIdentifier(eventProductRatingItem));\n        const eventProductRatingsToAdd = eventProductRatings.filter(eventProductRatingItem => {\n          const eventProductRatingIdentifier = getEventProductRatingIdentifier(eventProductRatingItem);\n          if (eventProductRatingIdentifier == null || eventProductRatingCollectionIdentifiers.includes(eventProductRatingIdentifier)) {\n            return false;\n          }\n          eventProductRatingCollectionIdentifiers.push(eventProductRatingIdentifier);\n          return true;\n        });\n        return [...eventProductRatingsToAdd, ...eventProductRatingCollection];\n      }\n      return eventProductRatingCollection;\n    }\n    convertDateFromClient(eventProductRating) {\n      return Object.assign({}, eventProductRating, {\n        date: eventProductRating.date?.isValid() ? eventProductRating.date.toJSON() : undefined\n      });\n    }\n    convertDateFromServer(res) {\n      if (res.body) {\n        res.body.date = res.body.date ? dayjs(res.body.date) : undefined;\n      }\n      return res;\n    }\n    convertDateArrayFromServer(res) {\n      if (res.body) {\n        res.body.forEach(eventProductRating => {\n          eventProductRating.date = eventProductRating.date ? dayjs(eventProductRating.date) : undefined;\n        });\n      }\n      return res;\n    }\n  }\n  EventProductRatingService.ɵfac = function EventProductRatingService_Factory(t) {\n    return new (t || EventProductRatingService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n  };\n  EventProductRatingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EventProductRatingService,\n    factory: EventProductRatingService.ɵfac,\n    providedIn: 'root'\n  });\n  return EventProductRatingService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}