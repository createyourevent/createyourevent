{"ast":null,"code":"import _defineProperty from \"/home/ceo/mmmm/createyourevent/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\nimport { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getCartIdentifier } from '../cart.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport class CartService {\n  constructor(http, applicationConfigService) {\n    _defineProperty(this, \"http\", void 0);\n    _defineProperty(this, \"applicationConfigService\", void 0);\n    _defineProperty(this, \"resourceUrl\", this.applicationConfigService.getEndpointFor('api/carts'));\n    this.http = http;\n    this.applicationConfigService = applicationConfigService;\n  }\n  create(cart) {\n    const copy = this.convertDateFromClient(cart);\n    return this.http.post(this.resourceUrl, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  update(cart) {\n    const copy = this.convertDateFromClient(cart);\n    return this.http.put(`${this.resourceUrl}/${getCartIdentifier(cart)}`, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  partialUpdate(cart) {\n    const copy = this.convertDateFromClient(cart);\n    return this.http.patch(`${this.resourceUrl}/${getCartIdentifier(cart)}`, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  find(id) {\n    return this.http.get(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  query(req) {\n    const options = createRequestOption(req);\n    return this.http.get(this.resourceUrl, {\n      params: options,\n      observe: 'response'\n    }).pipe(map(res => this.convertDateArrayFromServer(res)));\n  }\n  delete(id) {\n    return this.http.delete(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  addCartToCollectionIfMissing(cartCollection, ...cartsToCheck) {\n    const carts = cartsToCheck.filter(isPresent);\n    if (carts.length > 0) {\n      const cartCollectionIdentifiers = cartCollection.map(cartItem => getCartIdentifier(cartItem));\n      const cartsToAdd = carts.filter(cartItem => {\n        const cartIdentifier = getCartIdentifier(cartItem);\n        if (cartIdentifier == null || cartCollectionIdentifiers.includes(cartIdentifier)) {\n          return false;\n        }\n        cartCollectionIdentifiers.push(cartIdentifier);\n        return true;\n      });\n      return [...cartsToAdd, ...cartCollection];\n    }\n    return cartCollection;\n  }\n  convertDateFromClient(cart) {\n    return Object.assign({}, cart, {\n      date: cart.date?.isValid() ? cart.date.toJSON() : undefined\n    });\n  }\n  convertDateFromServer(res) {\n    if (res.body) {\n      res.body.date = res.body.date ? dayjs(res.body.date) : undefined;\n    }\n    return res;\n  }\n  convertDateArrayFromServer(res) {\n    if (res.body) {\n      res.body.forEach(cart => {\n        cart.date = cart.date ? dayjs(cart.date) : undefined;\n      });\n    }\n    return res;\n  }\n}\n_defineProperty(CartService, \"\\u0275fac\", function CartService_Factory(t) {\n  return new (t || CartService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n});\n_defineProperty(CartService, \"\\u0275prov\", /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CartService,\n  factory: CartService.ɵfac,\n  providedIn: 'root'\n}));","map":{"version":3,"mappings":"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","names":["map","dayjs","isPresent","createRequestOption","getCartIdentifier","CartService","constructor","http","applicationConfigService","getEndpointFor","create","cart","copy","convertDateFromClient","post","resourceUrl","observe","pipe","res","convertDateFromServer","update","put","partialUpdate","patch","find","id","get","query","req","options","params","convertDateArrayFromServer","delete","addCartToCollectionIfMissing","cartCollection","cartsToCheck","carts","filter","length","cartCollectionIdentifiers","cartItem","cartsToAdd","cartIdentifier","includes","push","Object","assign","date","isValid","toJSON","undefined","body","forEach","factory","providedIn"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/entities/cart/service/cart.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\n\nimport { isPresent } from 'app/core/util/operators';\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { ICart, getCartIdentifier } from '../cart.model';\n\nexport type EntityResponseType = HttpResponse<ICart>;\nexport type EntityArrayResponseType = HttpResponse<ICart[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class CartService {\n  protected resourceUrl = this.applicationConfigService.getEndpointFor('api/carts');\n\n  constructor(protected http: HttpClient, protected applicationConfigService: ApplicationConfigService) {}\n\n  create(cart: ICart): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(cart);\n    return this.http\n      .post<ICart>(this.resourceUrl, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  update(cart: ICart): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(cart);\n    return this.http\n      .put<ICart>(`${this.resourceUrl}/${getCartIdentifier(cart) as number}`, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  partialUpdate(cart: ICart): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(cart);\n    return this.http\n      .patch<ICart>(`${this.resourceUrl}/${getCartIdentifier(cart) as number}`, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  find(id: number): Observable<EntityResponseType> {\n    return this.http\n      .get<ICart>(`${this.resourceUrl}/${id}`, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  query(req?: any): Observable<EntityArrayResponseType> {\n    const options = createRequestOption(req);\n    return this.http\n      .get<ICart[]>(this.resourceUrl, { params: options, observe: 'response' })\n      .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n  }\n\n  delete(id: number): Observable<HttpResponse<{}>> {\n    return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  addCartToCollectionIfMissing(cartCollection: ICart[], ...cartsToCheck: (ICart | null | undefined)[]): ICart[] {\n    const carts: ICart[] = cartsToCheck.filter(isPresent);\n    if (carts.length > 0) {\n      const cartCollectionIdentifiers = cartCollection.map(cartItem => getCartIdentifier(cartItem)!);\n      const cartsToAdd = carts.filter(cartItem => {\n        const cartIdentifier = getCartIdentifier(cartItem);\n        if (cartIdentifier == null || cartCollectionIdentifiers.includes(cartIdentifier)) {\n          return false;\n        }\n        cartCollectionIdentifiers.push(cartIdentifier);\n        return true;\n      });\n      return [...cartsToAdd, ...cartCollection];\n    }\n    return cartCollection;\n  }\n\n  protected convertDateFromClient(cart: ICart): ICart {\n    return Object.assign({}, cart, {\n      date: cart.date?.isValid() ? cart.date.toJSON() : undefined,\n    });\n  }\n\n  protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\n    if (res.body) {\n      res.body.date = res.body.date ? dayjs(res.body.date) : undefined;\n    }\n    return res;\n  }\n\n  protected convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\n    if (res.body) {\n      res.body.forEach((cart: ICart) => {\n        cart.date = cart.date ? dayjs(cart.date) : undefined;\n      });\n    }\n    return res;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}