{"ast":null,"code":"import { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getPointsExchangeIdentifier } from '../points-exchange.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport let PointsExchangeService = /*#__PURE__*/(() => {\n  class PointsExchangeService {\n    constructor(http, applicationConfigService) {\n      this.http = http;\n      this.applicationConfigService = applicationConfigService;\n      this.resourceUrl = this.applicationConfigService.getEndpointFor('api/points-exchanges');\n    }\n    create(pointsExchange) {\n      return this.http.post(this.resourceUrl, pointsExchange, {\n        observe: 'response'\n      });\n    }\n    update(pointsExchange) {\n      return this.http.put(`${this.resourceUrl}/${getPointsExchangeIdentifier(pointsExchange)}`, pointsExchange, {\n        observe: 'response'\n      });\n    }\n    partialUpdate(pointsExchange) {\n      return this.http.patch(`${this.resourceUrl}/${getPointsExchangeIdentifier(pointsExchange)}`, pointsExchange, {\n        observe: 'response'\n      });\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    addPointsExchangeToCollectionIfMissing(pointsExchangeCollection, ...pointsExchangesToCheck) {\n      const pointsExchanges = pointsExchangesToCheck.filter(isPresent);\n      if (pointsExchanges.length > 0) {\n        const pointsExchangeCollectionIdentifiers = pointsExchangeCollection.map(pointsExchangeItem => getPointsExchangeIdentifier(pointsExchangeItem));\n        const pointsExchangesToAdd = pointsExchanges.filter(pointsExchangeItem => {\n          const pointsExchangeIdentifier = getPointsExchangeIdentifier(pointsExchangeItem);\n          if (pointsExchangeIdentifier == null || pointsExchangeCollectionIdentifiers.includes(pointsExchangeIdentifier)) {\n            return false;\n          }\n          pointsExchangeCollectionIdentifiers.push(pointsExchangeIdentifier);\n          return true;\n        });\n        return [...pointsExchangesToAdd, ...pointsExchangeCollection];\n      }\n      return pointsExchangeCollection;\n    }\n  }\n  PointsExchangeService.ɵfac = function PointsExchangeService_Factory(t) {\n    return new (t || PointsExchangeService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n  };\n  PointsExchangeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PointsExchangeService,\n    factory: PointsExchangeService.ɵfac,\n    providedIn: 'root'\n  });\n  return PointsExchangeService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}