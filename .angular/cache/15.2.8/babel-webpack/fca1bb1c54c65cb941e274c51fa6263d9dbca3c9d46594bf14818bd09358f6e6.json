{"ast":null,"code":"import { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getMp3Identifier } from '../mp-3.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport class Mp3Service {\n  constructor(http, applicationConfigService) {\n    this.http = http;\n    this.applicationConfigService = applicationConfigService;\n    this.resourceUrl = this.applicationConfigService.getEndpointFor('api/mp-3-s');\n  }\n  create(mp3) {\n    return this.http.post(this.resourceUrl, mp3, {\n      observe: 'response'\n    });\n  }\n  update(mp3) {\n    return this.http.put(`${this.resourceUrl}/${getMp3Identifier(mp3)}`, mp3, {\n      observe: 'response'\n    });\n  }\n  partialUpdate(mp3) {\n    return this.http.patch(`${this.resourceUrl}/${getMp3Identifier(mp3)}`, mp3, {\n      observe: 'response'\n    });\n  }\n  find(id) {\n    return this.http.get(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  query(req) {\n    const options = createRequestOption(req);\n    return this.http.get(this.resourceUrl, {\n      params: options,\n      observe: 'response'\n    });\n  }\n  delete(id) {\n    return this.http.delete(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  addMp3ToCollectionIfMissing(mp3Collection, ...mp3sToCheck) {\n    const mp3s = mp3sToCheck.filter(isPresent);\n    if (mp3s.length > 0) {\n      const mp3CollectionIdentifiers = mp3Collection.map(mp3Item => getMp3Identifier(mp3Item));\n      const mp3sToAdd = mp3s.filter(mp3Item => {\n        const mp3Identifier = getMp3Identifier(mp3Item);\n        if (mp3Identifier == null || mp3CollectionIdentifiers.includes(mp3Identifier)) {\n          return false;\n        }\n        mp3CollectionIdentifiers.push(mp3Identifier);\n        return true;\n      });\n      return [...mp3sToAdd, ...mp3Collection];\n    }\n    return mp3Collection;\n  }\n}\nMp3Service.ɵfac = function Mp3Service_Factory(t) {\n  return new (t || Mp3Service)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n};\nMp3Service.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: Mp3Service,\n  factory: Mp3Service.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAIA,SAASA,SAAS,QAAQ,yBAAyB;AAEnD,SAASC,mBAAmB,QAAQ,+BAA+B;AACnE,SAAeC,gBAAgB,QAAQ,eAAe;;;;AAMtD,OAAM,MAAOC,UAAU;EAGrBC,YAAsBC,IAAgB,EAAYC,wBAAkD;IAA9E,SAAI,GAAJD,IAAI;IAAwB,6BAAwB,GAAxBC,wBAAwB;IAFhE,gBAAW,GAAG,IAAI,CAACA,wBAAwB,CAACC,cAAc,CAAC,YAAY,CAAC;EAEqB;EAEvGC,MAAM,CAACC,GAAS;IACd,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAO,IAAI,CAACC,WAAW,EAAEF,GAAG,EAAE;MAAEG,OAAO,EAAE;IAAU,CAAE,CAAC;EAC7E;EAEAC,MAAM,CAACJ,GAAS;IACd,OAAO,IAAI,CAACJ,IAAI,CAACS,GAAG,CAAO,GAAG,IAAI,CAACH,WAAW,IAAIT,gBAAgB,CAACO,GAAG,CAAW,EAAE,EAAEA,GAAG,EAAE;MAAEG,OAAO,EAAE;IAAU,CAAE,CAAC;EACpH;EAEAG,aAAa,CAACN,GAAS;IACrB,OAAO,IAAI,CAACJ,IAAI,CAACW,KAAK,CAAO,GAAG,IAAI,CAACL,WAAW,IAAIT,gBAAgB,CAACO,GAAG,CAAW,EAAE,EAAEA,GAAG,EAAE;MAAEG,OAAO,EAAE;IAAU,CAAE,CAAC;EACtH;EAEAK,IAAI,CAACC,EAAU;IACb,OAAO,IAAI,CAACb,IAAI,CAACc,GAAG,CAAO,GAAG,IAAI,CAACR,WAAW,IAAIO,EAAE,EAAE,EAAE;MAAEN,OAAO,EAAE;IAAU,CAAE,CAAC;EAClF;EAEAQ,KAAK,CAACC,GAAS;IACb,MAAMC,OAAO,GAAGrB,mBAAmB,CAACoB,GAAG,CAAC;IACxC,OAAO,IAAI,CAAChB,IAAI,CAACc,GAAG,CAAS,IAAI,CAACR,WAAW,EAAE;MAAEY,MAAM,EAAED,OAAO;MAAEV,OAAO,EAAE;IAAU,CAAE,CAAC;EAC1F;EAEAY,MAAM,CAACN,EAAU;IACf,OAAO,IAAI,CAACb,IAAI,CAACmB,MAAM,CAAC,GAAG,IAAI,CAACb,WAAW,IAAIO,EAAE,EAAE,EAAE;MAAEN,OAAO,EAAE;IAAU,CAAE,CAAC;EAC/E;EAEAa,2BAA2B,CAACC,aAAqB,EAAE,GAAGC,WAAwC;IAC5F,MAAMC,IAAI,GAAWD,WAAW,CAACE,MAAM,CAAC7B,SAAS,CAAC;IAClD,IAAI4B,IAAI,CAACE,MAAM,GAAG,CAAC,EAAE;MACnB,MAAMC,wBAAwB,GAAGL,aAAa,CAACM,GAAG,CAACC,OAAO,IAAI/B,gBAAgB,CAAC+B,OAAO,CAAE,CAAC;MACzF,MAAMC,SAAS,GAAGN,IAAI,CAACC,MAAM,CAACI,OAAO,IAAG;QACtC,MAAME,aAAa,GAAGjC,gBAAgB,CAAC+B,OAAO,CAAC;QAC/C,IAAIE,aAAa,IAAI,IAAI,IAAIJ,wBAAwB,CAACK,QAAQ,CAACD,aAAa,CAAC,EAAE;UAC7E,OAAO,KAAK;;QAEdJ,wBAAwB,CAACM,IAAI,CAACF,aAAa,CAAC;QAC5C,OAAO,IAAI;MACb,CAAC,CAAC;MACF,OAAO,CAAC,GAAGD,SAAS,EAAE,GAAGR,aAAa,CAAC;;IAEzC,OAAOA,aAAa;EACtB;;;mBA7CWvB,UAAU;AAAA;;SAAVA,UAAU;EAAAmC,SAAVnC,UAAU;EAAAoC,YADG;AAAM","names":["isPresent","createRequestOption","getMp3Identifier","Mp3Service","constructor","http","applicationConfigService","getEndpointFor","create","mp3","post","resourceUrl","observe","update","put","partialUpdate","patch","find","id","get","query","req","options","params","delete","addMp3ToCollectionIfMissing","mp3Collection","mp3sToCheck","mp3s","filter","length","mp3CollectionIdentifiers","map","mp3Item","mp3sToAdd","mp3Identifier","includes","push","factory","providedIn"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/entities/mp-3/service/mp-3.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { isPresent } from 'app/core/util/operators';\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { IMp3, getMp3Identifier } from '../mp-3.model';\n\nexport type EntityResponseType = HttpResponse<IMp3>;\nexport type EntityArrayResponseType = HttpResponse<IMp3[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class Mp3Service {\n  protected resourceUrl = this.applicationConfigService.getEndpointFor('api/mp-3-s');\n\n  constructor(protected http: HttpClient, protected applicationConfigService: ApplicationConfigService) {}\n\n  create(mp3: IMp3): Observable<EntityResponseType> {\n    return this.http.post<IMp3>(this.resourceUrl, mp3, { observe: 'response' });\n  }\n\n  update(mp3: IMp3): Observable<EntityResponseType> {\n    return this.http.put<IMp3>(`${this.resourceUrl}/${getMp3Identifier(mp3) as number}`, mp3, { observe: 'response' });\n  }\n\n  partialUpdate(mp3: IMp3): Observable<EntityResponseType> {\n    return this.http.patch<IMp3>(`${this.resourceUrl}/${getMp3Identifier(mp3) as number}`, mp3, { observe: 'response' });\n  }\n\n  find(id: number): Observable<EntityResponseType> {\n    return this.http.get<IMp3>(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  query(req?: any): Observable<EntityArrayResponseType> {\n    const options = createRequestOption(req);\n    return this.http.get<IMp3[]>(this.resourceUrl, { params: options, observe: 'response' });\n  }\n\n  delete(id: number): Observable<HttpResponse<{}>> {\n    return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  addMp3ToCollectionIfMissing(mp3Collection: IMp3[], ...mp3sToCheck: (IMp3 | null | undefined)[]): IMp3[] {\n    const mp3s: IMp3[] = mp3sToCheck.filter(isPresent);\n    if (mp3s.length > 0) {\n      const mp3CollectionIdentifiers = mp3Collection.map(mp3Item => getMp3Identifier(mp3Item)!);\n      const mp3sToAdd = mp3s.filter(mp3Item => {\n        const mp3Identifier = getMp3Identifier(mp3Item);\n        if (mp3Identifier == null || mp3CollectionIdentifiers.includes(mp3Identifier)) {\n          return false;\n        }\n        mp3CollectionIdentifiers.push(mp3Identifier);\n        return true;\n      });\n      return [...mp3sToAdd, ...mp3Collection];\n    }\n    return mp3Collection;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}