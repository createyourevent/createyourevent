{"ast":null,"code":"import { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getChipsCollectionIdentifier } from '../chips-collection.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport class ChipsCollectionService {\n  constructor(http, applicationConfigService) {\n    this.http = http;\n    this.applicationConfigService = applicationConfigService;\n    this.resourceUrl = this.applicationConfigService.getEndpointFor('api/chips-collections');\n  }\n  create(chipsCollection) {\n    return this.http.post(this.resourceUrl, chipsCollection, {\n      observe: 'response'\n    });\n  }\n  update(chipsCollection) {\n    return this.http.put(`${this.resourceUrl}/${getChipsCollectionIdentifier(chipsCollection)}`, chipsCollection, {\n      observe: 'response'\n    });\n  }\n  partialUpdate(chipsCollection) {\n    return this.http.patch(`${this.resourceUrl}/${getChipsCollectionIdentifier(chipsCollection)}`, chipsCollection, {\n      observe: 'response'\n    });\n  }\n  find(id) {\n    return this.http.get(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  query(req) {\n    const options = createRequestOption(req);\n    return this.http.get(this.resourceUrl, {\n      params: options,\n      observe: 'response'\n    });\n  }\n  delete(id) {\n    return this.http.delete(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  addChipsCollectionToCollectionIfMissing(chipsCollectionCollection, ...chipsCollectionsToCheck) {\n    const chipsCollections = chipsCollectionsToCheck.filter(isPresent);\n    if (chipsCollections.length > 0) {\n      const chipsCollectionCollectionIdentifiers = chipsCollectionCollection.map(chipsCollectionItem => getChipsCollectionIdentifier(chipsCollectionItem));\n      const chipsCollectionsToAdd = chipsCollections.filter(chipsCollectionItem => {\n        const chipsCollectionIdentifier = getChipsCollectionIdentifier(chipsCollectionItem);\n        if (chipsCollectionIdentifier == null || chipsCollectionCollectionIdentifiers.includes(chipsCollectionIdentifier)) {\n          return false;\n        }\n        chipsCollectionCollectionIdentifiers.push(chipsCollectionIdentifier);\n        return true;\n      });\n      return [...chipsCollectionsToAdd, ...chipsCollectionCollection];\n    }\n    return chipsCollectionCollection;\n  }\n}\nChipsCollectionService.ɵfac = function ChipsCollectionService_Factory(t) {\n  return new (t || ChipsCollectionService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n};\nChipsCollectionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ChipsCollectionService,\n  factory: ChipsCollectionService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAIA,SAASA,SAAS,QAAQ,yBAAyB;AAEnD,SAASC,mBAAmB,QAAQ,+BAA+B;AACnE,SAA2BC,4BAA4B,QAAQ,2BAA2B;;;;AAM1F,OAAM,MAAOC,sBAAsB;EAGjCC,YAAsBC,IAAgB,EAAYC,wBAAkD;IAA9E,SAAI,GAAJD,IAAI;IAAwB,6BAAwB,GAAxBC,wBAAwB;IAFhE,gBAAW,GAAG,IAAI,CAACA,wBAAwB,CAACC,cAAc,CAAC,uBAAuB,CAAC;EAEU;EAEvGC,MAAM,CAACC,eAAiC;IACtC,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAmB,IAAI,CAACC,WAAW,EAAEF,eAAe,EAAE;MAAEG,OAAO,EAAE;IAAU,CAAE,CAAC;EACrG;EAEAC,MAAM,CAACJ,eAAiC;IACtC,OAAO,IAAI,CAACJ,IAAI,CAACS,GAAG,CAClB,GAAG,IAAI,CAACH,WAAW,IAAIT,4BAA4B,CAACO,eAAe,CAAW,EAAE,EAChFA,eAAe,EACf;MAAEG,OAAO,EAAE;IAAU,CAAE,CACxB;EACH;EAEAG,aAAa,CAACN,eAAiC;IAC7C,OAAO,IAAI,CAACJ,IAAI,CAACW,KAAK,CACpB,GAAG,IAAI,CAACL,WAAW,IAAIT,4BAA4B,CAACO,eAAe,CAAW,EAAE,EAChFA,eAAe,EACf;MAAEG,OAAO,EAAE;IAAU,CAAE,CACxB;EACH;EAEAK,IAAI,CAACC,EAAU;IACb,OAAO,IAAI,CAACb,IAAI,CAACc,GAAG,CAAmB,GAAG,IAAI,CAACR,WAAW,IAAIO,EAAE,EAAE,EAAE;MAAEN,OAAO,EAAE;IAAU,CAAE,CAAC;EAC9F;EAEAQ,KAAK,CAACC,GAAS;IACb,MAAMC,OAAO,GAAGrB,mBAAmB,CAACoB,GAAG,CAAC;IACxC,OAAO,IAAI,CAAChB,IAAI,CAACc,GAAG,CAAqB,IAAI,CAACR,WAAW,EAAE;MAAEY,MAAM,EAAED,OAAO;MAAEV,OAAO,EAAE;IAAU,CAAE,CAAC;EACtG;EAEAY,MAAM,CAACN,EAAU;IACf,OAAO,IAAI,CAACb,IAAI,CAACmB,MAAM,CAAC,GAAG,IAAI,CAACb,WAAW,IAAIO,EAAE,EAAE,EAAE;MAAEN,OAAO,EAAE;IAAU,CAAE,CAAC;EAC/E;EAEAa,uCAAuC,CACrCC,yBAA6C,EAC7C,GAAGC,uBAAgE;IAEnE,MAAMC,gBAAgB,GAAuBD,uBAAuB,CAACE,MAAM,CAAC7B,SAAS,CAAC;IACtF,IAAI4B,gBAAgB,CAACE,MAAM,GAAG,CAAC,EAAE;MAC/B,MAAMC,oCAAoC,GAAGL,yBAAyB,CAACM,GAAG,CACxEC,mBAAmB,IAAI/B,4BAA4B,CAAC+B,mBAAmB,CAAE,CAC1E;MACD,MAAMC,qBAAqB,GAAGN,gBAAgB,CAACC,MAAM,CAACI,mBAAmB,IAAG;QAC1E,MAAME,yBAAyB,GAAGjC,4BAA4B,CAAC+B,mBAAmB,CAAC;QACnF,IAAIE,yBAAyB,IAAI,IAAI,IAAIJ,oCAAoC,CAACK,QAAQ,CAACD,yBAAyB,CAAC,EAAE;UACjH,OAAO,KAAK;;QAEdJ,oCAAoC,CAACM,IAAI,CAACF,yBAAyB,CAAC;QACpE,OAAO,IAAI;MACb,CAAC,CAAC;MACF,OAAO,CAAC,GAAGD,qBAAqB,EAAE,GAAGR,yBAAyB,CAAC;;IAEjE,OAAOA,yBAAyB;EAClC;;;mBA1DWvB,sBAAsB;AAAA;;SAAtBA,sBAAsB;EAAAmC,SAAtBnC,sBAAsB;EAAAoC,YADT;AAAM","names":["isPresent","createRequestOption","getChipsCollectionIdentifier","ChipsCollectionService","constructor","http","applicationConfigService","getEndpointFor","create","chipsCollection","post","resourceUrl","observe","update","put","partialUpdate","patch","find","id","get","query","req","options","params","delete","addChipsCollectionToCollectionIfMissing","chipsCollectionCollection","chipsCollectionsToCheck","chipsCollections","filter","length","chipsCollectionCollectionIdentifiers","map","chipsCollectionItem","chipsCollectionsToAdd","chipsCollectionIdentifier","includes","push","factory","providedIn"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/entities/chips-collection/service/chips-collection.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { isPresent } from 'app/core/util/operators';\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { IChipsCollection, getChipsCollectionIdentifier } from '../chips-collection.model';\n\nexport type EntityResponseType = HttpResponse<IChipsCollection>;\nexport type EntityArrayResponseType = HttpResponse<IChipsCollection[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class ChipsCollectionService {\n  protected resourceUrl = this.applicationConfigService.getEndpointFor('api/chips-collections');\n\n  constructor(protected http: HttpClient, protected applicationConfigService: ApplicationConfigService) {}\n\n  create(chipsCollection: IChipsCollection): Observable<EntityResponseType> {\n    return this.http.post<IChipsCollection>(this.resourceUrl, chipsCollection, { observe: 'response' });\n  }\n\n  update(chipsCollection: IChipsCollection): Observable<EntityResponseType> {\n    return this.http.put<IChipsCollection>(\n      `${this.resourceUrl}/${getChipsCollectionIdentifier(chipsCollection) as number}`,\n      chipsCollection,\n      { observe: 'response' }\n    );\n  }\n\n  partialUpdate(chipsCollection: IChipsCollection): Observable<EntityResponseType> {\n    return this.http.patch<IChipsCollection>(\n      `${this.resourceUrl}/${getChipsCollectionIdentifier(chipsCollection) as number}`,\n      chipsCollection,\n      { observe: 'response' }\n    );\n  }\n\n  find(id: number): Observable<EntityResponseType> {\n    return this.http.get<IChipsCollection>(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  query(req?: any): Observable<EntityArrayResponseType> {\n    const options = createRequestOption(req);\n    return this.http.get<IChipsCollection[]>(this.resourceUrl, { params: options, observe: 'response' });\n  }\n\n  delete(id: number): Observable<HttpResponse<{}>> {\n    return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  addChipsCollectionToCollectionIfMissing(\n    chipsCollectionCollection: IChipsCollection[],\n    ...chipsCollectionsToCheck: (IChipsCollection | null | undefined)[]\n  ): IChipsCollection[] {\n    const chipsCollections: IChipsCollection[] = chipsCollectionsToCheck.filter(isPresent);\n    if (chipsCollections.length > 0) {\n      const chipsCollectionCollectionIdentifiers = chipsCollectionCollection.map(\n        chipsCollectionItem => getChipsCollectionIdentifier(chipsCollectionItem)!\n      );\n      const chipsCollectionsToAdd = chipsCollections.filter(chipsCollectionItem => {\n        const chipsCollectionIdentifier = getChipsCollectionIdentifier(chipsCollectionItem);\n        if (chipsCollectionIdentifier == null || chipsCollectionCollectionIdentifiers.includes(chipsCollectionIdentifier)) {\n          return false;\n        }\n        chipsCollectionCollectionIdentifiers.push(chipsCollectionIdentifier);\n        return true;\n      });\n      return [...chipsCollectionsToAdd, ...chipsCollectionCollection];\n    }\n    return chipsCollectionCollection;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}