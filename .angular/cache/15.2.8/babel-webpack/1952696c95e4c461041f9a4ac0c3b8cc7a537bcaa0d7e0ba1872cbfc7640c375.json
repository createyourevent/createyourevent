{"ast":null,"code":"import _defineProperty from \"/home/ceo/mmmm/createyourevent/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getCreateYourEventServiceIdentifier } from '../create-your-event-service.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport class CreateYourEventServiceService {\n  constructor(http, applicationConfigService) {\n    _defineProperty(this, \"http\", void 0);\n    _defineProperty(this, \"applicationConfigService\", void 0);\n    _defineProperty(this, \"resourceUrl\", this.applicationConfigService.getEndpointFor('api/create-your-event-services'));\n    this.http = http;\n    this.applicationConfigService = applicationConfigService;\n  }\n  create(createYourEventService) {\n    return this.http.post(this.resourceUrl, createYourEventService, {\n      observe: 'response'\n    });\n  }\n  update(createYourEventService) {\n    return this.http.put(`${this.resourceUrl}/${getCreateYourEventServiceIdentifier(createYourEventService)}`, createYourEventService, {\n      observe: 'response'\n    });\n  }\n  partialUpdate(createYourEventService) {\n    return this.http.patch(`${this.resourceUrl}/${getCreateYourEventServiceIdentifier(createYourEventService)}`, createYourEventService, {\n      observe: 'response'\n    });\n  }\n  find(id) {\n    return this.http.get(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  query(req) {\n    const options = createRequestOption(req);\n    return this.http.get(this.resourceUrl, {\n      params: options,\n      observe: 'response'\n    });\n  }\n  delete(id) {\n    return this.http.delete(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  addCreateYourEventServiceToCollectionIfMissing(createYourEventServiceCollection, ...createYourEventServicesToCheck) {\n    const createYourEventServices = createYourEventServicesToCheck.filter(isPresent);\n    if (createYourEventServices.length > 0) {\n      const createYourEventServiceCollectionIdentifiers = createYourEventServiceCollection.map(createYourEventServiceItem => getCreateYourEventServiceIdentifier(createYourEventServiceItem));\n      const createYourEventServicesToAdd = createYourEventServices.filter(createYourEventServiceItem => {\n        const createYourEventServiceIdentifier = getCreateYourEventServiceIdentifier(createYourEventServiceItem);\n        if (createYourEventServiceIdentifier == null || createYourEventServiceCollectionIdentifiers.includes(createYourEventServiceIdentifier)) {\n          return false;\n        }\n        createYourEventServiceCollectionIdentifiers.push(createYourEventServiceIdentifier);\n        return true;\n      });\n      return [...createYourEventServicesToAdd, ...createYourEventServiceCollection];\n    }\n    return createYourEventServiceCollection;\n  }\n}\n_defineProperty(CreateYourEventServiceService, \"\\u0275fac\", function CreateYourEventServiceService_Factory(t) {\n  return new (t || CreateYourEventServiceService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n});\n_defineProperty(CreateYourEventServiceService, \"\\u0275prov\", /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CreateYourEventServiceService,\n  factory: CreateYourEventServiceService.ɵfac,\n  providedIn: 'root'\n}));","map":{"version":3,"mappings":";AAIA,SAASA,SAAS,QAAQ,yBAAyB;AAEnD,SAASC,mBAAmB,QAAQ,+BAA+B;AACnE,SAAkCC,mCAAmC,QAAQ,oCAAoC;;;;AAMjH,OAAM,MAAOC,6BAA6B;EAGxCC,YAAsBC,IAAgB,EAAYC,wBAAkD;IAAA;IAAA;IAAA,qCAF5E,IAAI,CAACA,wBAAwB,CAACC,cAAc,CAAC,gCAAgC,CAAC;IAEhF,SAAI,GAAJF,IAAI;IAAwB,6BAAwB,GAAxBC,wBAAwB;EAA6B;EAEvGE,MAAM,CAACC,sBAA+C;IACpD,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAA0B,IAAI,CAACC,WAAW,EAAEF,sBAAsB,EAAE;MAAEG,OAAO,EAAE;IAAU,CAAE,CAAC;EACnH;EAEAC,MAAM,CAACJ,sBAA+C;IACpD,OAAO,IAAI,CAACJ,IAAI,CAACS,GAAG,CAClB,GAAG,IAAI,CAACH,WAAW,IAAIT,mCAAmC,CAACO,sBAAsB,CAAW,EAAE,EAC9FA,sBAAsB,EACtB;MAAEG,OAAO,EAAE;IAAU,CAAE,CACxB;EACH;EAEAG,aAAa,CAACN,sBAA+C;IAC3D,OAAO,IAAI,CAACJ,IAAI,CAACW,KAAK,CACpB,GAAG,IAAI,CAACL,WAAW,IAAIT,mCAAmC,CAACO,sBAAsB,CAAW,EAAE,EAC9FA,sBAAsB,EACtB;MAAEG,OAAO,EAAE;IAAU,CAAE,CACxB;EACH;EAEAK,IAAI,CAACC,EAAU;IACb,OAAO,IAAI,CAACb,IAAI,CAACc,GAAG,CAA0B,GAAG,IAAI,CAACR,WAAW,IAAIO,EAAE,EAAE,EAAE;MAAEN,OAAO,EAAE;IAAU,CAAE,CAAC;EACrG;EAEAQ,KAAK,CAACC,GAAS;IACb,MAAMC,OAAO,GAAGrB,mBAAmB,CAACoB,GAAG,CAAC;IACxC,OAAO,IAAI,CAAChB,IAAI,CAACc,GAAG,CAA4B,IAAI,CAACR,WAAW,EAAE;MAAEY,MAAM,EAAED,OAAO;MAAEV,OAAO,EAAE;IAAU,CAAE,CAAC;EAC7G;EAEAY,MAAM,CAACN,EAAU;IACf,OAAO,IAAI,CAACb,IAAI,CAACmB,MAAM,CAAC,GAAG,IAAI,CAACb,WAAW,IAAIO,EAAE,EAAE,EAAE;MAAEN,OAAO,EAAE;IAAU,CAAE,CAAC;EAC/E;EAEAa,8CAA8C,CAC5CC,gCAA2D,EAC3D,GAAGC,8BAA8E;IAEjF,MAAMC,uBAAuB,GAA8BD,8BAA8B,CAACE,MAAM,CAAC7B,SAAS,CAAC;IAC3G,IAAI4B,uBAAuB,CAACE,MAAM,GAAG,CAAC,EAAE;MACtC,MAAMC,2CAA2C,GAAGL,gCAAgC,CAACM,GAAG,CACtFC,0BAA0B,IAAI/B,mCAAmC,CAAC+B,0BAA0B,CAAE,CAC/F;MACD,MAAMC,4BAA4B,GAAGN,uBAAuB,CAACC,MAAM,CAACI,0BAA0B,IAAG;QAC/F,MAAME,gCAAgC,GAAGjC,mCAAmC,CAAC+B,0BAA0B,CAAC;QACxG,IACEE,gCAAgC,IAAI,IAAI,IACxCJ,2CAA2C,CAACK,QAAQ,CAACD,gCAAgC,CAAC,EACtF;UACA,OAAO,KAAK;;QAEdJ,2CAA2C,CAACM,IAAI,CAACF,gCAAgC,CAAC;QAClF,OAAO,IAAI;MACb,CAAC,CAAC;MACF,OAAO,CAAC,GAAGD,4BAA4B,EAAE,GAAGR,gCAAgC,CAAC;;IAE/E,OAAOA,gCAAgC;EACzC;;gBA7DWvB,6BAA6B;mBAA7BA,6BAA6B;AAAA;AAAA,gBAA7BA,6BAA6B;SAA7BA,6BAA6B;EAAAmC,SAA7BnC,6BAA6B;EAAAoC,YADhB;AAAM","names":["isPresent","createRequestOption","getCreateYourEventServiceIdentifier","CreateYourEventServiceService","constructor","http","applicationConfigService","getEndpointFor","create","createYourEventService","post","resourceUrl","observe","update","put","partialUpdate","patch","find","id","get","query","req","options","params","delete","addCreateYourEventServiceToCollectionIfMissing","createYourEventServiceCollection","createYourEventServicesToCheck","createYourEventServices","filter","length","createYourEventServiceCollectionIdentifiers","map","createYourEventServiceItem","createYourEventServicesToAdd","createYourEventServiceIdentifier","includes","push","factory","providedIn"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/entities/create-your-event-service/service/create-your-event-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { isPresent } from 'app/core/util/operators';\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { ICreateYourEventService, getCreateYourEventServiceIdentifier } from '../create-your-event-service.model';\n\nexport type EntityResponseType = HttpResponse<ICreateYourEventService>;\nexport type EntityArrayResponseType = HttpResponse<ICreateYourEventService[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class CreateYourEventServiceService {\n  protected resourceUrl = this.applicationConfigService.getEndpointFor('api/create-your-event-services');\n\n  constructor(protected http: HttpClient, protected applicationConfigService: ApplicationConfigService) {}\n\n  create(createYourEventService: ICreateYourEventService): Observable<EntityResponseType> {\n    return this.http.post<ICreateYourEventService>(this.resourceUrl, createYourEventService, { observe: 'response' });\n  }\n\n  update(createYourEventService: ICreateYourEventService): Observable<EntityResponseType> {\n    return this.http.put<ICreateYourEventService>(\n      `${this.resourceUrl}/${getCreateYourEventServiceIdentifier(createYourEventService) as number}`,\n      createYourEventService,\n      { observe: 'response' }\n    );\n  }\n\n  partialUpdate(createYourEventService: ICreateYourEventService): Observable<EntityResponseType> {\n    return this.http.patch<ICreateYourEventService>(\n      `${this.resourceUrl}/${getCreateYourEventServiceIdentifier(createYourEventService) as number}`,\n      createYourEventService,\n      { observe: 'response' }\n    );\n  }\n\n  find(id: number): Observable<EntityResponseType> {\n    return this.http.get<ICreateYourEventService>(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  query(req?: any): Observable<EntityArrayResponseType> {\n    const options = createRequestOption(req);\n    return this.http.get<ICreateYourEventService[]>(this.resourceUrl, { params: options, observe: 'response' });\n  }\n\n  delete(id: number): Observable<HttpResponse<{}>> {\n    return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  addCreateYourEventServiceToCollectionIfMissing(\n    createYourEventServiceCollection: ICreateYourEventService[],\n    ...createYourEventServicesToCheck: (ICreateYourEventService | null | undefined)[]\n  ): ICreateYourEventService[] {\n    const createYourEventServices: ICreateYourEventService[] = createYourEventServicesToCheck.filter(isPresent);\n    if (createYourEventServices.length > 0) {\n      const createYourEventServiceCollectionIdentifiers = createYourEventServiceCollection.map(\n        createYourEventServiceItem => getCreateYourEventServiceIdentifier(createYourEventServiceItem)!\n      );\n      const createYourEventServicesToAdd = createYourEventServices.filter(createYourEventServiceItem => {\n        const createYourEventServiceIdentifier = getCreateYourEventServiceIdentifier(createYourEventServiceItem);\n        if (\n          createYourEventServiceIdentifier == null ||\n          createYourEventServiceCollectionIdentifiers.includes(createYourEventServiceIdentifier)\n        ) {\n          return false;\n        }\n        createYourEventServiceCollectionIdentifiers.push(createYourEventServiceIdentifier);\n        return true;\n      });\n      return [...createYourEventServicesToAdd, ...createYourEventServiceCollection];\n    }\n    return createYourEventServiceCollection;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}