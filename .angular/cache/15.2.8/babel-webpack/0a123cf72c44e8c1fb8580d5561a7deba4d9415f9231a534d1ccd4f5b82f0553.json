{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\nimport { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getCartIdentifier } from '../cart.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport let CartService = /*#__PURE__*/(() => {\n  class CartService {\n    constructor(http, applicationConfigService) {\n      this.http = http;\n      this.applicationConfigService = applicationConfigService;\n      this.resourceUrl = this.applicationConfigService.getEndpointFor('api/carts');\n    }\n    create(cart) {\n      const copy = this.convertDateFromClient(cart);\n      return this.http.post(this.resourceUrl, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    update(cart) {\n      const copy = this.convertDateFromClient(cart);\n      return this.http.put(`${this.resourceUrl}/${getCartIdentifier(cart)}`, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    partialUpdate(cart) {\n      const copy = this.convertDateFromClient(cart);\n      return this.http.patch(`${this.resourceUrl}/${getCartIdentifier(cart)}`, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      }).pipe(map(res => this.convertDateArrayFromServer(res)));\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    addCartToCollectionIfMissing(cartCollection, ...cartsToCheck) {\n      const carts = cartsToCheck.filter(isPresent);\n      if (carts.length > 0) {\n        const cartCollectionIdentifiers = cartCollection.map(cartItem => getCartIdentifier(cartItem));\n        const cartsToAdd = carts.filter(cartItem => {\n          const cartIdentifier = getCartIdentifier(cartItem);\n          if (cartIdentifier == null || cartCollectionIdentifiers.includes(cartIdentifier)) {\n            return false;\n          }\n          cartCollectionIdentifiers.push(cartIdentifier);\n          return true;\n        });\n        return [...cartsToAdd, ...cartCollection];\n      }\n      return cartCollection;\n    }\n    convertDateFromClient(cart) {\n      return Object.assign({}, cart, {\n        date: cart.date?.isValid() ? cart.date.toJSON() : undefined\n      });\n    }\n    convertDateFromServer(res) {\n      if (res.body) {\n        res.body.date = res.body.date ? dayjs(res.body.date) : undefined;\n      }\n      return res;\n    }\n    convertDateArrayFromServer(res) {\n      if (res.body) {\n        res.body.forEach(cart => {\n          cart.date = cart.date ? dayjs(cart.date) : undefined;\n        });\n      }\n      return res;\n    }\n  }\n  CartService.ɵfac = function CartService_Factory(t) {\n    return new (t || CartService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n  };\n  CartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CartService,\n    factory: CartService.ɵfac,\n    providedIn: 'root'\n  });\n  return CartService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}