{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\nimport { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getProductStarRatingIdentifier } from '../product-star-rating.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport let ProductStarRatingService = /*#__PURE__*/(() => {\n  class ProductStarRatingService {\n    constructor(http, applicationConfigService) {\n      this.http = http;\n      this.applicationConfigService = applicationConfigService;\n      this.resourceUrl = this.applicationConfigService.getEndpointFor('api/product-star-ratings');\n    }\n    create(productStarRating) {\n      const copy = this.convertDateFromClient(productStarRating);\n      return this.http.post(this.resourceUrl, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    update(productStarRating) {\n      const copy = this.convertDateFromClient(productStarRating);\n      return this.http.put(`${this.resourceUrl}/${getProductStarRatingIdentifier(productStarRating)}`, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    partialUpdate(productStarRating) {\n      const copy = this.convertDateFromClient(productStarRating);\n      return this.http.patch(`${this.resourceUrl}/${getProductStarRatingIdentifier(productStarRating)}`, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      }).pipe(map(res => this.convertDateArrayFromServer(res)));\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    addProductStarRatingToCollectionIfMissing(productStarRatingCollection, ...productStarRatingsToCheck) {\n      const productStarRatings = productStarRatingsToCheck.filter(isPresent);\n      if (productStarRatings.length > 0) {\n        const productStarRatingCollectionIdentifiers = productStarRatingCollection.map(productStarRatingItem => getProductStarRatingIdentifier(productStarRatingItem));\n        const productStarRatingsToAdd = productStarRatings.filter(productStarRatingItem => {\n          const productStarRatingIdentifier = getProductStarRatingIdentifier(productStarRatingItem);\n          if (productStarRatingIdentifier == null || productStarRatingCollectionIdentifiers.includes(productStarRatingIdentifier)) {\n            return false;\n          }\n          productStarRatingCollectionIdentifiers.push(productStarRatingIdentifier);\n          return true;\n        });\n        return [...productStarRatingsToAdd, ...productStarRatingCollection];\n      }\n      return productStarRatingCollection;\n    }\n    convertDateFromClient(productStarRating) {\n      return Object.assign({}, productStarRating, {\n        date: productStarRating.date?.isValid() ? productStarRating.date.toJSON() : undefined\n      });\n    }\n    convertDateFromServer(res) {\n      if (res.body) {\n        res.body.date = res.body.date ? dayjs(res.body.date) : undefined;\n      }\n      return res;\n    }\n    convertDateArrayFromServer(res) {\n      if (res.body) {\n        res.body.forEach(productStarRating => {\n          productStarRating.date = productStarRating.date ? dayjs(productStarRating.date) : undefined;\n        });\n      }\n      return res;\n    }\n  }\n  ProductStarRatingService.ɵfac = function ProductStarRatingService_Factory(t) {\n    return new (t || ProductStarRatingService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n  };\n  ProductStarRatingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductStarRatingService,\n    factory: ProductStarRatingService.ɵfac,\n    providedIn: 'root'\n  });\n  return ProductStarRatingService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}