{"ast":null,"code":"import _defineProperty from \"/home/ceo/mmmm/createyourevent/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\nimport { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getOrganizationReservationIdentifier } from '../organization-reservation.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport class OrganizationReservationService {\n  constructor(http, applicationConfigService) {\n    _defineProperty(this, \"http\", void 0);\n    _defineProperty(this, \"applicationConfigService\", void 0);\n    _defineProperty(this, \"resourceUrl\", this.applicationConfigService.getEndpointFor('api/organization-reservations'));\n    this.http = http;\n    this.applicationConfigService = applicationConfigService;\n  }\n  create(organizationReservation) {\n    const copy = this.convertDateFromClient(organizationReservation);\n    return this.http.post(this.resourceUrl, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  update(organizationReservation) {\n    const copy = this.convertDateFromClient(organizationReservation);\n    return this.http.put(`${this.resourceUrl}/${getOrganizationReservationIdentifier(organizationReservation)}`, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  partialUpdate(organizationReservation) {\n    const copy = this.convertDateFromClient(organizationReservation);\n    return this.http.patch(`${this.resourceUrl}/${getOrganizationReservationIdentifier(organizationReservation)}`, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  find(id) {\n    return this.http.get(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  query(req) {\n    const options = createRequestOption(req);\n    return this.http.get(this.resourceUrl, {\n      params: options,\n      observe: 'response'\n    }).pipe(map(res => this.convertDateArrayFromServer(res)));\n  }\n  delete(id) {\n    return this.http.delete(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  addOrganizationReservationToCollectionIfMissing(organizationReservationCollection, ...organizationReservationsToCheck) {\n    const organizationReservations = organizationReservationsToCheck.filter(isPresent);\n    if (organizationReservations.length > 0) {\n      const organizationReservationCollectionIdentifiers = organizationReservationCollection.map(organizationReservationItem => getOrganizationReservationIdentifier(organizationReservationItem));\n      const organizationReservationsToAdd = organizationReservations.filter(organizationReservationItem => {\n        const organizationReservationIdentifier = getOrganizationReservationIdentifier(organizationReservationItem);\n        if (organizationReservationIdentifier == null || organizationReservationCollectionIdentifiers.includes(organizationReservationIdentifier)) {\n          return false;\n        }\n        organizationReservationCollectionIdentifiers.push(organizationReservationIdentifier);\n        return true;\n      });\n      return [...organizationReservationsToAdd, ...organizationReservationCollection];\n    }\n    return organizationReservationCollection;\n  }\n  convertDateFromClient(organizationReservation) {\n    return Object.assign({}, organizationReservation, {\n      date: organizationReservation.date?.isValid() ? organizationReservation.date.toJSON() : undefined,\n      dateFrom: organizationReservation.dateFrom?.isValid() ? organizationReservation.dateFrom.toJSON() : undefined,\n      dateUntil: organizationReservation.dateUntil?.isValid() ? organizationReservation.dateUntil.toJSON() : undefined\n    });\n  }\n  convertDateFromServer(res) {\n    if (res.body) {\n      res.body.date = res.body.date ? dayjs(res.body.date) : undefined;\n      res.body.dateFrom = res.body.dateFrom ? dayjs(res.body.dateFrom) : undefined;\n      res.body.dateUntil = res.body.dateUntil ? dayjs(res.body.dateUntil) : undefined;\n    }\n    return res;\n  }\n  convertDateArrayFromServer(res) {\n    if (res.body) {\n      res.body.forEach(organizationReservation => {\n        organizationReservation.date = organizationReservation.date ? dayjs(organizationReservation.date) : undefined;\n        organizationReservation.dateFrom = organizationReservation.dateFrom ? dayjs(organizationReservation.dateFrom) : undefined;\n        organizationReservation.dateUntil = organizationReservation.dateUntil ? dayjs(organizationReservation.dateUntil) : undefined;\n      });\n    }\n    return res;\n  }\n}\n_defineProperty(OrganizationReservationService, \"\\u0275fac\", function OrganizationReservationService_Factory(t) {\n  return new (t || OrganizationReservationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n});\n_defineProperty(OrganizationReservationService, \"\\u0275prov\", /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: OrganizationReservationService,\n  factory: OrganizationReservationService.ɵfac,\n  providedIn: 'root'\n}));","map":{"version":3,"mappings":"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","names":["map","dayjs","isPresent","createRequestOption","getOrganizationReservationIdentifier","OrganizationReservationService","constructor","http","applicationConfigService","getEndpointFor","create","organizationReservation","copy","convertDateFromClient","post","resourceUrl","observe","pipe","res","convertDateFromServer","update","put","partialUpdate","patch","find","id","get","query","req","options","params","convertDateArrayFromServer","delete","addOrganizationReservationToCollectionIfMissing","organizationReservationCollection","organizationReservationsToCheck","organizationReservations","filter","length","organizationReservationCollectionIdentifiers","organizationReservationItem","organizationReservationsToAdd","organizationReservationIdentifier","includes","push","Object","assign","date","isValid","toJSON","undefined","dateFrom","dateUntil","body","forEach","factory","providedIn"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/entities/organization-reservation/service/organization-reservation.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\n\nimport { isPresent } from 'app/core/util/operators';\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { IOrganizationReservation, getOrganizationReservationIdentifier } from '../organization-reservation.model';\n\nexport type EntityResponseType = HttpResponse<IOrganizationReservation>;\nexport type EntityArrayResponseType = HttpResponse<IOrganizationReservation[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class OrganizationReservationService {\n  protected resourceUrl = this.applicationConfigService.getEndpointFor('api/organization-reservations');\n\n  constructor(protected http: HttpClient, protected applicationConfigService: ApplicationConfigService) {}\n\n  create(organizationReservation: IOrganizationReservation): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(organizationReservation);\n    return this.http\n      .post<IOrganizationReservation>(this.resourceUrl, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  update(organizationReservation: IOrganizationReservation): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(organizationReservation);\n    return this.http\n      .put<IOrganizationReservation>(\n        `${this.resourceUrl}/${getOrganizationReservationIdentifier(organizationReservation) as number}`,\n        copy,\n        { observe: 'response' }\n      )\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  partialUpdate(organizationReservation: IOrganizationReservation): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(organizationReservation);\n    return this.http\n      .patch<IOrganizationReservation>(\n        `${this.resourceUrl}/${getOrganizationReservationIdentifier(organizationReservation) as number}`,\n        copy,\n        { observe: 'response' }\n      )\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  find(id: number): Observable<EntityResponseType> {\n    return this.http\n      .get<IOrganizationReservation>(`${this.resourceUrl}/${id}`, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  query(req?: any): Observable<EntityArrayResponseType> {\n    const options = createRequestOption(req);\n    return this.http\n      .get<IOrganizationReservation[]>(this.resourceUrl, { params: options, observe: 'response' })\n      .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n  }\n\n  delete(id: number): Observable<HttpResponse<{}>> {\n    return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  addOrganizationReservationToCollectionIfMissing(\n    organizationReservationCollection: IOrganizationReservation[],\n    ...organizationReservationsToCheck: (IOrganizationReservation | null | undefined)[]\n  ): IOrganizationReservation[] {\n    const organizationReservations: IOrganizationReservation[] = organizationReservationsToCheck.filter(isPresent);\n    if (organizationReservations.length > 0) {\n      const organizationReservationCollectionIdentifiers = organizationReservationCollection.map(\n        organizationReservationItem => getOrganizationReservationIdentifier(organizationReservationItem)!\n      );\n      const organizationReservationsToAdd = organizationReservations.filter(organizationReservationItem => {\n        const organizationReservationIdentifier = getOrganizationReservationIdentifier(organizationReservationItem);\n        if (\n          organizationReservationIdentifier == null ||\n          organizationReservationCollectionIdentifiers.includes(organizationReservationIdentifier)\n        ) {\n          return false;\n        }\n        organizationReservationCollectionIdentifiers.push(organizationReservationIdentifier);\n        return true;\n      });\n      return [...organizationReservationsToAdd, ...organizationReservationCollection];\n    }\n    return organizationReservationCollection;\n  }\n\n  protected convertDateFromClient(organizationReservation: IOrganizationReservation): IOrganizationReservation {\n    return Object.assign({}, organizationReservation, {\n      date: organizationReservation.date?.isValid() ? organizationReservation.date.toJSON() : undefined,\n      dateFrom: organizationReservation.dateFrom?.isValid() ? organizationReservation.dateFrom.toJSON() : undefined,\n      dateUntil: organizationReservation.dateUntil?.isValid() ? organizationReservation.dateUntil.toJSON() : undefined,\n    });\n  }\n\n  protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\n    if (res.body) {\n      res.body.date = res.body.date ? dayjs(res.body.date) : undefined;\n      res.body.dateFrom = res.body.dateFrom ? dayjs(res.body.dateFrom) : undefined;\n      res.body.dateUntil = res.body.dateUntil ? dayjs(res.body.dateUntil) : undefined;\n    }\n    return res;\n  }\n\n  protected convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\n    if (res.body) {\n      res.body.forEach((organizationReservation: IOrganizationReservation) => {\n        organizationReservation.date = organizationReservation.date ? dayjs(organizationReservation.date) : undefined;\n        organizationReservation.dateFrom = organizationReservation.dateFrom ? dayjs(organizationReservation.dateFrom) : undefined;\n        organizationReservation.dateUntil = organizationReservation.dateUntil ? dayjs(organizationReservation.dateUntil) : undefined;\n      });\n    }\n    return res;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}