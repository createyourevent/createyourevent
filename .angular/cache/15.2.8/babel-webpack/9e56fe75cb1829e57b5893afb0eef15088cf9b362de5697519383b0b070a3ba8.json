{"ast":null,"code":"import { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getDeliveryTypeIdentifier } from '../delivery-type.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport class DeliveryTypeService {\n  constructor(http, applicationConfigService) {\n    this.http = http;\n    this.applicationConfigService = applicationConfigService;\n    this.resourceUrl = this.applicationConfigService.getEndpointFor('api/delivery-types');\n  }\n  create(deliveryType) {\n    return this.http.post(this.resourceUrl, deliveryType, {\n      observe: 'response'\n    });\n  }\n  update(deliveryType) {\n    return this.http.put(`${this.resourceUrl}/${getDeliveryTypeIdentifier(deliveryType)}`, deliveryType, {\n      observe: 'response'\n    });\n  }\n  partialUpdate(deliveryType) {\n    return this.http.patch(`${this.resourceUrl}/${getDeliveryTypeIdentifier(deliveryType)}`, deliveryType, {\n      observe: 'response'\n    });\n  }\n  find(id) {\n    return this.http.get(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  query(req) {\n    const options = createRequestOption(req);\n    return this.http.get(this.resourceUrl, {\n      params: options,\n      observe: 'response'\n    });\n  }\n  delete(id) {\n    return this.http.delete(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  addDeliveryTypeToCollectionIfMissing(deliveryTypeCollection, ...deliveryTypesToCheck) {\n    const deliveryTypes = deliveryTypesToCheck.filter(isPresent);\n    if (deliveryTypes.length > 0) {\n      const deliveryTypeCollectionIdentifiers = deliveryTypeCollection.map(deliveryTypeItem => getDeliveryTypeIdentifier(deliveryTypeItem));\n      const deliveryTypesToAdd = deliveryTypes.filter(deliveryTypeItem => {\n        const deliveryTypeIdentifier = getDeliveryTypeIdentifier(deliveryTypeItem);\n        if (deliveryTypeIdentifier == null || deliveryTypeCollectionIdentifiers.includes(deliveryTypeIdentifier)) {\n          return false;\n        }\n        deliveryTypeCollectionIdentifiers.push(deliveryTypeIdentifier);\n        return true;\n      });\n      return [...deliveryTypesToAdd, ...deliveryTypeCollection];\n    }\n    return deliveryTypeCollection;\n  }\n}\nDeliveryTypeService.ɵfac = function DeliveryTypeService_Factory(t) {\n  return new (t || DeliveryTypeService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n};\nDeliveryTypeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DeliveryTypeService,\n  factory: DeliveryTypeService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAIA,SAASA,SAAS,QAAQ,yBAAyB;AAEnD,SAASC,mBAAmB,QAAQ,+BAA+B;AACnE,SAAwBC,yBAAyB,QAAQ,wBAAwB;;;;AAMjF,OAAM,MAAOC,mBAAmB;EAG9BC,YAAsBC,IAAgB,EAAYC,wBAAkD;IAA9E,SAAI,GAAJD,IAAI;IAAwB,6BAAwB,GAAxBC,wBAAwB;IAFhE,gBAAW,GAAG,IAAI,CAACA,wBAAwB,CAACC,cAAc,CAAC,oBAAoB,CAAC;EAEa;EAEvGC,MAAM,CAACC,YAA2B;IAChC,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAgB,IAAI,CAACC,WAAW,EAAEF,YAAY,EAAE;MAAEG,OAAO,EAAE;IAAU,CAAE,CAAC;EAC/F;EAEAC,MAAM,CAACJ,YAA2B;IAChC,OAAO,IAAI,CAACJ,IAAI,CAACS,GAAG,CAAgB,GAAG,IAAI,CAACH,WAAW,IAAIT,yBAAyB,CAACO,YAAY,CAAW,EAAE,EAAEA,YAAY,EAAE;MAC5HG,OAAO,EAAE;KACV,CAAC;EACJ;EAEAG,aAAa,CAACN,YAA2B;IACvC,OAAO,IAAI,CAACJ,IAAI,CAACW,KAAK,CAAgB,GAAG,IAAI,CAACL,WAAW,IAAIT,yBAAyB,CAACO,YAAY,CAAW,EAAE,EAAEA,YAAY,EAAE;MAC9HG,OAAO,EAAE;KACV,CAAC;EACJ;EAEAK,IAAI,CAACC,EAAU;IACb,OAAO,IAAI,CAACb,IAAI,CAACc,GAAG,CAAgB,GAAG,IAAI,CAACR,WAAW,IAAIO,EAAE,EAAE,EAAE;MAAEN,OAAO,EAAE;IAAU,CAAE,CAAC;EAC3F;EAEAQ,KAAK,CAACC,GAAS;IACb,MAAMC,OAAO,GAAGrB,mBAAmB,CAACoB,GAAG,CAAC;IACxC,OAAO,IAAI,CAAChB,IAAI,CAACc,GAAG,CAAkB,IAAI,CAACR,WAAW,EAAE;MAAEY,MAAM,EAAED,OAAO;MAAEV,OAAO,EAAE;IAAU,CAAE,CAAC;EACnG;EAEAY,MAAM,CAACN,EAAU;IACf,OAAO,IAAI,CAACb,IAAI,CAACmB,MAAM,CAAC,GAAG,IAAI,CAACb,WAAW,IAAIO,EAAE,EAAE,EAAE;MAAEN,OAAO,EAAE;IAAU,CAAE,CAAC;EAC/E;EAEAa,oCAAoC,CAClCC,sBAAuC,EACvC,GAAGC,oBAA0D;IAE7D,MAAMC,aAAa,GAAoBD,oBAAoB,CAACE,MAAM,CAAC7B,SAAS,CAAC;IAC7E,IAAI4B,aAAa,CAACE,MAAM,GAAG,CAAC,EAAE;MAC5B,MAAMC,iCAAiC,GAAGL,sBAAsB,CAACM,GAAG,CAClEC,gBAAgB,IAAI/B,yBAAyB,CAAC+B,gBAAgB,CAAE,CACjE;MACD,MAAMC,kBAAkB,GAAGN,aAAa,CAACC,MAAM,CAACI,gBAAgB,IAAG;QACjE,MAAME,sBAAsB,GAAGjC,yBAAyB,CAAC+B,gBAAgB,CAAC;QAC1E,IAAIE,sBAAsB,IAAI,IAAI,IAAIJ,iCAAiC,CAACK,QAAQ,CAACD,sBAAsB,CAAC,EAAE;UACxG,OAAO,KAAK;;QAEdJ,iCAAiC,CAACM,IAAI,CAACF,sBAAsB,CAAC;QAC9D,OAAO,IAAI;MACb,CAAC,CAAC;MACF,OAAO,CAAC,GAAGD,kBAAkB,EAAE,GAAGR,sBAAsB,CAAC;;IAE3D,OAAOA,sBAAsB;EAC/B;;;mBAtDWvB,mBAAmB;AAAA;;SAAnBA,mBAAmB;EAAAmC,SAAnBnC,mBAAmB;EAAAoC,YADN;AAAM","names":["isPresent","createRequestOption","getDeliveryTypeIdentifier","DeliveryTypeService","constructor","http","applicationConfigService","getEndpointFor","create","deliveryType","post","resourceUrl","observe","update","put","partialUpdate","patch","find","id","get","query","req","options","params","delete","addDeliveryTypeToCollectionIfMissing","deliveryTypeCollection","deliveryTypesToCheck","deliveryTypes","filter","length","deliveryTypeCollectionIdentifiers","map","deliveryTypeItem","deliveryTypesToAdd","deliveryTypeIdentifier","includes","push","factory","providedIn"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/entities/delivery-type/service/delivery-type.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { isPresent } from 'app/core/util/operators';\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { IDeliveryType, getDeliveryTypeIdentifier } from '../delivery-type.model';\n\nexport type EntityResponseType = HttpResponse<IDeliveryType>;\nexport type EntityArrayResponseType = HttpResponse<IDeliveryType[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class DeliveryTypeService {\n  protected resourceUrl = this.applicationConfigService.getEndpointFor('api/delivery-types');\n\n  constructor(protected http: HttpClient, protected applicationConfigService: ApplicationConfigService) {}\n\n  create(deliveryType: IDeliveryType): Observable<EntityResponseType> {\n    return this.http.post<IDeliveryType>(this.resourceUrl, deliveryType, { observe: 'response' });\n  }\n\n  update(deliveryType: IDeliveryType): Observable<EntityResponseType> {\n    return this.http.put<IDeliveryType>(`${this.resourceUrl}/${getDeliveryTypeIdentifier(deliveryType) as number}`, deliveryType, {\n      observe: 'response',\n    });\n  }\n\n  partialUpdate(deliveryType: IDeliveryType): Observable<EntityResponseType> {\n    return this.http.patch<IDeliveryType>(`${this.resourceUrl}/${getDeliveryTypeIdentifier(deliveryType) as number}`, deliveryType, {\n      observe: 'response',\n    });\n  }\n\n  find(id: number): Observable<EntityResponseType> {\n    return this.http.get<IDeliveryType>(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  query(req?: any): Observable<EntityArrayResponseType> {\n    const options = createRequestOption(req);\n    return this.http.get<IDeliveryType[]>(this.resourceUrl, { params: options, observe: 'response' });\n  }\n\n  delete(id: number): Observable<HttpResponse<{}>> {\n    return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  addDeliveryTypeToCollectionIfMissing(\n    deliveryTypeCollection: IDeliveryType[],\n    ...deliveryTypesToCheck: (IDeliveryType | null | undefined)[]\n  ): IDeliveryType[] {\n    const deliveryTypes: IDeliveryType[] = deliveryTypesToCheck.filter(isPresent);\n    if (deliveryTypes.length > 0) {\n      const deliveryTypeCollectionIdentifiers = deliveryTypeCollection.map(\n        deliveryTypeItem => getDeliveryTypeIdentifier(deliveryTypeItem)!\n      );\n      const deliveryTypesToAdd = deliveryTypes.filter(deliveryTypeItem => {\n        const deliveryTypeIdentifier = getDeliveryTypeIdentifier(deliveryTypeItem);\n        if (deliveryTypeIdentifier == null || deliveryTypeCollectionIdentifiers.includes(deliveryTypeIdentifier)) {\n          return false;\n        }\n        deliveryTypeCollectionIdentifiers.push(deliveryTypeIdentifier);\n        return true;\n      });\n      return [...deliveryTypesToAdd, ...deliveryTypeCollection];\n    }\n    return deliveryTypeCollection;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}