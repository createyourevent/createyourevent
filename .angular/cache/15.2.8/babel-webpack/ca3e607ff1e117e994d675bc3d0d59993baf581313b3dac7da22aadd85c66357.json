{"ast":null,"code":"import { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getChipsIdentifier } from '../chips.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport let ChipsService = /*#__PURE__*/(() => {\n  class ChipsService {\n    constructor(http, applicationConfigService) {\n      this.http = http;\n      this.applicationConfigService = applicationConfigService;\n      this.resourceUrl = this.applicationConfigService.getEndpointFor('api/chips');\n    }\n    create(chips) {\n      return this.http.post(this.resourceUrl, chips, {\n        observe: 'response'\n      });\n    }\n    update(chips) {\n      return this.http.put(`${this.resourceUrl}/${getChipsIdentifier(chips)}`, chips, {\n        observe: 'response'\n      });\n    }\n    partialUpdate(chips) {\n      return this.http.patch(`${this.resourceUrl}/${getChipsIdentifier(chips)}`, chips, {\n        observe: 'response'\n      });\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    addChipsToCollectionIfMissing(chipsCollection, ...chipsToCheck) {\n      const chips = chipsToCheck.filter(isPresent);\n      if (chips.length > 0) {\n        const chipsCollectionIdentifiers = chipsCollection.map(chipsItem => getChipsIdentifier(chipsItem));\n        const chipsToAdd = chips.filter(chipsItem => {\n          const chipsIdentifier = getChipsIdentifier(chipsItem);\n          if (chipsIdentifier == null || chipsCollectionIdentifiers.includes(chipsIdentifier)) {\n            return false;\n          }\n          chipsCollectionIdentifiers.push(chipsIdentifier);\n          return true;\n        });\n        return [...chipsToAdd, ...chipsCollection];\n      }\n      return chipsCollection;\n    }\n  }\n  ChipsService.ɵfac = function ChipsService_Factory(t) {\n    return new (t || ChipsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n  };\n  ChipsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ChipsService,\n    factory: ChipsService.ɵfac,\n    providedIn: 'root'\n  });\n  return ChipsService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}