{"ast":null,"code":"import _defineProperty from \"/home/ceo/mmmm/createyourevent/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"app/core/util/alert.service\";\nimport * as i2 from \"app/core/util/event-manager.service\";\nimport * as i3 from \"@ngx-translate/core\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@ng-bootstrap/ng-bootstrap\";\nfunction AlertErrorComponent_div_2_ngb_alert_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ngb-alert\", 4);\n    i0.ɵɵlistener(\"closed\", function AlertErrorComponent_div_2_ngb_alert_2_Template_ngb_alert_closed_0_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const alert_r1 = i0.ɵɵnextContext().$implicit;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.close(alert_r1));\n    });\n    i0.ɵɵtext(1, \"\\n      \");\n    i0.ɵɵelement(2, \"pre\", 5);\n    i0.ɵɵtext(3, \"\\n    \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const alert_r1 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"type\", alert_r1.type);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"innerHTML\", alert_r1.message, i0.ɵɵsanitizeHtml);\n  }\n}\nfunction AlertErrorComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2);\n    i0.ɵɵtext(1, \"\\n    \");\n    i0.ɵɵtemplate(2, AlertErrorComponent_div_2_ngb_alert_2_Template, 4, 2, \"ngb-alert\", 3);\n    i0.ɵɵtext(3, \"\\n  \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const alert_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.setClasses(alert_r1));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", alert_r1.message);\n  }\n}\nexport class AlertErrorComponent {\n  constructor(alertService, eventManager, translateService) {\n    _defineProperty(this, \"alertService\", void 0);\n    _defineProperty(this, \"eventManager\", void 0);\n    _defineProperty(this, \"alerts\", []);\n    _defineProperty(this, \"errorListener\", void 0);\n    _defineProperty(this, \"httpErrorListener\", void 0);\n    this.alertService = alertService;\n    this.eventManager = eventManager;\n    this.errorListener = eventManager.subscribe('createyoureventApp.error', response => {\n      const errorResponse = response.content;\n      this.addErrorAlert(errorResponse.message, errorResponse.key, errorResponse.params);\n    });\n    this.httpErrorListener = eventManager.subscribe('createyoureventApp.httpError', response => {\n      const httpErrorResponse = response.content;\n      switch (httpErrorResponse.status) {\n        // connection refused, server not reachable\n        case 0:\n          this.addErrorAlert('Server not reachable', 'error.server.not.reachable');\n          break;\n        case 400:\n          {\n            const arr = httpErrorResponse.headers.keys();\n            let errorHeader = null;\n            let entityKey = null;\n            for (const entry of arr) {\n              if (entry.toLowerCase().endsWith('app-error')) {\n                errorHeader = httpErrorResponse.headers.get(entry);\n              } else if (entry.toLowerCase().endsWith('app-params')) {\n                entityKey = httpErrorResponse.headers.get(entry);\n              }\n            }\n            if (errorHeader) {\n              const alertData = entityKey ? {\n                entityName: translateService.instant(`global.menu.entities.${entityKey}`)\n              } : undefined;\n              this.addErrorAlert(errorHeader, errorHeader, alertData);\n            } else if (httpErrorResponse.error !== '' && httpErrorResponse.error.fieldErrors) {\n              const fieldErrors = httpErrorResponse.error.fieldErrors;\n              for (const fieldError of fieldErrors) {\n                if (['Min', 'Max', 'DecimalMin', 'DecimalMax'].includes(fieldError.message)) {\n                  fieldError.message = 'Size';\n                }\n                // convert 'something[14].other[4].id' to 'something[].other[].id' so translations can be written to it\n                const convertedField = fieldError.field.replace(/\\[\\d*\\]/g, '[]');\n                const fieldName = translateService.instant(`createyoureventApp.${fieldError.objectName}.${convertedField}`);\n                this.addErrorAlert(`Error on field \"${fieldName}\"`, `error.${fieldError.message}`, {\n                  fieldName\n                });\n              }\n            } else if (httpErrorResponse.error !== '' && httpErrorResponse.error.message) {\n              this.addErrorAlert(httpErrorResponse.error.detail ?? httpErrorResponse.error.message, httpErrorResponse.error.message, httpErrorResponse.error.params);\n            } else {\n              this.addErrorAlert(httpErrorResponse.error, httpErrorResponse.error);\n            }\n            break;\n          }\n        case 404:\n          this.addErrorAlert('Not found', 'error.url.not.found');\n          break;\n        default:\n          if (httpErrorResponse.error !== '' && httpErrorResponse.error.message) {\n            this.addErrorAlert(httpErrorResponse.error.detail ?? httpErrorResponse.error.message, httpErrorResponse.error.message, httpErrorResponse.error.params);\n          } else {\n            this.addErrorAlert(httpErrorResponse.error, httpErrorResponse.error);\n          }\n      }\n    });\n  }\n  setClasses(alert) {\n    const classes = {\n      'jhi-toast': Boolean(alert.toast)\n    };\n    if (alert.position) {\n      return {\n        ...classes,\n        [alert.position]: true\n      };\n    }\n    return classes;\n  }\n  ngOnDestroy() {\n    this.eventManager.destroy(this.errorListener);\n    this.eventManager.destroy(this.httpErrorListener);\n  }\n  close(alert) {\n    alert.close?.(this.alerts);\n  }\n  addErrorAlert(message, translationKey, translationParams) {\n    this.alertService.addAlert({\n      type: 'danger',\n      message,\n      translationKey,\n      translationParams\n    }, this.alerts);\n  }\n}\n_defineProperty(AlertErrorComponent, \"\\u0275fac\", function AlertErrorComponent_Factory(t) {\n  return new (t || AlertErrorComponent)(i0.ɵɵdirectiveInject(i1.AlertService), i0.ɵɵdirectiveInject(i2.EventManager), i0.ɵɵdirectiveInject(i3.TranslateService));\n});\n_defineProperty(AlertErrorComponent, \"\\u0275cmp\", /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AlertErrorComponent,\n  selectors: [[\"jhi-alert-error\"]],\n  decls: 5,\n  vars: 1,\n  consts: [[\"role\", \"alert\", 1, \"alerts\"], [3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [3, \"ngClass\"], [3, \"type\", \"closed\", 4, \"ngIf\"], [3, \"type\", \"closed\"], [3, \"innerHTML\"]],\n  template: function AlertErrorComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵtext(1, \"\\n  \");\n      i0.ɵɵtemplate(2, AlertErrorComponent_div_2_Template, 4, 2, \"div\", 1);\n      i0.ɵɵtext(3, \"\\n\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(4, \"\\n\");\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", ctx.alerts);\n    }\n  },\n  dependencies: [i4.NgClass, i4.NgForOf, i4.NgIf, i5.NgbAlert],\n  encapsulation: 2\n}));","map":{"version":3,"mappings":"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","names":["i0","AlertErrorComponent","constructor","alertService","eventManager","translateService","errorListener","subscribe","response","errorResponse","content","addErrorAlert","message","key","params","httpErrorListener","httpErrorResponse","status","arr","headers","keys","errorHeader","entityKey","entry","toLowerCase","endsWith","get","alertData","entityName","instant","undefined","error","fieldErrors","fieldError","includes","convertedField","field","replace","fieldName","objectName","detail","setClasses","alert","classes","Boolean","toast","position","ngOnDestroy","destroy","close","alerts","translationKey","translationParams","addAlert","type","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/shared/alert/alert-error.component.html","/home/ceo/mmmm/createyourevent/src/main/webapp/app/shared/alert/alert-error.component.ts"],"sourcesContent":["<div class=\"alerts\" role=\"alert\">\n  <div *ngFor=\"let alert of alerts\" [ngClass]=\"setClasses(alert)\">\n    <ngb-alert *ngIf=\"alert.message\" [type]=\"alert.type\" (closed)=\"close(alert)\">\n      <pre [innerHTML]=\"alert.message\"></pre>\n    </ngb-alert>\n  </div>\n</div>\n","import { Component, OnDestroy } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Subscription } from 'rxjs';\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { AlertError } from './alert-error.model';\nimport { Alert, AlertService } from 'app/core/util/alert.service';\nimport { EventManager, EventWithContent } from 'app/core/util/event-manager.service';\n\n@Component({\n  selector: 'jhi-alert-error',\n  templateUrl: './alert-error.component.html',\n})\nexport class AlertErrorComponent implements OnDestroy {\n  alerts: Alert[] = [];\n  errorListener: Subscription;\n  httpErrorListener: Subscription;\n\n  constructor(private alertService: AlertService, private eventManager: EventManager, translateService: TranslateService) {\n    this.errorListener = eventManager.subscribe('createyoureventApp.error', (response: EventWithContent<unknown> | string) => {\n      const errorResponse = (response as EventWithContent<AlertError>).content;\n      this.addErrorAlert(errorResponse.message, errorResponse.key, errorResponse.params);\n    });\n\n    this.httpErrorListener = eventManager.subscribe('createyoureventApp.httpError', (response: EventWithContent<unknown> | string) => {\n      const httpErrorResponse = (response as EventWithContent<HttpErrorResponse>).content;\n      switch (httpErrorResponse.status) {\n        // connection refused, server not reachable\n        case 0:\n          this.addErrorAlert('Server not reachable', 'error.server.not.reachable');\n          break;\n\n        case 400: {\n          const arr = httpErrorResponse.headers.keys();\n          let errorHeader: string | null = null;\n          let entityKey: string | null = null;\n          for (const entry of arr) {\n            if (entry.toLowerCase().endsWith('app-error')) {\n              errorHeader = httpErrorResponse.headers.get(entry);\n            } else if (entry.toLowerCase().endsWith('app-params')) {\n              entityKey = httpErrorResponse.headers.get(entry);\n            }\n          }\n          if (errorHeader) {\n            const alertData = entityKey ? { entityName: translateService.instant(`global.menu.entities.${entityKey}`) } : undefined;\n            this.addErrorAlert(errorHeader, errorHeader, alertData);\n          } else if (httpErrorResponse.error !== '' && httpErrorResponse.error.fieldErrors) {\n            const fieldErrors = httpErrorResponse.error.fieldErrors;\n            for (const fieldError of fieldErrors) {\n              if (['Min', 'Max', 'DecimalMin', 'DecimalMax'].includes(fieldError.message)) {\n                fieldError.message = 'Size';\n              }\n              // convert 'something[14].other[4].id' to 'something[].other[].id' so translations can be written to it\n              const convertedField: string = fieldError.field.replace(/\\[\\d*\\]/g, '[]');\n              const fieldName: string = translateService.instant(`createyoureventApp.${fieldError.objectName as string}.${convertedField}`);\n              this.addErrorAlert(`Error on field \"${fieldName}\"`, `error.${fieldError.message as string}`, { fieldName });\n            }\n          } else if (httpErrorResponse.error !== '' && httpErrorResponse.error.message) {\n            this.addErrorAlert(\n              httpErrorResponse.error.detail ?? httpErrorResponse.error.message,\n              httpErrorResponse.error.message,\n              httpErrorResponse.error.params\n            );\n          } else {\n            this.addErrorAlert(httpErrorResponse.error, httpErrorResponse.error);\n          }\n          break;\n        }\n\n        case 404:\n          this.addErrorAlert('Not found', 'error.url.not.found');\n          break;\n\n        default:\n          if (httpErrorResponse.error !== '' && httpErrorResponse.error.message) {\n            this.addErrorAlert(\n              httpErrorResponse.error.detail ?? httpErrorResponse.error.message,\n              httpErrorResponse.error.message,\n              httpErrorResponse.error.params\n            );\n          } else {\n            this.addErrorAlert(httpErrorResponse.error, httpErrorResponse.error);\n          }\n      }\n    });\n  }\n\n  setClasses(alert: Alert): { [key: string]: boolean } {\n    const classes = { 'jhi-toast': Boolean(alert.toast) };\n    if (alert.position) {\n      return { ...classes, [alert.position]: true };\n    }\n    return classes;\n  }\n\n  ngOnDestroy(): void {\n    this.eventManager.destroy(this.errorListener);\n    this.eventManager.destroy(this.httpErrorListener);\n  }\n\n  close(alert: Alert): void {\n    alert.close?.(this.alerts);\n  }\n\n  private addErrorAlert(message?: string, translationKey?: string, translationParams?: { [key: string]: unknown }): void {\n    this.alertService.addAlert({ type: 'danger', message, translationKey, translationParams }, this.alerts);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}