{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\nimport { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getServiceLikeDislikeIdentifier } from '../service-like-dislike.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport class ServiceLikeDislikeService {\n  constructor(http, applicationConfigService) {\n    this.http = http;\n    this.applicationConfigService = applicationConfigService;\n    this.resourceUrl = this.applicationConfigService.getEndpointFor('api/service-like-dislikes');\n  }\n  create(serviceLikeDislike) {\n    const copy = this.convertDateFromClient(serviceLikeDislike);\n    return this.http.post(this.resourceUrl, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  update(serviceLikeDislike) {\n    const copy = this.convertDateFromClient(serviceLikeDislike);\n    return this.http.put(`${this.resourceUrl}/${getServiceLikeDislikeIdentifier(serviceLikeDislike)}`, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  partialUpdate(serviceLikeDislike) {\n    const copy = this.convertDateFromClient(serviceLikeDislike);\n    return this.http.patch(`${this.resourceUrl}/${getServiceLikeDislikeIdentifier(serviceLikeDislike)}`, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  find(id) {\n    return this.http.get(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  query(req) {\n    const options = createRequestOption(req);\n    return this.http.get(this.resourceUrl, {\n      params: options,\n      observe: 'response'\n    }).pipe(map(res => this.convertDateArrayFromServer(res)));\n  }\n  delete(id) {\n    return this.http.delete(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  addServiceLikeDislikeToCollectionIfMissing(serviceLikeDislikeCollection, ...serviceLikeDislikesToCheck) {\n    const serviceLikeDislikes = serviceLikeDislikesToCheck.filter(isPresent);\n    if (serviceLikeDislikes.length > 0) {\n      const serviceLikeDislikeCollectionIdentifiers = serviceLikeDislikeCollection.map(serviceLikeDislikeItem => getServiceLikeDislikeIdentifier(serviceLikeDislikeItem));\n      const serviceLikeDislikesToAdd = serviceLikeDislikes.filter(serviceLikeDislikeItem => {\n        const serviceLikeDislikeIdentifier = getServiceLikeDislikeIdentifier(serviceLikeDislikeItem);\n        if (serviceLikeDislikeIdentifier == null || serviceLikeDislikeCollectionIdentifiers.includes(serviceLikeDislikeIdentifier)) {\n          return false;\n        }\n        serviceLikeDislikeCollectionIdentifiers.push(serviceLikeDislikeIdentifier);\n        return true;\n      });\n      return [...serviceLikeDislikesToAdd, ...serviceLikeDislikeCollection];\n    }\n    return serviceLikeDislikeCollection;\n  }\n  convertDateFromClient(serviceLikeDislike) {\n    return Object.assign({}, serviceLikeDislike, {\n      date: serviceLikeDislike.date?.isValid() ? serviceLikeDislike.date.toJSON() : undefined\n    });\n  }\n  convertDateFromServer(res) {\n    if (res.body) {\n      res.body.date = res.body.date ? dayjs(res.body.date) : undefined;\n    }\n    return res;\n  }\n  convertDateArrayFromServer(res) {\n    if (res.body) {\n      res.body.forEach(serviceLikeDislike => {\n        serviceLikeDislike.date = serviceLikeDislike.date ? dayjs(serviceLikeDislike.date) : undefined;\n      });\n    }\n    return res;\n  }\n}\nServiceLikeDislikeService.ɵfac = function ServiceLikeDislikeService_Factory(t) {\n  return new (t || ServiceLikeDislikeService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n};\nServiceLikeDislikeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ServiceLikeDislikeService,\n  factory: ServiceLikeDislikeService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["map","dayjs","isPresent","createRequestOption","getServiceLikeDislikeIdentifier","ServiceLikeDislikeService","constructor","http","applicationConfigService","getEndpointFor","create","serviceLikeDislike","copy","convertDateFromClient","post","resourceUrl","observe","pipe","res","convertDateFromServer","update","put","partialUpdate","patch","find","id","get","query","req","options","params","convertDateArrayFromServer","delete","addServiceLikeDislikeToCollectionIfMissing","serviceLikeDislikeCollection","serviceLikeDislikesToCheck","serviceLikeDislikes","filter","length","serviceLikeDislikeCollectionIdentifiers","serviceLikeDislikeItem","serviceLikeDislikesToAdd","serviceLikeDislikeIdentifier","includes","push","Object","assign","date","isValid","toJSON","undefined","body","forEach","factory","providedIn"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/entities/service-like-dislike/service/service-like-dislike.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\n\nimport { isPresent } from 'app/core/util/operators';\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { IServiceLikeDislike, getServiceLikeDislikeIdentifier } from '../service-like-dislike.model';\n\nexport type EntityResponseType = HttpResponse<IServiceLikeDislike>;\nexport type EntityArrayResponseType = HttpResponse<IServiceLikeDislike[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class ServiceLikeDislikeService {\n  protected resourceUrl = this.applicationConfigService.getEndpointFor('api/service-like-dislikes');\n\n  constructor(protected http: HttpClient, protected applicationConfigService: ApplicationConfigService) {}\n\n  create(serviceLikeDislike: IServiceLikeDislike): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(serviceLikeDislike);\n    return this.http\n      .post<IServiceLikeDislike>(this.resourceUrl, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  update(serviceLikeDislike: IServiceLikeDislike): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(serviceLikeDislike);\n    return this.http\n      .put<IServiceLikeDislike>(`${this.resourceUrl}/${getServiceLikeDislikeIdentifier(serviceLikeDislike) as number}`, copy, {\n        observe: 'response',\n      })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  partialUpdate(serviceLikeDislike: IServiceLikeDislike): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(serviceLikeDislike);\n    return this.http\n      .patch<IServiceLikeDislike>(`${this.resourceUrl}/${getServiceLikeDislikeIdentifier(serviceLikeDislike) as number}`, copy, {\n        observe: 'response',\n      })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  find(id: number): Observable<EntityResponseType> {\n    return this.http\n      .get<IServiceLikeDislike>(`${this.resourceUrl}/${id}`, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  query(req?: any): Observable<EntityArrayResponseType> {\n    const options = createRequestOption(req);\n    return this.http\n      .get<IServiceLikeDislike[]>(this.resourceUrl, { params: options, observe: 'response' })\n      .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n  }\n\n  delete(id: number): Observable<HttpResponse<{}>> {\n    return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  addServiceLikeDislikeToCollectionIfMissing(\n    serviceLikeDislikeCollection: IServiceLikeDislike[],\n    ...serviceLikeDislikesToCheck: (IServiceLikeDislike | null | undefined)[]\n  ): IServiceLikeDislike[] {\n    const serviceLikeDislikes: IServiceLikeDislike[] = serviceLikeDislikesToCheck.filter(isPresent);\n    if (serviceLikeDislikes.length > 0) {\n      const serviceLikeDislikeCollectionIdentifiers = serviceLikeDislikeCollection.map(\n        serviceLikeDislikeItem => getServiceLikeDislikeIdentifier(serviceLikeDislikeItem)!\n      );\n      const serviceLikeDislikesToAdd = serviceLikeDislikes.filter(serviceLikeDislikeItem => {\n        const serviceLikeDislikeIdentifier = getServiceLikeDislikeIdentifier(serviceLikeDislikeItem);\n        if (serviceLikeDislikeIdentifier == null || serviceLikeDislikeCollectionIdentifiers.includes(serviceLikeDislikeIdentifier)) {\n          return false;\n        }\n        serviceLikeDislikeCollectionIdentifiers.push(serviceLikeDislikeIdentifier);\n        return true;\n      });\n      return [...serviceLikeDislikesToAdd, ...serviceLikeDislikeCollection];\n    }\n    return serviceLikeDislikeCollection;\n  }\n\n  protected convertDateFromClient(serviceLikeDislike: IServiceLikeDislike): IServiceLikeDislike {\n    return Object.assign({}, serviceLikeDislike, {\n      date: serviceLikeDislike.date?.isValid() ? serviceLikeDislike.date.toJSON() : undefined,\n    });\n  }\n\n  protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\n    if (res.body) {\n      res.body.date = res.body.date ? dayjs(res.body.date) : undefined;\n    }\n    return res;\n  }\n\n  protected convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\n    if (res.body) {\n      res.body.forEach((serviceLikeDislike: IServiceLikeDislike) => {\n        serviceLikeDislike.date = serviceLikeDislike.date ? dayjs(serviceLikeDislike.date) : undefined;\n      });\n    }\n    return res;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}