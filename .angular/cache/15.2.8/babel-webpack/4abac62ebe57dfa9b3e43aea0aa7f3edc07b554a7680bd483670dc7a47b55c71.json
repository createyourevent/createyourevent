{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\nimport { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getReservationIdentifier } from '../reservation.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport let ReservationService = /*#__PURE__*/(() => {\n  class ReservationService {\n    constructor(http, applicationConfigService) {\n      this.http = http;\n      this.applicationConfigService = applicationConfigService;\n      this.resourceUrl = this.applicationConfigService.getEndpointFor('api/reservations');\n    }\n    create(reservation) {\n      const copy = this.convertDateFromClient(reservation);\n      return this.http.post(this.resourceUrl, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    update(reservation) {\n      const copy = this.convertDateFromClient(reservation);\n      return this.http.put(`${this.resourceUrl}/${getReservationIdentifier(reservation)}`, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    partialUpdate(reservation) {\n      const copy = this.convertDateFromClient(reservation);\n      return this.http.patch(`${this.resourceUrl}/${getReservationIdentifier(reservation)}`, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      }).pipe(map(res => this.convertDateArrayFromServer(res)));\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    addReservationToCollectionIfMissing(reservationCollection, ...reservationsToCheck) {\n      const reservations = reservationsToCheck.filter(isPresent);\n      if (reservations.length > 0) {\n        const reservationCollectionIdentifiers = reservationCollection.map(reservationItem => getReservationIdentifier(reservationItem));\n        const reservationsToAdd = reservations.filter(reservationItem => {\n          const reservationIdentifier = getReservationIdentifier(reservationItem);\n          if (reservationIdentifier == null || reservationCollectionIdentifiers.includes(reservationIdentifier)) {\n            return false;\n          }\n          reservationCollectionIdentifiers.push(reservationIdentifier);\n          return true;\n        });\n        return [...reservationsToAdd, ...reservationCollection];\n      }\n      return reservationCollection;\n    }\n    convertDateFromClient(reservation) {\n      return Object.assign({}, reservation, {\n        date: reservation.date?.isValid() ? reservation.date.toJSON() : undefined,\n        accessDate: reservation.accessDate?.isValid() ? reservation.accessDate.toJSON() : undefined\n      });\n    }\n    convertDateFromServer(res) {\n      if (res.body) {\n        res.body.date = res.body.date ? dayjs(res.body.date) : undefined;\n        res.body.accessDate = res.body.accessDate ? dayjs(res.body.accessDate) : undefined;\n      }\n      return res;\n    }\n    convertDateArrayFromServer(res) {\n      if (res.body) {\n        res.body.forEach(reservation => {\n          reservation.date = reservation.date ? dayjs(reservation.date) : undefined;\n          reservation.accessDate = reservation.accessDate ? dayjs(reservation.accessDate) : undefined;\n        });\n      }\n      return res;\n    }\n  }\n  ReservationService.ɵfac = function ReservationService_Factory(t) {\n    return new (t || ReservationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n  };\n  ReservationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ReservationService,\n    factory: ReservationService.ɵfac,\n    providedIn: 'root'\n  });\n  return ReservationService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}