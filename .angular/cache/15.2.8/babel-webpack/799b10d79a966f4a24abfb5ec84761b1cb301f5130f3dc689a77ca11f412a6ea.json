{"ast":null,"code":"import { HttpResponse } from '@angular/common/http';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"app/core/util/alert.service\";\nexport let NotificationInterceptor = /*#__PURE__*/(() => {\n  class NotificationInterceptor {\n    constructor(alertService) {\n      this.alertService = alertService;\n    }\n    intercept(request, next) {\n      return next.handle(request).pipe(tap(event => {\n        if (event instanceof HttpResponse) {\n          let alert = null;\n          let alertParams = null;\n          for (const headerKey of event.headers.keys()) {\n            if (headerKey.toLowerCase().endsWith('app-alert')) {\n              alert = event.headers.get(headerKey);\n            } else if (headerKey.toLowerCase().endsWith('app-params')) {\n              alertParams = decodeURIComponent(event.headers.get(headerKey).replace(/\\+/g, ' '));\n            }\n          }\n          if (alert) {\n            this.alertService.addAlert({\n              type: 'success',\n              translationKey: alert,\n              translationParams: {\n                param: alertParams\n              }\n            });\n          }\n        }\n      }));\n    }\n  }\n  NotificationInterceptor.ɵfac = function NotificationInterceptor_Factory(t) {\n    return new (t || NotificationInterceptor)(i0.ɵɵinject(i1.AlertService));\n  };\n  NotificationInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NotificationInterceptor,\n    factory: NotificationInterceptor.ɵfac\n  });\n  return NotificationInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}