{"ast":null,"code":"import { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getSlotListCherryIdentifier } from '../slot-list-cherry.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport let SlotListCherryService = /*#__PURE__*/(() => {\n  class SlotListCherryService {\n    constructor(http, applicationConfigService) {\n      this.http = http;\n      this.applicationConfigService = applicationConfigService;\n      this.resourceUrl = this.applicationConfigService.getEndpointFor('api/slot-list-cherries');\n    }\n    create(slotListCherry) {\n      return this.http.post(this.resourceUrl, slotListCherry, {\n        observe: 'response'\n      });\n    }\n    update(slotListCherry) {\n      return this.http.put(`${this.resourceUrl}/${getSlotListCherryIdentifier(slotListCherry)}`, slotListCherry, {\n        observe: 'response'\n      });\n    }\n    partialUpdate(slotListCherry) {\n      return this.http.patch(`${this.resourceUrl}/${getSlotListCherryIdentifier(slotListCherry)}`, slotListCherry, {\n        observe: 'response'\n      });\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    addSlotListCherryToCollectionIfMissing(slotListCherryCollection, ...slotListCherriesToCheck) {\n      const slotListCherries = slotListCherriesToCheck.filter(isPresent);\n      if (slotListCherries.length > 0) {\n        const slotListCherryCollectionIdentifiers = slotListCherryCollection.map(slotListCherryItem => getSlotListCherryIdentifier(slotListCherryItem));\n        const slotListCherriesToAdd = slotListCherries.filter(slotListCherryItem => {\n          const slotListCherryIdentifier = getSlotListCherryIdentifier(slotListCherryItem);\n          if (slotListCherryIdentifier == null || slotListCherryCollectionIdentifiers.includes(slotListCherryIdentifier)) {\n            return false;\n          }\n          slotListCherryCollectionIdentifiers.push(slotListCherryIdentifier);\n          return true;\n        });\n        return [...slotListCherriesToAdd, ...slotListCherryCollection];\n      }\n      return slotListCherryCollection;\n    }\n  }\n  SlotListCherryService.ɵfac = function SlotListCherryService_Factory(t) {\n    return new (t || SlotListCherryService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n  };\n  SlotListCherryService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SlotListCherryService,\n    factory: SlotListCherryService.ɵfac,\n    providedIn: 'root'\n  });\n  return SlotListCherryService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}