{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"app/core/auth/auth-session.service\";\nimport * as i3 from \"./../general.service\";\nexport let LoginService = /*#__PURE__*/(() => {\n  class LoginService {\n    constructor(location, authServerProvider, generalService) {\n      this.location = location;\n      this.authServerProvider = authServerProvider;\n      this.generalService = generalService;\n    }\n    login() {\n      // If you have configured multiple OIDC providers, then, you can update this URL to /login.\n      // It will show a Spring Security generated login page with links to configured OIDC providers.\n      location.href = `${location.origin}${this.location.prepareExternalUrl('oauth2/authorization/oidc')}`;\n    }\n    logout() {\n      this.generalService.findWidthAuthorities().subscribe(u => {\n        u.body.loggedIn = false;\n        if (u.body.points === null) {\n          u.body.points = 0;\n        }\n        this.generalService.updatePointsKeycloak(u.body.points, u.body.id).subscribe(() => {\n          this.generalService.updateUserLoggedInAndPoints(u.body.id, u.body.loggedIn, u.body.points).subscribe(() => {\n            this.authServerProvider.logout().subscribe(logout => {\n              let logoutUrl = logout.logoutUrl;\n              const redirectUri = `${location.origin}${this.location.prepareExternalUrl('/')}`;\n              // if Keycloak, uri has protocol/openid-connect/token\n              if (logoutUrl.includes('/protocol')) {\n                logoutUrl = logoutUrl + '?redirect_uri=' + redirectUri;\n              } else {\n                // Okta\n                logoutUrl = logoutUrl + '?id_token_hint=' + logout.idToken + '&post_logout_redirect_uri=' + redirectUri;\n              }\n              window.location.href = logoutUrl;\n            });\n          });\n        });\n      });\n    }\n  }\n  LoginService.ɵfac = function LoginService_Factory(t) {\n    return new (t || LoginService)(i0.ɵɵinject(i1.Location), i0.ɵɵinject(i2.AuthServerProvider), i0.ɵɵinject(i3.GeneralService));\n  };\n  LoginService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoginService,\n    factory: LoginService.ɵfac,\n    providedIn: 'root'\n  });\n  return LoginService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}