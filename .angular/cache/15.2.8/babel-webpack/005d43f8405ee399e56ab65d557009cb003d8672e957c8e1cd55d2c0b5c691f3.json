{"ast":null,"code":"import { DOCUMENT, CommonModule } from '@angular/common';\nimport { TemplateRef, Injectable, InjectionToken, NgModule, ANALYZE_FOR_ENTRY_COMPONENTS, Inject, Optional, Component, Input, ChangeDetectionStrategy, EventEmitter, Output, Attribute, ViewChild, ElementRef, NgZone, Directive, Renderer2, ViewContainerRef, ComponentFactoryResolver, Injector, ChangeDetectorRef, defineInjectable, inject, INJECTOR } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { __rest } from 'tslib';\nimport { debounceTime, switchMap, distinctUntilChanged, take, startWith, filter, map } from 'rxjs/operators';\nimport { AbstractControl, FormArray, FormGroup, FormControl, FormGroupDirective, Validators } from '@angular/forms';\nimport { isObservable, Subject, of, merge, Observable } from 'rxjs';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} form\n * @param {?} callback\n * @return {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/forms';\nimport * as ɵngcc2 from '@angular/common';\nimport * as ɵngcc3 from '@angular/platform-browser';\nconst _c0 = [\"content\"];\nfunction FormlyForm_formly_field_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"formly-field\", 2);\n    ɵngcc0.ɵɵtext(1, \"\\n    \");\n    ɵngcc0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const field_r2 = ctx.$implicit;\n    ɵngcc0.ɵɵproperty(\"form\", field_r2.form)(\"options\", field_r2.options)(\"model\", field_r2.model)(\"field\", field_r2);\n  }\n}\nconst _c1 = [\"*\"];\nconst _c2 = [\"container\"];\nfunction FormlyField_ng_template_0_Template(rf, ctx) {}\nconst _c3 = [\"fieldComponent\"];\nfunction FormlyGroup_formly_field_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"formly-field\", 1);\n  }\n  if (rf & 2) {\n    const f_r1 = ctx.$implicit;\n    ɵngcc0.ɵɵproperty(\"field\", f_r1);\n  }\n}\nfunction disableTreeValidityCall(form, callback) {\n  /** @type {?} */\n  const _updateTreeValidity = form._updateTreeValidity.bind(form);\n  form._updateTreeValidity =\n  /**\n  * @return {?}\n  */\n  () => {};\n  callback();\n  form._updateTreeValidity = _updateTreeValidity;\n}\n/**\n * @param {?} formId\n * @param {?} field\n * @param {?} index\n * @return {?}\n */\nfunction getFieldId(formId, field, index) {\n  if (field.id) return field.id;\n  /** @type {?} */\n  let type = field.type;\n  if (!type && field.template) {\n    type = 'template';\n  }\n  if (isFunction(type)) {\n    type = /** @type {?} */type.prototype.constructor.name;\n  }\n  return [formId, type, field.key, index].join('_');\n}\n/**\n * @param {?} field\n * @return {?}\n */\nfunction getKeyPath(field) {\n  if (!field.key) {\n    return [];\n  }\n  /* We store the keyPath in the field for performance reasons. This function will be called frequently. */\n  if (!field._keyPath || field._keyPath.key !== field.key) {\n    /** @type {?} */\n    let path = [];\n    if (typeof field.key === 'string') {\n      /** @type {?} */\n      const key = field.key.indexOf('[') === -1 ? field.key : field.key.replace(/\\[(\\w+)\\]/g, '.$1');\n      path = key.indexOf('.') !== -1 ? key.split('.') : [key];\n    } else if (Array.isArray(field.key)) {\n      path = field.key.slice(0);\n    } else {\n      path = [`${field.key}`];\n    }\n    field._keyPath = {\n      key: field.key,\n      path\n    };\n  }\n  return field._keyPath.path.slice(0);\n}\n/** @type {?} */\nconst FORMLY_VALIDATORS = ['required', 'pattern', 'minLength', 'maxLength', 'min', 'max'];\n/**\n * @param {?} field\n * @param {?} value\n * @return {?}\n */\nfunction assignFieldValue(field, value) {\n  /** @type {?} */\n  let paths = getKeyPath(field);\n  if (paths.length === 0) {\n    return;\n  }\n  /** @type {?} */\n  let root = field;\n  while (root.parent) {\n    root = root.parent;\n    paths = [...getKeyPath(root), ...paths];\n  }\n  if (value === undefined && field.resetOnHide) {\n    /** @type {?} */\n    const k = paths.pop();\n    /** @type {?} */\n    const m = paths.reduce(\n    /**\n    * @param {?} model\n    * @param {?} path\n    * @return {?}\n    */\n    (model, path) => model[path] || {}, root.model);\n    delete m[k];\n    return;\n  }\n  assignModelValue(root.model, paths, value);\n}\n/**\n * @param {?} model\n * @param {?} paths\n * @param {?} value\n * @return {?}\n */\nfunction assignModelValue(model, paths, value) {\n  for (let i = 0; i < paths.length - 1; i++) {\n    /** @type {?} */\n    const path = paths[i];\n    if (!model[path] || !isObject(model[path])) {\n      model[path] = /^\\d+$/.test(paths[i + 1]) ? [] : {};\n    }\n    model = model[path];\n  }\n  model[paths[paths.length - 1]] = clone(value);\n}\n/**\n * @param {?} field\n * @return {?}\n */\nfunction getFieldValue(field) {\n  /** @type {?} */\n  let model = field.parent.model;\n  for (const path of getKeyPath(field)) {\n    if (!model) {\n      return model;\n    }\n    model = model[path];\n  }\n  return model;\n}\n/**\n * @param {?} dest\n * @param {...?} args\n * @return {?}\n */\nfunction reverseDeepMerge(dest, ...args) {\n  args.forEach(\n  /**\n  * @param {?} src\n  * @return {?}\n  */\n  src => {\n    for (let srcArg in src) {\n      if (isNullOrUndefined(dest[srcArg]) || isBlankString(dest[srcArg])) {\n        dest[srcArg] = clone(src[srcArg]);\n      } else if (objAndSameType(dest[srcArg], src[srcArg])) {\n        reverseDeepMerge(dest[srcArg], src[srcArg]);\n      }\n    }\n  });\n  return dest;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isNullOrUndefined(value) {\n  return value === undefined || value === null;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isUndefined(value) {\n  return value === undefined;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isBlankString(value) {\n  return value === '';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isFunction(value) {\n  return typeof value === 'function';\n}\n/**\n * @param {?} obj1\n * @param {?} obj2\n * @return {?}\n */\nfunction objAndSameType(obj1, obj2) {\n  return isObject(obj1) && isObject(obj2) && Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2) && !(Array.isArray(obj1) || Array.isArray(obj2));\n}\n/**\n * @param {?} x\n * @return {?}\n */\nfunction isObject(x) {\n  return x != null && typeof x === 'object';\n}\n/**\n * @param {?} obj\n * @return {?}\n */\nfunction isPromise(obj) {\n  return !!obj && typeof obj.then === 'function';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction clone(value) {\n  if (!isObject(value) || isObservable(value) || value instanceof TemplateRef || /* instanceof SafeHtmlImpl */value.changingThisBreaksApplicationSecurity || ['RegExp', 'FileList', 'File', 'Blob'].indexOf(value.constructor.name) !== -1) {\n    return value;\n  }\n  if (value instanceof Set) {\n    return new Set(value);\n  }\n  if (value instanceof Map) {\n    return new Map(value);\n  }\n  // https://github.com/moment/moment/blob/master/moment.js#L252\n  if (value._isAMomentObject && isFunction(value.clone)) {\n    return value.clone();\n  }\n  if (value instanceof AbstractControl) {\n    return null;\n  }\n  if (value instanceof Date) {\n    return new Date(value.getTime());\n  }\n  if (Array.isArray(value)) {\n    return value.slice(0).map(\n    /**\n    * @param {?} v\n    * @return {?}\n    */\n    v => clone(v));\n  }\n  // best way to clone a js object maybe\n  // https://stackoverflow.com/questions/41474986/how-to-clone-a-javascript-es6-class-instance\n  /** @type {?} */\n  const proto = Object.getPrototypeOf(value);\n  /** @type {?} */\n  let c = Object.create(proto);\n  c = Object.setPrototypeOf(c, proto);\n  // need to make a deep copy so we dont use Object.assign\n  // also Object.assign wont copy property descriptor exactly\n  return Object.keys(value).reduce(\n  /**\n  * @param {?} newVal\n  * @param {?} prop\n  * @return {?}\n  */\n  (newVal, prop) => {\n    /** @type {?} */\n    const propDesc = Object.getOwnPropertyDescriptor(value, prop);\n    if (propDesc.get) {\n      Object.defineProperty(newVal, prop, propDesc);\n    } else {\n      newVal[prop] = clone(value[prop]);\n    }\n    return newVal;\n  }, c);\n}\n/**\n * @param {?} field\n * @param {?} prop\n * @param {?} defaultValue\n * @return {?}\n */\nfunction defineHiddenProp(field, prop, defaultValue) {\n  Object.defineProperty(field, prop, {\n    enumerable: false,\n    writable: true,\n    configurable: true\n  });\n  field[prop] = defaultValue;\n}\n/**\n * @template T\n * @param {?} o\n * @param {?} prop\n * @param {?} setFn\n * @return {?}\n */\nfunction wrapProperty(o, prop, setFn) {\n  if (!o._observers) {\n    defineHiddenProp(o, '_observers', {});\n  }\n  if (!o._observers[prop]) {\n    o._observers[prop] = [];\n  }\n  /** @type {?} */\n  let fns = o._observers[prop];\n  if (fns.indexOf(setFn) === -1) {\n    fns.push(setFn);\n    setFn({\n      currentValue: o[prop],\n      firstChange: true\n    });\n    if (fns.length === 1) {\n      defineHiddenProp(o, `___$${prop}`, o[prop]);\n      Object.defineProperty(o, prop, {\n        configurable: true,\n        get:\n        /**\n        * @return {?}\n        */\n        () => o[`___$${prop}`],\n        set:\n        /**\n        * @param {?} currentValue\n        * @return {?}\n        */\n        currentValue => {\n          if (currentValue !== o[`___$${prop}`]) {\n            /** @type {?} */\n            const previousValue = o[`___$${prop}`];\n            o[`___$${prop}`] = currentValue;\n            fns.forEach(\n            /**\n            * @param {?} changeFn\n            * @return {?}\n            */\n            changeFn => changeFn({\n              previousValue,\n              currentValue,\n              firstChange: false\n            }));\n          }\n        }\n      });\n    }\n  }\n  return (\n    /**\n    * @return {?}\n    */\n    () => fns.splice(fns.indexOf(setFn), 1)\n  );\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst FORMLY_CONFIG = new InjectionToken('FORMLY_CONFIG');\n/**\n * Maintains list of formly field directive types. This can be used to register new field templates.\n */\nclass FormlyConfig {\n  constructor() {\n    this.types = {};\n    this.validators = {};\n    this.wrappers = {};\n    this.messages = {};\n    this.templateManipulators = {\n      preWrapper: [],\n      postWrapper: []\n    };\n    this.extras = {\n      checkExpressionOn: 'changeDetectionCheck',\n      lazyRender: false,\n      showError:\n      /**\n      * @param {?} field\n      * @return {?}\n      */\n      function (field) {\n        return field.formControl && field.formControl.invalid && (field.formControl.touched || field.options.parentForm && field.options.parentForm.submitted || !!(field.field.validation && field.field.validation.show));\n      }\n    };\n    this.extensions = {};\n  }\n  /**\n   * @param {?} config\n   * @return {?}\n   */\n  addConfig(config) {\n    if (config.types) {\n      config.types.forEach(\n      /**\n      * @param {?} type\n      * @return {?}\n      */\n      type => this.setType(type));\n    }\n    if (config.validators) {\n      config.validators.forEach(\n      /**\n      * @param {?} validator\n      * @return {?}\n      */\n      validator => this.setValidator(validator));\n    }\n    if (config.wrappers) {\n      config.wrappers.forEach(\n      /**\n      * @param {?} wrapper\n      * @return {?}\n      */\n      wrapper => this.setWrapper(wrapper));\n    }\n    if (config.manipulators) {\n      console.warn(`NgxFormly: passing 'manipulators' config is deprecated, use custom extension instead.`);\n      config.manipulators.forEach(\n      /**\n      * @param {?} manipulator\n      * @return {?}\n      */\n      manipulator => this.setManipulator(manipulator));\n    }\n    if (config.validationMessages) {\n      config.validationMessages.forEach(\n      /**\n      * @param {?} validation\n      * @return {?}\n      */\n      validation => this.addValidatorMessage(validation.name, validation.message));\n    }\n    if (config.extensions) {\n      config.extensions.forEach(\n      /**\n      * @param {?} c\n      * @return {?}\n      */\n      c => this.extensions[c.name] = c.extension);\n    }\n    if (config.extras) {\n      this.extras = Object.assign({}, this.extras, config.extras);\n    }\n  }\n  /**\n   * @param {?} options\n   * @return {?}\n   */\n  setType(options) {\n    if (Array.isArray(options)) {\n      options.forEach(\n      /**\n      * @param {?} option\n      * @return {?}\n      */\n      option => this.setType(option));\n    } else {\n      if (!this.types[options.name]) {\n        this.types[options.name] = /** @type {?} */{\n          name: options.name\n        };\n      }\n      ['component', 'extends', 'defaultOptions', 'wrappers'].forEach(\n      /**\n      * @param {?} prop\n      * @return {?}\n      */\n      prop => {\n        if (options.hasOwnProperty(prop)) {\n          this.types[options.name][prop] = options[prop];\n        }\n      });\n    }\n  }\n  /**\n   * @param {?} name\n   * @return {?}\n   */\n  getType(name) {\n    if (!this.types[name]) {\n      throw new Error(`[Formly Error] The type \"${name}\" could not be found. Please make sure that is registered through the FormlyModule declaration.`);\n    }\n    this.mergeExtendedType(name);\n    return this.types[name];\n  }\n  /**\n   * @param {?=} field\n   * @return {?}\n   */\n  getMergedField(field = {}) {\n    /** @type {?} */\n    const type = this.getType(field.type);\n    if (type.defaultOptions) {\n      reverseDeepMerge(field, type.defaultOptions);\n    }\n    /** @type {?} */\n    const extendDefaults = type.extends && this.getType(type.extends).defaultOptions;\n    if (extendDefaults) {\n      reverseDeepMerge(field, extendDefaults);\n    }\n    if (field && field.optionsTypes) {\n      field.optionsTypes.forEach(\n      /**\n      * @param {?} option\n      * @return {?}\n      */\n      option => {\n        /** @type {?} */\n        const defaultOptions = this.getType(option).defaultOptions;\n        if (defaultOptions) {\n          reverseDeepMerge(field, defaultOptions);\n        }\n      });\n    }\n    /** @type {?} */\n    const componentRef = this.resolveFieldTypeRef(field);\n    if (componentRef && componentRef.instance && componentRef.instance.defaultOptions) {\n      reverseDeepMerge(field, componentRef.instance.defaultOptions);\n    }\n    if (!field.wrappers && type.wrappers) {\n      field.wrappers = [...type.wrappers];\n    }\n  }\n  /**\n   * \\@internal\n   * @param {?=} field\n   * @return {?}\n   */\n  resolveFieldTypeRef(field = {}) {\n    if (!field.type) {\n      return null;\n    }\n    /** @type {?} */\n    const type = this.getType(field.type);\n    if (!type.component || type['_componentRef']) {\n      return type['_componentRef'];\n    }\n    const {\n      _resolver,\n      _injector\n    } = field.parent.options;\n    /** @type {?} */\n    const componentRef = _resolver.resolveComponentFactory(type.component).create(_injector);\n    defineHiddenProp(type, '_componentRef', componentRef);\n    componentRef.destroy();\n    return type['_componentRef'];\n  }\n  /**\n   * @param {?} options\n   * @return {?}\n   */\n  setWrapper(options) {\n    this.wrappers[options.name] = options;\n    if (options.types) {\n      options.types.forEach(\n      /**\n      * @param {?} type\n      * @return {?}\n      */\n      type => {\n        this.setTypeWrapper(type, options.name);\n      });\n    }\n  }\n  /**\n   * @param {?} name\n   * @return {?}\n   */\n  getWrapper(name) {\n    if (!this.wrappers[name]) {\n      throw new Error(`[Formly Error] The wrapper \"${name}\" could not be found. Please make sure that is registered through the FormlyModule declaration.`);\n    }\n    return this.wrappers[name];\n  }\n  /**\n   * @param {?} type\n   * @param {?} name\n   * @return {?}\n   */\n  setTypeWrapper(type, name) {\n    if (!this.types[type]) {\n      this.types[type] = /** @type {?} */{};\n    }\n    if (!this.types[type].wrappers) {\n      this.types[type].wrappers = [];\n    }\n    if (this.types[type].wrappers.indexOf(name) === -1) {\n      this.types[type].wrappers.push(name);\n    }\n  }\n  /**\n   * @param {?} options\n   * @return {?}\n   */\n  setValidator(options) {\n    this.validators[options.name] = options;\n  }\n  /**\n   * @param {?} name\n   * @return {?}\n   */\n  getValidator(name) {\n    if (!this.validators[name]) {\n      throw new Error(`[Formly Error] The validator \"${name}\" could not be found. Please make sure that is registered through the FormlyModule declaration.`);\n    }\n    return this.validators[name];\n  }\n  /**\n   * @param {?} name\n   * @param {?} message\n   * @return {?}\n   */\n  addValidatorMessage(name, message) {\n    this.messages[name] = message;\n  }\n  /**\n   * @param {?} name\n   * @return {?}\n   */\n  getValidatorMessage(name) {\n    return this.messages[name];\n  }\n  /**\n   * @param {?} manipulator\n   * @return {?}\n   */\n  setManipulator(manipulator) {\n    new manipulator.class()[manipulator.method](this);\n  }\n  /**\n   * @private\n   * @param {?} name\n   * @return {?}\n   */\n  mergeExtendedType(name) {\n    if (!this.types[name].extends) {\n      return;\n    }\n    /** @type {?} */\n    const extendedType = this.getType(this.types[name].extends);\n    if (!this.types[name].component) {\n      this.types[name].component = extendedType.component;\n    }\n    if (!this.types[name].wrappers) {\n      this.types[name].wrappers = extendedType.wrappers;\n    }\n  }\n}\nFormlyConfig.ɵfac = function FormlyConfig_Factory(t) {\n  return new (t || FormlyConfig)();\n};\nFormlyConfig.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: FormlyConfig,\n  factory: FormlyConfig.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\nFormlyConfig.ngInjectableDef = defineInjectable({\n  factory: function FormlyConfig_Factory() {\n    return new FormlyConfig();\n  },\n  token: FormlyConfig,\n  providedIn: \"root\"\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormlyConfig, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FormlyFormBuilder {\n  /**\n   * @param {?} formlyConfig\n   * @param {?} componentFactoryResolver\n   * @param {?} injector\n   */\n  constructor(formlyConfig, componentFactoryResolver, injector) {\n    this.formlyConfig = formlyConfig;\n    this.componentFactoryResolver = componentFactoryResolver;\n    this.injector = injector;\n  }\n  /**\n   * @param {?} formControl\n   * @param {?=} fieldGroup\n   * @param {?=} model\n   * @param {?=} options\n   * @return {?}\n   */\n  buildForm(formControl, fieldGroup = [], model, options) {\n    if (!this.formlyConfig.extensions.core) {\n      throw new Error('NgxFormly: missing `forRoot()` call. use `forRoot()` when registering the `FormlyModule`.');\n    }\n    /** @type {?} */\n    const field = {\n      fieldGroup,\n      model,\n      formControl,\n      options: this._setOptions(options)\n    };\n    disableTreeValidityCall(formControl,\n    /**\n    * @return {?}\n    */\n    () => {\n      this._buildForm(field);\n      field.options._checkField(field, true);\n    });\n  }\n  /**\n   * @private\n   * @param {?} field\n   * @return {?}\n   */\n  _buildForm(field) {\n    this.getExtensions().forEach(\n    /**\n    * @param {?} extension\n    * @return {?}\n    */\n    extension => extension.prePopulate && extension.prePopulate(field));\n    this.getExtensions().forEach(\n    /**\n    * @param {?} extension\n    * @return {?}\n    */\n    extension => extension.onPopulate && extension.onPopulate(field));\n    if (field.fieldGroup) {\n      field.fieldGroup.forEach(\n      /**\n      * @param {?} f\n      * @return {?}\n      */\n      f => this._buildForm(f));\n    }\n    this.getExtensions().forEach(\n    /**\n    * @param {?} extension\n    * @return {?}\n    */\n    extension => extension.postPopulate && extension.postPopulate(field));\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n  getExtensions() {\n    return Object.keys(this.formlyConfig.extensions).map(\n    /**\n    * @param {?} name\n    * @return {?}\n    */\n    name => this.formlyConfig.extensions[name]);\n  }\n  /**\n   * @private\n   * @param {?} options\n   * @return {?}\n   */\n  _setOptions(options) {\n    options = options || {};\n    options.formState = options.formState || {};\n    if (!options.showError) {\n      options.showError = this.formlyConfig.extras.showError;\n    }\n    if (!options.fieldChanges) {\n      defineHiddenProp(options, 'fieldChanges', new Subject());\n    }\n    if (!options._resolver) {\n      defineHiddenProp(options, '_resolver', this.componentFactoryResolver);\n    }\n    if (!options._injector) {\n      defineHiddenProp(options, '_injector', this.injector);\n    }\n    if (!options._hiddenFieldsForCheck) {\n      options._hiddenFieldsForCheck = [];\n    }\n    if (!options._markForCheck) {\n      options._markForCheck =\n      /**\n      * @param {?} field\n      * @return {?}\n      */\n      field => {\n        if (field._componentRefs) {\n          field._componentRefs.forEach(\n          /**\n          * @param {?} ref\n          * @return {?}\n          */\n          ref => {\n            // NOTE: we cannot use ref.changeDetectorRef, see https://github.com/ngx-formly/ngx-formly/issues/2191\n            /** @type {?} */\n            const changeDetectorRef = ref.injector.get(ChangeDetectorRef);\n            changeDetectorRef.markForCheck();\n          });\n        }\n        if (field.fieldGroup) {\n          field.fieldGroup.forEach(\n          /**\n          * @param {?} f\n          * @return {?}\n          */\n          f => options._markForCheck(f));\n        }\n      };\n    }\n    if (!options._buildField) {\n      options._buildField =\n      /**\n      * @param {?} field\n      * @return {?}\n      */\n      field => {\n        this._setOptions(field.options);\n        this._buildForm(field);\n        /** @type {?} */field.options._checkField(field, true);\n        return field;\n      };\n    }\n    return options;\n  }\n}\nFormlyFormBuilder.ɵfac = function FormlyFormBuilder_Factory(t) {\n  return new (t || FormlyFormBuilder)(ɵngcc0.ɵɵinject(FormlyConfig), ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(ɵngcc0.Injector));\n};\nFormlyFormBuilder.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: FormlyFormBuilder,\n  factory: FormlyFormBuilder.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\nFormlyFormBuilder.ctorParameters = () => [{\n  type: FormlyConfig\n}, {\n  type: ComponentFactoryResolver\n}, {\n  type: Injector\n}];\n/** @nocollapse */\nFormlyFormBuilder.ngInjectableDef = defineInjectable({\n  factory: function FormlyFormBuilder_Factory() {\n    return new FormlyFormBuilder(inject(FormlyConfig), inject(ComponentFactoryResolver), inject(INJECTOR));\n  },\n  token: FormlyFormBuilder,\n  providedIn: \"root\"\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormlyFormBuilder, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: FormlyConfig\n    }, {\n      type: ɵngcc0.ComponentFactoryResolver\n    }, {\n      type: ɵngcc0.Injector\n    }];\n  }, null);\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} field\n * @param {?=} emitEvent\n * @return {?}\n */\nfunction unregisterControl(field, emitEvent = false) {\n  /** @type {?} */\n  const control = field.formControl;\n  /** @type {?} */\n  const fieldIndex = control['_fields'] ? control['_fields'].indexOf(field) : -1;\n  if (fieldIndex !== -1) {\n    control['_fields'].splice(fieldIndex, 1);\n  }\n  /** @type {?} */\n  const form = /** @type {?} */control.parent;\n  if (!form) {\n    return;\n  }\n  /** @type {?} */\n  const opts = {\n    emitEvent\n  };\n  if (form instanceof FormArray) {\n    /** @type {?} */\n    const key = form.controls.findIndex(\n    /**\n    * @param {?} c\n    * @return {?}\n    */\n    c => c === control);\n    if (key !== -1) {\n      updateControl(form, opts,\n      /**\n      * @return {?}\n      */\n      () => form.removeAt(key));\n    }\n  } else if (form instanceof FormGroup) {\n    /** @type {?} */\n    const paths = getKeyPath(field);\n    /** @type {?} */\n    const key = paths[paths.length - 1];\n    if (form.get([key]) === control) {\n      updateControl(form, opts,\n      /**\n      * @return {?}\n      */\n      () => form.removeControl(key));\n    }\n  }\n  control.setParent(null);\n}\n/**\n * @param {?} field\n * @return {?}\n */\nfunction findControl(field) {\n  if (field.formControl) {\n    return field.formControl;\n  }\n  if (field['shareFormControl'] === false) {\n    return null;\n  }\n  /** @type {?} */\n  const form = /** @type {?} */field.parent.formControl;\n  return form ? form.get(getKeyPath(field)) : null;\n}\n/**\n * @param {?} field\n * @param {?=} control\n * @param {?=} emitEvent\n * @return {?}\n */\nfunction registerControl(field, control, emitEvent = false) {\n  control = control || field.formControl;\n  if (!control['_fields']) {\n    defineHiddenProp(control, '_fields', []);\n  }\n  if (control['_fields'].indexOf(field) === -1) {\n    control['_fields'].push(field);\n  }\n  if (!field.formControl && control) {\n    defineHiddenProp(field, 'formControl', control);\n    control.setValidators(null);\n    control.setAsyncValidators(null);\n    field.templateOptions.disabled = !!field.templateOptions.disabled;\n    wrapProperty(field.templateOptions, 'disabled',\n    /**\n    * @param {?} __0\n    * @return {?}\n    */\n    ({\n      firstChange,\n      currentValue\n    }) => {\n      if (!firstChange) {\n        currentValue ? field.formControl.disable() : field.formControl.enable();\n      }\n    });\n    if (control.registerOnDisabledChange) {\n      control.registerOnDisabledChange(\n      /**\n      * @param {?} value\n      * @return {?}\n      */\n      value => {\n        field.templateOptions['___$disabled'] = value;\n        // TODO remove in V6\n        field.options && field.options._markForCheck(field);\n      });\n    }\n  }\n  /** @type {?} */\n  let parent = /** @type {?} */field.parent.formControl;\n  if (!parent || !field.key) {\n    return;\n  }\n  /** @type {?} */\n  const paths = getKeyPath(field);\n  /** @type {?} */\n  const value = getFieldValue(field);\n  if (!(isNullOrUndefined(control.value) && isNullOrUndefined(value)) && control.value !== value && control instanceof FormControl) {\n    control.patchValue(value);\n  }\n  for (let i = 0; i < paths.length - 1; i++) {\n    /** @type {?} */\n    const path = paths[i];\n    if (!parent.get([path])) {\n      updateControl(parent, {\n        emitEvent\n      },\n      /**\n      * @return {?}\n      */\n      () => parent.setControl(path, new FormGroup({})));\n    }\n    parent = /** @type {?} */parent.get([path]);\n  }\n  /** @type {?} */\n  const key = paths[paths.length - 1];\n  if (!field._hide && parent.get([key]) !== control) {\n    updateControl(parent, {\n      emitEvent\n    },\n    /**\n    * @return {?}\n    */\n    () => parent.setControl(key, control));\n  }\n}\n/**\n * @param {?} c\n * @param {?=} onlySelf\n * @return {?}\n */\nfunction updateValidity(c, onlySelf = false) {\n  /** @type {?} */\n  const status = c.status;\n  /** @type {?} */\n  const value = c.value;\n  c.updateValueAndValidity({\n    emitEvent: false,\n    onlySelf\n  });\n  if (status !== c.status) {\n    /** @type {?} */c.statusChanges.emit(c.status);\n  }\n  if (value !== c.value) {\n    /** @type {?} */c.valueChanges.emit(c.value);\n  }\n}\n/**\n * @param {?} form\n * @param {?} opts\n * @param {?} action\n * @return {?}\n */\nfunction updateControl(form, opts, action) {\n  /**\n   *  workaround for https://github.com/angular/angular/issues/27679\n   */\n  if (form instanceof FormGroup && !form['__patchForEachChild']) {\n    defineHiddenProp(form, '__patchForEachChild', true);\n    /** @type {?} */form._forEachChild =\n    /**\n    * @param {?} cb\n    * @return {?}\n    */\n    cb => {\n      Object.keys(form.controls).forEach(\n      /**\n      * @param {?} k\n      * @return {?}\n      */\n      k => form.controls[k] && cb(form.controls[k], k));\n    };\n  }\n  /**\n   * workaround for https://github.com/angular/angular/issues/20439\n   * @type {?}\n   */\n  const updateValueAndValidity = form.updateValueAndValidity.bind(form);\n  if (opts.emitEvent === false) {\n    form.updateValueAndValidity =\n    /**\n    * @param {?} opts\n    * @return {?}\n    */\n    opts => {\n      updateValueAndValidity(Object.assign({}, opts || {}, {\n        emitEvent: false\n      }));\n    };\n  }\n  action();\n  if (opts.emitEvent === false) {\n    form.updateValueAndValidity = updateValueAndValidity;\n  }\n}\n/**\n * @param {?} form\n * @return {?}\n */\nfunction clearControl(form) {\n  form['_fields'] && delete form['_fields'];\n  form.setValidators(null);\n  form.setAsyncValidators(null);\n  if (form instanceof FormGroup || form instanceof FormArray) {\n    Object.keys(form.controls).forEach(\n    /**\n    * @param {?} k\n    * @return {?}\n    */\n    k => clearControl(form.controls[k]));\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FormlyForm {\n  /**\n   * @param {?} formlyBuilder\n   * @param {?} formlyConfig\n   * @param {?} ngZone\n   * @param {?} immutable\n   * @param {?} parentFormGroup\n   */\n  constructor(formlyBuilder, formlyConfig, ngZone,\n  // tslint:disable-next-line\n  immutable, parentFormGroup) {\n    this.formlyBuilder = formlyBuilder;\n    this.formlyConfig = formlyConfig;\n    this.ngZone = ngZone;\n    this.parentFormGroup = parentFormGroup;\n    this.modelChange = new EventEmitter();\n    this.immutable = false;\n    this._modelChangeValue = {};\n    this.modelChangeSubs = [];\n    this.modelChange$ = new Subject();\n    this.modelChangeSub = this.modelChange$.pipe(switchMap(\n    /**\n    * @return {?}\n    */\n    () => this.ngZone.onStable.asObservable().pipe(take(1)))).subscribe(\n    /**\n    * @return {?}\n    */\n    () => this.ngZone.runGuarded(\n    /**\n    * @return {?}\n    */\n    () => {\n      // runGuarded is used to keep the expression changes in-sync\n      // https://github.com/ngx-formly/ngx-formly/issues/2095\n      this.checkExpressionChange();\n      this.modelChange.emit(this._modelChangeValue = clone(this.model));\n    }));\n    if (immutable !== null) {\n      console.warn(`NgxFormly: passing 'immutable' attribute to 'formly-form' component is deprecated since v5.5, enable immutable mode through NgModule declaration instead.`);\n    }\n    this.immutable = immutable !== null || !!formlyConfig.extras.immutable;\n  }\n  /**\n   * @param {?} model\n   * @return {?}\n   */\n  set model(model) {\n    this._model = this.immutable ? clone(model) : model;\n  }\n  /**\n   * @return {?}\n   */\n  get model() {\n    if (!this._model) {\n      this._model = {};\n    }\n    return this._model;\n  }\n  /**\n   * @param {?} fields\n   * @return {?}\n   */\n  set fields(fields) {\n    this._fields = this.immutable ? clone(fields) : fields;\n  }\n  /**\n   * @return {?}\n   */\n  get fields() {\n    return this._fields || [];\n  }\n  /**\n   * @param {?} options\n   * @return {?}\n   */\n  set options(options) {\n    this._options = this.immutable ? clone(options) : options;\n  }\n  /**\n   * @return {?}\n   */\n  get options() {\n    return this._options;\n  }\n  /**\n   * @param {?} content\n   * @return {?}\n   */\n  set content(content) {\n    if (content) {\n      /** @type {?} */\n      let hasContent = false;\n      /** @type {?} */\n      let node = content.nativeElement.nextSibling;\n      while (node && !hasContent) {\n        if (node.nodeType === Node.ELEMENT_NODE || node.nodeType === Node.TEXT_NODE && node.textContent && node.textContent.trim() !== '') {\n          hasContent = true;\n        }\n        node = node.nextSibling;\n      }\n      if (hasContent) {\n        console.warn(`NgxFormly: content projection for 'formly-form' component is deprecated since v5.5, you should avoid passing content inside the 'formly-form' tag.`);\n      }\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngDoCheck() {\n    if (this.formlyConfig.extras.checkExpressionOn === 'changeDetectionCheck') {\n      this.checkExpressionChange();\n    }\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n  ngOnChanges(changes) {\n    // https://github.com/ngx-formly/ngx-formly/issues/2294\n    if (changes.model && this.field) {\n      this.field.model = this.model;\n    }\n    if (changes.fields && this.form) {\n      clearControl(this.form);\n    }\n    if (changes.fields || changes.form || changes.model && this._modelChangeValue !== changes.model.currentValue) {\n      this.form = this.form || new FormGroup({});\n      this.setOptions();\n      this.options.updateInitialValue();\n      this.clearModelSubscriptions();\n      this.formlyBuilder.buildForm(this.form, this.fields, this.model, this.options);\n      this.trackModelChanges(this.fields);\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this.modelChangeSub.unsubscribe();\n    this.clearModelSubscriptions();\n  }\n  /**\n   * @param {?} __0\n   * @return {?}\n   */\n  changeModel({\n    key,\n    value,\n    field\n  }) {\n    assignFieldValue(field, value);\n    this.modelChange$.next();\n  }\n  /**\n   * @return {?}\n   */\n  setOptions() {\n    if (!this.options) {\n      this.options = {};\n    }\n    if (!this.options.resetModel) {\n      this.options.resetModel =\n      /**\n      * @param {?=} model\n      * @return {?}\n      */\n      model => {\n        model = clone(isNullOrUndefined(model) ? /** @type {?} */this.options._initialModel : model);\n        if (this.model) {\n          Object.keys(this.model).forEach(\n          /**\n          * @param {?} k\n          * @return {?}\n          */\n          k => delete this.model[k]);\n          Object.assign(this.model, model || {});\n        }\n        /** @type {?} */this.options._buildForm();\n        // we should call `NgForm::resetForm` to ensure changing `submitted` state after resetting form\n        // but only when the current component is a root one.\n        if (this.options.parentForm && this.options.parentForm.control === this.form) {\n          this.options.parentForm.resetForm(this.model);\n        } else {\n          this.form.reset(this.model);\n        }\n      };\n    }\n    if (!this.options.parentForm && this.parentFormGroup) {\n      defineHiddenProp(this.options, 'parentForm', this.parentFormGroup);\n      wrapProperty(this.options.parentForm, 'submitted',\n      /**\n      * @param {?} __0\n      * @return {?}\n      */\n      ({\n        firstChange\n      }) => {\n        if (!firstChange) {\n          this.checkExpressionChange();\n          /** @type {?} */this.options._markForCheck({\n            fieldGroup: this.fields,\n            model: this.model,\n            formControl: this.form,\n            options: this.options\n          });\n        }\n      });\n    }\n    if (!this.options.updateInitialValue) {\n      this.options.updateInitialValue =\n      /**\n      * @return {?}\n      */\n      () => /** @type {?} */this.options._initialModel = clone(this.model);\n    }\n    if (! /** @type {?} */this.options._buildForm) {\n      /** @type {?} */this.options._buildForm =\n      /**\n      * @param {?=} emitModelChange\n      * @return {?}\n      */\n      (emitModelChange = false) => {\n        this.clearModelSubscriptions();\n        this.formlyBuilder.buildForm(this.form, this.fields, this.model, this.options);\n        this.trackModelChanges(this.fields);\n        if (emitModelChange) {\n          this.modelChange.emit(this._modelChangeValue = clone(this.model));\n        }\n      };\n    }\n    if (! /** @type {?} */this.options._trackModelChanges) {\n      /** @type {?} */this.options._trackModelChanges =\n      /**\n      * @param {?=} emitModelChange\n      * @return {?}\n      */\n      (emitModelChange = false) => {\n        this.clearModelSubscriptions();\n        this.trackModelChanges(this.fields);\n        if (emitModelChange) {\n          this.modelChange.emit(this._modelChangeValue = clone(this.model));\n        }\n      };\n    }\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n  checkExpressionChange() {\n    if (this.options && /** @type {?} */this.options._checkField) {\n      /** @type {?} */this.options._checkField({\n        fieldGroup: this.fields,\n        model: this.model,\n        formControl: this.form,\n        options: this.options\n      });\n    }\n  }\n  /**\n   * @private\n   * @param {?} fields\n   * @param {?=} rootKey\n   * @return {?}\n   */\n  trackModelChanges(fields, rootKey = []) {\n    fields.forEach(\n    /**\n    * @param {?} field\n    * @return {?}\n    */\n    field => {\n      if (field.key && !field.fieldGroup && field.formControl) {\n        /** @type {?} */\n        const control = field.formControl;\n        /** @type {?} */\n        let valueChanges = control.valueChanges.pipe(distinctUntilChanged(\n        /**\n        * @param {?} x\n        * @param {?} y\n        * @return {?}\n        */\n        (x, y) => {\n          if (x !== y || Array.isArray(x) || isObject(x)) {\n            return false;\n          }\n          return true;\n        }));\n        const {\n          updateOn,\n          debounce\n        } = field.modelOptions;\n        if ((!updateOn || updateOn === 'change') && debounce && debounce.default > 0) {\n          valueChanges = control.valueChanges.pipe(debounceTime(debounce.default));\n        }\n        this.modelChangeSubs.push(valueChanges.subscribe(\n        /**\n        * @param {?} value\n        * @return {?}\n        */\n        value => {\n          // workaround for https://github.com/angular/angular/issues/13792\n          if (control instanceof FormControl && control['_fields'] && control['_fields'].length > 1) {\n            control.patchValue(value, {\n              emitEvent: false,\n              onlySelf: true\n            });\n          }\n          if (field.parsers && field.parsers.length > 0) {\n            field.parsers.forEach(\n            /**\n            * @param {?} parserFn\n            * @return {?}\n            */\n            parserFn => value = parserFn(value));\n          }\n          this.changeModel({\n            key: [...rootKey, ...getKeyPath(field)].join('.'),\n            value,\n            field\n          });\n        }));\n        // workaround for v5 (https://github.com/ngx-formly/ngx-formly/issues/2061)\n        /** @type {?} */\n        const observers = control.valueChanges['observers'];\n        if (observers && observers.length > 1) {\n          observers.unshift(observers.pop());\n        }\n      }\n      if (field.fieldGroup && field.fieldGroup.length > 0) {\n        this.trackModelChanges(field.fieldGroup, field.key ? [...rootKey, ...getKeyPath(field)] : rootKey);\n      }\n    });\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n  clearModelSubscriptions() {\n    this.modelChangeSubs.forEach(\n    /**\n    * @param {?} sub\n    * @return {?}\n    */\n    sub => sub.unsubscribe());\n    this.modelChangeSubs = [];\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n  get field() {\n    return this.fields && this.fields[0] && this.fields[0].parent;\n  }\n}\nFormlyForm.ɵfac = function FormlyForm_Factory(t) {\n  return new (t || FormlyForm)(ɵngcc0.ɵɵdirectiveInject(FormlyFormBuilder), ɵngcc0.ɵɵdirectiveInject(FormlyConfig), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵinjectAttribute('immutable'), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FormGroupDirective, 8));\n};\nFormlyForm.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: FormlyForm,\n  selectors: [[\"formly-form\"]],\n  viewQuery: function FormlyForm_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.content = _t.first);\n    }\n  },\n  inputs: {\n    model: \"model\",\n    fields: \"fields\",\n    options: \"options\",\n    form: \"form\"\n  },\n  outputs: {\n    modelChange: \"modelChange\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([FormlyFormBuilder]), ɵngcc0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c1,\n  decls: 9,\n  vars: 1,\n  consts: [[\"hide-deprecation\", \"\", 3, \"form\", \"options\", \"model\", \"field\", 4, \"ngFor\", \"ngForOf\"], [\"content\", \"\"], [\"hide-deprecation\", \"\", 3, \"form\", \"options\", \"model\", \"field\"]],\n  template: function FormlyForm_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵtext(0, \"\\n    \");\n      ɵngcc0.ɵɵtemplate(1, FormlyForm_formly_field_1_Template, 2, 4, \"formly-field\", 0);\n      ɵngcc0.ɵɵtext(2, \"\\n    \");\n      ɵngcc0.ɵɵelementContainerStart(3, null, 1);\n      ɵngcc0.ɵɵtext(5, \"\\n      \");\n      ɵngcc0.ɵɵprojection(6);\n      ɵngcc0.ɵɵtext(7, \"\\n    \");\n      ɵngcc0.ɵɵelementContainerEnd();\n      ɵngcc0.ɵɵtext(8, \"\\n  \");\n    }\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.fields);\n    }\n  },\n  dependencies: function () {\n    return [ɵngcc2.NgForOf, FormlyField];\n  },\n  encapsulation: 2\n});\n/** @nocollapse */\nFormlyForm.ctorParameters = () => [{\n  type: FormlyFormBuilder\n}, {\n  type: FormlyConfig\n}, {\n  type: NgZone\n}, {\n  type: undefined,\n  decorators: [{\n    type: Attribute,\n    args: ['immutable']\n  }]\n}, {\n  type: FormGroupDirective,\n  decorators: [{\n    type: Optional\n  }]\n}];\nFormlyForm.propDecorators = {\n  form: [{\n    type: Input\n  }],\n  model: [{\n    type: Input\n  }],\n  fields: [{\n    type: Input\n  }],\n  options: [{\n    type: Input\n  }],\n  modelChange: [{\n    type: Output\n  }],\n  content: [{\n    type: ViewChild,\n    args: ['content']\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormlyForm, [{\n    type: Component,\n    args: [{\n      selector: 'formly-form',\n      template: `\n    <formly-field *ngFor=\"let field of fields\"\n      hide-deprecation\n      [form]=\"field.form\"\n      [options]=\"field.options\"\n      [model]=\"field.model\"\n      [field]=\"field\">\n    </formly-field>\n    <ng-container #content>\n      <ng-content></ng-content>\n    </ng-container>\n  `,\n      providers: [FormlyFormBuilder]\n    }]\n  }], function () {\n    return [{\n      type: FormlyFormBuilder\n    }, {\n      type: FormlyConfig\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Attribute,\n        args: ['immutable']\n      }]\n    }, {\n      type: ɵngcc1.FormGroupDirective,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    modelChange: [{\n      type: Output\n    }],\n    model: [{\n      type: Input\n    }],\n    fields: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }],\n    content: [{\n      type: ViewChild,\n      args: ['content']\n    }],\n    form: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FormlyField {\n  /**\n   * @param {?} formlyConfig\n   * @param {?} renderer\n   * @param {?} resolver\n   * @param {?} elementRef\n   * @param {?} hideDeprecation\n   */\n  constructor(formlyConfig, renderer, resolver, elementRef,\n  // tslint:disable-next-line\n  hideDeprecation) {\n    this.formlyConfig = formlyConfig;\n    this.renderer = renderer;\n    this.resolver = resolver;\n    this.elementRef = elementRef;\n    this.warnDeprecation = false;\n    this.modelChange = new EventEmitter();\n    this.hostObservers = [];\n    this.componentRefs = [];\n    this.hooksObservers = [];\n    this.detectFieldBuild = false;\n    this.warnDeprecation = hideDeprecation === null;\n  }\n  /**\n   * @param {?} m\n   * @return {?}\n   */\n  set model(m) {\n    this.warnDeprecation && console.warn(`NgxFormly: passing 'model' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);\n  }\n  /**\n   * @param {?} form\n   * @return {?}\n   */\n  set form(form) {\n    this.warnDeprecation && console.warn(`NgxFormly: passing 'form' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);\n  }\n  /**\n   * @param {?} options\n   * @return {?}\n   */\n  set options(options) {\n    this.warnDeprecation && console.warn(`NgxFormly: passing 'options' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterContentInit() {\n    this.triggerHook('afterContentInit');\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterContentChecked() {\n    this.triggerHook('afterContentChecked');\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterViewInit() {\n    this.triggerHook('afterViewInit');\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterViewChecked() {\n    this.triggerHook('afterViewChecked');\n  }\n  /**\n   * @return {?}\n   */\n  ngDoCheck() {\n    this.triggerHook('doCheck');\n    if (this.detectFieldBuild && this.field && this.field.options) {\n      this.render();\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnInit() {\n    this.triggerHook('onInit');\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n  ngOnChanges(changes) {\n    this.triggerHook('onChanges', changes);\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this.resetRefs(this.field);\n    this.hostObservers.forEach(\n    /**\n    * @param {?} unsubscribe\n    * @return {?}\n    */\n    unsubscribe => unsubscribe());\n    this.hooksObservers.forEach(\n    /**\n    * @param {?} unsubscribe\n    * @return {?}\n    */\n    unsubscribe => unsubscribe());\n    this.triggerHook('onDestroy');\n  }\n  /**\n   * @private\n   * @param {?} containerRef\n   * @param {?} f\n   * @param {?=} wrappers\n   * @return {?}\n   */\n  renderField(containerRef, f, wrappers = []) {\n    if (this.containerRef === containerRef) {\n      this.resetRefs(this.field);\n      this.containerRef.clear();\n      wrappers = this.field ? this.field.wrappers : [];\n    }\n    if (wrappers && wrappers.length > 0) {\n      const [wrapper, ...wps] = wrappers;\n      const {\n        component\n      } = this.formlyConfig.getWrapper(wrapper);\n      /** @type {?} */\n      const ref = containerRef.createComponent(this.resolver.resolveComponentFactory(component));\n      this.attachComponentRef(ref, f);\n      wrapProperty(ref.instance, 'fieldComponent',\n      /**\n      * @param {?} __0\n      * @return {?}\n      */\n      ({\n        firstChange,\n        previousValue,\n        currentValue\n      }) => {\n        if (currentValue) {\n          if (previousValue && previousValue['_lContainer'] === currentValue['_lContainer']) {\n            return;\n          }\n          /** @type {?} */\n          const viewRef = previousValue ? previousValue.detach() : null;\n          if (viewRef && !viewRef.destroyed) {\n            currentValue.insert(viewRef);\n          } else {\n            this.renderField(currentValue, f, wps);\n          }\n          !firstChange && ref.changeDetectorRef.detectChanges();\n        }\n      });\n    } else if (f && f.type) {\n      const {\n        component\n      } = this.formlyConfig.getType(f.type);\n      /** @type {?} */\n      const ref = containerRef.createComponent(this.resolver.resolveComponentFactory(component));\n      this.attachComponentRef(ref, f);\n    }\n  }\n  /**\n   * @private\n   * @param {?} name\n   * @param {?=} changes\n   * @return {?}\n   */\n  triggerHook(name, changes) {\n    if (this.field && this.field.hooks && this.field.hooks[name]) {\n      if (!changes || changes.field) {\n        /** @type {?} */\n        const r = this.field.hooks[name](this.field);\n        if (isObservable(r) && ['onInit', 'afterContentInit', 'afterViewInit'].indexOf(name) !== -1) {\n          /** @type {?} */\n          const sub = r.subscribe();\n          this.hooksObservers.push(\n          /**\n          * @return {?}\n          */\n          () => sub.unsubscribe());\n        }\n      }\n    }\n    if (this.field && this.field.lifecycle && this.field.lifecycle[name]) {\n      this.field.lifecycle[name](this.field.form, this.field, this.field.model, this.field.options);\n    }\n    if (name === 'onChanges' && changes.field) {\n      this.resetRefs(changes.field.previousValue);\n      this.render();\n    }\n  }\n  /**\n   * @private\n   * @template T\n   * @param {?} ref\n   * @param {?} field\n   * @return {?}\n   */\n  attachComponentRef(ref, field) {\n    this.componentRefs.push(ref);\n    field._componentRefs.push(ref);\n    Object.assign(ref.instance, {\n      field\n    });\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n  render() {\n    if (!this.field) {\n      return;\n    }\n    // require Formly build\n    if (!this.field.options) {\n      this.detectFieldBuild = true;\n      return;\n    }\n    this.detectFieldBuild = false;\n    this.hostObservers.forEach(\n    /**\n    * @param {?} unsubscribe\n    * @return {?}\n    */\n    unsubscribe => unsubscribe());\n    this.hostObservers = [wrapProperty(this.field, 'hide',\n    /**\n    * @param {?} __0\n    * @return {?}\n    */\n    ({\n      firstChange,\n      currentValue\n    }) => {\n      if (!firstChange || firstChange && currentValue) {\n        this.renderer.setStyle(this.elementRef.nativeElement, 'display', currentValue ? 'none' : '');\n      }\n      if (!this.formlyConfig.extras.lazyRender) {\n        firstChange && this.renderField(this.containerRef, this.field);\n      } else {\n        if (currentValue) {\n          this.containerRef.clear();\n          if (this.field.className) {\n            this.renderer.removeAttribute(this.elementRef.nativeElement, 'class');\n          }\n        } else {\n          this.renderField(this.containerRef, this.field);\n          if (this.field.className) {\n            this.renderer.setAttribute(this.elementRef.nativeElement, 'class', this.field.className);\n          }\n        }\n      }\n    }), wrapProperty(this.field, 'className',\n    /**\n    * @param {?} __0\n    * @return {?}\n    */\n    ({\n      firstChange,\n      currentValue\n    }) => {\n      if ((!firstChange || firstChange && currentValue) && (!this.formlyConfig.extras.lazyRender || this.field.hide !== true)) {\n        this.renderer.setAttribute(this.elementRef.nativeElement, 'class', currentValue);\n      }\n    })];\n  }\n  /**\n   * @private\n   * @param {?} field\n   * @return {?}\n   */\n  resetRefs(field) {\n    if (field) {\n      if (field._componentRefs) {\n        field._componentRefs = field._componentRefs.filter(\n        /**\n        * @param {?} ref\n        * @return {?}\n        */\n        ref => this.componentRefs.indexOf(ref) === -1);\n      } else {\n        defineHiddenProp(this.field, '_componentRefs', []);\n      }\n    }\n    this.componentRefs = [];\n  }\n}\nFormlyField.ɵfac = function FormlyField_Factory(t) {\n  return new (t || FormlyField)(ɵngcc0.ɵɵdirectiveInject(FormlyConfig), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵinjectAttribute('hide-deprecation'));\n};\nFormlyField.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: FormlyField,\n  selectors: [[\"formly-field\"]],\n  viewQuery: function FormlyField_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c2, 7, ViewContainerRef);\n    }\n    if (rf & 2) {\n      let _t;\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.containerRef = _t.first);\n    }\n  },\n  inputs: {\n    model: \"model\",\n    form: \"form\",\n    options: \"options\",\n    field: \"field\"\n  },\n  outputs: {\n    modelChange: \"modelChange\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 0,\n  consts: [[\"container\", \"\"]],\n  template: function FormlyField_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, FormlyField_ng_template_0_Template, 0, 0, \"ng-template\", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);\n    }\n  },\n  encapsulation: 2\n});\n/** @nocollapse */\nFormlyField.ctorParameters = () => [{\n  type: FormlyConfig\n}, {\n  type: Renderer2\n}, {\n  type: ComponentFactoryResolver\n}, {\n  type: ElementRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Attribute,\n    args: ['hide-deprecation']\n  }]\n}];\nFormlyField.propDecorators = {\n  field: [{\n    type: Input\n  }],\n  model: [{\n    type: Input\n  }],\n  form: [{\n    type: Input\n  }],\n  options: [{\n    type: Input\n  }],\n  modelChange: [{\n    type: Output\n  }],\n  containerRef: [{\n    type: ViewChild,\n    args: ['container', /** @type {?} */{\n      read: ViewContainerRef,\n      static: true\n    }]\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormlyField, [{\n    type: Component,\n    args: [{\n      selector: 'formly-field',\n      template: `<ng-template #container></ng-template>`\n    }]\n  }], function () {\n    return [{\n      type: FormlyConfig\n    }, {\n      type: ɵngcc0.Renderer2\n    }, {\n      type: ɵngcc0.ComponentFactoryResolver\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Attribute,\n        args: ['hide-deprecation']\n      }]\n    }];\n  }, {\n    modelChange: [{\n      type: Output\n    }],\n    model: [{\n      type: Input\n    }],\n    form: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }],\n    field: [{\n      type: Input\n    }],\n    containerRef: [{\n      type: ViewChild,\n      args: ['container', /** @type {?} */{\n        read: ViewContainerRef,\n        static: true\n      }]\n    }]\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FormlyAttributes {\n  /**\n   * @param {?} renderer\n   * @param {?} elementRef\n   * @param {?} _document\n   */\n  constructor(renderer, elementRef, _document) {\n    this.renderer = renderer;\n    this.elementRef = elementRef;\n    this.uiAttributesCache = {};\n    this.uiAttributes = null;\n    /**\n     * HostBinding doesn't register listeners conditionally which may produce some perf issues.\n     *\n     * Formly issue: https://github.com/ngx-formly/ngx-formly/issues/1991\n     */\n    this.uiEvents = {\n      listeners: [],\n      events: ['click', 'keyup', 'keydown', 'keypress', 'focus', 'blur', 'change'],\n      callback:\n      /**\n      * @param {?} eventName\n      * @param {?} $event\n      * @return {?}\n      */\n      (eventName, $event) => {\n        switch (eventName) {\n          case 'focus':\n            return this.onFocus($event);\n          case 'blur':\n            return this.onBlur($event);\n          case 'change':\n            return this.onChange($event);\n          default:\n            return this.to[eventName](this.field, $event);\n        }\n      }\n    };\n    this.document = _document;\n  }\n  /**\n   * @return {?}\n   */\n  get to() {\n    return this.field.templateOptions || {};\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n  get fieldAttrElements() {\n    return this.field && this.field['_elementRefs'] || [];\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n  ngOnChanges(changes) {\n    if (changes.field) {\n      this.field.name && this.setAttribute('name', this.field.name);\n      this.uiEvents.listeners.forEach(\n      /**\n      * @param {?} listener\n      * @return {?}\n      */\n      listener => listener());\n      this.uiEvents.events.forEach(\n      /**\n      * @param {?} eventName\n      * @return {?}\n      */\n      eventName => {\n        if (this.to && this.to[eventName] || ['focus', 'blur', 'change'].indexOf(eventName) !== -1) {\n          this.uiEvents.listeners.push(this.renderer.listen(this.elementRef.nativeElement, eventName,\n          /**\n          * @param {?} e\n          * @return {?}\n          */\n          e => this.uiEvents.callback(eventName, e)));\n        }\n      });\n      if (this.to && this.to.attributes) {\n        wrapProperty(this.to, 'attributes',\n        /**\n        * @param {?} __0\n        * @return {?}\n        */\n        ({\n          currentValue,\n          previousValue\n        }) => {\n          if (previousValue) {\n            Object.keys(previousValue).forEach(\n            /**\n            * @param {?} attr\n            * @return {?}\n            */\n            attr => this.removeAttribute(attr));\n          }\n          if (currentValue) {\n            Object.keys(currentValue).forEach(\n            /**\n            * @param {?} attr\n            * @return {?}\n            */\n            attr => {\n              if (currentValue[attr] != null) {\n                this.setAttribute(attr, currentValue[attr]);\n              }\n            });\n          }\n        });\n      }\n      this.detachElementRef(changes.field.previousValue);\n      this.attachElementRef(changes.field.currentValue);\n      if (this.fieldAttrElements.length === 1) {\n        !this.id && this.field.id && this.setAttribute('id', this.field.id);\n        wrapProperty(this.field, 'focus',\n        /**\n        * @param {?} __0\n        * @return {?}\n        */\n        ({\n          currentValue\n        }) => {\n          this.toggleFocus(currentValue);\n        });\n      }\n    }\n    if (changes.id) {\n      this.setAttribute('id', this.id);\n    }\n  }\n  /**\n   * We need to re-evaluate all the attributes on every change detection cycle, because\n   * by using a HostBinding we run into certain edge cases. This means that whatever logic\n   * is in here has to be super lean or we risk seriously damaging or destroying the performance.\n   *\n   * Formly issue: https://github.com/ngx-formly/ngx-formly/issues/1317\n   * Material issue: https://github.com/angular/components/issues/14024\n   * @return {?}\n   */\n  ngDoCheck() {\n    if (!this.uiAttributes) {\n      /** @type {?} */\n      const element = /** @type {?} */this.elementRef.nativeElement;\n      this.uiAttributes = [...FORMLY_VALIDATORS, 'tabindex', 'placeholder', 'readonly', 'disabled', 'step'].filter(\n      /**\n      * @param {?} attr\n      * @return {?}\n      */\n      attr => !element.hasAttribute || !element.hasAttribute(attr));\n    }\n    this.uiAttributes.forEach(\n    /**\n    * @param {?} attr\n    * @return {?}\n    */\n    attr => {\n      /** @type {?} */\n      const value = this.to[attr];\n      if (this.uiAttributesCache[attr] !== value && (!this.to.attributes || !this.to.attributes.hasOwnProperty(attr.toLowerCase()))) {\n        this.uiAttributesCache[attr] = value;\n        if (value || value === 0) {\n          this.setAttribute(attr, value === true ? attr : `${value}`);\n        } else {\n          this.removeAttribute(attr);\n        }\n      }\n    });\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this.uiEvents.listeners.forEach(\n    /**\n    * @param {?} listener\n    * @return {?}\n    */\n    listener => listener());\n    this.detachElementRef(this.field);\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  toggleFocus(value) {\n    /** @type {?} */\n    const element = this.fieldAttrElements ? this.fieldAttrElements[0] : null;\n    if (!element || !element.nativeElement.focus) {\n      return;\n    }\n    /** @type {?} */\n    const isFocused = !!this.document.activeElement && this.fieldAttrElements.some(\n    /**\n    * @param {?} __0\n    * @return {?}\n    */\n    ({\n      nativeElement\n    }) => this.document.activeElement === nativeElement || nativeElement.contains(this.document.activeElement));\n    if (value && !isFocused) {\n      Promise.resolve().then(\n      /**\n      * @return {?}\n      */\n      () => element.nativeElement.focus());\n    } else if (!value && isFocused) {\n      Promise.resolve().then(\n      /**\n      * @return {?}\n      */\n      () => element.nativeElement.blur());\n    }\n  }\n  /**\n   * @param {?} $event\n   * @return {?}\n   */\n  onFocus($event) {\n    this.field['___$focus'] = true;\n    if (this.to.focus) {\n      this.to.focus(this.field, $event);\n    }\n  }\n  /**\n   * @param {?} $event\n   * @return {?}\n   */\n  onBlur($event) {\n    this.field['___$focus'] = false;\n    if (this.to.blur) {\n      this.to.blur(this.field, $event);\n    }\n  }\n  // handle custom `change` event, for regular ones rely on DOM listener\n  /**\n   * @param {?} $event\n   * @return {?}\n   */\n  onHostChange($event) {\n    if ($event instanceof Event) {\n      return;\n    }\n    this.onChange($event);\n  }\n  /**\n   * @param {?} $event\n   * @return {?}\n   */\n  onChange($event) {\n    if (this.to.change) {\n      this.to.change(this.field, $event);\n    }\n    if (this.field.formControl) {\n      this.field.formControl.markAsDirty();\n    }\n  }\n  /**\n   * @private\n   * @param {?} f\n   * @return {?}\n   */\n  attachElementRef(f) {\n    if (!f) {\n      return;\n    }\n    if (f['_elementRefs'] && f['_elementRefs'].indexOf(this.elementRef) === -1) {\n      f['_elementRefs'].push(this.elementRef);\n    } else {\n      defineHiddenProp(f, '_elementRefs', [this.elementRef]);\n    }\n  }\n  /**\n   * @private\n   * @param {?} f\n   * @return {?}\n   */\n  detachElementRef(f) {\n    /** @type {?} */\n    const index = f && f['_elementRefs'] ? this.fieldAttrElements.indexOf(this.elementRef) : -1;\n    if (index !== -1) {\n      this.field['_elementRefs'].splice(index, 1);\n    }\n  }\n  /**\n   * @private\n   * @param {?} attr\n   * @param {?} value\n   * @return {?}\n   */\n  setAttribute(attr, value) {\n    this.renderer.setAttribute(this.elementRef.nativeElement, attr, value);\n  }\n  /**\n   * @private\n   * @param {?} attr\n   * @return {?}\n   */\n  removeAttribute(attr) {\n    this.renderer.removeAttribute(this.elementRef.nativeElement, attr);\n  }\n}\nFormlyAttributes.ɵfac = function FormlyAttributes_Factory(t) {\n  return new (t || FormlyAttributes)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT));\n};\nFormlyAttributes.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: FormlyAttributes,\n  selectors: [[\"\", \"formlyAttributes\", \"\"]],\n  hostBindings: function FormlyAttributes_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"change\", function FormlyAttributes_change_HostBindingHandler($event) {\n        return ctx.onHostChange($event);\n      });\n    }\n  },\n  inputs: {\n    field: [\"formlyAttributes\", \"field\"],\n    id: \"id\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n/** @nocollapse */\nFormlyAttributes.ctorParameters = () => [{\n  type: Renderer2\n}, {\n  type: ElementRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\nFormlyAttributes.propDecorators = {\n  field: [{\n    type: Input,\n    args: ['formlyAttributes']\n  }],\n  id: [{\n    type: Input\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormlyAttributes, [{\n    type: Directive,\n    args: [{\n      selector: '[formlyAttributes]',\n      host: {\n        '(change)': 'onHostChange($event)'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.Renderer2\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, {\n    field: [{\n      type: Input,\n      args: ['formlyAttributes']\n    }],\n    id: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @abstract\n * @template F\n */\nclass FieldType {\n  /**\n   * @return {?}\n   */\n  get model() {\n    return this.field.model;\n  }\n  /**\n   * @param {?} m\n   * @return {?}\n   */\n  set model(m) {\n    console.warn(`NgxFormly: passing 'model' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);\n  }\n  /**\n   * @return {?}\n   */\n  get form() {\n    return (/** @type {?} */this.field.parent.formControl\n    );\n  }\n  /**\n   * @param {?} form\n   * @return {?}\n   */\n  set form(form) {\n    console.warn(`NgxFormly: passing 'form' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);\n  }\n  /**\n   * @return {?}\n   */\n  get options() {\n    return this.field.options;\n  }\n  /**\n   * @param {?} options\n   * @return {?}\n   */\n  set options(options) {\n    console.warn(`NgxFormly: passing 'options' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);\n  }\n  /**\n   * @return {?}\n   */\n  get key() {\n    return this.field.key;\n  }\n  /**\n   * @return {?}\n   */\n  get formControl() {\n    return (/** @type {?} */this.field.formControl\n    );\n  }\n  /**\n   * @return {?}\n   */\n  get to() {\n    return this.field.templateOptions || {};\n  }\n  /**\n   * @return {?}\n   */\n  get showError() {\n    return this.options.showError(this);\n  }\n  /**\n   * @return {?}\n   */\n  get id() {\n    return this.field.id;\n  }\n  /**\n   * @return {?}\n   */\n  get formState() {\n    return this.options.formState || {};\n  }\n}\nFieldType.ɵfac = function FieldType_Factory(t) {\n  return new (t || FieldType)();\n};\nFieldType.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: FieldType,\n  inputs: {\n    model: \"model\",\n    form: \"form\",\n    options: \"options\",\n    field: \"field\"\n  }\n});\nFieldType.propDecorators = {\n  field: [{\n    type: Input\n  }],\n  model: [{\n    type: Input\n  }],\n  form: [{\n    type: Input\n  }],\n  options: [{\n    type: Input\n  }]\n};\n\n/**\n * @deprecated use `FieldType` instead\n * @abstract\n */\nclass Field extends FieldType {\n  constructor() {\n    super();\n    console.warn(`NgxFormly: 'Field' has been renamed to 'FieldType', extend 'FieldType' instead.`);\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO remove `selector` in V6\n// tslint:disable-next-line\n/**\n * @abstract\n * @template F\n */\nclass FieldArrayType extends FieldType {\n  /**\n   * @param {?=} builder\n   */\n  constructor(builder) {\n    super();\n    this.defaultOptions = {\n      defaultValue: []\n    };\n    if (builder instanceof FormlyFormBuilder) {\n      console.warn(`NgxFormly: passing 'FormlyFormBuilder' to '${this.constructor.name}' type is not required anymore, you may remove it!`);\n    }\n  }\n  /**\n   * @return {?}\n   */\n  get formControl() {\n    return (/** @type {?} */this.field.formControl\n    );\n  }\n  /**\n   * @param {?} field\n   * @return {?}\n   */\n  onPopulate(field) {\n    if (!field.formControl && field.key) {\n      /** @type {?} */\n      const control = findControl(field);\n      registerControl(field, control ? control : new FormArray([], {\n        updateOn: field.modelOptions.updateOn\n      }));\n    }\n    field.fieldGroup = field.fieldGroup || [];\n    /** @type {?} */\n    const length = field.model ? field.model.length : 0;\n    if (field.fieldGroup.length > length) {\n      for (let i = field.fieldGroup.length - 1; i >= length; --i) {\n        unregisterControl(field.fieldGroup[i], true);\n        field.fieldGroup.splice(i, 1);\n      }\n    }\n    for (let i = field.fieldGroup.length; i < length; i++) {\n      /** @type {?} */\n      const f = Object.assign({}, clone(field.fieldArray), {\n        key: `${i}`\n      });\n      field.fieldGroup.push(f);\n    }\n  }\n  /**\n   * @param {?=} i\n   * @param {?=} initialModel\n   * @param {?=} __2\n   * @return {?}\n   */\n  add(i, initialModel, {\n    markAsDirty\n  } = {\n    markAsDirty: true\n  }) {\n    i = isNullOrUndefined(i) ? this.field.fieldGroup.length : i;\n    if (!this.model) {\n      assignFieldValue(this.field, []);\n    }\n    this.model.splice(i, 0, initialModel ? clone(initialModel) : undefined);\n    this._build();\n    markAsDirty && this.formControl.markAsDirty();\n  }\n  /**\n   * @param {?} i\n   * @param {?=} __1\n   * @return {?}\n   */\n  remove(i, {\n    markAsDirty\n  } = {\n    markAsDirty: true\n  }) {\n    this.model.splice(i, 1);\n    unregisterControl(this.field.fieldGroup[i], true);\n    this.field.fieldGroup.splice(i, 1);\n    this.field.fieldGroup.forEach(\n    /**\n    * @param {?} f\n    * @param {?} key\n    * @return {?}\n    */\n    (f, key) => f.key = `${key}`);\n    this._build();\n    markAsDirty && this.formControl.markAsDirty();\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n  _build() {\n    /** @type {?} */this.options._buildField(this.field);\n    /** @type {?} */this.options._trackModelChanges(true);\n  }\n}\nFieldArrayType.ɵfac = function FieldArrayType_Factory(t) {\n  return new (t || FieldArrayType)(ɵngcc0.ɵɵdirectiveInject(FORMLY_CONFIG, 8));\n};\nFieldArrayType.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: FieldArrayType,\n  selectors: [[\"fieldArray\"]],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\nFieldArrayType.ctorParameters = () => [{\n  type: FormlyFormBuilder,\n  decorators: [{\n    type: Inject,\n    args: [FORMLY_CONFIG]\n  }, {\n    type: Optional\n  }]\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FieldArrayType, [{\n    type: Directive,\n    args: [{\n      selector: '[ɵfieldArray]'\n    }]\n  }], function () {\n    return [{\n      type: FormlyFormBuilder,\n      decorators: [{\n        type: Inject,\n        args: [FORMLY_CONFIG]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @abstract\n * @template F\n */\nclass FieldWrapper extends FieldType {}\nFieldWrapper.ɵfac = /*@__PURE__*/function () {\n  let ɵFieldWrapper_BaseFactory;\n  return function FieldWrapper_Factory(t) {\n    return (ɵFieldWrapper_BaseFactory || (ɵFieldWrapper_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FieldWrapper)))(t || FieldWrapper);\n  };\n}();\nFieldWrapper.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: FieldWrapper,\n  viewQuery: function FieldWrapper_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c3, 5, ViewContainerRef);\n    }\n    if (rf & 2) {\n      let _t;\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.fieldComponent = _t.first);\n    }\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nFieldWrapper.propDecorators = {\n  fieldComponent: [{\n    type: ViewChild,\n    args: ['fieldComponent', /** @type {?} */{\n      read: ViewContainerRef,\n      static: false\n    }]\n  }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FormlyGroup extends FieldType {\n  constructor() {\n    super(...arguments);\n    this.defaultOptions = {\n      defaultValue: {}\n    };\n  }\n}\nFormlyGroup.ɵfac = /*@__PURE__*/function () {\n  let ɵFormlyGroup_BaseFactory;\n  return function FormlyGroup_Factory(t) {\n    return (ɵFormlyGroup_BaseFactory || (ɵFormlyGroup_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FormlyGroup)))(t || FormlyGroup);\n  };\n}();\nFormlyGroup.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: FormlyGroup,\n  selectors: [[\"formly-group\"]],\n  hostVars: 2,\n  hostBindings: function FormlyGroup_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassMap(ctx.field.fieldGroupClassName || \"\");\n    }\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c1,\n  decls: 5,\n  vars: 1,\n  consts: [[3, \"field\", 4, \"ngFor\", \"ngForOf\"], [3, \"field\"]],\n  template: function FormlyGroup_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵtext(0, \"\\n    \");\n      ɵngcc0.ɵɵtemplate(1, FormlyGroup_formly_field_1_Template, 1, 1, \"formly-field\", 0);\n      ɵngcc0.ɵɵtext(2, \"\\n    \");\n      ɵngcc0.ɵɵprojection(3);\n      ɵngcc0.ɵɵtext(4, \"\\n  \");\n    }\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.field.fieldGroup);\n    }\n  },\n  dependencies: [ɵngcc2.NgForOf, FormlyField],\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormlyGroup, [{\n    type: Component,\n    args: [{\n      selector: 'formly-group',\n      template: `\n    <formly-field *ngFor=\"let f of field.fieldGroup\" [field]=\"f\"></formly-field>\n    <ng-content></ng-content>\n  `,\n      host: {\n        '[class]': 'field.fieldGroupClassName || \"\"'\n      }\n    }]\n  }], null, null);\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FormlyValidationMessage {\n  /**\n   * @param {?} formlyConfig\n   */\n  constructor(formlyConfig) {\n    this.formlyConfig = formlyConfig;\n  }\n  /**\n   * @return {?}\n   */\n  ngOnChanges() {\n    /** @type {?} */\n    const EXPR_VALIDATORS = FORMLY_VALIDATORS.map(\n    /**\n    * @param {?} v\n    * @return {?}\n    */\n    v => `templateOptions.${v}`);\n    this.errorMessage$ = merge(this.field.formControl.statusChanges, !this.field.options ? of(null) : this.field.options.fieldChanges.pipe(filter(\n    /**\n    * @param {?} __0\n    * @return {?}\n    */\n    ({\n      field,\n      type,\n      property\n    }) => {\n      return field === this.field && type === 'expressionChanges' && (property.indexOf('validation') !== -1 || EXPR_VALIDATORS.indexOf(property) !== -1);\n    }))).pipe(startWith(null), switchMap(\n    /**\n    * @return {?}\n    */\n    () => isObservable(this.errorMessage) ? this.errorMessage : of(this.errorMessage)));\n  }\n  /**\n   * @return {?}\n   */\n  get errorMessage() {\n    /** @type {?} */\n    const fieldForm = this.field.formControl;\n    for (let error in fieldForm.errors) {\n      if (fieldForm.errors.hasOwnProperty(error)) {\n        /** @type {?} */\n        let message = this.formlyConfig.getValidatorMessage(error);\n        if (isObject(fieldForm.errors[error])) {\n          if (fieldForm.errors[error].errorPath) {\n            return;\n          }\n          if (fieldForm.errors[error].message) {\n            message = fieldForm.errors[error].message;\n          }\n        }\n        if (this.field.validation && this.field.validation.messages && this.field.validation.messages[error]) {\n          message = this.field.validation.messages[error];\n        }\n        if (this.field.validators && this.field.validators[error] && this.field.validators[error].message) {\n          message = this.field.validators[error].message;\n        }\n        if (this.field.asyncValidators && this.field.asyncValidators[error] && this.field.asyncValidators[error].message) {\n          message = this.field.asyncValidators[error].message;\n        }\n        if (typeof message === 'function') {\n          return message(fieldForm.errors[error], this.field);\n        }\n        return message;\n      }\n    }\n  }\n}\nFormlyValidationMessage.ɵfac = function FormlyValidationMessage_Factory(t) {\n  return new (t || FormlyValidationMessage)(ɵngcc0.ɵɵdirectiveInject(FormlyConfig));\n};\nFormlyValidationMessage.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: FormlyValidationMessage,\n  selectors: [[\"formly-validation-message\"]],\n  inputs: {\n    field: \"field\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 3,\n  template: function FormlyValidationMessage_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtext(0);\n      ɵngcc0.ɵɵpipe(1, \"async\");\n    }\n    if (rf & 2) {\n      ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(1, 1, ctx.errorMessage$));\n    }\n  },\n  dependencies: [ɵngcc2.AsyncPipe],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\nFormlyValidationMessage.ctorParameters = () => [{\n  type: FormlyConfig\n}];\nFormlyValidationMessage.propDecorators = {\n  field: [{\n    type: Input\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormlyValidationMessage, [{\n    type: Component,\n    args: [{\n      selector: 'formly-validation-message',\n      template: `{{ errorMessage$ | async }}`,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: FormlyConfig\n    }];\n  }, {\n    field: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FormlyTemplateType extends FieldType {\n  /**\n   * @param {?} sanitizer\n   */\n  constructor(sanitizer) {\n    super();\n    this.sanitizer = sanitizer;\n    this.innerHtml = {\n      content: null,\n      template: null\n    };\n  }\n  /**\n   * @return {?}\n   */\n  get template() {\n    if (this.field && this.field.template !== this.innerHtml.template) {\n      this.innerHtml = {\n        template: this.field.template,\n        content: this.to.safeHtml ? this.sanitizer.bypassSecurityTrustHtml(this.field.template) : this.field.template\n      };\n    }\n    return this.innerHtml.content;\n  }\n}\nFormlyTemplateType.ɵfac = function FormlyTemplateType_Factory(t) {\n  return new (t || FormlyTemplateType)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.DomSanitizer));\n};\nFormlyTemplateType.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: FormlyTemplateType,\n  selectors: [[\"formly-template\"]],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 1,\n  consts: [[3, \"innerHtml\"]],\n  template: function FormlyTemplateType_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelement(0, \"div\", 0);\n    }\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"innerHtml\", ctx.template, ɵngcc0.ɵɵsanitizeHtml);\n    }\n  },\n  encapsulation: 2\n});\n/** @nocollapse */\nFormlyTemplateType.ctorParameters = () => [{\n  type: DomSanitizer\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormlyTemplateType, [{\n    type: Component,\n    args: [{\n      selector: 'formly-template',\n      template: `<div [innerHtml]=\"template\"></div>`\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc3.DomSanitizer\n    }];\n  }, null);\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} expression\n * @param {?} argNames\n * @return {?}\n */\nfunction evalStringExpression(expression, argNames) {\n  try {\n    if (expression.indexOf('this.field') !== -1) {\n      console.warn(`NgxFormly: using 'this.field' in expressionProperties is deprecated since v5.1, use 'field' instead.`);\n    }\n    return (/** @type {?} */Function(...argNames, `return ${expression};`)\n    );\n  } catch (error) {\n    console.error(error);\n  }\n}\n/**\n * @param {?} expression\n * @param {?} thisArg\n * @param {?} argVal\n * @return {?}\n */\nfunction evalExpression(expression, thisArg, argVal) {\n  if (expression instanceof Function) {\n    return expression.apply(thisArg, argVal);\n  } else {\n    return expression ? true : false;\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@experimental\n */\nclass FieldExpressionExtension {\n  /**\n   * @param {?} field\n   * @return {?}\n   */\n  prePopulate(field) {\n    if (field.parent || field.options._checkField) {\n      return;\n    }\n    /** @type {?} */\n    let checkLocked = false;\n    field.options._checkField =\n    /**\n    * @param {?} f\n    * @param {?} ignoreCache\n    * @return {?}\n    */\n    (f, ignoreCache) => {\n      if (!checkLocked) {\n        checkLocked = true;\n        this.checkField(f, ignoreCache);\n        checkLocked = false;\n      }\n    };\n  }\n  /**\n   * @param {?} field\n   * @return {?}\n   */\n  postPopulate(field) {\n    if (!field.parent || field._expressionProperties) {\n      return;\n    }\n    // cache built expression\n    defineHiddenProp(field, '_expressionProperties', {});\n    if (field.expressionProperties) {\n      for (const key in field.expressionProperties) {\n        /** @type {?} */\n        const expressionProperty = field.expressionProperties[key];\n        if (typeof expressionProperty === 'string' || isFunction(expressionProperty)) {\n          field._expressionProperties[key] = {\n            expression: this._evalExpression(key, expressionProperty, key === 'templateOptions.disabled' && field.parent.expressionProperties && field.parent.expressionProperties.hasOwnProperty('templateOptions.disabled') ?\n            /**\n            * @return {?}\n            */\n            () => field.parent.templateOptions.disabled : undefined)\n          };\n          if (key === 'templateOptions.disabled') {\n            Object.defineProperty(field._expressionProperties[key], 'expressionValue', {\n              get:\n              /**\n              * @return {?}\n              */\n              () => field.templateOptions.disabled,\n              set:\n              /**\n              * @return {?}\n              */\n              () => {},\n              enumerable: true,\n              configurable: true\n            });\n          }\n        } else if (expressionProperty instanceof Observable) {\n          /** @type {?} */\n          const subscribe =\n          /**\n          * @return {?}\n          */\n          () => /** @type {?} */expressionProperty.subscribe(\n          /**\n          * @param {?} v\n          * @return {?}\n          */\n          v => {\n            this.setExprValue(field, key, v);\n            if (field.options && field.options._markForCheck) {\n              field.options._markForCheck(field);\n            }\n          });\n          /** @type {?} */\n          let subscription = subscribe();\n          /** @type {?} */\n          const onInit = field.hooks.onInit;\n          field.hooks.onInit =\n          /**\n          * @return {?}\n          */\n          () => {\n            if (subscription === null) {\n              subscription = subscribe();\n            }\n            return onInit && onInit(field);\n          };\n          /** @type {?} */\n          const onDestroy = field.hooks.onDestroy;\n          field.hooks.onDestroy =\n          /**\n          * @return {?}\n          */\n          () => {\n            onDestroy && onDestroy(field);\n            subscription.unsubscribe();\n            subscription = null;\n          };\n        }\n      }\n    }\n    if (field.hideExpression) {\n      // delete hide value in order to force re-evaluate it in FormlyFormExpression.\n      delete field.hide;\n      field.hideExpression = this._evalExpression('hide', field.hideExpression,\n      /**\n      * @return {?}\n      */\n      () => {\n        /** @type {?} */\n        let root = field.parent;\n        while (root.parent && !root.hide) {\n          root = root.parent;\n        }\n        return root.hide;\n      });\n    } else {\n      wrapProperty(field, 'hide',\n      /**\n      * @param {?} __0\n      * @return {?}\n      */\n      ({\n        currentValue,\n        firstChange\n      }) => {\n        field._hide = currentValue;\n        if (!firstChange || firstChange && currentValue === true) {\n          field.options._hiddenFieldsForCheck.push(field);\n        }\n      });\n    }\n  }\n  /**\n   * @private\n   * @param {?} prop\n   * @param {?} expression\n   * @param {?=} parentExpression\n   * @return {?}\n   */\n  _evalExpression(prop, expression, parentExpression) {\n    return (\n      /**\n      * @param {...?} args\n      * @return {?}\n      */\n      (...args) => {\n        try {\n          if (typeof expression === 'string') {\n            expression = evalStringExpression(expression, ['model', 'formState', 'field']);\n          }\n          if (typeof expression !== 'function') {\n            expression =\n            /**\n            * @return {?}\n            */\n            () => !!expression;\n          }\n          return parentExpression && parentExpression() || expression(...args);\n        } catch (error) {\n          error.message = `[Formly Error] [Expression \"${prop}\"] ${error.message}`;\n          throw error;\n        }\n      }\n    );\n  }\n  /**\n   * @private\n   * @param {?} field\n   * @param {?} prop\n   * @return {?}\n   */\n  _evalExpressionPath(field, prop) {\n    if (field._expressionProperties[prop] && field._expressionProperties[prop].expressionPaths) {\n      return field._expressionProperties[prop].expressionPaths;\n    }\n    /** @type {?} */\n    let paths = [];\n    if (prop.indexOf('[') === -1) {\n      paths = prop.split('.');\n    } else {\n      prop.split(/[[\\]]{1,2}/) // https://stackoverflow.com/a/20198206\n      .filter(\n      /**\n      * @param {?} p\n      * @return {?}\n      */\n      p => p).forEach(\n      /**\n      * @param {?} path\n      * @return {?}\n      */\n      path => {\n        /** @type {?} */\n        const arrayPath = path.match(/['|\"](.*?)['|\"]/);\n        if (arrayPath) {\n          paths.push(arrayPath[1]);\n        } else {\n          paths.push(...path.split('.').filter(\n          /**\n          * @param {?} p\n          * @return {?}\n          */\n          p => p));\n        }\n      });\n    }\n    if (field._expressionProperties[prop]) {\n      field._expressionProperties[prop].expressionPaths = paths;\n    }\n    return paths;\n  }\n  /**\n   * @private\n   * @param {?} field\n   * @param {?=} ignoreCache\n   * @return {?}\n   */\n  checkField(field, ignoreCache = false) {\n    /** @type {?} */\n    const fieldChanged = this._checkField(field, ignoreCache);\n    field.options._hiddenFieldsForCheck.sort(\n    /**\n    * @param {?} f\n    * @return {?}\n    */\n    f => f.hide ? -1 : 1).forEach(\n    /**\n    * @param {?} f\n    * @return {?}\n    */\n    f => this.toggleFormControl(f, !!f.hide, !ignoreCache));\n    field.options._hiddenFieldsForCheck = [];\n    if (fieldChanged) {\n      this.checkField(field);\n      if (field.options && field.options._markForCheck) {\n        field.options._markForCheck(field);\n      }\n    }\n  }\n  /**\n   * @private\n   * @param {?} field\n   * @param {?=} ignoreCache\n   * @return {?}\n   */\n  _checkField(field, ignoreCache = false) {\n    /** @type {?} */\n    let fieldChanged = false;\n    field.fieldGroup.forEach(\n    /**\n    * @param {?} f\n    * @return {?}\n    */\n    f => {\n      if (!f.options) {\n        return;\n      }\n      this.checkFieldExpressionChange(f, ignoreCache) && (fieldChanged = true);\n      if (this.checkFieldVisibilityChange(f, ignoreCache)) {\n        field.options._hiddenFieldsForCheck.push(f);\n        fieldChanged = true;\n      }\n      if (f.fieldGroup && f.fieldGroup.length > 0) {\n        this._checkField(f, ignoreCache) && (fieldChanged = true);\n      }\n    });\n    return fieldChanged;\n  }\n  /**\n   * @private\n   * @param {?} field\n   * @param {?} ignoreCache\n   * @return {?}\n   */\n  checkFieldExpressionChange(field, ignoreCache) {\n    if (!field || !field._expressionProperties) {\n      return false;\n    }\n    /** @type {?} */\n    let markForCheck = false;\n    /** @type {?} */\n    const expressionProperties = field._expressionProperties;\n    for (const key in expressionProperties) {\n      /** @type {?} */\n      let expressionValue = evalExpression(expressionProperties[key].expression, {\n        field\n      }, [field.model, field.options.formState, field, ignoreCache]);\n      if (key === 'templateOptions.disabled') {\n        expressionValue = !!expressionValue;\n      }\n      if (ignoreCache || expressionProperties[key].expressionValue !== expressionValue && (!(isObject(expressionValue) || isFunction(expressionValue)) || isFunction(expressionValue) && '' + expressionProperties[key].expressionValue !== '' + expressionValue || isObservable(expressionValue) || JSON.stringify(expressionValue) !== JSON.stringify(expressionProperties[key].expressionValue))) {\n        markForCheck = true;\n        expressionProperties[key].expressionValue = expressionValue;\n        this.setExprValue(field, key, expressionValue);\n      }\n    }\n    return markForCheck;\n  }\n  /**\n   * @private\n   * @param {?} field\n   * @param {?} ignoreCache\n   * @return {?}\n   */\n  checkFieldVisibilityChange(field, ignoreCache) {\n    if (!field || isNullOrUndefined(field.hideExpression)) {\n      return false;\n    }\n    /** @type {?} */\n    const hideExpressionResult = !!evalExpression(field.hideExpression, {\n      field\n    }, [field.model, field.options.formState, field, ignoreCache]);\n    /** @type {?} */\n    let markForCheck = false;\n    if (hideExpressionResult !== field.hide || ignoreCache) {\n      markForCheck = true;\n      // toggle hide\n      field.hide = hideExpressionResult;\n      field.templateOptions.hidden = hideExpressionResult;\n    }\n    return markForCheck;\n  }\n  /**\n   * @private\n   * @param {?} field\n   * @param {?} value\n   * @return {?}\n   */\n  setDisabledState(field, value) {\n    if (field.fieldGroup) {\n      field.fieldGroup.filter(\n      /**\n      * @param {?} f\n      * @return {?}\n      */\n      f => !f.expressionProperties || !f.expressionProperties.hasOwnProperty('templateOptions.disabled')).forEach(\n      /**\n      * @param {?} f\n      * @return {?}\n      */\n      f => this.setDisabledState(f, value));\n    }\n    if (field.key && field.templateOptions.disabled !== value) {\n      field.templateOptions.disabled = value;\n    }\n  }\n  /**\n   * @private\n   * @param {?} field\n   * @param {?} hide\n   * @param {?} resetOnHide\n   * @return {?}\n   */\n  toggleFormControl(field, hide, resetOnHide) {\n    if (field.fieldGroup) {\n      field.fieldGroup.filter(\n      /**\n      * @param {?} f\n      * @return {?}\n      */\n      f => !f.hideExpression).forEach(\n      /**\n      * @param {?} f\n      * @return {?}\n      */\n      f => this.toggleFormControl(f, hide, resetOnHide));\n    }\n    if (field.formControl && field.key) {\n      defineHiddenProp(field, '_hide', !!(hide || field.hide));\n      /** @type {?} */\n      const c = field.formControl;\n      if (c['_fields'] && c['_fields'].length > 1) {\n        updateValidity(c);\n      }\n      if (hide === true && (!c['_fields'] || c['_fields'].every(\n      /**\n      * @param {?} f\n      * @return {?}\n      */\n      f => !!f._hide))) {\n        unregisterControl(field, true);\n        if (resetOnHide && field.resetOnHide) {\n          field.formControl.reset({\n            value: undefined,\n            disabled: field.formControl.disabled\n          });\n          if (field.fieldGroup) {\n            assignFieldValue(field, undefined);\n            if (field.formControl instanceof FormArray) {\n              field.fieldGroup.length = 0;\n            }\n          }\n        }\n      } else if (hide === false) {\n        if (field.resetOnHide && field.parent && !isUndefined(field.defaultValue) && isUndefined(getFieldValue(field))) {\n          assignFieldValue(field, field.defaultValue);\n        }\n        registerControl(field, undefined, true);\n        if (field.resetOnHide && field.fieldArray && (field.fieldGroup || []).length !== (field.model || []).length) {\n          /** @type {?} */field.options._buildForm(true);\n        }\n      }\n    }\n    if (field.options.fieldChanges) {\n      field.options.fieldChanges.next( /** @type {?} */{\n        field,\n        type: 'hidden',\n        value: hide\n      });\n    }\n  }\n  /**\n   * @private\n   * @param {?} field\n   * @param {?} prop\n   * @param {?} value\n   * @return {?}\n   */\n  setExprValue(field, prop, value) {\n    try {\n      /** @type {?} */\n      let target = field;\n      /** @type {?} */\n      const paths = this._evalExpressionPath(field, prop);\n      /** @type {?} */\n      const lastIndex = paths.length - 1;\n      for (let i = 0; i < lastIndex; i++) {\n        target = target[paths[i]];\n      }\n      target[paths[lastIndex]] = value;\n    } catch (error) {\n      error.message = `[Formly Error] [Expression \"${prop}\"] ${error.message}`;\n      throw error;\n    }\n    if (prop === 'templateOptions.disabled' && field.key) {\n      this.setDisabledState(field, value);\n    }\n    if (prop.indexOf('model.') === 0) {\n      /** @type {?} */\n      const path = prop.replace(/^model\\./, '');\n      /** @type {?} */\n      const control = field.key && prop === path ? field.formControl : field.parent.formControl.get(path);\n      if (control && !(isNullOrUndefined(control.value) && isNullOrUndefined(value)) && control.value !== value) {\n        control.patchValue(value);\n      }\n    }\n    this.emitExpressionChanges(field, prop, value);\n  }\n  /**\n   * @private\n   * @param {?} field\n   * @param {?} property\n   * @param {?} value\n   * @return {?}\n   */\n  emitExpressionChanges(field, property, value) {\n    if (!field.options.fieldChanges) {\n      return;\n    }\n    field.options.fieldChanges.next({\n      field: field,\n      type: 'expressionChanges',\n      property,\n      value\n    });\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@experimental\n */\nclass FieldValidationExtension {\n  /**\n   * @param {?} formlyConfig\n   */\n  constructor(formlyConfig) {\n    this.formlyConfig = formlyConfig;\n  }\n  /**\n   * @param {?} field\n   * @return {?}\n   */\n  onPopulate(field) {\n    this.initFieldValidation(field, 'validators');\n    this.initFieldValidation(field, 'asyncValidators');\n  }\n  /**\n   * @private\n   * @param {?} field\n   * @param {?} type\n   * @return {?}\n   */\n  initFieldValidation(field, type) {\n    /** @type {?} */\n    const validators = [];\n    if (type === 'validators' && !(field.hasOwnProperty('fieldGroup') && !field.key)) {\n      validators.push(this.getPredefinedFieldValidation(field));\n    }\n    if (field[type]) {\n      for (const validatorName in field[type]) {\n        if (validatorName === 'validation' && !Array.isArray(field[type].validation)) {\n          field[type].validation = [field[type].validation];\n          console.warn(`NgxFormly(${field.key}): passing a non array value to the 'validation' is deprecated, pass an array instead`);\n        }\n        validatorName === 'validation' ? validators.push(...field[type].validation.map(\n        /**\n        * @param {?} v\n        * @return {?}\n        */\n        v => this.wrapNgValidatorFn(field, v))) : validators.push(this.wrapNgValidatorFn(field, field[type][validatorName], validatorName));\n      }\n    }\n    defineHiddenProp(field, '_' + type, validators);\n  }\n  /**\n   * @private\n   * @param {?} field\n   * @return {?}\n   */\n  getPredefinedFieldValidation(field) {\n    /** @type {?} */\n    let VALIDATORS = [];\n    FORMLY_VALIDATORS.forEach(\n    /**\n    * @param {?} opt\n    * @return {?}\n    */\n    opt => wrapProperty(field.templateOptions, opt,\n    /**\n    * @param {?} __0\n    * @return {?}\n    */\n    ({\n      currentValue,\n      firstChange\n    }) => {\n      VALIDATORS = VALIDATORS.filter(\n      /**\n      * @param {?} o\n      * @return {?}\n      */\n      o => o !== opt);\n      if (currentValue != null && currentValue !== false) {\n        VALIDATORS.push(opt);\n      }\n      if (!firstChange && field.formControl) {\n        updateValidity(field.formControl);\n      }\n    }));\n    return (\n      /**\n      * @param {?} control\n      * @return {?}\n      */\n      control => {\n        if (VALIDATORS.length === 0) {\n          return null;\n        }\n        return Validators.compose(VALIDATORS.map(\n        /**\n        * @param {?} opt\n        * @return {?}\n        */\n        opt =>\n        /**\n        * @return {?}\n        */\n        () => {\n          /** @type {?} */\n          const value = field.templateOptions[opt];\n          switch (opt) {\n            case 'required':\n              return Validators.required(control);\n            case 'pattern':\n              return Validators.pattern(value)(control);\n            case 'minLength':\n              return Validators.minLength(value)(control);\n            case 'maxLength':\n              return Validators.maxLength(value)(control);\n            case 'min':\n              return Validators.min(value)(control);\n            case 'max':\n              return Validators.max(value)(control);\n          }\n        }))(control);\n      }\n    );\n  }\n  /**\n   * @private\n   * @param {?} field\n   * @param {?} validator\n   * @param {?=} validatorName\n   * @return {?}\n   */\n  wrapNgValidatorFn(field, validator, validatorName) {\n    /** @type {?} */\n    let validatorOption = null;\n    if (typeof validator === 'string') {\n      validatorOption = clone(this.formlyConfig.getValidator(validator));\n    }\n    if (typeof validator === 'object' && validator.name) {\n      validatorOption = clone(this.formlyConfig.getValidator(validator.name));\n      if (validator.options) {\n        validatorOption.options = validator.options;\n      }\n    }\n    if (typeof validator === 'object' && validator.expression) {\n      const {\n          expression\n        } = validator,\n        options = __rest(validator, [\"expression\"]);\n      validatorOption = {\n        name: validatorName,\n        validation: expression,\n        options: Object.keys(options).length > 0 ? options : null\n      };\n    }\n    if (typeof validator === 'function') {\n      validatorOption = {\n        name: validatorName,\n        validation: validator\n      };\n    }\n    return (\n      /**\n      * @param {?} control\n      * @return {?}\n      */\n      control => {\n        /** @type {?} */\n        const errors = validatorOption.validation(control, field, validatorOption.options);\n        if (isPromise(errors)) {\n          return errors.then(\n          /**\n          * @param {?} v\n          * @return {?}\n          */\n          v => this.handleAsyncResult(field, validatorName ? !!v : v, validatorOption));\n        }\n        if (isObservable(errors)) {\n          return errors.pipe(map(\n          /**\n          * @param {?} v\n          * @return {?}\n          */\n          v => this.handleAsyncResult(field, validatorName ? !!v : v, validatorOption)));\n        }\n        return this.handleResult(field, validatorName ? !!errors : errors, validatorOption);\n      }\n    );\n  }\n  /**\n   * @private\n   * @param {?} field\n   * @param {?} errors\n   * @param {?} options\n   * @return {?}\n   */\n  handleAsyncResult(field, errors, options) {\n    // workaround for https://github.com/angular/angular/issues/13200\n    if (field.options && field.options._markForCheck) {\n      field.options._markForCheck(field);\n    }\n    return this.handleResult(field, errors, options);\n  }\n  /**\n   * @private\n   * @param {?} field\n   * @param {?} errors\n   * @param {?} __2\n   * @return {?}\n   */\n  handleResult(field, errors, {\n    name,\n    options\n  }) {\n    if (typeof errors === 'boolean') {\n      errors = errors ? null : {\n        [name]: options ? options : true\n      };\n    }\n    /** @type {?} */\n    const ctrl = field.formControl;\n    ctrl['_childrenErrors'] && ctrl['_childrenErrors'][name] && ctrl['_childrenErrors'][name]();\n    if (isObject(errors)) {\n      Object.keys(errors).forEach(\n      /**\n      * @param {?} name\n      * @return {?}\n      */\n      name => {\n        /** @type {?} */\n        const errorPath = errors[name].errorPath ? errors[name].errorPath : (options || {}).errorPath;\n        /** @type {?} */\n        const childCtrl = errorPath ? field.formControl.get(errorPath) : null;\n        if (childCtrl) {\n          const _a = errors[name],\n            opts = __rest(_a, [\"errorPath\"]);\n          childCtrl.setErrors(Object.assign({}, childCtrl.errors || {}, {\n            [name]: opts\n          }));\n          !ctrl['_childrenErrors'] && defineHiddenProp(ctrl, '_childrenErrors', {});\n          ctrl['_childrenErrors'][name] =\n          /**\n          * @return {?}\n          */\n          () => {\n            const _a = childCtrl.errors || {},\n              _b = name,\n              toDelete = _a[_b],\n              childErrors = __rest(_a, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\n            childCtrl.setErrors(Object.keys(childErrors).length === 0 ? null : childErrors);\n          };\n        }\n      });\n    }\n    return errors;\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@experimental\n */\nclass FieldFormExtension {\n  /**\n   * @param {?} config\n   */\n  constructor(config) {\n    this.config = config;\n  }\n  /**\n   * @param {?} field\n   * @return {?}\n   */\n  prePopulate(field) {\n    if (!this.root) {\n      this.root = field;\n    }\n  }\n  /**\n   * @param {?} field\n   * @return {?}\n   */\n  onPopulate(field) {\n    if (!field.parent) {\n      return;\n    }\n    if (field.fieldGroup && !field.key) {\n      defineHiddenProp(field, 'formControl', field.parent.formControl);\n    } else {\n      this.addFormControl(field);\n    }\n  }\n  /**\n   * @param {?} field\n   * @return {?}\n   */\n  postPopulate(field) {\n    if (this.root !== field) {\n      return;\n    }\n    this.root = null;\n    this.setValidators(field);\n  }\n  /**\n   * @private\n   * @param {?} field\n   * @return {?}\n   */\n  addFormControl(field) {\n    /** @type {?} */\n    let control = findControl(field);\n    if (!control) {\n      /** @type {?} */\n      const controlOptions = {\n        updateOn: field.modelOptions.updateOn\n      };\n      /** @type {?} */\n      const value = field.key ? getFieldValue(field) : field.defaultValue;\n      /** @type {?} */\n      const ref = this.config ? this.config.resolveFieldTypeRef(field) : null;\n      if (ref && ref.componentType && ref.componentType['createControl']) {\n        /** @type {?} */\n        const component = ref.componentType;\n        console.warn(`NgxFormly: '${component.name}::createControl' is deprecated since v5.0, use 'prePopulate' hook instead.`);\n        control = component['createControl'](value, field);\n      } else if (field.fieldGroup) {\n        // TODO: move to postPopulate\n        control = new FormGroup({}, controlOptions);\n      } else {\n        control = new FormControl(value, controlOptions);\n      }\n    }\n    registerControl(field, control);\n  }\n  /**\n   * @private\n   * @param {?} field\n   * @param {?=} disabled\n   * @return {?}\n   */\n  setValidators(field, disabled = false) {\n    /** @type {?} */\n    let markForCheck = false;\n    if (disabled === false && field.key && field.templateOptions && field.templateOptions.disabled) {\n      disabled = true;\n    }\n    (field.fieldGroup || []).forEach(\n    /**\n    * @param {?} f\n    * @return {?}\n    */\n    f => this.setValidators(f, disabled) && (markForCheck = true));\n    if (field.key || !field.parent || !field.key && !field.fieldGroup) {\n      const {\n        formControl: c\n      } = field;\n      field.templateOptions = field.templateOptions || {};\n      if (field.key && c && c instanceof FormControl) {\n        if (disabled && c.enabled) {\n          c.disable({\n            emitEvent: false,\n            onlySelf: true\n          });\n          markForCheck = true;\n        }\n        if (!disabled && c.disabled) {\n          c.enable({\n            emitEvent: false,\n            onlySelf: true\n          });\n          markForCheck = true;\n        }\n      }\n      if (c && (null === c.validator || null === c.asyncValidator)) {\n        c.setValidators(\n        /**\n        * @return {?}\n        */\n        () => {\n          /** @type {?} */\n          const v = Validators.compose(this.mergeValidators(field, '_validators'));\n          return v ? v(c) : null;\n        });\n        c.setAsyncValidators(\n        /**\n        * @return {?}\n        */\n        () => {\n          /** @type {?} */\n          const v = Validators.composeAsync(this.mergeValidators(field, '_asyncValidators'));\n          return v ? v(c) : of(null);\n        });\n        markForCheck = true;\n      }\n      if (markForCheck) {\n        updateValidity(c, true);\n        // update validity of `FormGroup` instance created by field with nested key.\n        /** @type {?} */\n        let parent = c.parent;\n        for (let i = 1; i < getKeyPath(field).length; i++) {\n          if (parent) {\n            updateValidity(parent, true);\n            parent = parent.parent;\n          }\n        }\n      }\n    }\n    return markForCheck;\n  }\n  /**\n   * @private\n   * @template T\n   * @param {?} field\n   * @param {?} type\n   * @return {?}\n   */\n  mergeValidators(field, type) {\n    /** @type {?} */\n    const validators = [];\n    /** @type {?} */\n    const c = field.formControl;\n    if (c && c['_fields'] && c['_fields'].length > 1) {\n      c['_fields'].filter(\n      /**\n      * @param {?} f\n      * @return {?}\n      */\n      f => !f._hide).forEach(\n      /**\n      * @param {?} f\n      * @return {?}\n      */\n      f => validators.push(...f[type]));\n    } else if (field[type]) {\n      validators.push(...field[type]);\n    }\n    if (field.fieldGroup) {\n      field.fieldGroup.filter(\n      /**\n      * @param {?} f\n      * @return {?}\n      */\n      f => !f.key && f.fieldGroup).forEach(\n      /**\n      * @param {?} f\n      * @return {?}\n      */\n      f => validators.push(...this.mergeValidators(f, type)));\n    }\n    return validators;\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@experimental\n */\nclass CoreExtension {\n  /**\n   * @param {?} formlyConfig\n   */\n  constructor(formlyConfig) {\n    this.formlyConfig = formlyConfig;\n    this.formId = 0;\n  }\n  /**\n   * @param {?} field\n   * @return {?}\n   */\n  prePopulate(field) {\n    this.getFieldComponentInstance(field).prePopulate();\n    if (field.parent) {\n      return;\n    }\n    /** @type {?} */\n    const fieldTransforms = field.options && field.options.fieldTransform || this.formlyConfig.extras.fieldTransform;\n    (Array.isArray(fieldTransforms) ? fieldTransforms : [fieldTransforms]).forEach(\n    /**\n    * @param {?} fieldTransform\n    * @return {?}\n    */\n    fieldTransform => {\n      if (fieldTransform) {\n        console.warn(`NgxFormly: fieldTransform is deprecated since v5.0, use custom extension instead.`);\n        /** @type {?} */\n        const fieldGroup = fieldTransform(field.fieldGroup, field.model, /** @type {?} */field.formControl, field.options);\n        if (!fieldGroup) {\n          throw new Error('fieldTransform must return an array of fields');\n        }\n      }\n    });\n  }\n  /**\n   * @param {?} field\n   * @return {?}\n   */\n  onPopulate(field) {\n    this.initFieldOptions(field);\n    this.getFieldComponentInstance(field).onPopulate();\n    if (field.fieldGroup) {\n      field.fieldGroup.forEach(\n      /**\n      * @param {?} f\n      * @param {?} index\n      * @return {?}\n      */\n      (f, index) => {\n        Object.defineProperty(f, 'parent', {\n          get:\n          /**\n          * @return {?}\n          */\n          () => field,\n          configurable: true\n        });\n        Object.defineProperty(f, 'index', {\n          get:\n          /**\n          * @return {?}\n          */\n          () => index,\n          configurable: true\n        });\n        this.formId++;\n      });\n    }\n  }\n  /**\n   * @param {?} field\n   * @return {?}\n   */\n  postPopulate(field) {\n    this.getFieldComponentInstance(field).postPopulate();\n  }\n  /**\n   * @private\n   * @param {?} field\n   * @return {?}\n   */\n  initFieldOptions(field) {\n    /** @type {?} */\n    const root = /** @type {?} */field.parent;\n    if (!root) {\n      return;\n    }\n    Object.defineProperty(field, 'form', {\n      get:\n      /**\n      * @return {?}\n      */\n      () => root.formControl,\n      configurable: true\n    });\n    Object.defineProperty(field, 'options', {\n      get:\n      /**\n      * @return {?}\n      */\n      () => root.options,\n      configurable: true\n    });\n    Object.defineProperty(field, 'model', {\n      get:\n      /**\n      * @return {?}\n      */\n      () => field.key && field.fieldGroup ? getFieldValue(field) : root.model,\n      configurable: true\n    });\n    reverseDeepMerge(field, {\n      id: getFieldId(`formly_${this.formId}`, field, field['index']),\n      hooks: {},\n      modelOptions: {},\n      validation: {\n        messages: {}\n      },\n      templateOptions: !field.type || !field.key ? {} : {\n        label: '',\n        placeholder: '',\n        focus: false,\n        disabled: false\n      }\n    });\n    if (this.formlyConfig.extras.resetFieldOnHide && field.resetOnHide !== false) {\n      field.resetOnHide = true;\n    }\n    if (field.lifecycle) {\n      console.warn(`NgxFormly: 'lifecycle' is deprecated since v5.0, use 'hooks' instead.`);\n    }\n    if (field.type !== 'formly-template' && (field.template || field.expressionProperties && field.expressionProperties.template)) {\n      if (field.type) {\n        console.warn(`NgxFormly: passing 'type' property is not allowed when 'template' is set.`);\n      }\n      field.type = 'formly-template';\n    }\n    if (!field.type && field.fieldGroup) {\n      field.type = 'formly-group';\n    }\n    if (field.type) {\n      this.formlyConfig.getMergedField(field);\n    }\n    if (field.parent) {\n      /** @type {?} */\n      let setDefaultValue = !isUndefined(field.key) && !isUndefined(field.defaultValue) && isUndefined(getFieldValue(field)) && (!field.resetOnHide || !(field.hide || field.hideExpression));\n      if (setDefaultValue && field.resetOnHide) {\n        /** @type {?} */\n        let parent = field.parent;\n        while (parent && !parent.hideExpression && !parent.hide) {\n          parent = parent.parent;\n        }\n        setDefaultValue = !parent || !(parent.hideExpression || parent.hide);\n      }\n      if (setDefaultValue) {\n        assignFieldValue(field, field.defaultValue);\n      }\n    }\n    this.initFieldWrappers(field);\n  }\n  /**\n   * @private\n   * @param {?} field\n   * @return {?}\n   */\n  initFieldWrappers(field) {\n    field.wrappers = field.wrappers || [];\n    /** @type {?} */\n    const fieldTemplateManipulators = Object.assign({\n      preWrapper: [],\n      postWrapper: []\n    }, field.templateOptions.templateManipulators || {});\n    field.wrappers = [...this.formlyConfig.templateManipulators.preWrapper.map(\n    /**\n    * @param {?} m\n    * @return {?}\n    */\n    m => m(field)), ...fieldTemplateManipulators.preWrapper.map(\n    /**\n    * @param {?} m\n    * @return {?}\n    */\n    m => m(field)), ...field.wrappers, ...this.formlyConfig.templateManipulators.postWrapper.map(\n    /**\n    * @param {?} m\n    * @return {?}\n    */\n    m => m(field)), ...fieldTemplateManipulators.postWrapper.map(\n    /**\n    * @param {?} m\n    * @return {?}\n    */\n    m => m(field))].filter(\n    /**\n    * @param {?} el\n    * @param {?} i\n    * @param {?} a\n    * @return {?}\n    */\n    (el, i, a) => el && i === a.indexOf(el));\n  }\n  /**\n   * @private\n   * @param {?} field\n   * @return {?}\n   */\n  getFieldComponentInstance(field) {\n    /** @type {?} */\n    const componentRef = this.formlyConfig.resolveFieldTypeRef(field);\n    /** @type {?} */\n    const instance = componentRef ? /** @type {?} */componentRef.instance : {};\n    return {\n      prePopulate:\n      /**\n      * @return {?}\n      */\n      () => instance.prePopulate && instance.prePopulate(field),\n      onPopulate:\n      /**\n      * @return {?}\n      */\n      () => instance.onPopulate && instance.onPopulate(field),\n      postPopulate:\n      /**\n      * @return {?}\n      */\n      () => instance.postPopulate && instance.postPopulate(field)\n    };\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} formlyConfig\n * @return {?}\n */\nfunction defaultFormlyConfig(formlyConfig) {\n  return {\n    types: [{\n      name: 'formly-group',\n      component: FormlyGroup\n    }, {\n      name: 'formly-template',\n      component: FormlyTemplateType\n    }],\n    extensions: [{\n      name: 'core',\n      extension: new CoreExtension(formlyConfig)\n    }, {\n      name: 'field-validation',\n      extension: new FieldValidationExtension(formlyConfig)\n    }, {\n      name: 'field-form',\n      extension: new FieldFormExtension(formlyConfig)\n    }, {\n      name: 'field-expression',\n      extension: new FieldExpressionExtension()\n    }]\n  };\n}\nclass FormlyModule {\n  /**\n   * @param {?} configService\n   * @param {?=} configs\n   */\n  constructor(configService, configs = []) {\n    if (!configs) {\n      return;\n    }\n    configs.forEach(\n    /**\n    * @param {?} config\n    * @return {?}\n    */\n    config => configService.addConfig(config));\n  }\n  /**\n   * @param {?=} config\n   * @return {?}\n   */\n  static forRoot(config = {}) {\n    return {\n      ngModule: FormlyModule,\n      providers: [{\n        provide: FORMLY_CONFIG,\n        multi: true,\n        useFactory: defaultFormlyConfig,\n        deps: [FormlyConfig]\n      }, {\n        provide: FORMLY_CONFIG,\n        useValue: config,\n        multi: true\n      }, {\n        provide: ANALYZE_FOR_ENTRY_COMPONENTS,\n        useValue: config,\n        multi: true\n      }, FormlyConfig, FormlyFormBuilder]\n    };\n  }\n  /**\n   * @param {?=} config\n   * @return {?}\n   */\n  static forChild(config = {}) {\n    return {\n      ngModule: FormlyModule,\n      providers: [{\n        provide: FORMLY_CONFIG,\n        multi: true,\n        useFactory: defaultFormlyConfig,\n        deps: [FormlyConfig]\n      }, {\n        provide: FORMLY_CONFIG,\n        useValue: config,\n        multi: true\n      }, {\n        provide: ANALYZE_FOR_ENTRY_COMPONENTS,\n        useValue: config,\n        multi: true\n      }, FormlyFormBuilder]\n    };\n  }\n}\nFormlyModule.ɵfac = function FormlyModule_Factory(t) {\n  return new (t || FormlyModule)(ɵngcc0.ɵɵinject(FormlyConfig), ɵngcc0.ɵɵinject(FORMLY_CONFIG, 8));\n};\nFormlyModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: FormlyModule\n});\nFormlyModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [CommonModule]\n});\n/** @nocollapse */\nFormlyModule.ctorParameters = () => [{\n  type: FormlyConfig\n}, {\n  type: Array,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [FORMLY_CONFIG]\n  }]\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormlyModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage, FormlyTemplateType, /** @type {?} */FieldArrayType],\n      entryComponents: [FormlyGroup, FormlyTemplateType],\n      exports: [FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage],\n      imports: [CommonModule]\n    }]\n  }], function () {\n    return [{\n      type: FormlyConfig\n    }, {\n      type: Array,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [FORMLY_CONFIG]\n      }]\n    }];\n  }, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FormlyModule, {\n    declarations: function () {\n      return [FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage, FormlyTemplateType, FieldArrayType];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage];\n    }\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { FormlyForm, FormlyField, FormlyAttributes, FORMLY_CONFIG, FormlyConfig, FormlyFormBuilder, FieldType, Field, FieldArrayType, FieldWrapper, FormlyModule, defineHiddenProp as ɵdefineHiddenProp, reverseDeepMerge as ɵreverseDeepMerge, getFieldValue as ɵgetFieldValue, clone as ɵclone, wrapProperty as ɵwrapProperty, defaultFormlyConfig as ɵa, CoreExtension as ɵe, FieldExpressionExtension as ɵh, FieldFormExtension as ɵg, FieldValidationExtension as ɵf, FormlyTemplateType as ɵd, FormlyGroup as ɵb, FormlyValidationMessage as ɵc };","map":{"version":3,"names":["DOCUMENT","CommonModule","TemplateRef","Injectable","InjectionToken","NgModule","ANALYZE_FOR_ENTRY_COMPONENTS","Inject","Optional","Component","Input","ChangeDetectionStrategy","EventEmitter","Output","Attribute","ViewChild","ElementRef","NgZone","Directive","Renderer2","ViewContainerRef","ComponentFactoryResolver","Injector","ChangeDetectorRef","defineInjectable","inject","INJECTOR","DomSanitizer","__rest","debounceTime","switchMap","distinctUntilChanged","take","startWith","filter","map","AbstractControl","FormArray","FormGroup","FormControl","FormGroupDirective","Validators","isObservable","Subject","of","merge","Observable","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","_c0","FormlyForm_formly_field_1_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","field_r2","$implicit","ɵɵproperty","form","options","model","_c1","_c2","FormlyField_ng_template_0_Template","_c3","FormlyGroup_formly_field_1_Template","ɵɵelement","f_r1","disableTreeValidityCall","callback","_updateTreeValidity","bind","getFieldId","formId","field","index","id","type","template","isFunction","prototype","constructor","name","key","join","getKeyPath","_keyPath","path","indexOf","replace","split","Array","isArray","slice","FORMLY_VALIDATORS","assignFieldValue","value","paths","length","root","parent","undefined","resetOnHide","k","pop","m","reduce","assignModelValue","i","isObject","test","clone","getFieldValue","reverseDeepMerge","dest","args","forEach","src","srcArg","isNullOrUndefined","isBlankString","objAndSameType","isUndefined","obj1","obj2","Object","getPrototypeOf","x","isPromise","obj","then","changingThisBreaksApplicationSecurity","Set","Map","_isAMomentObject","Date","getTime","v","proto","c","create","setPrototypeOf","keys","newVal","prop","propDesc","getOwnPropertyDescriptor","get","defineProperty","defineHiddenProp","defaultValue","enumerable","writable","configurable","wrapProperty","o","setFn","_observers","fns","push","currentValue","firstChange","set","previousValue","changeFn","splice","FORMLY_CONFIG","FormlyConfig","types","validators","wrappers","messages","templateManipulators","preWrapper","postWrapper","extras","checkExpressionOn","lazyRender","showError","formControl","invalid","touched","parentForm","submitted","validation","show","extensions","addConfig","config","setType","validator","setValidator","wrapper","setWrapper","manipulators","console","warn","manipulator","setManipulator","validationMessages","addValidatorMessage","message","extension","assign","option","hasOwnProperty","getType","Error","mergeExtendedType","getMergedField","defaultOptions","extendDefaults","extends","optionsTypes","componentRef","resolveFieldTypeRef","instance","component","_resolver","_injector","resolveComponentFactory","destroy","setTypeWrapper","getWrapper","getValidator","getValidatorMessage","class","method","extendedType","ɵfac","FormlyConfig_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ngInjectableDef","ngDevMode","ɵsetClassMetadata","FormlyFormBuilder","formlyConfig","componentFactoryResolver","injector","buildForm","fieldGroup","core","_setOptions","_buildForm","_checkField","getExtensions","prePopulate","onPopulate","f","postPopulate","formState","fieldChanges","_hiddenFieldsForCheck","_markForCheck","_componentRefs","ref","changeDetectorRef","markForCheck","_buildField","FormlyFormBuilder_Factory","ɵɵinject","ctorParameters","unregisterControl","emitEvent","control","fieldIndex","opts","controls","findIndex","updateControl","removeAt","removeControl","setParent","findControl","registerControl","setValidators","setAsyncValidators","templateOptions","disabled","disable","enable","registerOnDisabledChange","patchValue","setControl","_hide","updateValidity","onlySelf","status","updateValueAndValidity","statusChanges","emit","valueChanges","action","_forEachChild","cb","clearControl","FormlyForm","formlyBuilder","ngZone","immutable","parentFormGroup","modelChange","_modelChangeValue","modelChangeSubs","modelChange$","modelChangeSub","pipe","onStable","asObservable","subscribe","runGuarded","checkExpressionChange","_model","fields","_fields","_options","content","hasContent","node","nativeElement","nextSibling","nodeType","Node","ELEMENT_NODE","TEXT_NODE","textContent","trim","ngDoCheck","ngOnChanges","changes","setOptions","updateInitialValue","clearModelSubscriptions","trackModelChanges","ngOnDestroy","unsubscribe","changeModel","next","resetModel","_initialModel","resetForm","reset","emitModelChange","_trackModelChanges","rootKey","y","updateOn","debounce","modelOptions","default","parsers","parserFn","observers","unshift","sub","FormlyForm_Factory","ɵɵdirectiveInject","ɵɵinjectAttribute","ɵcmp","ɵɵdefineComponent","selectors","viewQuery","FormlyForm_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","inputs","outputs","features","ɵɵProvidersFeature","ɵɵNgOnChangesFeature","ngContentSelectors","decls","vars","consts","FormlyForm_Template","ɵɵprojectionDef","ɵɵtemplate","ɵɵelementContainerStart","ɵɵprojection","ɵɵelementContainerEnd","ɵɵadvance","dependencies","NgForOf","FormlyField","encapsulation","decorators","propDecorators","selector","providers","renderer","resolver","elementRef","hideDeprecation","warnDeprecation","hostObservers","componentRefs","hooksObservers","detectFieldBuild","ngAfterContentInit","triggerHook","ngAfterContentChecked","ngAfterViewInit","ngAfterViewChecked","render","ngOnInit","resetRefs","renderField","containerRef","clear","wps","createComponent","attachComponentRef","viewRef","detach","destroyed","insert","detectChanges","hooks","r","lifecycle","setStyle","className","removeAttribute","setAttribute","hide","FormlyField_Factory","FormlyField_Query","FormlyField_Template","ɵɵtemplateRefExtractor","read","static","FormlyAttributes","_document","uiAttributesCache","uiAttributes","uiEvents","listeners","events","eventName","$event","onFocus","onBlur","onChange","to","document","fieldAttrElements","listener","listen","e","attributes","attr","detachElementRef","attachElementRef","toggleFocus","element","hasAttribute","toLowerCase","focus","isFocused","activeElement","some","contains","Promise","resolve","blur","onHostChange","Event","change","markAsDirty","FormlyAttributes_Factory","ɵdir","ɵɵdefineDirective","hostBindings","FormlyAttributes_HostBindings","ɵɵlistener","FormlyAttributes_change_HostBindingHandler","host","FieldType","FieldType_Factory","Field","FieldArrayType","builder","fieldArray","add","initialModel","_build","remove","FieldArrayType_Factory","ɵɵInheritDefinitionFeature","FieldWrapper","ɵFieldWrapper_BaseFactory","FieldWrapper_Factory","ɵɵgetInheritedFactory","FieldWrapper_Query","fieldComponent","FormlyGroup","arguments","ɵFormlyGroup_BaseFactory","FormlyGroup_Factory","hostVars","FormlyGroup_HostBindings","ɵɵclassMap","fieldGroupClassName","FormlyGroup_Template","FormlyValidationMessage","EXPR_VALIDATORS","errorMessage$","property","errorMessage","fieldForm","error","errors","errorPath","asyncValidators","FormlyValidationMessage_Factory","FormlyValidationMessage_Template","ɵɵpipe","ɵɵtextInterpolate","ɵɵpipeBind1","AsyncPipe","changeDetection","OnPush","FormlyTemplateType","sanitizer","innerHtml","safeHtml","bypassSecurityTrustHtml","FormlyTemplateType_Factory","FormlyTemplateType_Template","ɵɵsanitizeHtml","evalStringExpression","expression","argNames","Function","evalExpression","thisArg","argVal","apply","FieldExpressionExtension","checkLocked","ignoreCache","checkField","_expressionProperties","expressionProperties","expressionProperty","_evalExpression","setExprValue","subscription","onInit","onDestroy","hideExpression","parentExpression","_evalExpressionPath","expressionPaths","p","arrayPath","match","fieldChanged","sort","toggleFormControl","checkFieldExpressionChange","checkFieldVisibilityChange","expressionValue","JSON","stringify","hideExpressionResult","hidden","setDisabledState","every","target","lastIndex","emitExpressionChanges","FieldValidationExtension","initFieldValidation","getPredefinedFieldValidation","validatorName","wrapNgValidatorFn","VALIDATORS","opt","compose","required","pattern","minLength","maxLength","min","max","validatorOption","handleAsyncResult","handleResult","ctrl","childCtrl","_a","setErrors","_b","toDelete","childErrors","FieldFormExtension","addFormControl","controlOptions","componentType","enabled","asyncValidator","mergeValidators","composeAsync","CoreExtension","getFieldComponentInstance","fieldTransforms","fieldTransform","initFieldOptions","label","placeholder","resetFieldOnHide","setDefaultValue","initFieldWrappers","fieldTemplateManipulators","el","a","defaultFormlyConfig","FormlyModule","configService","configs","forRoot","ngModule","provide","multi","useFactory","deps","useValue","forChild","FormlyModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","declarations","entryComponents","exports","ngJitMode","ɵɵsetNgModuleScope","ɵdefineHiddenProp","ɵreverseDeepMerge","ɵgetFieldValue","ɵclone","ɵwrapProperty","ɵa","ɵe","ɵh","ɵg","ɵf","ɵd","ɵb","ɵc"],"sources":["/home/ceo/mmmm/createyourevent/node_modules/@ngx-formly/core/__ivy_ngcc__/fesm2015/ngx-formly-core.js"],"sourcesContent":["import { DOCUMENT, CommonModule } from '@angular/common';\nimport { TemplateRef, Injectable, InjectionToken, NgModule, ANALYZE_FOR_ENTRY_COMPONENTS, Inject, Optional, Component, Input, ChangeDetectionStrategy, EventEmitter, Output, Attribute, ViewChild, ElementRef, NgZone, Directive, Renderer2, ViewContainerRef, ComponentFactoryResolver, Injector, ChangeDetectorRef, defineInjectable, inject, INJECTOR } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { __rest } from 'tslib';\nimport { debounceTime, switchMap, distinctUntilChanged, take, startWith, filter, map } from 'rxjs/operators';\nimport { AbstractControl, FormArray, FormGroup, FormControl, FormGroupDirective, Validators } from '@angular/forms';\nimport { isObservable, Subject, of, merge, Observable } from 'rxjs';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} form\n * @param {?} callback\n * @return {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/forms';\nimport * as ɵngcc2 from '@angular/common';\nimport * as ɵngcc3 from '@angular/platform-browser';\n\nconst _c0 = [\"content\"];\nfunction FormlyForm_formly_field_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"formly-field\", 2);\n    ɵngcc0.ɵɵtext(1, \"\\n    \");\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const field_r2 = ctx.$implicit;\n    ɵngcc0.ɵɵproperty(\"form\", field_r2.form)(\"options\", field_r2.options)(\"model\", field_r2.model)(\"field\", field_r2);\n} }\nconst _c1 = [\"*\"];\nconst _c2 = [\"container\"];\nfunction FormlyField_ng_template_0_Template(rf, ctx) { }\nconst _c3 = [\"fieldComponent\"];\nfunction FormlyGroup_formly_field_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"formly-field\", 1);\n} if (rf & 2) {\n    const f_r1 = ctx.$implicit;\n    ɵngcc0.ɵɵproperty(\"field\", f_r1);\n} }\nfunction disableTreeValidityCall(form, callback) {\n    /** @type {?} */\n    const _updateTreeValidity = form._updateTreeValidity.bind(form);\n    form._updateTreeValidity = (/**\n     * @return {?}\n     */\n    () => { });\n    callback();\n    form._updateTreeValidity = _updateTreeValidity;\n}\n/**\n * @param {?} formId\n * @param {?} field\n * @param {?} index\n * @return {?}\n */\nfunction getFieldId(formId, field, index) {\n    if (field.id)\n        return field.id;\n    /** @type {?} */\n    let type = field.type;\n    if (!type && field.template) {\n        type = 'template';\n    }\n    if (isFunction(type)) {\n        type = ((/** @type {?} */ (type))).prototype.constructor.name;\n    }\n    return [formId, type, field.key, index].join('_');\n}\n/**\n * @param {?} field\n * @return {?}\n */\nfunction getKeyPath(field) {\n    if (!field.key) {\n        return [];\n    }\n    /* We store the keyPath in the field for performance reasons. This function will be called frequently. */\n    if (!field._keyPath || field._keyPath.key !== field.key) {\n        /** @type {?} */\n        let path = [];\n        if (typeof field.key === 'string') {\n            /** @type {?} */\n            const key = field.key.indexOf('[') === -1\n                ? field.key\n                : field.key.replace(/\\[(\\w+)\\]/g, '.$1');\n            path = key.indexOf('.') !== -1 ? key.split('.') : [key];\n        }\n        else if (Array.isArray(field.key)) {\n            path = field.key.slice(0);\n        }\n        else {\n            path = [`${field.key}`];\n        }\n        field._keyPath = { key: field.key, path };\n    }\n    return field._keyPath.path.slice(0);\n}\n/** @type {?} */\nconst FORMLY_VALIDATORS = ['required', 'pattern', 'minLength', 'maxLength', 'min', 'max'];\n/**\n * @param {?} field\n * @param {?} value\n * @return {?}\n */\nfunction assignFieldValue(field, value) {\n    /** @type {?} */\n    let paths = getKeyPath(field);\n    if (paths.length === 0) {\n        return;\n    }\n    /** @type {?} */\n    let root = field;\n    while (root.parent) {\n        root = root.parent;\n        paths = [...getKeyPath(root), ...paths];\n    }\n    if (value === undefined && field.resetOnHide) {\n        /** @type {?} */\n        const k = paths.pop();\n        /** @type {?} */\n        const m = paths.reduce((/**\n         * @param {?} model\n         * @param {?} path\n         * @return {?}\n         */\n        (model, path) => model[path] || {}), root.model);\n        delete m[k];\n        return;\n    }\n    assignModelValue(root.model, paths, value);\n}\n/**\n * @param {?} model\n * @param {?} paths\n * @param {?} value\n * @return {?}\n */\nfunction assignModelValue(model, paths, value) {\n    for (let i = 0; i < (paths.length - 1); i++) {\n        /** @type {?} */\n        const path = paths[i];\n        if (!model[path] || !isObject(model[path])) {\n            model[path] = /^\\d+$/.test(paths[i + 1]) ? [] : {};\n        }\n        model = model[path];\n    }\n    model[paths[paths.length - 1]] = clone(value);\n}\n/**\n * @param {?} field\n * @return {?}\n */\nfunction getFieldValue(field) {\n    /** @type {?} */\n    let model = field.parent.model;\n    for (const path of getKeyPath(field)) {\n        if (!model) {\n            return model;\n        }\n        model = model[path];\n    }\n    return model;\n}\n/**\n * @param {?} dest\n * @param {...?} args\n * @return {?}\n */\nfunction reverseDeepMerge(dest, ...args) {\n    args.forEach((/**\n     * @param {?} src\n     * @return {?}\n     */\n    src => {\n        for (let srcArg in src) {\n            if (isNullOrUndefined(dest[srcArg]) || isBlankString(dest[srcArg])) {\n                dest[srcArg] = clone(src[srcArg]);\n            }\n            else if (objAndSameType(dest[srcArg], src[srcArg])) {\n                reverseDeepMerge(dest[srcArg], src[srcArg]);\n            }\n        }\n    }));\n    return dest;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isNullOrUndefined(value) {\n    return value === undefined || value === null;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isUndefined(value) {\n    return value === undefined;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isBlankString(value) {\n    return value === '';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isFunction(value) {\n    return typeof (value) === 'function';\n}\n/**\n * @param {?} obj1\n * @param {?} obj2\n * @return {?}\n */\nfunction objAndSameType(obj1, obj2) {\n    return isObject(obj1) && isObject(obj2)\n        && Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2)\n        && !(Array.isArray(obj1) || Array.isArray(obj2));\n}\n/**\n * @param {?} x\n * @return {?}\n */\nfunction isObject(x) {\n    return x != null && typeof x === 'object';\n}\n/**\n * @param {?} obj\n * @return {?}\n */\nfunction isPromise(obj) {\n    return !!obj && typeof obj.then === 'function';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction clone(value) {\n    if (!isObject(value)\n        || isObservable(value)\n        || (value instanceof TemplateRef)\n        || /* instanceof SafeHtmlImpl */ value.changingThisBreaksApplicationSecurity\n        || ['RegExp', 'FileList', 'File', 'Blob'].indexOf(value.constructor.name) !== -1) {\n        return value;\n    }\n    if (value instanceof Set) {\n        return new Set(value);\n    }\n    if (value instanceof Map) {\n        return new Map(value);\n    }\n    // https://github.com/moment/moment/blob/master/moment.js#L252\n    if (value._isAMomentObject && isFunction(value.clone)) {\n        return value.clone();\n    }\n    if (value instanceof AbstractControl) {\n        return null;\n    }\n    if (value instanceof Date) {\n        return new Date(value.getTime());\n    }\n    if (Array.isArray(value)) {\n        return value.slice(0).map((/**\n         * @param {?} v\n         * @return {?}\n         */\n        v => clone(v)));\n    }\n    // best way to clone a js object maybe\n    // https://stackoverflow.com/questions/41474986/how-to-clone-a-javascript-es6-class-instance\n    /** @type {?} */\n    const proto = Object.getPrototypeOf(value);\n    /** @type {?} */\n    let c = Object.create(proto);\n    c = Object.setPrototypeOf(c, proto);\n    // need to make a deep copy so we dont use Object.assign\n    // also Object.assign wont copy property descriptor exactly\n    return Object.keys(value).reduce((/**\n     * @param {?} newVal\n     * @param {?} prop\n     * @return {?}\n     */\n    (newVal, prop) => {\n        /** @type {?} */\n        const propDesc = Object.getOwnPropertyDescriptor(value, prop);\n        if (propDesc.get) {\n            Object.defineProperty(newVal, prop, propDesc);\n        }\n        else {\n            newVal[prop] = clone(value[prop]);\n        }\n        return newVal;\n    }), c);\n}\n/**\n * @param {?} field\n * @param {?} prop\n * @param {?} defaultValue\n * @return {?}\n */\nfunction defineHiddenProp(field, prop, defaultValue) {\n    Object.defineProperty(field, prop, { enumerable: false, writable: true, configurable: true });\n    field[prop] = defaultValue;\n}\n/**\n * @template T\n * @param {?} o\n * @param {?} prop\n * @param {?} setFn\n * @return {?}\n */\nfunction wrapProperty(o, prop, setFn) {\n    if (!o._observers) {\n        defineHiddenProp(o, '_observers', {});\n    }\n    if (!o._observers[prop]) {\n        o._observers[prop] = [];\n    }\n    /** @type {?} */\n    let fns = o._observers[prop];\n    if (fns.indexOf(setFn) === -1) {\n        fns.push(setFn);\n        setFn({ currentValue: o[prop], firstChange: true });\n        if (fns.length === 1) {\n            defineHiddenProp(o, `___$${prop}`, o[prop]);\n            Object.defineProperty(o, prop, {\n                configurable: true,\n                get: (/**\n                 * @return {?}\n                 */\n                () => o[`___$${prop}`]),\n                set: (/**\n                 * @param {?} currentValue\n                 * @return {?}\n                 */\n                currentValue => {\n                    if (currentValue !== o[`___$${prop}`]) {\n                        /** @type {?} */\n                        const previousValue = o[`___$${prop}`];\n                        o[`___$${prop}`] = currentValue;\n                        fns.forEach((/**\n                         * @param {?} changeFn\n                         * @return {?}\n                         */\n                        changeFn => changeFn({ previousValue, currentValue, firstChange: false })));\n                    }\n                }),\n            });\n        }\n    }\n    return (/**\n     * @return {?}\n     */\n    () => fns.splice(fns.indexOf(setFn), 1));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst FORMLY_CONFIG = new InjectionToken('FORMLY_CONFIG');\n/**\n * Maintains list of formly field directive types. This can be used to register new field templates.\n */\nclass FormlyConfig {\n    constructor() {\n        this.types = {};\n        this.validators = {};\n        this.wrappers = {};\n        this.messages = {};\n        this.templateManipulators = {\n            preWrapper: [],\n            postWrapper: [],\n        };\n        this.extras = {\n            checkExpressionOn: 'changeDetectionCheck',\n            lazyRender: false,\n            showError: (/**\n             * @param {?} field\n             * @return {?}\n             */\n            function (field) {\n                return field.formControl && field.formControl.invalid && (field.formControl.touched || (field.options.parentForm && field.options.parentForm.submitted) || !!(field.field.validation && field.field.validation.show));\n            }),\n        };\n        this.extensions = {};\n    }\n    /**\n     * @param {?} config\n     * @return {?}\n     */\n    addConfig(config) {\n        if (config.types) {\n            config.types.forEach((/**\n             * @param {?} type\n             * @return {?}\n             */\n            type => this.setType(type)));\n        }\n        if (config.validators) {\n            config.validators.forEach((/**\n             * @param {?} validator\n             * @return {?}\n             */\n            validator => this.setValidator(validator)));\n        }\n        if (config.wrappers) {\n            config.wrappers.forEach((/**\n             * @param {?} wrapper\n             * @return {?}\n             */\n            wrapper => this.setWrapper(wrapper)));\n        }\n        if (config.manipulators) {\n            console.warn(`NgxFormly: passing 'manipulators' config is deprecated, use custom extension instead.`);\n            config.manipulators.forEach((/**\n             * @param {?} manipulator\n             * @return {?}\n             */\n            manipulator => this.setManipulator(manipulator)));\n        }\n        if (config.validationMessages) {\n            config.validationMessages.forEach((/**\n             * @param {?} validation\n             * @return {?}\n             */\n            validation => this.addValidatorMessage(validation.name, validation.message)));\n        }\n        if (config.extensions) {\n            config.extensions.forEach((/**\n             * @param {?} c\n             * @return {?}\n             */\n            c => this.extensions[c.name] = c.extension));\n        }\n        if (config.extras) {\n            this.extras = Object.assign({}, this.extras, config.extras);\n        }\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    setType(options) {\n        if (Array.isArray(options)) {\n            options.forEach((/**\n             * @param {?} option\n             * @return {?}\n             */\n            (option) => this.setType(option)));\n        }\n        else {\n            if (!this.types[options.name]) {\n                this.types[options.name] = (/** @type {?} */ ({ name: options.name }));\n            }\n            ['component', 'extends', 'defaultOptions', 'wrappers'].forEach((/**\n             * @param {?} prop\n             * @return {?}\n             */\n            prop => {\n                if (options.hasOwnProperty(prop)) {\n                    this.types[options.name][prop] = options[prop];\n                }\n            }));\n        }\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    getType(name) {\n        if (!this.types[name]) {\n            throw new Error(`[Formly Error] The type \"${name}\" could not be found. Please make sure that is registered through the FormlyModule declaration.`);\n        }\n        this.mergeExtendedType(name);\n        return this.types[name];\n    }\n    /**\n     * @param {?=} field\n     * @return {?}\n     */\n    getMergedField(field = {}) {\n        /** @type {?} */\n        const type = this.getType(field.type);\n        if (type.defaultOptions) {\n            reverseDeepMerge(field, type.defaultOptions);\n        }\n        /** @type {?} */\n        const extendDefaults = type.extends && this.getType(type.extends).defaultOptions;\n        if (extendDefaults) {\n            reverseDeepMerge(field, extendDefaults);\n        }\n        if (field && field.optionsTypes) {\n            field.optionsTypes.forEach((/**\n             * @param {?} option\n             * @return {?}\n             */\n            option => {\n                /** @type {?} */\n                const defaultOptions = this.getType(option).defaultOptions;\n                if (defaultOptions) {\n                    reverseDeepMerge(field, defaultOptions);\n                }\n            }));\n        }\n        /** @type {?} */\n        const componentRef = this.resolveFieldTypeRef(field);\n        if (componentRef && componentRef.instance && componentRef.instance.defaultOptions) {\n            reverseDeepMerge(field, componentRef.instance.defaultOptions);\n        }\n        if (!field.wrappers && type.wrappers) {\n            field.wrappers = [...type.wrappers];\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?=} field\n     * @return {?}\n     */\n    resolveFieldTypeRef(field = {}) {\n        if (!field.type) {\n            return null;\n        }\n        /** @type {?} */\n        const type = this.getType(field.type);\n        if (!type.component || type['_componentRef']) {\n            return type['_componentRef'];\n        }\n        const { _resolver, _injector } = field.parent.options;\n        /** @type {?} */\n        const componentRef = _resolver\n            .resolveComponentFactory(type.component)\n            .create(_injector);\n        defineHiddenProp(type, '_componentRef', componentRef);\n        componentRef.destroy();\n        return type['_componentRef'];\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    setWrapper(options) {\n        this.wrappers[options.name] = options;\n        if (options.types) {\n            options.types.forEach((/**\n             * @param {?} type\n             * @return {?}\n             */\n            (type) => {\n                this.setTypeWrapper(type, options.name);\n            }));\n        }\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    getWrapper(name) {\n        if (!this.wrappers[name]) {\n            throw new Error(`[Formly Error] The wrapper \"${name}\" could not be found. Please make sure that is registered through the FormlyModule declaration.`);\n        }\n        return this.wrappers[name];\n    }\n    /**\n     * @param {?} type\n     * @param {?} name\n     * @return {?}\n     */\n    setTypeWrapper(type, name) {\n        if (!this.types[type]) {\n            this.types[type] = (/** @type {?} */ ({}));\n        }\n        if (!this.types[type].wrappers) {\n            this.types[type].wrappers = [];\n        }\n        if (this.types[type].wrappers.indexOf(name) === -1) {\n            this.types[type].wrappers.push(name);\n        }\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    setValidator(options) {\n        this.validators[options.name] = options;\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    getValidator(name) {\n        if (!this.validators[name]) {\n            throw new Error(`[Formly Error] The validator \"${name}\" could not be found. Please make sure that is registered through the FormlyModule declaration.`);\n        }\n        return this.validators[name];\n    }\n    /**\n     * @param {?} name\n     * @param {?} message\n     * @return {?}\n     */\n    addValidatorMessage(name, message) {\n        this.messages[name] = message;\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    getValidatorMessage(name) {\n        return this.messages[name];\n    }\n    /**\n     * @param {?} manipulator\n     * @return {?}\n     */\n    setManipulator(manipulator) {\n        new manipulator.class()[manipulator.method](this);\n    }\n    /**\n     * @private\n     * @param {?} name\n     * @return {?}\n     */\n    mergeExtendedType(name) {\n        if (!this.types[name].extends) {\n            return;\n        }\n        /** @type {?} */\n        const extendedType = this.getType(this.types[name].extends);\n        if (!this.types[name].component) {\n            this.types[name].component = extendedType.component;\n        }\n        if (!this.types[name].wrappers) {\n            this.types[name].wrappers = extendedType.wrappers;\n        }\n    }\n}\nFormlyConfig.ɵfac = function FormlyConfig_Factory(t) { return new (t || FormlyConfig)(); };\nFormlyConfig.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: FormlyConfig, factory: FormlyConfig.ɵfac, providedIn: 'root' });\n/** @nocollapse */ FormlyConfig.ngInjectableDef = defineInjectable({ factory: function FormlyConfig_Factory() { return new FormlyConfig(); }, token: FormlyConfig, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormlyConfig, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return []; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FormlyFormBuilder {\n    /**\n     * @param {?} formlyConfig\n     * @param {?} componentFactoryResolver\n     * @param {?} injector\n     */\n    constructor(formlyConfig, componentFactoryResolver, injector) {\n        this.formlyConfig = formlyConfig;\n        this.componentFactoryResolver = componentFactoryResolver;\n        this.injector = injector;\n    }\n    /**\n     * @param {?} formControl\n     * @param {?=} fieldGroup\n     * @param {?=} model\n     * @param {?=} options\n     * @return {?}\n     */\n    buildForm(formControl, fieldGroup = [], model, options) {\n        if (!this.formlyConfig.extensions.core) {\n            throw new Error('NgxFormly: missing `forRoot()` call. use `forRoot()` when registering the `FormlyModule`.');\n        }\n        /** @type {?} */\n        const field = { fieldGroup, model, formControl, options: this._setOptions(options) };\n        disableTreeValidityCall(formControl, (/**\n         * @return {?}\n         */\n        () => {\n            this._buildForm(field);\n            field.options._checkField(field, true);\n        }));\n    }\n    /**\n     * @private\n     * @param {?} field\n     * @return {?}\n     */\n    _buildForm(field) {\n        this.getExtensions().forEach((/**\n         * @param {?} extension\n         * @return {?}\n         */\n        extension => extension.prePopulate && extension.prePopulate(field)));\n        this.getExtensions().forEach((/**\n         * @param {?} extension\n         * @return {?}\n         */\n        extension => extension.onPopulate && extension.onPopulate(field)));\n        if (field.fieldGroup) {\n            field.fieldGroup.forEach((/**\n             * @param {?} f\n             * @return {?}\n             */\n            (f) => this._buildForm(f)));\n        }\n        this.getExtensions().forEach((/**\n         * @param {?} extension\n         * @return {?}\n         */\n        extension => extension.postPopulate && extension.postPopulate(field)));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    getExtensions() {\n        return Object.keys(this.formlyConfig.extensions).map((/**\n         * @param {?} name\n         * @return {?}\n         */\n        name => this.formlyConfig.extensions[name]));\n    }\n    /**\n     * @private\n     * @param {?} options\n     * @return {?}\n     */\n    _setOptions(options) {\n        options = options || {};\n        options.formState = options.formState || {};\n        if (!options.showError) {\n            options.showError = this.formlyConfig.extras.showError;\n        }\n        if (!options.fieldChanges) {\n            defineHiddenProp(options, 'fieldChanges', new Subject());\n        }\n        if (!options._resolver) {\n            defineHiddenProp(options, '_resolver', this.componentFactoryResolver);\n        }\n        if (!options._injector) {\n            defineHiddenProp(options, '_injector', this.injector);\n        }\n        if (!options._hiddenFieldsForCheck) {\n            options._hiddenFieldsForCheck = [];\n        }\n        if (!options._markForCheck) {\n            options._markForCheck = (/**\n             * @param {?} field\n             * @return {?}\n             */\n            (field) => {\n                if (field._componentRefs) {\n                    field._componentRefs.forEach((/**\n                     * @param {?} ref\n                     * @return {?}\n                     */\n                    ref => {\n                        // NOTE: we cannot use ref.changeDetectorRef, see https://github.com/ngx-formly/ngx-formly/issues/2191\n                        /** @type {?} */\n                        const changeDetectorRef = ref.injector.get(ChangeDetectorRef);\n                        changeDetectorRef.markForCheck();\n                    }));\n                }\n                if (field.fieldGroup) {\n                    field.fieldGroup.forEach((/**\n                     * @param {?} f\n                     * @return {?}\n                     */\n                    f => options._markForCheck(f)));\n                }\n            });\n        }\n        if (!options._buildField) {\n            options._buildField = (/**\n             * @param {?} field\n             * @return {?}\n             */\n            (field) => {\n                this._setOptions(field.options);\n                this._buildForm(field);\n                ((/** @type {?} */ (field.options)))._checkField(field, true);\n                return field;\n            });\n        }\n        return options;\n    }\n}\nFormlyFormBuilder.ɵfac = function FormlyFormBuilder_Factory(t) { return new (t || FormlyFormBuilder)(ɵngcc0.ɵɵinject(FormlyConfig), ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };\nFormlyFormBuilder.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: FormlyFormBuilder, factory: FormlyFormBuilder.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nFormlyFormBuilder.ctorParameters = () => [\n    { type: FormlyConfig },\n    { type: ComponentFactoryResolver },\n    { type: Injector }\n];\n/** @nocollapse */ FormlyFormBuilder.ngInjectableDef = defineInjectable({ factory: function FormlyFormBuilder_Factory() { return new FormlyFormBuilder(inject(FormlyConfig), inject(ComponentFactoryResolver), inject(INJECTOR)); }, token: FormlyFormBuilder, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormlyFormBuilder, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: FormlyConfig }, { type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.Injector }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} field\n * @param {?=} emitEvent\n * @return {?}\n */\nfunction unregisterControl(field, emitEvent = false) {\n    /** @type {?} */\n    const control = field.formControl;\n    /** @type {?} */\n    const fieldIndex = control['_fields'] ? control['_fields'].indexOf(field) : -1;\n    if (fieldIndex !== -1) {\n        control['_fields'].splice(fieldIndex, 1);\n    }\n    /** @type {?} */\n    const form = (/** @type {?} */ (control.parent));\n    if (!form) {\n        return;\n    }\n    /** @type {?} */\n    const opts = { emitEvent };\n    if (form instanceof FormArray) {\n        /** @type {?} */\n        const key = form.controls.findIndex((/**\n         * @param {?} c\n         * @return {?}\n         */\n        c => c === control));\n        if (key !== -1) {\n            updateControl(form, opts, (/**\n             * @return {?}\n             */\n            () => form.removeAt(key)));\n        }\n    }\n    else if (form instanceof FormGroup) {\n        /** @type {?} */\n        const paths = getKeyPath(field);\n        /** @type {?} */\n        const key = paths[paths.length - 1];\n        if (form.get([key]) === control) {\n            updateControl(form, opts, (/**\n             * @return {?}\n             */\n            () => form.removeControl(key)));\n        }\n    }\n    control.setParent(null);\n}\n/**\n * @param {?} field\n * @return {?}\n */\nfunction findControl(field) {\n    if (field.formControl) {\n        return field.formControl;\n    }\n    if (field['shareFormControl'] === false) {\n        return null;\n    }\n    /** @type {?} */\n    const form = (/** @type {?} */ (field.parent.formControl));\n    return form ? form.get(getKeyPath(field)) : null;\n}\n/**\n * @param {?} field\n * @param {?=} control\n * @param {?=} emitEvent\n * @return {?}\n */\nfunction registerControl(field, control, emitEvent = false) {\n    control = control || field.formControl;\n    if (!control['_fields']) {\n        defineHiddenProp(control, '_fields', []);\n    }\n    if (control['_fields'].indexOf(field) === -1) {\n        control['_fields'].push(field);\n    }\n    if (!field.formControl && control) {\n        defineHiddenProp(field, 'formControl', control);\n        control.setValidators(null);\n        control.setAsyncValidators(null);\n        field.templateOptions.disabled = !!field.templateOptions.disabled;\n        wrapProperty(field.templateOptions, 'disabled', (/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ({ firstChange, currentValue }) => {\n            if (!firstChange) {\n                currentValue ? field.formControl.disable() : field.formControl.enable();\n            }\n        }));\n        if (control.registerOnDisabledChange) {\n            control.registerOnDisabledChange((/**\n             * @param {?} value\n             * @return {?}\n             */\n            (value) => {\n                field.templateOptions['___$disabled'] = value;\n                // TODO remove in V6\n                field.options && field.options._markForCheck(field);\n            }));\n        }\n    }\n    /** @type {?} */\n    let parent = (/** @type {?} */ (field.parent.formControl));\n    if (!parent || !field.key) {\n        return;\n    }\n    /** @type {?} */\n    const paths = getKeyPath(field);\n    /** @type {?} */\n    const value = getFieldValue(field);\n    if (!(isNullOrUndefined(control.value) && isNullOrUndefined(value))\n        && control.value !== value\n        && control instanceof FormControl) {\n        control.patchValue(value);\n    }\n    for (let i = 0; i < (paths.length - 1); i++) {\n        /** @type {?} */\n        const path = paths[i];\n        if (!parent.get([path])) {\n            updateControl(parent, { emitEvent }, (/**\n             * @return {?}\n             */\n            () => parent.setControl(path, new FormGroup({}))));\n        }\n        parent = (/** @type {?} */ (parent.get([path])));\n    }\n    /** @type {?} */\n    const key = paths[paths.length - 1];\n    if (!field._hide && parent.get([key]) !== control) {\n        updateControl(parent, { emitEvent }, (/**\n         * @return {?}\n         */\n        () => parent.setControl(key, control)));\n    }\n}\n/**\n * @param {?} c\n * @param {?=} onlySelf\n * @return {?}\n */\nfunction updateValidity(c, onlySelf = false) {\n    /** @type {?} */\n    const status = c.status;\n    /** @type {?} */\n    const value = c.value;\n    c.updateValueAndValidity({ emitEvent: false, onlySelf });\n    if (status !== c.status) {\n        ((/** @type {?} */ (c.statusChanges))).emit(c.status);\n    }\n    if (value !== c.value) {\n        ((/** @type {?} */ (c.valueChanges))).emit(c.value);\n    }\n}\n/**\n * @param {?} form\n * @param {?} opts\n * @param {?} action\n * @return {?}\n */\nfunction updateControl(form, opts, action) {\n    /**\n     *  workaround for https://github.com/angular/angular/issues/27679\n     */\n    if (form instanceof FormGroup && !form['__patchForEachChild']) {\n        defineHiddenProp(form, '__patchForEachChild', true);\n        ((/** @type {?} */ (form)))._forEachChild = (/**\n         * @param {?} cb\n         * @return {?}\n         */\n        (cb) => {\n            Object\n                .keys(form.controls)\n                .forEach((/**\n             * @param {?} k\n             * @return {?}\n             */\n            k => form.controls[k] && cb(form.controls[k], k)));\n        });\n    }\n    /**\n     * workaround for https://github.com/angular/angular/issues/20439\n     * @type {?}\n     */\n    const updateValueAndValidity = form.updateValueAndValidity.bind(form);\n    if (opts.emitEvent === false) {\n        form.updateValueAndValidity = (/**\n         * @param {?} opts\n         * @return {?}\n         */\n        (opts) => {\n            updateValueAndValidity(Object.assign({}, (opts || {}), { emitEvent: false }));\n        });\n    }\n    action();\n    if (opts.emitEvent === false) {\n        form.updateValueAndValidity = updateValueAndValidity;\n    }\n}\n/**\n * @param {?} form\n * @return {?}\n */\nfunction clearControl(form) {\n    form['_fields'] && delete form['_fields'];\n    form.setValidators(null);\n    form.setAsyncValidators(null);\n    if (form instanceof FormGroup || form instanceof FormArray) {\n        Object.keys(form.controls)\n            .forEach((/**\n         * @param {?} k\n         * @return {?}\n         */\n        (k) => clearControl(form.controls[k])));\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FormlyForm {\n    /**\n     * @param {?} formlyBuilder\n     * @param {?} formlyConfig\n     * @param {?} ngZone\n     * @param {?} immutable\n     * @param {?} parentFormGroup\n     */\n    constructor(formlyBuilder, formlyConfig, ngZone, \n    // tslint:disable-next-line\n    immutable, parentFormGroup) {\n        this.formlyBuilder = formlyBuilder;\n        this.formlyConfig = formlyConfig;\n        this.ngZone = ngZone;\n        this.parentFormGroup = parentFormGroup;\n        this.modelChange = new EventEmitter();\n        this.immutable = false;\n        this._modelChangeValue = {};\n        this.modelChangeSubs = [];\n        this.modelChange$ = new Subject();\n        this.modelChangeSub = this.modelChange$.pipe(switchMap((/**\n         * @return {?}\n         */\n        () => this.ngZone.onStable.asObservable().pipe(take(1))))).subscribe((/**\n         * @return {?}\n         */\n        () => this.ngZone.runGuarded((/**\n         * @return {?}\n         */\n        () => {\n            // runGuarded is used to keep the expression changes in-sync\n            // https://github.com/ngx-formly/ngx-formly/issues/2095\n            this.checkExpressionChange();\n            this.modelChange.emit(this._modelChangeValue = clone(this.model));\n        }))));\n        if (immutable !== null) {\n            console.warn(`NgxFormly: passing 'immutable' attribute to 'formly-form' component is deprecated since v5.5, enable immutable mode through NgModule declaration instead.`);\n        }\n        this.immutable = (immutable !== null) || !!formlyConfig.extras.immutable;\n    }\n    /**\n     * @param {?} model\n     * @return {?}\n     */\n    set model(model) { this._model = this.immutable ? clone(model) : model; }\n    /**\n     * @return {?}\n     */\n    get model() {\n        if (!this._model) {\n            this._model = {};\n        }\n        return this._model;\n    }\n    /**\n     * @param {?} fields\n     * @return {?}\n     */\n    set fields(fields) { this._fields = this.immutable ? clone(fields) : fields; }\n    /**\n     * @return {?}\n     */\n    get fields() { return this._fields || []; }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    set options(options) { this._options = this.immutable ? clone(options) : options; }\n    /**\n     * @return {?}\n     */\n    get options() { return this._options; }\n    /**\n     * @param {?} content\n     * @return {?}\n     */\n    set content(content) {\n        if (content) {\n            /** @type {?} */\n            let hasContent = false;\n            /** @type {?} */\n            let node = content.nativeElement.nextSibling;\n            while (node && !hasContent) {\n                if (node.nodeType === Node.ELEMENT_NODE\n                    || node.nodeType === Node.TEXT_NODE && node.textContent && node.textContent.trim() !== '') {\n                    hasContent = true;\n                }\n                node = node.nextSibling;\n            }\n            if (hasContent) {\n                console.warn(`NgxFormly: content projection for 'formly-form' component is deprecated since v5.5, you should avoid passing content inside the 'formly-form' tag.`);\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this.formlyConfig.extras.checkExpressionOn === 'changeDetectionCheck') {\n            this.checkExpressionChange();\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        // https://github.com/ngx-formly/ngx-formly/issues/2294\n        if (changes.model && this.field) {\n            this.field.model = this.model;\n        }\n        if (changes.fields && this.form) {\n            clearControl(this.form);\n        }\n        if (changes.fields || changes.form || (changes.model && this._modelChangeValue !== changes.model.currentValue)) {\n            this.form = this.form || (new FormGroup({}));\n            this.setOptions();\n            this.options.updateInitialValue();\n            this.clearModelSubscriptions();\n            this.formlyBuilder.buildForm(this.form, this.fields, this.model, this.options);\n            this.trackModelChanges(this.fields);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.modelChangeSub.unsubscribe();\n        this.clearModelSubscriptions();\n    }\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    changeModel({ key, value, field }) {\n        assignFieldValue(field, value);\n        this.modelChange$.next();\n    }\n    /**\n     * @return {?}\n     */\n    setOptions() {\n        if (!this.options) {\n            this.options = {};\n        }\n        if (!this.options.resetModel) {\n            this.options.resetModel = (/**\n             * @param {?=} model\n             * @return {?}\n             */\n            (model) => {\n                model = clone(isNullOrUndefined(model) ? ((/** @type {?} */ (this.options)))._initialModel : model);\n                if (this.model) {\n                    Object.keys(this.model).forEach((/**\n                     * @param {?} k\n                     * @return {?}\n                     */\n                    k => delete this.model[k]));\n                    Object.assign(this.model, model || {});\n                }\n                ((/** @type {?} */ (this.options)))._buildForm();\n                // we should call `NgForm::resetForm` to ensure changing `submitted` state after resetting form\n                // but only when the current component is a root one.\n                if (this.options.parentForm && this.options.parentForm.control === this.form) {\n                    this.options.parentForm.resetForm(this.model);\n                }\n                else {\n                    this.form.reset(this.model);\n                }\n            });\n        }\n        if (!this.options.parentForm && this.parentFormGroup) {\n            defineHiddenProp(this.options, 'parentForm', this.parentFormGroup);\n            wrapProperty(this.options.parentForm, 'submitted', (/**\n             * @param {?} __0\n             * @return {?}\n             */\n            ({ firstChange }) => {\n                if (!firstChange) {\n                    this.checkExpressionChange();\n                    ((/** @type {?} */ (this.options)))._markForCheck({\n                        fieldGroup: this.fields,\n                        model: this.model,\n                        formControl: this.form,\n                        options: this.options,\n                    });\n                }\n            }));\n        }\n        if (!this.options.updateInitialValue) {\n            this.options.updateInitialValue = (/**\n             * @return {?}\n             */\n            () => ((/** @type {?} */ (this.options)))._initialModel = clone(this.model));\n        }\n        if (!((/** @type {?} */ (this.options)))._buildForm) {\n            ((/** @type {?} */ (this.options)))._buildForm = (/**\n             * @param {?=} emitModelChange\n             * @return {?}\n             */\n            (emitModelChange = false) => {\n                this.clearModelSubscriptions();\n                this.formlyBuilder.buildForm(this.form, this.fields, this.model, this.options);\n                this.trackModelChanges(this.fields);\n                if (emitModelChange) {\n                    this.modelChange.emit(this._modelChangeValue = clone(this.model));\n                }\n            });\n        }\n        if (!((/** @type {?} */ (this.options)))._trackModelChanges) {\n            ((/** @type {?} */ (this.options)))._trackModelChanges = (/**\n             * @param {?=} emitModelChange\n             * @return {?}\n             */\n            (emitModelChange = false) => {\n                this.clearModelSubscriptions();\n                this.trackModelChanges(this.fields);\n                if (emitModelChange) {\n                    this.modelChange.emit(this._modelChangeValue = clone(this.model));\n                }\n            });\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    checkExpressionChange() {\n        if (this.options && ((/** @type {?} */ (this.options)))._checkField) {\n            ((/** @type {?} */ (this.options)))._checkField({\n                fieldGroup: this.fields,\n                model: this.model,\n                formControl: this.form,\n                options: this.options,\n            });\n        }\n    }\n    /**\n     * @private\n     * @param {?} fields\n     * @param {?=} rootKey\n     * @return {?}\n     */\n    trackModelChanges(fields, rootKey = []) {\n        fields.forEach((/**\n         * @param {?} field\n         * @return {?}\n         */\n        field => {\n            if (field.key && !field.fieldGroup && field.formControl) {\n                /** @type {?} */\n                const control = field.formControl;\n                /** @type {?} */\n                let valueChanges = control.valueChanges.pipe(distinctUntilChanged((/**\n                 * @param {?} x\n                 * @param {?} y\n                 * @return {?}\n                 */\n                (x, y) => {\n                    if (x !== y || Array.isArray(x) || isObject(x)) {\n                        return false;\n                    }\n                    return true;\n                })));\n                const { updateOn, debounce } = field.modelOptions;\n                if ((!updateOn || updateOn === 'change') && debounce && debounce.default > 0) {\n                    valueChanges = control.valueChanges.pipe(debounceTime(debounce.default));\n                }\n                this.modelChangeSubs.push(valueChanges.subscribe((/**\n                 * @param {?} value\n                 * @return {?}\n                 */\n                (value) => {\n                    // workaround for https://github.com/angular/angular/issues/13792\n                    if (control instanceof FormControl && control['_fields'] && control['_fields'].length > 1) {\n                        control.patchValue(value, { emitEvent: false, onlySelf: true });\n                    }\n                    if (field.parsers && field.parsers.length > 0) {\n                        field.parsers.forEach((/**\n                         * @param {?} parserFn\n                         * @return {?}\n                         */\n                        parserFn => value = parserFn(value)));\n                    }\n                    this.changeModel({ key: [...rootKey, ...getKeyPath(field)].join('.'), value, field });\n                })));\n                // workaround for v5 (https://github.com/ngx-formly/ngx-formly/issues/2061)\n                /** @type {?} */\n                const observers = control.valueChanges['observers'];\n                if (observers && observers.length > 1) {\n                    observers.unshift(observers.pop());\n                }\n            }\n            if (field.fieldGroup && field.fieldGroup.length > 0) {\n                this.trackModelChanges(field.fieldGroup, field.key ? [...rootKey, ...getKeyPath(field)] : rootKey);\n            }\n        }));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    clearModelSubscriptions() {\n        this.modelChangeSubs.forEach((/**\n         * @param {?} sub\n         * @return {?}\n         */\n        sub => sub.unsubscribe()));\n        this.modelChangeSubs = [];\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    get field() {\n        return this.fields && this.fields[0] && this.fields[0].parent;\n    }\n}\nFormlyForm.ɵfac = function FormlyForm_Factory(t) { return new (t || FormlyForm)(ɵngcc0.ɵɵdirectiveInject(FormlyFormBuilder), ɵngcc0.ɵɵdirectiveInject(FormlyConfig), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵinjectAttribute('immutable'), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FormGroupDirective, 8)); };\nFormlyForm.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: FormlyForm, selectors: [[\"formly-form\"]], viewQuery: function FormlyForm_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.content = _t.first);\n    } }, inputs: { model: \"model\", fields: \"fields\", options: \"options\", form: \"form\" }, outputs: { modelChange: \"modelChange\" }, features: [ɵngcc0.ɵɵProvidersFeature([FormlyFormBuilder]), ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c1, decls: 9, vars: 1, consts: [[\"hide-deprecation\", \"\", 3, \"form\", \"options\", \"model\", \"field\", 4, \"ngFor\", \"ngForOf\"], [\"content\", \"\"], [\"hide-deprecation\", \"\", 3, \"form\", \"options\", \"model\", \"field\"]], template: function FormlyForm_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtext(0, \"\\n    \");\n        ɵngcc0.ɵɵtemplate(1, FormlyForm_formly_field_1_Template, 2, 4, \"formly-field\", 0);\n        ɵngcc0.ɵɵtext(2, \"\\n    \");\n        ɵngcc0.ɵɵelementContainerStart(3, null, 1);\n        ɵngcc0.ɵɵtext(5, \"\\n      \");\n        ɵngcc0.ɵɵprojection(6);\n        ɵngcc0.ɵɵtext(7, \"\\n    \");\n        ɵngcc0.ɵɵelementContainerEnd();\n        ɵngcc0.ɵɵtext(8, \"\\n  \");\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.fields);\n    } }, dependencies: function () { return [ɵngcc2.NgForOf, FormlyField]; }, encapsulation: 2 });\n/** @nocollapse */\nFormlyForm.ctorParameters = () => [\n    { type: FormlyFormBuilder },\n    { type: FormlyConfig },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Attribute, args: ['immutable',] }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] }\n];\nFormlyForm.propDecorators = {\n    form: [{ type: Input }],\n    model: [{ type: Input }],\n    fields: [{ type: Input }],\n    options: [{ type: Input }],\n    modelChange: [{ type: Output }],\n    content: [{ type: ViewChild, args: ['content',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormlyForm, [{\n        type: Component,\n        args: [{\n                selector: 'formly-form',\n                template: `\n    <formly-field *ngFor=\"let field of fields\"\n      hide-deprecation\n      [form]=\"field.form\"\n      [options]=\"field.options\"\n      [model]=\"field.model\"\n      [field]=\"field\">\n    </formly-field>\n    <ng-container #content>\n      <ng-content></ng-content>\n    </ng-container>\n  `,\n                providers: [FormlyFormBuilder]\n            }]\n    }], function () { return [{ type: FormlyFormBuilder }, { type: FormlyConfig }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Attribute,\n                args: ['immutable']\n            }] }, { type: ɵngcc1.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }]; }, { modelChange: [{\n            type: Output\n        }], model: [{\n            type: Input\n        }], fields: [{\n            type: Input\n        }], options: [{\n            type: Input\n        }], content: [{\n            type: ViewChild,\n            args: ['content']\n        }], form: [{\n            type: Input\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FormlyField {\n    /**\n     * @param {?} formlyConfig\n     * @param {?} renderer\n     * @param {?} resolver\n     * @param {?} elementRef\n     * @param {?} hideDeprecation\n     */\n    constructor(formlyConfig, renderer, resolver, elementRef, \n    // tslint:disable-next-line\n    hideDeprecation) {\n        this.formlyConfig = formlyConfig;\n        this.renderer = renderer;\n        this.resolver = resolver;\n        this.elementRef = elementRef;\n        this.warnDeprecation = false;\n        this.modelChange = new EventEmitter();\n        this.hostObservers = [];\n        this.componentRefs = [];\n        this.hooksObservers = [];\n        this.detectFieldBuild = false;\n        this.warnDeprecation = hideDeprecation === null;\n    }\n    /**\n     * @param {?} m\n     * @return {?}\n     */\n    set model(m) {\n        this.warnDeprecation && console.warn(`NgxFormly: passing 'model' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);\n    }\n    /**\n     * @param {?} form\n     * @return {?}\n     */\n    set form(form) {\n        this.warnDeprecation && console.warn(`NgxFormly: passing 'form' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    set options(options) {\n        this.warnDeprecation && console.warn(`NgxFormly: passing 'options' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this.triggerHook('afterContentInit');\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n        this.triggerHook('afterContentChecked');\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        this.triggerHook('afterViewInit');\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewChecked() {\n        this.triggerHook('afterViewChecked');\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        this.triggerHook('doCheck');\n        if (this.detectFieldBuild && (this.field && this.field.options)) {\n            this.render();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.triggerHook('onInit');\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        this.triggerHook('onChanges', changes);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.resetRefs(this.field);\n        this.hostObservers.forEach((/**\n         * @param {?} unsubscribe\n         * @return {?}\n         */\n        unsubscribe => unsubscribe()));\n        this.hooksObservers.forEach((/**\n         * @param {?} unsubscribe\n         * @return {?}\n         */\n        unsubscribe => unsubscribe()));\n        this.triggerHook('onDestroy');\n    }\n    /**\n     * @private\n     * @param {?} containerRef\n     * @param {?} f\n     * @param {?=} wrappers\n     * @return {?}\n     */\n    renderField(containerRef, f, wrappers = []) {\n        if (this.containerRef === containerRef) {\n            this.resetRefs(this.field);\n            this.containerRef.clear();\n            wrappers = this.field ? this.field.wrappers : [];\n        }\n        if (wrappers && wrappers.length > 0) {\n            const [wrapper, ...wps] = wrappers;\n            const { component } = this.formlyConfig.getWrapper(wrapper);\n            /** @type {?} */\n            const ref = containerRef.createComponent(this.resolver.resolveComponentFactory(component));\n            this.attachComponentRef(ref, f);\n            wrapProperty(ref.instance, 'fieldComponent', (/**\n             * @param {?} __0\n             * @return {?}\n             */\n            ({ firstChange, previousValue, currentValue }) => {\n                if (currentValue) {\n                    if (previousValue && previousValue['_lContainer'] === currentValue['_lContainer']) {\n                        return;\n                    }\n                    /** @type {?} */\n                    const viewRef = previousValue ? previousValue.detach() : null;\n                    if (viewRef && !viewRef.destroyed) {\n                        currentValue.insert(viewRef);\n                    }\n                    else {\n                        this.renderField(currentValue, f, wps);\n                    }\n                    !firstChange && ref.changeDetectorRef.detectChanges();\n                }\n            }));\n        }\n        else if (f && f.type) {\n            const { component } = this.formlyConfig.getType(f.type);\n            /** @type {?} */\n            const ref = containerRef.createComponent(this.resolver.resolveComponentFactory(component));\n            this.attachComponentRef(ref, f);\n        }\n    }\n    /**\n     * @private\n     * @param {?} name\n     * @param {?=} changes\n     * @return {?}\n     */\n    triggerHook(name, changes) {\n        if (this.field && this.field.hooks && this.field.hooks[name]) {\n            if (!changes || changes.field) {\n                /** @type {?} */\n                const r = this.field.hooks[name](this.field);\n                if (isObservable(r) && ['onInit', 'afterContentInit', 'afterViewInit'].indexOf(name) !== -1) {\n                    /** @type {?} */\n                    const sub = r.subscribe();\n                    this.hooksObservers.push((/**\n                     * @return {?}\n                     */\n                    () => sub.unsubscribe()));\n                }\n            }\n        }\n        if (this.field && this.field.lifecycle && this.field.lifecycle[name]) {\n            this.field.lifecycle[name](this.field.form, this.field, this.field.model, this.field.options);\n        }\n        if (name === 'onChanges' && changes.field) {\n            this.resetRefs(changes.field.previousValue);\n            this.render();\n        }\n    }\n    /**\n     * @private\n     * @template T\n     * @param {?} ref\n     * @param {?} field\n     * @return {?}\n     */\n    attachComponentRef(ref, field) {\n        this.componentRefs.push(ref);\n        field._componentRefs.push(ref);\n        Object.assign(ref.instance, { field });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    render() {\n        if (!this.field) {\n            return;\n        }\n        // require Formly build\n        if (!this.field.options) {\n            this.detectFieldBuild = true;\n            return;\n        }\n        this.detectFieldBuild = false;\n        this.hostObservers.forEach((/**\n         * @param {?} unsubscribe\n         * @return {?}\n         */\n        unsubscribe => unsubscribe()));\n        this.hostObservers = [\n            wrapProperty(this.field, 'hide', (/**\n             * @param {?} __0\n             * @return {?}\n             */\n            ({ firstChange, currentValue }) => {\n                if (!firstChange || (firstChange && currentValue)) {\n                    this.renderer.setStyle(this.elementRef.nativeElement, 'display', currentValue ? 'none' : '');\n                }\n                if (!this.formlyConfig.extras.lazyRender) {\n                    firstChange && this.renderField(this.containerRef, this.field);\n                }\n                else {\n                    if (currentValue) {\n                        this.containerRef.clear();\n                        if (this.field.className) {\n                            this.renderer.removeAttribute(this.elementRef.nativeElement, 'class');\n                        }\n                    }\n                    else {\n                        this.renderField(this.containerRef, this.field);\n                        if (this.field.className) {\n                            this.renderer.setAttribute(this.elementRef.nativeElement, 'class', this.field.className);\n                        }\n                    }\n                }\n            })),\n            wrapProperty(this.field, 'className', (/**\n             * @param {?} __0\n             * @return {?}\n             */\n            ({ firstChange, currentValue }) => {\n                if ((!firstChange || (firstChange && currentValue))\n                    && (!this.formlyConfig.extras.lazyRender || (this.field.hide !== true))) {\n                    this.renderer.setAttribute(this.elementRef.nativeElement, 'class', currentValue);\n                }\n            })),\n        ];\n    }\n    /**\n     * @private\n     * @param {?} field\n     * @return {?}\n     */\n    resetRefs(field) {\n        if (field) {\n            if (field._componentRefs) {\n                field._componentRefs = field._componentRefs.filter((/**\n                 * @param {?} ref\n                 * @return {?}\n                 */\n                ref => this.componentRefs.indexOf(ref) === -1));\n            }\n            else {\n                defineHiddenProp(this.field, '_componentRefs', []);\n            }\n        }\n        this.componentRefs = [];\n    }\n}\nFormlyField.ɵfac = function FormlyField_Factory(t) { return new (t || FormlyField)(ɵngcc0.ɵɵdirectiveInject(FormlyConfig), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵinjectAttribute('hide-deprecation')); };\nFormlyField.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: FormlyField, selectors: [[\"formly-field\"]], viewQuery: function FormlyField_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c2, 7, ViewContainerRef);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.containerRef = _t.first);\n    } }, inputs: { model: \"model\", form: \"form\", options: \"options\", field: \"field\" }, outputs: { modelChange: \"modelChange\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 2, vars: 0, consts: [[\"container\", \"\"]], template: function FormlyField_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, FormlyField_ng_template_0_Template, 0, 0, \"ng-template\", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);\n    } }, encapsulation: 2 });\n/** @nocollapse */\nFormlyField.ctorParameters = () => [\n    { type: FormlyConfig },\n    { type: Renderer2 },\n    { type: ComponentFactoryResolver },\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Attribute, args: ['hide-deprecation',] }] }\n];\nFormlyField.propDecorators = {\n    field: [{ type: Input }],\n    model: [{ type: Input }],\n    form: [{ type: Input }],\n    options: [{ type: Input }],\n    modelChange: [{ type: Output }],\n    containerRef: [{ type: ViewChild, args: ['container', (/** @type {?} */ ({ read: ViewContainerRef, static: true })),] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormlyField, [{\n        type: Component,\n        args: [{\n                selector: 'formly-field',\n                template: `<ng-template #container></ng-template>`\n            }]\n    }], function () { return [{ type: FormlyConfig }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Attribute,\n                args: ['hide-deprecation']\n            }] }]; }, { modelChange: [{\n            type: Output\n        }], model: [{\n            type: Input\n        }], form: [{\n            type: Input\n        }], options: [{\n            type: Input\n        }], field: [{\n            type: Input\n        }], containerRef: [{\n            type: ViewChild,\n            args: ['container', ( /** @type {?} */({ read: ViewContainerRef, static: true }))]\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FormlyAttributes {\n    /**\n     * @param {?} renderer\n     * @param {?} elementRef\n     * @param {?} _document\n     */\n    constructor(renderer, elementRef, _document) {\n        this.renderer = renderer;\n        this.elementRef = elementRef;\n        this.uiAttributesCache = {};\n        this.uiAttributes = null;\n        /**\n         * HostBinding doesn't register listeners conditionally which may produce some perf issues.\n         *\n         * Formly issue: https://github.com/ngx-formly/ngx-formly/issues/1991\n         */\n        this.uiEvents = {\n            listeners: [],\n            events: ['click', 'keyup', 'keydown', 'keypress', 'focus', 'blur', 'change'],\n            callback: (/**\n             * @param {?} eventName\n             * @param {?} $event\n             * @return {?}\n             */\n            (eventName, $event) => {\n                switch (eventName) {\n                    case 'focus':\n                        return this.onFocus($event);\n                    case 'blur':\n                        return this.onBlur($event);\n                    case 'change':\n                        return this.onChange($event);\n                    default:\n                        return this.to[eventName](this.field, $event);\n                }\n            }),\n        };\n        this.document = _document;\n    }\n    /**\n     * @return {?}\n     */\n    get to() { return this.field.templateOptions || {}; }\n    /**\n     * @private\n     * @return {?}\n     */\n    get fieldAttrElements() { return (this.field && this.field['_elementRefs']) || []; }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if (changes.field) {\n            this.field.name && this.setAttribute('name', this.field.name);\n            this.uiEvents.listeners.forEach((/**\n             * @param {?} listener\n             * @return {?}\n             */\n            (listener) => listener()));\n            this.uiEvents.events.forEach((/**\n             * @param {?} eventName\n             * @return {?}\n             */\n            (eventName) => {\n                if ((this.to && this.to[eventName]) || ['focus', 'blur', 'change'].indexOf(eventName) !== -1) {\n                    this.uiEvents.listeners.push(this.renderer.listen(this.elementRef.nativeElement, eventName, (/**\n                     * @param {?} e\n                     * @return {?}\n                     */\n                    (e) => this.uiEvents.callback(eventName, e))));\n                }\n            }));\n            if (this.to && this.to.attributes) {\n                wrapProperty(this.to, 'attributes', (/**\n                 * @param {?} __0\n                 * @return {?}\n                 */\n                ({ currentValue, previousValue }) => {\n                    if (previousValue) {\n                        Object.keys(previousValue).forEach((/**\n                         * @param {?} attr\n                         * @return {?}\n                         */\n                        attr => this.removeAttribute(attr)));\n                    }\n                    if (currentValue) {\n                        Object.keys(currentValue).forEach((/**\n                         * @param {?} attr\n                         * @return {?}\n                         */\n                        attr => {\n                            if (currentValue[attr] != null) {\n                                this.setAttribute(attr, currentValue[attr]);\n                            }\n                        }));\n                    }\n                }));\n            }\n            this.detachElementRef(changes.field.previousValue);\n            this.attachElementRef(changes.field.currentValue);\n            if (this.fieldAttrElements.length === 1) {\n                !this.id && this.field.id && this.setAttribute('id', this.field.id);\n                wrapProperty(this.field, 'focus', (/**\n                 * @param {?} __0\n                 * @return {?}\n                 */\n                ({ currentValue }) => {\n                    this.toggleFocus(currentValue);\n                }));\n            }\n        }\n        if (changes.id) {\n            this.setAttribute('id', this.id);\n        }\n    }\n    /**\n     * We need to re-evaluate all the attributes on every change detection cycle, because\n     * by using a HostBinding we run into certain edge cases. This means that whatever logic\n     * is in here has to be super lean or we risk seriously damaging or destroying the performance.\n     *\n     * Formly issue: https://github.com/ngx-formly/ngx-formly/issues/1317\n     * Material issue: https://github.com/angular/components/issues/14024\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (!this.uiAttributes) {\n            /** @type {?} */\n            const element = (/** @type {?} */ (this.elementRef.nativeElement));\n            this.uiAttributes = [...FORMLY_VALIDATORS, 'tabindex', 'placeholder', 'readonly', 'disabled', 'step'].filter((/**\n             * @param {?} attr\n             * @return {?}\n             */\n            (attr) => !element.hasAttribute || !element.hasAttribute(attr)));\n        }\n        this.uiAttributes.forEach((/**\n         * @param {?} attr\n         * @return {?}\n         */\n        attr => {\n            /** @type {?} */\n            const value = this.to[attr];\n            if (this.uiAttributesCache[attr] !== value\n                && (!this.to.attributes || !this.to.attributes.hasOwnProperty(attr.toLowerCase()))) {\n                this.uiAttributesCache[attr] = value;\n                if (value || value === 0) {\n                    this.setAttribute(attr, value === true ? attr : `${value}`);\n                }\n                else {\n                    this.removeAttribute(attr);\n                }\n            }\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.uiEvents.listeners.forEach((/**\n         * @param {?} listener\n         * @return {?}\n         */\n        listener => listener()));\n        this.detachElementRef(this.field);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    toggleFocus(value) {\n        /** @type {?} */\n        const element = this.fieldAttrElements ? this.fieldAttrElements[0] : null;\n        if (!element || !element.nativeElement.focus) {\n            return;\n        }\n        /** @type {?} */\n        const isFocused = !!this.document.activeElement\n            && this.fieldAttrElements\n                .some((/**\n             * @param {?} __0\n             * @return {?}\n             */\n            ({ nativeElement }) => this.document.activeElement === nativeElement || nativeElement.contains(this.document.activeElement)));\n        if (value && !isFocused) {\n            Promise.resolve().then((/**\n             * @return {?}\n             */\n            () => element.nativeElement.focus()));\n        }\n        else if (!value && isFocused) {\n            Promise.resolve().then((/**\n             * @return {?}\n             */\n            () => element.nativeElement.blur()));\n        }\n    }\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    onFocus($event) {\n        this.field['___$focus'] = true;\n        if (this.to.focus) {\n            this.to.focus(this.field, $event);\n        }\n    }\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    onBlur($event) {\n        this.field['___$focus'] = false;\n        if (this.to.blur) {\n            this.to.blur(this.field, $event);\n        }\n    }\n    // handle custom `change` event, for regular ones rely on DOM listener\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    onHostChange($event) {\n        if ($event instanceof Event) {\n            return;\n        }\n        this.onChange($event);\n    }\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    onChange($event) {\n        if (this.to.change) {\n            this.to.change(this.field, $event);\n        }\n        if (this.field.formControl) {\n            this.field.formControl.markAsDirty();\n        }\n    }\n    /**\n     * @private\n     * @param {?} f\n     * @return {?}\n     */\n    attachElementRef(f) {\n        if (!f) {\n            return;\n        }\n        if (f['_elementRefs'] && f['_elementRefs'].indexOf(this.elementRef) === -1) {\n            f['_elementRefs'].push(this.elementRef);\n        }\n        else {\n            defineHiddenProp(f, '_elementRefs', [this.elementRef]);\n        }\n    }\n    /**\n     * @private\n     * @param {?} f\n     * @return {?}\n     */\n    detachElementRef(f) {\n        /** @type {?} */\n        const index = f && f['_elementRefs'] ? this.fieldAttrElements.indexOf(this.elementRef) : -1;\n        if (index !== -1) {\n            this.field['_elementRefs'].splice(index, 1);\n        }\n    }\n    /**\n     * @private\n     * @param {?} attr\n     * @param {?} value\n     * @return {?}\n     */\n    setAttribute(attr, value) {\n        this.renderer.setAttribute(this.elementRef.nativeElement, attr, value);\n    }\n    /**\n     * @private\n     * @param {?} attr\n     * @return {?}\n     */\n    removeAttribute(attr) {\n        this.renderer.removeAttribute(this.elementRef.nativeElement, attr);\n    }\n}\nFormlyAttributes.ɵfac = function FormlyAttributes_Factory(t) { return new (t || FormlyAttributes)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };\nFormlyAttributes.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: FormlyAttributes, selectors: [[\"\", \"formlyAttributes\", \"\"]], hostBindings: function FormlyAttributes_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"change\", function FormlyAttributes_change_HostBindingHandler($event) { return ctx.onHostChange($event); });\n    } }, inputs: { field: [\"formlyAttributes\", \"field\"], id: \"id\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\n/** @nocollapse */\nFormlyAttributes.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\nFormlyAttributes.propDecorators = {\n    field: [{ type: Input, args: ['formlyAttributes',] }],\n    id: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormlyAttributes, [{\n        type: Directive,\n        args: [{\n                selector: '[formlyAttributes]',\n                host: {\n                    '(change)': 'onHostChange($event)'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { field: [{\n            type: Input,\n            args: ['formlyAttributes']\n        }], id: [{\n            type: Input\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @abstract\n * @template F\n */\nclass FieldType {\n    /**\n     * @return {?}\n     */\n    get model() { return this.field.model; }\n    /**\n     * @param {?} m\n     * @return {?}\n     */\n    set model(m) { console.warn(`NgxFormly: passing 'model' input to '${this.constructor.name}' component is not required anymore, you may remove it!`); }\n    /**\n     * @return {?}\n     */\n    get form() { return (/** @type {?} */ (this.field.parent.formControl)); }\n    /**\n     * @param {?} form\n     * @return {?}\n     */\n    set form(form) { console.warn(`NgxFormly: passing 'form' input to '${this.constructor.name}' component is not required anymore, you may remove it!`); }\n    /**\n     * @return {?}\n     */\n    get options() { return this.field.options; }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    set options(options) { console.warn(`NgxFormly: passing 'options' input to '${this.constructor.name}' component is not required anymore, you may remove it!`); }\n    /**\n     * @return {?}\n     */\n    get key() { return this.field.key; }\n    /**\n     * @return {?}\n     */\n    get formControl() { return (/** @type {?} */ (this.field.formControl)); }\n    /**\n     * @return {?}\n     */\n    get to() { return this.field.templateOptions || {}; }\n    /**\n     * @return {?}\n     */\n    get showError() { return this.options.showError(this); }\n    /**\n     * @return {?}\n     */\n    get id() { return this.field.id; }\n    /**\n     * @return {?}\n     */\n    get formState() { return this.options.formState || {}; }\n}\nFieldType.ɵfac = function FieldType_Factory(t) { return new (t || FieldType)(); };\nFieldType.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: FieldType, inputs: { model: \"model\", form: \"form\", options: \"options\", field: \"field\" } });\nFieldType.propDecorators = {\n    field: [{ type: Input }],\n    model: [{ type: Input }],\n    form: [{ type: Input }],\n    options: [{ type: Input }]\n};\n\n/**\n * @deprecated use `FieldType` instead\n * @abstract\n */\nclass Field extends FieldType {\n    constructor() {\n        super();\n        console.warn(`NgxFormly: 'Field' has been renamed to 'FieldType', extend 'FieldType' instead.`);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO remove `selector` in V6\n// tslint:disable-next-line\n/**\n * @abstract\n * @template F\n */\nclass FieldArrayType extends FieldType {\n    /**\n     * @param {?=} builder\n     */\n    constructor(builder) {\n        super();\n        this.defaultOptions = {\n            defaultValue: [],\n        };\n        if (builder instanceof FormlyFormBuilder) {\n            console.warn(`NgxFormly: passing 'FormlyFormBuilder' to '${this.constructor.name}' type is not required anymore, you may remove it!`);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    get formControl() {\n        return (/** @type {?} */ (this.field.formControl));\n    }\n    /**\n     * @param {?} field\n     * @return {?}\n     */\n    onPopulate(field) {\n        if (!field.formControl && field.key) {\n            /** @type {?} */\n            const control = findControl(field);\n            registerControl(field, control ? control : new FormArray([], { updateOn: field.modelOptions.updateOn }));\n        }\n        field.fieldGroup = field.fieldGroup || [];\n        /** @type {?} */\n        const length = field.model ? field.model.length : 0;\n        if (field.fieldGroup.length > length) {\n            for (let i = field.fieldGroup.length - 1; i >= length; --i) {\n                unregisterControl(field.fieldGroup[i], true);\n                field.fieldGroup.splice(i, 1);\n            }\n        }\n        for (let i = field.fieldGroup.length; i < length; i++) {\n            /** @type {?} */\n            const f = Object.assign({}, clone(field.fieldArray), { key: `${i}` });\n            field.fieldGroup.push(f);\n        }\n    }\n    /**\n     * @param {?=} i\n     * @param {?=} initialModel\n     * @param {?=} __2\n     * @return {?}\n     */\n    add(i, initialModel, { markAsDirty } = { markAsDirty: true }) {\n        i = isNullOrUndefined(i) ? this.field.fieldGroup.length : i;\n        if (!this.model) {\n            assignFieldValue(this.field, []);\n        }\n        this.model.splice(i, 0, initialModel ? clone(initialModel) : undefined);\n        this._build();\n        markAsDirty && this.formControl.markAsDirty();\n    }\n    /**\n     * @param {?} i\n     * @param {?=} __1\n     * @return {?}\n     */\n    remove(i, { markAsDirty } = { markAsDirty: true }) {\n        this.model.splice(i, 1);\n        unregisterControl(this.field.fieldGroup[i], true);\n        this.field.fieldGroup.splice(i, 1);\n        this.field.fieldGroup.forEach((/**\n         * @param {?} f\n         * @param {?} key\n         * @return {?}\n         */\n        (f, key) => f.key = `${key}`));\n        this._build();\n        markAsDirty && this.formControl.markAsDirty();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _build() {\n        ((/** @type {?} */ (this.options)))._buildField(this.field);\n        ((/** @type {?} */ (this.options)))._trackModelChanges(true);\n    }\n}\nFieldArrayType.ɵfac = function FieldArrayType_Factory(t) { return new (t || FieldArrayType)(ɵngcc0.ɵɵdirectiveInject(FORMLY_CONFIG, 8)); };\nFieldArrayType.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: FieldArrayType, selectors: [[\"fieldArray\"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nFieldArrayType.ctorParameters = () => [\n    { type: FormlyFormBuilder, decorators: [{ type: Inject, args: [FORMLY_CONFIG,] }, { type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FieldArrayType, [{\n        type: Directive,\n        args: [{ selector: '[ɵfieldArray]' }]\n    }], function () { return [{ type: FormlyFormBuilder, decorators: [{\n                type: Inject,\n                args: [FORMLY_CONFIG]\n            }, {\n                type: Optional\n            }] }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @abstract\n * @template F\n */\nclass FieldWrapper extends FieldType {\n}\nFieldWrapper.ɵfac = /*@__PURE__*/ function () { let ɵFieldWrapper_BaseFactory; return function FieldWrapper_Factory(t) { return (ɵFieldWrapper_BaseFactory || (ɵFieldWrapper_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FieldWrapper)))(t || FieldWrapper); }; }();\nFieldWrapper.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: FieldWrapper, viewQuery: function FieldWrapper_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c3, 5, ViewContainerRef);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.fieldComponent = _t.first);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nFieldWrapper.propDecorators = {\n    fieldComponent: [{ type: ViewChild, args: ['fieldComponent', (/** @type {?} */ ({ read: ViewContainerRef, static: false })),] }]\n};\n\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FormlyGroup extends FieldType {\n    constructor() {\n        super(...arguments);\n        this.defaultOptions = {\n            defaultValue: {},\n        };\n    }\n}\nFormlyGroup.ɵfac = /*@__PURE__*/ function () { let ɵFormlyGroup_BaseFactory; return function FormlyGroup_Factory(t) { return (ɵFormlyGroup_BaseFactory || (ɵFormlyGroup_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FormlyGroup)))(t || FormlyGroup); }; }();\nFormlyGroup.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: FormlyGroup, selectors: [[\"formly-group\"]], hostVars: 2, hostBindings: function FormlyGroup_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassMap(ctx.field.fieldGroupClassName || \"\");\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 5, vars: 1, consts: [[3, \"field\", 4, \"ngFor\", \"ngForOf\"], [3, \"field\"]], template: function FormlyGroup_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtext(0, \"\\n    \");\n        ɵngcc0.ɵɵtemplate(1, FormlyGroup_formly_field_1_Template, 1, 1, \"formly-field\", 0);\n        ɵngcc0.ɵɵtext(2, \"\\n    \");\n        ɵngcc0.ɵɵprojection(3);\n        ɵngcc0.ɵɵtext(4, \"\\n  \");\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.field.fieldGroup);\n    } }, dependencies: [ɵngcc2.NgForOf, FormlyField], encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormlyGroup, [{\n        type: Component,\n        args: [{\n                selector: 'formly-group',\n                template: `\n    <formly-field *ngFor=\"let f of field.fieldGroup\" [field]=\"f\"></formly-field>\n    <ng-content></ng-content>\n  `,\n                host: {\n                    '[class]': 'field.fieldGroupClassName || \"\"'\n                }\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FormlyValidationMessage {\n    /**\n     * @param {?} formlyConfig\n     */\n    constructor(formlyConfig) {\n        this.formlyConfig = formlyConfig;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnChanges() {\n        /** @type {?} */\n        const EXPR_VALIDATORS = FORMLY_VALIDATORS.map((/**\n         * @param {?} v\n         * @return {?}\n         */\n        v => `templateOptions.${v}`));\n        this.errorMessage$ = merge(this.field.formControl.statusChanges, (!this.field.options\n            ? of(null)\n            : this.field.options.fieldChanges.pipe(filter((/**\n             * @param {?} __0\n             * @return {?}\n             */\n            ({ field, type, property }) => {\n                return (field === this.field)\n                    && (type === 'expressionChanges')\n                    && ((property.indexOf('validation') !== -1)\n                        || (EXPR_VALIDATORS.indexOf(property) !== -1));\n            }))))).pipe(startWith(null), switchMap((/**\n         * @return {?}\n         */\n        () => isObservable(this.errorMessage)\n            ? this.errorMessage\n            : of(this.errorMessage))));\n    }\n    /**\n     * @return {?}\n     */\n    get errorMessage() {\n        /** @type {?} */\n        const fieldForm = this.field.formControl;\n        for (let error in fieldForm.errors) {\n            if (fieldForm.errors.hasOwnProperty(error)) {\n                /** @type {?} */\n                let message = this.formlyConfig.getValidatorMessage(error);\n                if (isObject(fieldForm.errors[error])) {\n                    if (fieldForm.errors[error].errorPath) {\n                        return;\n                    }\n                    if (fieldForm.errors[error].message) {\n                        message = fieldForm.errors[error].message;\n                    }\n                }\n                if (this.field.validation && this.field.validation.messages && this.field.validation.messages[error]) {\n                    message = this.field.validation.messages[error];\n                }\n                if (this.field.validators && this.field.validators[error] && this.field.validators[error].message) {\n                    message = this.field.validators[error].message;\n                }\n                if (this.field.asyncValidators && this.field.asyncValidators[error] && this.field.asyncValidators[error].message) {\n                    message = this.field.asyncValidators[error].message;\n                }\n                if (typeof message === 'function') {\n                    return message(fieldForm.errors[error], this.field);\n                }\n                return message;\n            }\n        }\n    }\n}\nFormlyValidationMessage.ɵfac = function FormlyValidationMessage_Factory(t) { return new (t || FormlyValidationMessage)(ɵngcc0.ɵɵdirectiveInject(FormlyConfig)); };\nFormlyValidationMessage.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: FormlyValidationMessage, selectors: [[\"formly-validation-message\"]], inputs: { field: \"field\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 2, vars: 3, template: function FormlyValidationMessage_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtext(0);\n        ɵngcc0.ɵɵpipe(1, \"async\");\n    } if (rf & 2) {\n        ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind1(1, 1, ctx.errorMessage$));\n    } }, dependencies: [ɵngcc2.AsyncPipe], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nFormlyValidationMessage.ctorParameters = () => [\n    { type: FormlyConfig }\n];\nFormlyValidationMessage.propDecorators = {\n    field: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormlyValidationMessage, [{\n        type: Component,\n        args: [{\n                selector: 'formly-validation-message',\n                template: `{{ errorMessage$ | async }}`,\n                changeDetection: ChangeDetectionStrategy.OnPush\n            }]\n    }], function () { return [{ type: FormlyConfig }]; }, { field: [{\n            type: Input\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FormlyTemplateType extends FieldType {\n    /**\n     * @param {?} sanitizer\n     */\n    constructor(sanitizer) {\n        super();\n        this.sanitizer = sanitizer;\n        this.innerHtml = { content: null, template: null };\n    }\n    /**\n     * @return {?}\n     */\n    get template() {\n        if (this.field && (this.field.template !== this.innerHtml.template)) {\n            this.innerHtml = {\n                template: this.field.template,\n                content: this.to.safeHtml\n                    ? this.sanitizer.bypassSecurityTrustHtml(this.field.template)\n                    : this.field.template,\n            };\n        }\n        return this.innerHtml.content;\n    }\n}\nFormlyTemplateType.ɵfac = function FormlyTemplateType_Factory(t) { return new (t || FormlyTemplateType)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.DomSanitizer)); };\nFormlyTemplateType.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: FormlyTemplateType, selectors: [[\"formly-template\"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 1, consts: [[3, \"innerHtml\"]], template: function FormlyTemplateType_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelement(0, \"div\", 0);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"innerHtml\", ctx.template, ɵngcc0.ɵɵsanitizeHtml);\n    } }, encapsulation: 2 });\n/** @nocollapse */\nFormlyTemplateType.ctorParameters = () => [\n    { type: DomSanitizer }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormlyTemplateType, [{\n        type: Component,\n        args: [{\n                selector: 'formly-template',\n                template: `<div [innerHtml]=\"template\"></div>`\n            }]\n    }], function () { return [{ type: ɵngcc3.DomSanitizer }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} expression\n * @param {?} argNames\n * @return {?}\n */\nfunction evalStringExpression(expression, argNames) {\n    try {\n        if (expression.indexOf('this.field') !== -1) {\n            console.warn(`NgxFormly: using 'this.field' in expressionProperties is deprecated since v5.1, use 'field' instead.`);\n        }\n        return (/** @type {?} */ (Function(...argNames, `return ${expression};`)));\n    }\n    catch (error) {\n        console.error(error);\n    }\n}\n/**\n * @param {?} expression\n * @param {?} thisArg\n * @param {?} argVal\n * @return {?}\n */\nfunction evalExpression(expression, thisArg, argVal) {\n    if (expression instanceof Function) {\n        return expression.apply(thisArg, argVal);\n    }\n    else {\n        return expression ? true : false;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@experimental\n */\nclass FieldExpressionExtension {\n    /**\n     * @param {?} field\n     * @return {?}\n     */\n    prePopulate(field) {\n        if (field.parent || field.options._checkField) {\n            return;\n        }\n        /** @type {?} */\n        let checkLocked = false;\n        field.options._checkField = (/**\n         * @param {?} f\n         * @param {?} ignoreCache\n         * @return {?}\n         */\n        (f, ignoreCache) => {\n            if (!checkLocked) {\n                checkLocked = true;\n                this.checkField(f, ignoreCache);\n                checkLocked = false;\n            }\n        });\n    }\n    /**\n     * @param {?} field\n     * @return {?}\n     */\n    postPopulate(field) {\n        if (!field.parent || field._expressionProperties) {\n            return;\n        }\n        // cache built expression\n        defineHiddenProp(field, '_expressionProperties', {});\n        if (field.expressionProperties) {\n            for (const key in field.expressionProperties) {\n                /** @type {?} */\n                const expressionProperty = field.expressionProperties[key];\n                if (typeof expressionProperty === 'string' || isFunction(expressionProperty)) {\n                    field._expressionProperties[key] = {\n                        expression: this._evalExpression(key, expressionProperty, key === 'templateOptions.disabled' && field.parent.expressionProperties && field.parent.expressionProperties.hasOwnProperty('templateOptions.disabled')\n                            ? (/**\n                             * @return {?}\n                             */\n                            () => field.parent.templateOptions.disabled)\n                            : undefined),\n                    };\n                    if (key === 'templateOptions.disabled') {\n                        Object.defineProperty(field._expressionProperties[key], 'expressionValue', {\n                            get: (/**\n                             * @return {?}\n                             */\n                            () => field.templateOptions.disabled),\n                            set: (/**\n                             * @return {?}\n                             */\n                            () => { }),\n                            enumerable: true,\n                            configurable: true,\n                        });\n                    }\n                }\n                else if (expressionProperty instanceof Observable) {\n                    /** @type {?} */\n                    const subscribe = (/**\n                     * @return {?}\n                     */\n                    () => ((/** @type {?} */ (expressionProperty)))\n                        .subscribe((/**\n                     * @param {?} v\n                     * @return {?}\n                     */\n                    v => {\n                        this.setExprValue(field, key, v);\n                        if (field.options && field.options._markForCheck) {\n                            field.options._markForCheck(field);\n                        }\n                    })));\n                    /** @type {?} */\n                    let subscription = subscribe();\n                    /** @type {?} */\n                    const onInit = field.hooks.onInit;\n                    field.hooks.onInit = (/**\n                     * @return {?}\n                     */\n                    () => {\n                        if (subscription === null) {\n                            subscription = subscribe();\n                        }\n                        return onInit && onInit(field);\n                    });\n                    /** @type {?} */\n                    const onDestroy = field.hooks.onDestroy;\n                    field.hooks.onDestroy = (/**\n                     * @return {?}\n                     */\n                    () => {\n                        onDestroy && onDestroy(field);\n                        subscription.unsubscribe();\n                        subscription = null;\n                    });\n                }\n            }\n        }\n        if (field.hideExpression) {\n            // delete hide value in order to force re-evaluate it in FormlyFormExpression.\n            delete field.hide;\n            field.hideExpression = this._evalExpression('hide', field.hideExpression, (/**\n             * @return {?}\n             */\n            () => {\n                /** @type {?} */\n                let root = field.parent;\n                while (root.parent && !root.hide) {\n                    root = root.parent;\n                }\n                return root.hide;\n            }));\n        }\n        else {\n            wrapProperty(field, 'hide', (/**\n             * @param {?} __0\n             * @return {?}\n             */\n            ({ currentValue, firstChange }) => {\n                field._hide = currentValue;\n                if (!firstChange || (firstChange && currentValue === true)) {\n                    field.options._hiddenFieldsForCheck.push(field);\n                }\n            }));\n        }\n    }\n    /**\n     * @private\n     * @param {?} prop\n     * @param {?} expression\n     * @param {?=} parentExpression\n     * @return {?}\n     */\n    _evalExpression(prop, expression, parentExpression) {\n        return (/**\n         * @param {...?} args\n         * @return {?}\n         */\n        (...args) => {\n            try {\n                if (typeof expression === 'string') {\n                    expression = evalStringExpression(expression, ['model', 'formState', 'field']);\n                }\n                if (typeof expression !== 'function') {\n                    expression = (/**\n                     * @return {?}\n                     */\n                    () => !!expression);\n                }\n                return (parentExpression && parentExpression()) || expression(...args);\n            }\n            catch (error) {\n                error.message = `[Formly Error] [Expression \"${prop}\"] ${error.message}`;\n                throw error;\n            }\n        });\n    }\n    /**\n     * @private\n     * @param {?} field\n     * @param {?} prop\n     * @return {?}\n     */\n    _evalExpressionPath(field, prop) {\n        if (field._expressionProperties[prop] && field._expressionProperties[prop].expressionPaths) {\n            return field._expressionProperties[prop].expressionPaths;\n        }\n        /** @type {?} */\n        let paths = [];\n        if (prop.indexOf('[') === -1) {\n            paths = prop.split('.');\n        }\n        else {\n            prop\n                .split(/[[\\]]{1,2}/) // https://stackoverflow.com/a/20198206\n                .filter((/**\n             * @param {?} p\n             * @return {?}\n             */\n            p => p))\n                .forEach(((/**\n             * @param {?} path\n             * @return {?}\n             */\n            path => {\n                /** @type {?} */\n                const arrayPath = path.match(/['|\"](.*?)['|\"]/);\n                if (arrayPath) {\n                    paths.push(arrayPath[1]);\n                }\n                else {\n                    paths.push(...path.split('.').filter((/**\n                     * @param {?} p\n                     * @return {?}\n                     */\n                    p => p)));\n                }\n            })));\n        }\n        if (field._expressionProperties[prop]) {\n            field._expressionProperties[prop].expressionPaths = paths;\n        }\n        return paths;\n    }\n    /**\n     * @private\n     * @param {?} field\n     * @param {?=} ignoreCache\n     * @return {?}\n     */\n    checkField(field, ignoreCache = false) {\n        /** @type {?} */\n        const fieldChanged = this._checkField(field, ignoreCache);\n        field.options._hiddenFieldsForCheck\n            .sort((/**\n         * @param {?} f\n         * @return {?}\n         */\n        f => f.hide ? -1 : 1))\n            .forEach((/**\n         * @param {?} f\n         * @return {?}\n         */\n        f => this.toggleFormControl(f, !!f.hide, !ignoreCache)));\n        field.options._hiddenFieldsForCheck = [];\n        if (fieldChanged) {\n            this.checkField(field);\n            if (field.options && field.options._markForCheck) {\n                field.options._markForCheck(field);\n            }\n        }\n    }\n    /**\n     * @private\n     * @param {?} field\n     * @param {?=} ignoreCache\n     * @return {?}\n     */\n    _checkField(field, ignoreCache = false) {\n        /** @type {?} */\n        let fieldChanged = false;\n        field.fieldGroup.forEach((/**\n         * @param {?} f\n         * @return {?}\n         */\n        f => {\n            if (!f.options) {\n                return;\n            }\n            this.checkFieldExpressionChange(f, ignoreCache) && (fieldChanged = true);\n            if (this.checkFieldVisibilityChange(f, ignoreCache)) {\n                field.options._hiddenFieldsForCheck.push(f);\n                fieldChanged = true;\n            }\n            if (f.fieldGroup && f.fieldGroup.length > 0) {\n                this._checkField(f, ignoreCache) && (fieldChanged = true);\n            }\n        }));\n        return fieldChanged;\n    }\n    /**\n     * @private\n     * @param {?} field\n     * @param {?} ignoreCache\n     * @return {?}\n     */\n    checkFieldExpressionChange(field, ignoreCache) {\n        if (!field || !field._expressionProperties) {\n            return false;\n        }\n        /** @type {?} */\n        let markForCheck = false;\n        /** @type {?} */\n        const expressionProperties = field._expressionProperties;\n        for (const key in expressionProperties) {\n            /** @type {?} */\n            let expressionValue = evalExpression(expressionProperties[key].expression, { field }, [field.model, field.options.formState, field, ignoreCache]);\n            if (key === 'templateOptions.disabled') {\n                expressionValue = !!expressionValue;\n            }\n            if (ignoreCache || (expressionProperties[key].expressionValue !== expressionValue\n                && (!(isObject(expressionValue) || isFunction(expressionValue))\n                    || (isFunction(expressionValue)\n                        && ('' + expressionProperties[key].expressionValue !== '' + expressionValue))\n                    || isObservable(expressionValue)\n                    || JSON.stringify(expressionValue) !== JSON.stringify(expressionProperties[key].expressionValue)))) {\n                markForCheck = true;\n                expressionProperties[key].expressionValue = expressionValue;\n                this.setExprValue(field, key, expressionValue);\n            }\n        }\n        return markForCheck;\n    }\n    /**\n     * @private\n     * @param {?} field\n     * @param {?} ignoreCache\n     * @return {?}\n     */\n    checkFieldVisibilityChange(field, ignoreCache) {\n        if (!field || isNullOrUndefined(field.hideExpression)) {\n            return false;\n        }\n        /** @type {?} */\n        const hideExpressionResult = !!evalExpression(field.hideExpression, { field }, [field.model, field.options.formState, field, ignoreCache]);\n        /** @type {?} */\n        let markForCheck = false;\n        if (hideExpressionResult !== field.hide || ignoreCache) {\n            markForCheck = true;\n            // toggle hide\n            field.hide = hideExpressionResult;\n            field.templateOptions.hidden = hideExpressionResult;\n        }\n        return markForCheck;\n    }\n    /**\n     * @private\n     * @param {?} field\n     * @param {?} value\n     * @return {?}\n     */\n    setDisabledState(field, value) {\n        if (field.fieldGroup) {\n            field.fieldGroup\n                .filter((/**\n             * @param {?} f\n             * @return {?}\n             */\n            f => !f.expressionProperties || !f.expressionProperties.hasOwnProperty('templateOptions.disabled')))\n                .forEach((/**\n             * @param {?} f\n             * @return {?}\n             */\n            f => this.setDisabledState(f, value)));\n        }\n        if (field.key && field.templateOptions.disabled !== value) {\n            field.templateOptions.disabled = value;\n        }\n    }\n    /**\n     * @private\n     * @param {?} field\n     * @param {?} hide\n     * @param {?} resetOnHide\n     * @return {?}\n     */\n    toggleFormControl(field, hide, resetOnHide) {\n        if (field.fieldGroup) {\n            field.fieldGroup\n                .filter((/**\n             * @param {?} f\n             * @return {?}\n             */\n            f => !f.hideExpression))\n                .forEach((/**\n             * @param {?} f\n             * @return {?}\n             */\n            f => this.toggleFormControl(f, hide, resetOnHide)));\n        }\n        if (field.formControl && field.key) {\n            defineHiddenProp(field, '_hide', !!(hide || field.hide));\n            /** @type {?} */\n            const c = field.formControl;\n            if (c['_fields'] && c['_fields'].length > 1) {\n                updateValidity(c);\n            }\n            if (hide === true && (!c['_fields'] || c['_fields'].every((/**\n             * @param {?} f\n             * @return {?}\n             */\n            f => !!f._hide)))) {\n                unregisterControl(field, true);\n                if (resetOnHide && field.resetOnHide) {\n                    field.formControl.reset({ value: undefined, disabled: field.formControl.disabled });\n                    if (field.fieldGroup) {\n                        assignFieldValue(field, undefined);\n                        if (field.formControl instanceof FormArray) {\n                            field.fieldGroup.length = 0;\n                        }\n                    }\n                }\n            }\n            else if (hide === false) {\n                if (field.resetOnHide && field.parent && !isUndefined(field.defaultValue) && isUndefined(getFieldValue(field))) {\n                    assignFieldValue(field, field.defaultValue);\n                }\n                registerControl(field, undefined, true);\n                if (field.resetOnHide && field.fieldArray && (field.fieldGroup || []).length !== (field.model || []).length) {\n                    ((/** @type {?} */ (field.options)))._buildForm(true);\n                }\n            }\n        }\n        if (field.options.fieldChanges) {\n            field.options.fieldChanges.next((/** @type {?} */ ({ field, type: 'hidden', value: hide })));\n        }\n    }\n    /**\n     * @private\n     * @param {?} field\n     * @param {?} prop\n     * @param {?} value\n     * @return {?}\n     */\n    setExprValue(field, prop, value) {\n        try {\n            /** @type {?} */\n            let target = field;\n            /** @type {?} */\n            const paths = this._evalExpressionPath(field, prop);\n            /** @type {?} */\n            const lastIndex = paths.length - 1;\n            for (let i = 0; i < lastIndex; i++) {\n                target = target[paths[i]];\n            }\n            target[paths[lastIndex]] = value;\n        }\n        catch (error) {\n            error.message = `[Formly Error] [Expression \"${prop}\"] ${error.message}`;\n            throw error;\n        }\n        if (prop === 'templateOptions.disabled' && field.key) {\n            this.setDisabledState(field, value);\n        }\n        if (prop.indexOf('model.') === 0) {\n            /** @type {?} */\n            const path = prop.replace(/^model\\./, '');\n            /** @type {?} */\n            const control = field.key && prop === path ? field.formControl : field.parent.formControl.get(path);\n            if (control\n                && !(isNullOrUndefined(control.value) && isNullOrUndefined(value))\n                && control.value !== value) {\n                control.patchValue(value);\n            }\n        }\n        this.emitExpressionChanges(field, prop, value);\n    }\n    /**\n     * @private\n     * @param {?} field\n     * @param {?} property\n     * @param {?} value\n     * @return {?}\n     */\n    emitExpressionChanges(field, property, value) {\n        if (!field.options.fieldChanges) {\n            return;\n        }\n        field.options.fieldChanges.next({\n            field: field,\n            type: 'expressionChanges',\n            property,\n            value,\n        });\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@experimental\n */\nclass FieldValidationExtension {\n    /**\n     * @param {?} formlyConfig\n     */\n    constructor(formlyConfig) {\n        this.formlyConfig = formlyConfig;\n    }\n    /**\n     * @param {?} field\n     * @return {?}\n     */\n    onPopulate(field) {\n        this.initFieldValidation(field, 'validators');\n        this.initFieldValidation(field, 'asyncValidators');\n    }\n    /**\n     * @private\n     * @param {?} field\n     * @param {?} type\n     * @return {?}\n     */\n    initFieldValidation(field, type) {\n        /** @type {?} */\n        const validators = [];\n        if (type === 'validators' && !(field.hasOwnProperty('fieldGroup') && !field.key)) {\n            validators.push(this.getPredefinedFieldValidation(field));\n        }\n        if (field[type]) {\n            for (const validatorName in field[type]) {\n                if (validatorName === 'validation' && !Array.isArray(field[type].validation)) {\n                    field[type].validation = [field[type].validation];\n                    console.warn(`NgxFormly(${field.key}): passing a non array value to the 'validation' is deprecated, pass an array instead`);\n                }\n                validatorName === 'validation'\n                    ? validators.push(...field[type].validation.map((/**\n                     * @param {?} v\n                     * @return {?}\n                     */\n                    v => this.wrapNgValidatorFn(field, v))))\n                    : validators.push(this.wrapNgValidatorFn(field, field[type][validatorName], validatorName));\n            }\n        }\n        defineHiddenProp(field, '_' + type, validators);\n    }\n    /**\n     * @private\n     * @param {?} field\n     * @return {?}\n     */\n    getPredefinedFieldValidation(field) {\n        /** @type {?} */\n        let VALIDATORS = [];\n        FORMLY_VALIDATORS.forEach((/**\n         * @param {?} opt\n         * @return {?}\n         */\n        opt => wrapProperty(field.templateOptions, opt, (/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ({ currentValue, firstChange }) => {\n            VALIDATORS = VALIDATORS.filter((/**\n             * @param {?} o\n             * @return {?}\n             */\n            o => o !== opt));\n            if (currentValue != null && currentValue !== false) {\n                VALIDATORS.push(opt);\n            }\n            if (!firstChange && field.formControl) {\n                updateValidity(field.formControl);\n            }\n        }))));\n        return (/**\n         * @param {?} control\n         * @return {?}\n         */\n        (control) => {\n            if (VALIDATORS.length === 0) {\n                return null;\n            }\n            return Validators.compose(VALIDATORS.map((/**\n             * @param {?} opt\n             * @return {?}\n             */\n            opt => (/**\n             * @return {?}\n             */\n            () => {\n                /** @type {?} */\n                const value = field.templateOptions[opt];\n                switch (opt) {\n                    case 'required':\n                        return Validators.required(control);\n                    case 'pattern':\n                        return Validators.pattern(value)(control);\n                    case 'minLength':\n                        return Validators.minLength(value)(control);\n                    case 'maxLength':\n                        return Validators.maxLength(value)(control);\n                    case 'min':\n                        return Validators.min(value)(control);\n                    case 'max':\n                        return Validators.max(value)(control);\n                }\n            }))))(control);\n        });\n    }\n    /**\n     * @private\n     * @param {?} field\n     * @param {?} validator\n     * @param {?=} validatorName\n     * @return {?}\n     */\n    wrapNgValidatorFn(field, validator, validatorName) {\n        /** @type {?} */\n        let validatorOption = null;\n        if (typeof validator === 'string') {\n            validatorOption = clone(this.formlyConfig.getValidator(validator));\n        }\n        if (typeof validator === 'object' && validator.name) {\n            validatorOption = clone(this.formlyConfig.getValidator(validator.name));\n            if (validator.options) {\n                validatorOption.options = validator.options;\n            }\n        }\n        if (typeof validator === 'object' && validator.expression) {\n            const { expression } = validator, options = __rest(validator, [\"expression\"]);\n            validatorOption = {\n                name: validatorName,\n                validation: expression,\n                options: Object.keys(options).length > 0 ? options : null,\n            };\n        }\n        if (typeof validator === 'function') {\n            validatorOption = {\n                name: validatorName,\n                validation: validator,\n            };\n        }\n        return (/**\n         * @param {?} control\n         * @return {?}\n         */\n        (control) => {\n            /** @type {?} */\n            const errors = validatorOption.validation(control, field, validatorOption.options);\n            if (isPromise(errors)) {\n                return errors.then((/**\n                 * @param {?} v\n                 * @return {?}\n                 */\n                v => this.handleAsyncResult(field, validatorName ? !!v : v, validatorOption)));\n            }\n            if (isObservable(errors)) {\n                return errors.pipe(map((/**\n                 * @param {?} v\n                 * @return {?}\n                 */\n                v => this.handleAsyncResult(field, validatorName ? !!v : v, validatorOption))));\n            }\n            return this.handleResult(field, validatorName ? !!errors : errors, validatorOption);\n        });\n    }\n    /**\n     * @private\n     * @param {?} field\n     * @param {?} errors\n     * @param {?} options\n     * @return {?}\n     */\n    handleAsyncResult(field, errors, options) {\n        // workaround for https://github.com/angular/angular/issues/13200\n        if (field.options && field.options._markForCheck) {\n            field.options._markForCheck(field);\n        }\n        return this.handleResult(field, errors, options);\n    }\n    /**\n     * @private\n     * @param {?} field\n     * @param {?} errors\n     * @param {?} __2\n     * @return {?}\n     */\n    handleResult(field, errors, { name, options }) {\n        if (typeof errors === 'boolean') {\n            errors = errors ? null : { [name]: options ? options : true };\n        }\n        /** @type {?} */\n        const ctrl = field.formControl;\n        ctrl['_childrenErrors'] && ctrl['_childrenErrors'][name] && ctrl['_childrenErrors'][name]();\n        if (isObject(errors)) {\n            Object.keys(errors).forEach((/**\n             * @param {?} name\n             * @return {?}\n             */\n            name => {\n                /** @type {?} */\n                const errorPath = errors[name].errorPath\n                    ? errors[name].errorPath\n                    : (options || {}).errorPath;\n                /** @type {?} */\n                const childCtrl = errorPath ? field.formControl.get(errorPath) : null;\n                if (childCtrl) {\n                    const _a = errors[name], opts = __rest(_a, [\"errorPath\"]);\n                    childCtrl.setErrors(Object.assign({}, (childCtrl.errors || {}), { [name]: opts }));\n                    !ctrl['_childrenErrors'] && defineHiddenProp(ctrl, '_childrenErrors', {});\n                    ctrl['_childrenErrors'][name] = (/**\n                     * @return {?}\n                     */\n                    () => {\n                        const _a = childCtrl.errors || {}, _b = name, toDelete = _a[_b], childErrors = __rest(_a, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\n                        childCtrl.setErrors(Object.keys(childErrors).length === 0 ? null : childErrors);\n                    });\n                }\n            }));\n        }\n        return errors;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@experimental\n */\nclass FieldFormExtension {\n    /**\n     * @param {?} config\n     */\n    constructor(config) {\n        this.config = config;\n    }\n    /**\n     * @param {?} field\n     * @return {?}\n     */\n    prePopulate(field) {\n        if (!this.root) {\n            this.root = field;\n        }\n    }\n    /**\n     * @param {?} field\n     * @return {?}\n     */\n    onPopulate(field) {\n        if (!field.parent) {\n            return;\n        }\n        if (field.fieldGroup && !field.key) {\n            defineHiddenProp(field, 'formControl', field.parent.formControl);\n        }\n        else {\n            this.addFormControl(field);\n        }\n    }\n    /**\n     * @param {?} field\n     * @return {?}\n     */\n    postPopulate(field) {\n        if (this.root !== field) {\n            return;\n        }\n        this.root = null;\n        this.setValidators(field);\n    }\n    /**\n     * @private\n     * @param {?} field\n     * @return {?}\n     */\n    addFormControl(field) {\n        /** @type {?} */\n        let control = findControl(field);\n        if (!control) {\n            /** @type {?} */\n            const controlOptions = { updateOn: field.modelOptions.updateOn };\n            /** @type {?} */\n            const value = field.key ? getFieldValue(field) : field.defaultValue;\n            /** @type {?} */\n            const ref = this.config ? this.config.resolveFieldTypeRef(field) : null;\n            if (ref && ref.componentType && ref.componentType['createControl']) {\n                /** @type {?} */\n                const component = ref.componentType;\n                console.warn(`NgxFormly: '${component.name}::createControl' is deprecated since v5.0, use 'prePopulate' hook instead.`);\n                control = component['createControl'](value, field);\n            }\n            else if (field.fieldGroup) {\n                // TODO: move to postPopulate\n                control = new FormGroup({}, controlOptions);\n            }\n            else {\n                control = new FormControl(value, controlOptions);\n            }\n        }\n        registerControl(field, control);\n    }\n    /**\n     * @private\n     * @param {?} field\n     * @param {?=} disabled\n     * @return {?}\n     */\n    setValidators(field, disabled = false) {\n        /** @type {?} */\n        let markForCheck = false;\n        if (disabled === false && field.key && field.templateOptions && field.templateOptions.disabled) {\n            disabled = true;\n        }\n        (field.fieldGroup || []).forEach((/**\n         * @param {?} f\n         * @return {?}\n         */\n        f => this.setValidators(f, disabled) && (markForCheck = true)));\n        if (field.key || !field.parent || (!field.key && !field.fieldGroup)) {\n            const { formControl: c } = field;\n            field.templateOptions = field.templateOptions || {};\n            if (field.key && c && c instanceof FormControl) {\n                if (disabled && c.enabled) {\n                    c.disable({ emitEvent: false, onlySelf: true });\n                    markForCheck = true;\n                }\n                if (!disabled && c.disabled) {\n                    c.enable({ emitEvent: false, onlySelf: true });\n                    markForCheck = true;\n                }\n            }\n            if (c && (null === c.validator || null === c.asyncValidator)) {\n                c.setValidators((/**\n                 * @return {?}\n                 */\n                () => {\n                    /** @type {?} */\n                    const v = Validators.compose(this.mergeValidators(field, '_validators'));\n                    return v ? v(c) : null;\n                }));\n                c.setAsyncValidators((/**\n                 * @return {?}\n                 */\n                () => {\n                    /** @type {?} */\n                    const v = Validators.composeAsync(this.mergeValidators(field, '_asyncValidators'));\n                    return v ? v(c) : of(null);\n                }));\n                markForCheck = true;\n            }\n            if (markForCheck) {\n                updateValidity(c, true);\n                // update validity of `FormGroup` instance created by field with nested key.\n                /** @type {?} */\n                let parent = c.parent;\n                for (let i = 1; i < getKeyPath(field).length; i++) {\n                    if (parent) {\n                        updateValidity(parent, true);\n                        parent = parent.parent;\n                    }\n                }\n            }\n        }\n        return markForCheck;\n    }\n    /**\n     * @private\n     * @template T\n     * @param {?} field\n     * @param {?} type\n     * @return {?}\n     */\n    mergeValidators(field, type) {\n        /** @type {?} */\n        const validators = [];\n        /** @type {?} */\n        const c = field.formControl;\n        if (c && c['_fields'] && c['_fields'].length > 1) {\n            c['_fields']\n                .filter((/**\n             * @param {?} f\n             * @return {?}\n             */\n            (f) => !f._hide))\n                .forEach((/**\n             * @param {?} f\n             * @return {?}\n             */\n            (f) => validators.push(...f[type])));\n        }\n        else if (field[type]) {\n            validators.push(...field[type]);\n        }\n        if (field.fieldGroup) {\n            field.fieldGroup\n                .filter((/**\n             * @param {?} f\n             * @return {?}\n             */\n            f => !f.key && f.fieldGroup))\n                .forEach((/**\n             * @param {?} f\n             * @return {?}\n             */\n            f => validators.push(...this.mergeValidators(f, type))));\n        }\n        return validators;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@experimental\n */\nclass CoreExtension {\n    /**\n     * @param {?} formlyConfig\n     */\n    constructor(formlyConfig) {\n        this.formlyConfig = formlyConfig;\n        this.formId = 0;\n    }\n    /**\n     * @param {?} field\n     * @return {?}\n     */\n    prePopulate(field) {\n        this.getFieldComponentInstance(field).prePopulate();\n        if (field.parent) {\n            return;\n        }\n        /** @type {?} */\n        const fieldTransforms = (field.options && field.options.fieldTransform) || this.formlyConfig.extras.fieldTransform;\n        (Array.isArray(fieldTransforms) ? fieldTransforms : [fieldTransforms]).forEach((/**\n         * @param {?} fieldTransform\n         * @return {?}\n         */\n        fieldTransform => {\n            if (fieldTransform) {\n                console.warn(`NgxFormly: fieldTransform is deprecated since v5.0, use custom extension instead.`);\n                /** @type {?} */\n                const fieldGroup = fieldTransform(field.fieldGroup, field.model, (/** @type {?} */ (field.formControl)), field.options);\n                if (!fieldGroup) {\n                    throw new Error('fieldTransform must return an array of fields');\n                }\n            }\n        }));\n    }\n    /**\n     * @param {?} field\n     * @return {?}\n     */\n    onPopulate(field) {\n        this.initFieldOptions(field);\n        this.getFieldComponentInstance(field).onPopulate();\n        if (field.fieldGroup) {\n            field.fieldGroup.forEach((/**\n             * @param {?} f\n             * @param {?} index\n             * @return {?}\n             */\n            (f, index) => {\n                Object.defineProperty(f, 'parent', { get: (/**\n                     * @return {?}\n                     */\n                    () => field), configurable: true });\n                Object.defineProperty(f, 'index', { get: (/**\n                     * @return {?}\n                     */\n                    () => index), configurable: true });\n                this.formId++;\n            }));\n        }\n    }\n    /**\n     * @param {?} field\n     * @return {?}\n     */\n    postPopulate(field) {\n        this.getFieldComponentInstance(field).postPopulate();\n    }\n    /**\n     * @private\n     * @param {?} field\n     * @return {?}\n     */\n    initFieldOptions(field) {\n        /** @type {?} */\n        const root = (/** @type {?} */ (field.parent));\n        if (!root) {\n            return;\n        }\n        Object.defineProperty(field, 'form', { get: (/**\n             * @return {?}\n             */\n            () => root.formControl), configurable: true });\n        Object.defineProperty(field, 'options', { get: (/**\n             * @return {?}\n             */\n            () => root.options), configurable: true });\n        Object.defineProperty(field, 'model', {\n            get: (/**\n             * @return {?}\n             */\n            () => field.key && field.fieldGroup ? getFieldValue(field) : root.model),\n            configurable: true,\n        });\n        reverseDeepMerge(field, {\n            id: getFieldId(`formly_${this.formId}`, field, field['index']),\n            hooks: {},\n            modelOptions: {},\n            validation: { messages: {} },\n            templateOptions: !field.type || !field.key ? {} : {\n                label: '',\n                placeholder: '',\n                focus: false,\n                disabled: false,\n            },\n        });\n        if (this.formlyConfig.extras.resetFieldOnHide && field.resetOnHide !== false) {\n            field.resetOnHide = true;\n        }\n        if (field.lifecycle) {\n            console.warn(`NgxFormly: 'lifecycle' is deprecated since v5.0, use 'hooks' instead.`);\n        }\n        if (field.type !== 'formly-template'\n            && (field.template\n                || (field.expressionProperties && field.expressionProperties.template))) {\n            if (field.type) {\n                console.warn(`NgxFormly: passing 'type' property is not allowed when 'template' is set.`);\n            }\n            field.type = 'formly-template';\n        }\n        if (!field.type && field.fieldGroup) {\n            field.type = 'formly-group';\n        }\n        if (field.type) {\n            this.formlyConfig.getMergedField(field);\n        }\n        if (field.parent) {\n            /** @type {?} */\n            let setDefaultValue = !isUndefined(field.key)\n                && !isUndefined(field.defaultValue)\n                && isUndefined(getFieldValue(field))\n                && (!field.resetOnHide || !(field.hide || field.hideExpression));\n            if (setDefaultValue && field.resetOnHide) {\n                /** @type {?} */\n                let parent = field.parent;\n                while (parent && !parent.hideExpression && !parent.hide) {\n                    parent = parent.parent;\n                }\n                setDefaultValue = !parent || !(parent.hideExpression || parent.hide);\n            }\n            if (setDefaultValue) {\n                assignFieldValue(field, field.defaultValue);\n            }\n        }\n        this.initFieldWrappers(field);\n    }\n    /**\n     * @private\n     * @param {?} field\n     * @return {?}\n     */\n    initFieldWrappers(field) {\n        field.wrappers = field.wrappers || [];\n        /** @type {?} */\n        const fieldTemplateManipulators = Object.assign({ preWrapper: [], postWrapper: [] }, (field.templateOptions.templateManipulators || {}));\n        field.wrappers = [\n            ...this.formlyConfig.templateManipulators.preWrapper.map((/**\n             * @param {?} m\n             * @return {?}\n             */\n            m => m(field))),\n            ...fieldTemplateManipulators.preWrapper.map((/**\n             * @param {?} m\n             * @return {?}\n             */\n            m => m(field))),\n            ...field.wrappers,\n            ...this.formlyConfig.templateManipulators.postWrapper.map((/**\n             * @param {?} m\n             * @return {?}\n             */\n            m => m(field))),\n            ...fieldTemplateManipulators.postWrapper.map((/**\n             * @param {?} m\n             * @return {?}\n             */\n            m => m(field))),\n        ].filter((/**\n         * @param {?} el\n         * @param {?} i\n         * @param {?} a\n         * @return {?}\n         */\n        (el, i, a) => el && i === a.indexOf(el)));\n    }\n    /**\n     * @private\n     * @param {?} field\n     * @return {?}\n     */\n    getFieldComponentInstance(field) {\n        /** @type {?} */\n        const componentRef = this.formlyConfig.resolveFieldTypeRef(field);\n        /** @type {?} */\n        const instance = componentRef ? (/** @type {?} */ (componentRef.instance)) : {};\n        return {\n            prePopulate: (/**\n             * @return {?}\n             */\n            () => instance.prePopulate && instance.prePopulate(field)),\n            onPopulate: (/**\n             * @return {?}\n             */\n            () => instance.onPopulate && instance.onPopulate(field)),\n            postPopulate: (/**\n             * @return {?}\n             */\n            () => instance.postPopulate && instance.postPopulate(field)),\n        };\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} formlyConfig\n * @return {?}\n */\nfunction defaultFormlyConfig(formlyConfig) {\n    return {\n        types: [\n            { name: 'formly-group', component: FormlyGroup },\n            { name: 'formly-template', component: FormlyTemplateType },\n        ],\n        extensions: [\n            { name: 'core', extension: new CoreExtension(formlyConfig) },\n            { name: 'field-validation', extension: new FieldValidationExtension(formlyConfig) },\n            { name: 'field-form', extension: new FieldFormExtension(formlyConfig) },\n            { name: 'field-expression', extension: new FieldExpressionExtension() },\n        ],\n    };\n}\nclass FormlyModule {\n    /**\n     * @param {?} configService\n     * @param {?=} configs\n     */\n    constructor(configService, configs = []) {\n        if (!configs) {\n            return;\n        }\n        configs.forEach((/**\n         * @param {?} config\n         * @return {?}\n         */\n        config => configService.addConfig(config)));\n    }\n    /**\n     * @param {?=} config\n     * @return {?}\n     */\n    static forRoot(config = {}) {\n        return {\n            ngModule: FormlyModule,\n            providers: [\n                { provide: FORMLY_CONFIG, multi: true, useFactory: defaultFormlyConfig, deps: [FormlyConfig] },\n                { provide: FORMLY_CONFIG, useValue: config, multi: true },\n                { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: config, multi: true },\n                FormlyConfig,\n                FormlyFormBuilder,\n            ],\n        };\n    }\n    /**\n     * @param {?=} config\n     * @return {?}\n     */\n    static forChild(config = {}) {\n        return {\n            ngModule: FormlyModule,\n            providers: [\n                { provide: FORMLY_CONFIG, multi: true, useFactory: defaultFormlyConfig, deps: [FormlyConfig] },\n                { provide: FORMLY_CONFIG, useValue: config, multi: true },\n                { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: config, multi: true },\n                FormlyFormBuilder,\n            ],\n        };\n    }\n}\nFormlyModule.ɵfac = function FormlyModule_Factory(t) { return new (t || FormlyModule)(ɵngcc0.ɵɵinject(FormlyConfig), ɵngcc0.ɵɵinject(FORMLY_CONFIG, 8)); };\nFormlyModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: FormlyModule });\nFormlyModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [CommonModule] });\n/** @nocollapse */\nFormlyModule.ctorParameters = () => [\n    { type: FormlyConfig },\n    { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [FORMLY_CONFIG,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormlyModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    FormlyForm,\n                    FormlyField,\n                    FormlyAttributes,\n                    FormlyGroup,\n                    FormlyValidationMessage,\n                    FormlyTemplateType,\n                    ( /** @type {?} */(FieldArrayType)),\n                ],\n                entryComponents: [FormlyGroup, FormlyTemplateType],\n                exports: [FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage],\n                imports: [CommonModule]\n            }]\n    }], function () { return [{ type: FormlyConfig }, { type: Array, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [FORMLY_CONFIG]\n            }] }]; }, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FormlyModule, { declarations: function () { return [FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage, FormlyTemplateType, FieldArrayType]; }, imports: function () { return [CommonModule]; }, exports: function () { return [FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { FormlyForm, FormlyField, FormlyAttributes, FORMLY_CONFIG, FormlyConfig, FormlyFormBuilder, FieldType, Field, FieldArrayType, FieldWrapper, FormlyModule, defineHiddenProp as ɵdefineHiddenProp, reverseDeepMerge as ɵreverseDeepMerge, getFieldValue as ɵgetFieldValue, clone as ɵclone, wrapProperty as ɵwrapProperty, defaultFormlyConfig as ɵa, CoreExtension as ɵe, FieldExpressionExtension as ɵh, FieldFormExtension as ɵg, FieldValidationExtension as ɵf, FormlyTemplateType as ɵd, FormlyGroup as ɵb, FormlyValidationMessage as ɵc };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}