{"ast":null,"code":"import _defineProperty from \"/home/ceo/mmmm/createyourevent/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getServiceOfferIdentifier } from '../service-offer.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport class ServiceOfferService {\n  constructor(http, applicationConfigService) {\n    _defineProperty(this, \"http\", void 0);\n    _defineProperty(this, \"applicationConfigService\", void 0);\n    _defineProperty(this, \"resourceUrl\", this.applicationConfigService.getEndpointFor('api/service-offers'));\n    this.http = http;\n    this.applicationConfigService = applicationConfigService;\n  }\n  create(serviceOffer) {\n    return this.http.post(this.resourceUrl, serviceOffer, {\n      observe: 'response'\n    });\n  }\n  update(serviceOffer) {\n    return this.http.put(`${this.resourceUrl}/${getServiceOfferIdentifier(serviceOffer)}`, serviceOffer, {\n      observe: 'response'\n    });\n  }\n  partialUpdate(serviceOffer) {\n    return this.http.patch(`${this.resourceUrl}/${getServiceOfferIdentifier(serviceOffer)}`, serviceOffer, {\n      observe: 'response'\n    });\n  }\n  find(id) {\n    return this.http.get(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  query(req) {\n    const options = createRequestOption(req);\n    return this.http.get(this.resourceUrl, {\n      params: options,\n      observe: 'response'\n    });\n  }\n  delete(id) {\n    return this.http.delete(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  addServiceOfferToCollectionIfMissing(serviceOfferCollection, ...serviceOffersToCheck) {\n    const serviceOffers = serviceOffersToCheck.filter(isPresent);\n    if (serviceOffers.length > 0) {\n      const serviceOfferCollectionIdentifiers = serviceOfferCollection.map(serviceOfferItem => getServiceOfferIdentifier(serviceOfferItem));\n      const serviceOffersToAdd = serviceOffers.filter(serviceOfferItem => {\n        const serviceOfferIdentifier = getServiceOfferIdentifier(serviceOfferItem);\n        if (serviceOfferIdentifier == null || serviceOfferCollectionIdentifiers.includes(serviceOfferIdentifier)) {\n          return false;\n        }\n        serviceOfferCollectionIdentifiers.push(serviceOfferIdentifier);\n        return true;\n      });\n      return [...serviceOffersToAdd, ...serviceOfferCollection];\n    }\n    return serviceOfferCollection;\n  }\n}\n_defineProperty(ServiceOfferService, \"\\u0275fac\", function ServiceOfferService_Factory(t) {\n  return new (t || ServiceOfferService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n});\n_defineProperty(ServiceOfferService, \"\\u0275prov\", /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ServiceOfferService,\n  factory: ServiceOfferService.ɵfac,\n  providedIn: 'root'\n}));","map":{"version":3,"mappings":";AAIA,SAASA,SAAS,QAAQ,yBAAyB;AAEnD,SAASC,mBAAmB,QAAQ,+BAA+B;AACnE,SAAwBC,yBAAyB,QAAQ,wBAAwB;;;;AAMjF,OAAM,MAAOC,mBAAmB;EAG9BC,YAAsBC,IAAgB,EAAYC,wBAAkD;IAAA;IAAA;IAAA,qCAF5E,IAAI,CAACA,wBAAwB,CAACC,cAAc,CAAC,oBAAoB,CAAC;IAEpE,SAAI,GAAJF,IAAI;IAAwB,6BAAwB,GAAxBC,wBAAwB;EAA6B;EAEvGE,MAAM,CAACC,YAA2B;IAChC,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAgB,IAAI,CAACC,WAAW,EAAEF,YAAY,EAAE;MAAEG,OAAO,EAAE;IAAU,CAAE,CAAC;EAC/F;EAEAC,MAAM,CAACJ,YAA2B;IAChC,OAAO,IAAI,CAACJ,IAAI,CAACS,GAAG,CAAgB,GAAG,IAAI,CAACH,WAAW,IAAIT,yBAAyB,CAACO,YAAY,CAAW,EAAE,EAAEA,YAAY,EAAE;MAC5HG,OAAO,EAAE;KACV,CAAC;EACJ;EAEAG,aAAa,CAACN,YAA2B;IACvC,OAAO,IAAI,CAACJ,IAAI,CAACW,KAAK,CAAgB,GAAG,IAAI,CAACL,WAAW,IAAIT,yBAAyB,CAACO,YAAY,CAAW,EAAE,EAAEA,YAAY,EAAE;MAC9HG,OAAO,EAAE;KACV,CAAC;EACJ;EAEAK,IAAI,CAACC,EAAU;IACb,OAAO,IAAI,CAACb,IAAI,CAACc,GAAG,CAAgB,GAAG,IAAI,CAACR,WAAW,IAAIO,EAAE,EAAE,EAAE;MAAEN,OAAO,EAAE;IAAU,CAAE,CAAC;EAC3F;EAEAQ,KAAK,CAACC,GAAS;IACb,MAAMC,OAAO,GAAGrB,mBAAmB,CAACoB,GAAG,CAAC;IACxC,OAAO,IAAI,CAAChB,IAAI,CAACc,GAAG,CAAkB,IAAI,CAACR,WAAW,EAAE;MAAEY,MAAM,EAAED,OAAO;MAAEV,OAAO,EAAE;IAAU,CAAE,CAAC;EACnG;EAEAY,MAAM,CAACN,EAAU;IACf,OAAO,IAAI,CAACb,IAAI,CAACmB,MAAM,CAAC,GAAG,IAAI,CAACb,WAAW,IAAIO,EAAE,EAAE,EAAE;MAAEN,OAAO,EAAE;IAAU,CAAE,CAAC;EAC/E;EAEAa,oCAAoC,CAClCC,sBAAuC,EACvC,GAAGC,oBAA0D;IAE7D,MAAMC,aAAa,GAAoBD,oBAAoB,CAACE,MAAM,CAAC7B,SAAS,CAAC;IAC7E,IAAI4B,aAAa,CAACE,MAAM,GAAG,CAAC,EAAE;MAC5B,MAAMC,iCAAiC,GAAGL,sBAAsB,CAACM,GAAG,CAClEC,gBAAgB,IAAI/B,yBAAyB,CAAC+B,gBAAgB,CAAE,CACjE;MACD,MAAMC,kBAAkB,GAAGN,aAAa,CAACC,MAAM,CAACI,gBAAgB,IAAG;QACjE,MAAME,sBAAsB,GAAGjC,yBAAyB,CAAC+B,gBAAgB,CAAC;QAC1E,IAAIE,sBAAsB,IAAI,IAAI,IAAIJ,iCAAiC,CAACK,QAAQ,CAACD,sBAAsB,CAAC,EAAE;UACxG,OAAO,KAAK;;QAEdJ,iCAAiC,CAACM,IAAI,CAACF,sBAAsB,CAAC;QAC9D,OAAO,IAAI;MACb,CAAC,CAAC;MACF,OAAO,CAAC,GAAGD,kBAAkB,EAAE,GAAGR,sBAAsB,CAAC;;IAE3D,OAAOA,sBAAsB;EAC/B;;gBAtDWvB,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAA,gBAAnBA,mBAAmB;SAAnBA,mBAAmB;EAAAmC,SAAnBnC,mBAAmB;EAAAoC,YADN;AAAM","names":["isPresent","createRequestOption","getServiceOfferIdentifier","ServiceOfferService","constructor","http","applicationConfigService","getEndpointFor","create","serviceOffer","post","resourceUrl","observe","update","put","partialUpdate","patch","find","id","get","query","req","options","params","delete","addServiceOfferToCollectionIfMissing","serviceOfferCollection","serviceOffersToCheck","serviceOffers","filter","length","serviceOfferCollectionIdentifiers","map","serviceOfferItem","serviceOffersToAdd","serviceOfferIdentifier","includes","push","factory","providedIn"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/entities/service-offer/service/service-offer.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { isPresent } from 'app/core/util/operators';\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { IServiceOffer, getServiceOfferIdentifier } from '../service-offer.model';\n\nexport type EntityResponseType = HttpResponse<IServiceOffer>;\nexport type EntityArrayResponseType = HttpResponse<IServiceOffer[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class ServiceOfferService {\n  protected resourceUrl = this.applicationConfigService.getEndpointFor('api/service-offers');\n\n  constructor(protected http: HttpClient, protected applicationConfigService: ApplicationConfigService) {}\n\n  create(serviceOffer: IServiceOffer): Observable<EntityResponseType> {\n    return this.http.post<IServiceOffer>(this.resourceUrl, serviceOffer, { observe: 'response' });\n  }\n\n  update(serviceOffer: IServiceOffer): Observable<EntityResponseType> {\n    return this.http.put<IServiceOffer>(`${this.resourceUrl}/${getServiceOfferIdentifier(serviceOffer) as number}`, serviceOffer, {\n      observe: 'response',\n    });\n  }\n\n  partialUpdate(serviceOffer: IServiceOffer): Observable<EntityResponseType> {\n    return this.http.patch<IServiceOffer>(`${this.resourceUrl}/${getServiceOfferIdentifier(serviceOffer) as number}`, serviceOffer, {\n      observe: 'response',\n    });\n  }\n\n  find(id: number): Observable<EntityResponseType> {\n    return this.http.get<IServiceOffer>(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  query(req?: any): Observable<EntityArrayResponseType> {\n    const options = createRequestOption(req);\n    return this.http.get<IServiceOffer[]>(this.resourceUrl, { params: options, observe: 'response' });\n  }\n\n  delete(id: number): Observable<HttpResponse<{}>> {\n    return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  addServiceOfferToCollectionIfMissing(\n    serviceOfferCollection: IServiceOffer[],\n    ...serviceOffersToCheck: (IServiceOffer | null | undefined)[]\n  ): IServiceOffer[] {\n    const serviceOffers: IServiceOffer[] = serviceOffersToCheck.filter(isPresent);\n    if (serviceOffers.length > 0) {\n      const serviceOfferCollectionIdentifiers = serviceOfferCollection.map(\n        serviceOfferItem => getServiceOfferIdentifier(serviceOfferItem)!\n      );\n      const serviceOffersToAdd = serviceOffers.filter(serviceOfferItem => {\n        const serviceOfferIdentifier = getServiceOfferIdentifier(serviceOfferItem);\n        if (serviceOfferIdentifier == null || serviceOfferCollectionIdentifiers.includes(serviceOfferIdentifier)) {\n          return false;\n        }\n        serviceOfferCollectionIdentifiers.push(serviceOfferIdentifier);\n        return true;\n      });\n      return [...serviceOffersToAdd, ...serviceOfferCollection];\n    }\n    return serviceOfferCollection;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}