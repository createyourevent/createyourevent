{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport Datatrans from './DatatransComponent';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngx-translate/core\";\nconst _c0 = [\"myReactComponentContainer\"];\nconst containerElementName = 'myReactComponentContainer';\nexport let ReactFeelingFormComponent = /*#__PURE__*/(() => {\n  class ReactFeelingFormComponent {\n    constructor(translate) {\n      this.translate = translate;\n      this.onLoaded = new EventEmitter();\n      this.onOpened = new EventEmitter();\n      this.onCancelled = new EventEmitter();\n      this.onError = new EventEmitter();\n      this.rootId = 'datatrans-form-root';\n      this.hasViewLoaded = false;\n    }\n    ngOnChanges(changes) {\n      if (changes['transactionId'] !== undefined && changes['transactionId'].currentValue !== undefined) {\n        this.transactionId = changes['transactionId'].currentValue;\n        this.renderComponent();\n        this.translate.onLangChange.subscribe(langChangeEvent => {\n          this.payButton = this.translate.instant(\"datatrans.pay\");\n        });\n      }\n    }\n    ngAfterViewInit() {\n      this.hasViewLoaded = true;\n      this.renderComponent();\n    }\n    renderComponent() {\n      if (!this.hasViewLoaded) {\n        return;\n      }\n      const props = {\n        production: this.production,\n        transactionId: this.transactionId,\n        onLoaded: () => this.onLoaded.emit(),\n        onOpened: () => this.onOpened.emit(),\n        onCancelled: () => this.onCancelled.emit(),\n        onError: data => this.onError.emit(data)\n      };\n      ReactDOM.render(React.createElement(Datatrans, props), document.getElementById(this.rootId));\n    }\n  }\n  ReactFeelingFormComponent.ɵfac = function ReactFeelingFormComponent_Factory(t) {\n    return new (t || ReactFeelingFormComponent)(i0.ɵɵdirectiveInject(i1.TranslateService));\n  };\n  ReactFeelingFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ReactFeelingFormComponent,\n    selectors: [[\"datatrans-component\"]],\n    viewQuery: function ReactFeelingFormComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.containerRef = _t.first);\n      }\n    },\n    inputs: {\n      transactionId: \"transactionId\",\n      production: \"production\"\n    },\n    outputs: {\n      onLoaded: \"onLoaded\",\n      onOpened: \"onOpened\",\n      onCancelled: \"onCancelled\",\n      onError: \"onError\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 3,\n    vars: 1,\n    consts: [[3, \"id\"], [\"myReactComponentContainer\", \"\"]],\n    template: function ReactFeelingFormComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"span\", null, 1);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"id\", ctx.rootId);\n      }\n    },\n    encapsulation: 2\n  });\n  return ReactFeelingFormComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}