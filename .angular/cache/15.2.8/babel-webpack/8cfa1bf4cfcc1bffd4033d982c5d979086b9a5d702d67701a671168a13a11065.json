{"ast":null,"code":"import _defineProperty from \"/home/ceo/mmmm/createyourevent/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\nimport { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getShopCommentIdentifier } from '../shop-comment.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport class ShopCommentService {\n  constructor(http, applicationConfigService) {\n    _defineProperty(this, \"http\", void 0);\n    _defineProperty(this, \"applicationConfigService\", void 0);\n    _defineProperty(this, \"resourceUrl\", this.applicationConfigService.getEndpointFor('api/shop-comments'));\n    this.http = http;\n    this.applicationConfigService = applicationConfigService;\n  }\n  create(shopComment) {\n    const copy = this.convertDateFromClient(shopComment);\n    return this.http.post(this.resourceUrl, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  update(shopComment) {\n    const copy = this.convertDateFromClient(shopComment);\n    return this.http.put(`${this.resourceUrl}/${getShopCommentIdentifier(shopComment)}`, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  partialUpdate(shopComment) {\n    const copy = this.convertDateFromClient(shopComment);\n    return this.http.patch(`${this.resourceUrl}/${getShopCommentIdentifier(shopComment)}`, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  find(id) {\n    return this.http.get(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  query(req) {\n    const options = createRequestOption(req);\n    return this.http.get(this.resourceUrl, {\n      params: options,\n      observe: 'response'\n    }).pipe(map(res => this.convertDateArrayFromServer(res)));\n  }\n  delete(id) {\n    return this.http.delete(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  addShopCommentToCollectionIfMissing(shopCommentCollection, ...shopCommentsToCheck) {\n    const shopComments = shopCommentsToCheck.filter(isPresent);\n    if (shopComments.length > 0) {\n      const shopCommentCollectionIdentifiers = shopCommentCollection.map(shopCommentItem => getShopCommentIdentifier(shopCommentItem));\n      const shopCommentsToAdd = shopComments.filter(shopCommentItem => {\n        const shopCommentIdentifier = getShopCommentIdentifier(shopCommentItem);\n        if (shopCommentIdentifier == null || shopCommentCollectionIdentifiers.includes(shopCommentIdentifier)) {\n          return false;\n        }\n        shopCommentCollectionIdentifiers.push(shopCommentIdentifier);\n        return true;\n      });\n      return [...shopCommentsToAdd, ...shopCommentCollection];\n    }\n    return shopCommentCollection;\n  }\n  convertDateFromClient(shopComment) {\n    return Object.assign({}, shopComment, {\n      date: shopComment.date?.isValid() ? shopComment.date.toJSON() : undefined\n    });\n  }\n  convertDateFromServer(res) {\n    if (res.body) {\n      res.body.date = res.body.date ? dayjs(res.body.date) : undefined;\n    }\n    return res;\n  }\n  convertDateArrayFromServer(res) {\n    if (res.body) {\n      res.body.forEach(shopComment => {\n        shopComment.date = shopComment.date ? dayjs(shopComment.date) : undefined;\n      });\n    }\n    return res;\n  }\n}\n_defineProperty(ShopCommentService, \"\\u0275fac\", function ShopCommentService_Factory(t) {\n  return new (t || ShopCommentService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n});\n_defineProperty(ShopCommentService, \"\\u0275prov\", /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ShopCommentService,\n  factory: ShopCommentService.ɵfac,\n  providedIn: 'root'\n}));","map":{"version":3,"mappings":"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","names":["map","dayjs","isPresent","createRequestOption","getShopCommentIdentifier","ShopCommentService","constructor","http","applicationConfigService","getEndpointFor","create","shopComment","copy","convertDateFromClient","post","resourceUrl","observe","pipe","res","convertDateFromServer","update","put","partialUpdate","patch","find","id","get","query","req","options","params","convertDateArrayFromServer","delete","addShopCommentToCollectionIfMissing","shopCommentCollection","shopCommentsToCheck","shopComments","filter","length","shopCommentCollectionIdentifiers","shopCommentItem","shopCommentsToAdd","shopCommentIdentifier","includes","push","Object","assign","date","isValid","toJSON","undefined","body","forEach","factory","providedIn"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/entities/shop-comment/service/shop-comment.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\n\nimport { isPresent } from 'app/core/util/operators';\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { IShopComment, getShopCommentIdentifier } from '../shop-comment.model';\n\nexport type EntityResponseType = HttpResponse<IShopComment>;\nexport type EntityArrayResponseType = HttpResponse<IShopComment[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class ShopCommentService {\n  protected resourceUrl = this.applicationConfigService.getEndpointFor('api/shop-comments');\n\n  constructor(protected http: HttpClient, protected applicationConfigService: ApplicationConfigService) {}\n\n  create(shopComment: IShopComment): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(shopComment);\n    return this.http\n      .post<IShopComment>(this.resourceUrl, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  update(shopComment: IShopComment): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(shopComment);\n    return this.http\n      .put<IShopComment>(`${this.resourceUrl}/${getShopCommentIdentifier(shopComment) as number}`, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  partialUpdate(shopComment: IShopComment): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(shopComment);\n    return this.http\n      .patch<IShopComment>(`${this.resourceUrl}/${getShopCommentIdentifier(shopComment) as number}`, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  find(id: number): Observable<EntityResponseType> {\n    return this.http\n      .get<IShopComment>(`${this.resourceUrl}/${id}`, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  query(req?: any): Observable<EntityArrayResponseType> {\n    const options = createRequestOption(req);\n    return this.http\n      .get<IShopComment[]>(this.resourceUrl, { params: options, observe: 'response' })\n      .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n  }\n\n  delete(id: number): Observable<HttpResponse<{}>> {\n    return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  addShopCommentToCollectionIfMissing(\n    shopCommentCollection: IShopComment[],\n    ...shopCommentsToCheck: (IShopComment | null | undefined)[]\n  ): IShopComment[] {\n    const shopComments: IShopComment[] = shopCommentsToCheck.filter(isPresent);\n    if (shopComments.length > 0) {\n      const shopCommentCollectionIdentifiers = shopCommentCollection.map(shopCommentItem => getShopCommentIdentifier(shopCommentItem)!);\n      const shopCommentsToAdd = shopComments.filter(shopCommentItem => {\n        const shopCommentIdentifier = getShopCommentIdentifier(shopCommentItem);\n        if (shopCommentIdentifier == null || shopCommentCollectionIdentifiers.includes(shopCommentIdentifier)) {\n          return false;\n        }\n        shopCommentCollectionIdentifiers.push(shopCommentIdentifier);\n        return true;\n      });\n      return [...shopCommentsToAdd, ...shopCommentCollection];\n    }\n    return shopCommentCollection;\n  }\n\n  protected convertDateFromClient(shopComment: IShopComment): IShopComment {\n    return Object.assign({}, shopComment, {\n      date: shopComment.date?.isValid() ? shopComment.date.toJSON() : undefined,\n    });\n  }\n\n  protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\n    if (res.body) {\n      res.body.date = res.body.date ? dayjs(res.body.date) : undefined;\n    }\n    return res;\n  }\n\n  protected convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\n    if (res.body) {\n      res.body.forEach((shopComment: IShopComment) => {\n        shopComment.date = shopComment.date ? dayjs(shopComment.date) : undefined;\n      });\n    }\n    return res;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}