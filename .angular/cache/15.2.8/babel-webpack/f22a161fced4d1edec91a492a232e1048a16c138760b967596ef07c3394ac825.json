{"ast":null,"code":"import { Injectable, NgModule } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Service for injecting the Matomo tracker in the application.\n *\n * @export\n */\nimport * as ɵngcc0 from '@angular/core';\nlet MatomoInjector = /*#__PURE__*/(() => {\n  class MatomoInjector {\n    /**\n     * Creates an instance of MatomoInjector.\n     *\n     * \\@memberof MatomoInjector\n     */\n    constructor() {\n      window[\"_paq\"] = window[\"_paq\"] || [];\n    }\n    /**\n     * Injects the Matomo tracker in the DOM.\n     *\n     * \\@memberof MatomoInjector\n     * @param {?} url\n     * @param {?} id : SiteId for this application/site.\n     * @return {?}\n     */\n    init(url, id) {\n      window[\"_paq\"].push(['trackPageView']);\n      window[\"_paq\"].push(['enableLinkTracking']);\n      (() => {\n        const /** @type {?} */u = url;\n        window[\"_paq\"].push(['setTrackerUrl', u + 'piwik.php']);\n        window[\"_paq\"].push(['setSiteId', id.toString()]);\n        const /** @type {?} */d = document,\n          /** @type {?} */\n          g = d.createElement('script'),\n          /** @type {?} */\n          s = d.getElementsByTagName('script')[0];\n        g.type = 'text/javascript';\n        g.async = true;\n        g.defer = true;\n        g.src = u + 'piwik.js';\n        s.parentNode.insertBefore(g, s);\n      })();\n    }\n  }\n  MatomoInjector.ɵfac = function MatomoInjector_Factory(t) {\n    return new (t || MatomoInjector)();\n  };\n  MatomoInjector.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: MatomoInjector,\n    factory: MatomoInjector.ɵfac\n  });\n  /** @nocollapse */\n  return MatomoInjector;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Wrapper for functions available for the Matomo Javascript tracker.\n *\n * @export\n */\nlet MatomoTracker = /*#__PURE__*/(() => {\n  class MatomoTracker {\n    /**\n     * Creates an instance of MatomoTracker.\n     *\n     * \\@memberof MatomoTracker\n     */\n    constructor() {\n      if (typeof window[\"_paq\"] === 'undefined') {\n        console.warn('Matomo has not yet been initialized! (Did you forget to inject it?)');\n      }\n    }\n    /**\n     * Logs an event with an event category (Videos, Music, Games...), an event action (Play, Pause, Duration,\n     * Add Playlist, Downloaded, Clicked...), and an optional event name and optional numeric value.\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} category\n     * @param {?} action\n     * @param {?=} name\n     * @param {?=} value\n     * @return {?}\n     */\n    trackEvent(category, action, name, value) {\n      try {\n        const /** @type {?} */args = [category, action];\n        if (!!name) {\n          args.push(name);\n        }\n        if (typeof value === 'number') {\n          args.push(value);\n        }\n        window[\"_paq\"].push(['trackEvent', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Logs a visit to this page.\n     *\n     * \\@memberof MatomoTracker\n     * @param {?=} customTitle\n     * @return {?}\n     */\n    trackPageView(customTitle) {\n      try {\n        const /** @type {?} */args = [];\n        if (!!customTitle) {\n          args.push(customTitle);\n        }\n        window[\"_paq\"].push(['trackPageView', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Logs an internal site search for a specific keyword, in an optional category,\n     * specifying the optional count of search results in the page.\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} keyword\n     * @param {?=} category\n     * @param {?=} resultsCount\n     * @return {?}\n     */\n    trackSiteSearch(keyword, category, resultsCount) {\n      try {\n        const /** @type {?} */args = [keyword];\n        if (!!category) {\n          args.push(category);\n        }\n        if (typeof resultsCount === 'number') {\n          args.push(resultsCount);\n        }\n        window[\"_paq\"].push(['trackSiteSearch', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Manually logs a conversion for the numeric goal ID, with an optional numeric custom revenue customRevenue.\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} idGoal\n     * @param {?=} customRevenue\n     * @return {?}\n     */\n    trackGoal(idGoal, customRevenue) {\n      try {\n        const /** @type {?} */args = [idGoal];\n        if (typeof customRevenue === 'number') {\n          args.push(customRevenue);\n        }\n        window[\"_paq\"].push(['trackGoal', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Manually logs a click from your own code.\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} url\n     * @param {?} linkType\n     * @return {?}\n     */\n    trackLink(url, linkType) {\n      try {\n        const /** @type {?} */args = [url, linkType];\n        window[\"_paq\"].push(['trackLink', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Scans the entire DOM for all content blocks and tracks all impressions once the DOM ready event has been triggered.\n     *\n     * \\@memberof MatomoTracker\n     * @return {?}\n     */\n    trackAllContentImpressions() {\n      try {\n        window[\"_paq\"].push(['trackAllContentImpressions']);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Scans the entire DOM for all content blocks as soon as the page is loaded.\n     * It tracks an impression only if a content block is actually visible.\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} checkOnScroll\n     * @param {?} timeIntervalInMs\n     * @return {?}\n     */\n    trackVisibleContentImpressions(checkOnScroll, timeIntervalInMs) {\n      try {\n        const /** @type {?} */args = [checkOnScroll, timeIntervalInMs];\n        window[\"_paq\"].push(['trackVisibleContentImpressions', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Scans the given DOM node and its children for content blocks and tracks an impression for them\n     * if no impression was already tracked for it.\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} domNode\n     * @return {?}\n     */\n    trackContentImpressionsWithinNode(domNode) {\n      try {\n        const /** @type {?} */args = [domNode];\n        window[\"_paq\"].push(['trackContentImpressionsWithinNode', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Tracks an interaction with the given DOM node / content block.\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} domNode\n     * @param {?} contentInteraction\n     * @return {?}\n     */\n    trackContentInteractionNode(domNode, contentInteraction) {\n      try {\n        const /** @type {?} */args = [domNode, contentInteraction];\n        window[\"_paq\"].push(['trackContentInteractionNode', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Tracks a content impression using the specified values.\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} contentName\n     * @param {?} contentPiece\n     * @param {?} contentTarget\n     * @return {?}\n     */\n    trackContentImpression(contentName, contentPiece, contentTarget) {\n      try {\n        const /** @type {?} */args = [contentName, contentPiece, contentTarget];\n        window[\"_paq\"].push(['trackContentImpression', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Tracks a content interaction using the specified values.\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} contentInteraction\n     * @param {?} contentName\n     * @param {?} contentPiece\n     * @param {?} contentTarget\n     * @return {?}\n     */\n    trackContentInteraction(contentInteraction, contentName, contentPiece, contentTarget) {\n      try {\n        const /** @type {?} */args = [contentInteraction, contentName, contentPiece, contentTarget];\n        window[\"_paq\"].push(['trackContentInteraction', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Logs all found content blocks within a page to the console. This is useful to debug / test content tracking.\n     *\n     * \\@memberof MatomoTracker\n     * @return {?}\n     */\n    logAllContentBlocksOnPage() {\n      try {\n        window[\"_paq\"].push(['logAllContentBlocksOnPage']);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Installs link tracking on all applicable link elements.\n     * Set the enable parameter to true to use pseudo click-handler (treat middle click and open contextmenu as left click).\n     * A right click (or any click that opens the context menu) on a link will be tracked as clicked even if \"Open in new tab\"\n     * is not selected. If \"false\" (default), nothing will be tracked on open context menu or middle click.\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} enable\n     * @return {?}\n     */\n    enableLinkTracking(enable) {\n      try {\n        const /** @type {?} */args = [enable];\n        window[\"_paq\"].push(['enableLinkTracking', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Install a Heart beat timer that will regularly send requests to Matomo in order to better measure the time spent on the page.\n     * These requests will be sent only when the user is actively viewing the page( when the tab is active and in focus).\n     * These requests will not track additional actions or pageviews.\n     * By default, delayInSeconds is set to 15 seconds.\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} delayInSeconds\n     * @return {?}\n     */\n    enableHeartBeatTimer(delayInSeconds) {\n      try {\n        const /** @type {?} */args = [delayInSeconds];\n        window[\"_paq\"].push(['enableHeartBeatTimer', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Enables cross domain linking. By default, the visitor ID that identifies a unique visitor is stored in the browser's\n     * first party cookies. This means the cookie can only be accessed by pages on the same domain. If you own multiple domains and\n     * would like to track all the actions and pageviews of a specific visitor into the same visit, you may enable cross domain\n     * linking (learn more) . Whenever a user clicks on a link it will append a URL parameter pk_vid to the clicked URL which forwards\n     * the current visitor ID value to the page of the different domain.\n     *\n     * \\@memberof MatomoTracker\n     * @return {?}\n     */\n    enableCrossDomainLinking() {\n      try {\n        window[\"_paq\"].push(['enableCrossDomainLinking']);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * By default, the two visits across domains will be linked together when the link is clicked and the page is loaded within\n     * a 180 seconds timeout window.\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} timeout\n     * @return {?}\n     */\n    setCrossDomainLinkingTimeout(timeout) {\n      try {\n        const /** @type {?} */args = [timeout];\n        window[\"_paq\"].push(['setCrossDomainLinkingTimeout', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Overrides document.title\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} title\n     * @return {?}\n     */\n    setDocumentTitle(title) {\n      try {\n        const /** @type {?} */args = [title];\n        window[\"_paq\"].push(['setDocumentTitle', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Sets array of hostnames or domains to be treated as local.\n     * For wildcard subdomains, you can use: setDomains('.example.com'); or setDomains('*.example.com');.\n     * You can also specify a path along a domain: setDomains('*.example.com/subsite1');\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} domains\n     * @return {?}\n     */\n    setDomains(domains) {\n      try {\n        const /** @type {?} */args = [domains];\n        window[\"_paq\"].push(['setDomains', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Override the page's reported URL.\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} url\n     * @return {?}\n     */\n    setCustomUrl(url) {\n      try {\n        const /** @type {?} */args = [url];\n        window[\"_paq\"].push(['setCustomUrl', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Overrides the detected Http-Referer.\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} url\n     * @return {?}\n     */\n    setReferrerUrl(url) {\n      try {\n        const /** @type {?} */args = [url];\n        window[\"_paq\"].push(['setReferrerUrl', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Specifies the website ID.\n     * Redundant: can be specified in getTracker() constructor.\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} siteId\n     * @return {?}\n     */\n    setSiteId(siteId) {\n      try {\n        const /** @type {?} */args = [siteId];\n        window[\"_paq\"].push(['setSiteId', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Specify the Matomo HTTP API URL endpoint. Points to the root directory of piwik,\n     * e.g. http://piwik.example.org/ or https://example.org/piwik/.\n     * This function is only useful when the 'Overlay' report is not working.\n     * By default, you do not need to use this function.\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} url\n     * @return {?}\n     */\n    setApiUrl(url) {\n      try {\n        const /** @type {?} */args = [url];\n        window[\"_paq\"].push(['setApiUrl', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Specifies the Matomo server URL.\n     * Redundant: can be specified in getTracker() constructor.\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} url\n     * @return {?}\n     */\n    setTrackerUrl(url) {\n      try {\n        const /** @type {?} */args = [url];\n        window[\"_paq\"].push(['setTrackerUrl', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Returns the Matomo server URL.\n     *\n     * \\@memberof MatomoTracker\n     * @return {?}\n     */\n    getPiwikUrl() {\n      return new Promise((resolve, reject) => {\n        try {\n          window[\"_paq\"].push([function () {\n            resolve(this.getPiwikUrl());\n          }]);\n        } catch ( /** @type {?} */e) {\n          if (!(e instanceof ReferenceError)) {\n            reject(e);\n          }\n        }\n      });\n    }\n    /**\n     * Returns the current url of the page that is currently being visited.\n     * If a custom URL was set before calling this method, the custom URL will be returned.\n     *\n     * \\@memberof MatomoTracker\n     * @return {?}\n     */\n    getCurrentUrl() {\n      return new Promise((resolve, reject) => {\n        try {\n          window[\"_paq\"].push([function () {\n            resolve(this.getCurrentUrl());\n          }]);\n        } catch ( /** @type {?} */e) {\n          if (!(e instanceof ReferenceError)) {\n            reject(e);\n          }\n        }\n      });\n    }\n    /**\n     * Sets classes to be treated as downloads (in addition to piwik_download).\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} classes\n     * @return {?}\n     */\n    setDownloadClasses(classes) {\n      try {\n        const /** @type {?} */args = [classes];\n        window[\"_paq\"].push(['setDownloadClasses', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Sets list of file extensions to be recognized as downloads.\n     * Example: 'doc' or['doc', 'xls'].\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} extensions\n     * @return {?}\n     */\n    setDownloadExtensions(extensions) {\n      try {\n        const /** @type {?} */args = [extensions];\n        window[\"_paq\"].push(['setDownloadClasses', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Sets additional file extensions to be recognized as downloads.\n     * Example: 'doc' or['doc', 'xls'].\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} extensions\n     * @return {?}\n     */\n    addDownloadExtensions(extensions) {\n      try {\n        const /** @type {?} */args = [extensions];\n        window[\"_paq\"].push(['setDownloadClasses', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Sets file extensions to be removed from the list of download file extensions.\n     * Example: 'doc' or['doc', 'xls'].\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} extensions\n     * @return {?}\n     */\n    removeDownloadExtensions(extensions) {\n      try {\n        const /** @type {?} */args = [extensions];\n        window[\"_paq\"].push(['setDownloadClasses', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Sets classes to be ignored if present in link (in addition to piwik_ignore).\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} classes\n     * @return {?}\n     */\n    setIgnoreClasses(classes) {\n      try {\n        const /** @type {?} */args = [classes];\n        window[\"_paq\"].push(['setDownloadClasses', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Set classes to be treated as outlinks (in addition to piwik_link).\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} classes\n     * @return {?}\n     */\n    setLinkClasses(classes) {\n      try {\n        const /** @type {?} */args = [classes];\n        window[\"_paq\"].push(['setDownloadClasses', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Set delay for link tracking (in milliseconds).\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} delay\n     * @return {?}\n     */\n    setLinkTrackingTimer(delay) {\n      try {\n        const /** @type {?} */args = [delay];\n        window[\"_paq\"].push(['setLinkTrackingTimer', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Returns delay for link tracking (in milliseconds).\n     *\n     * \\@memberof MatomoTracker\n     * @return {?}\n     */\n    getLinkTrackingTimer() {\n      return new Promise((resolve, reject) => {\n        try {\n          window[\"_paq\"].push([function () {\n            resolve(this.getLinkTrackingTimer());\n          }]);\n        } catch ( /** @type {?} */e) {\n          if (!(e instanceof ReferenceError)) {\n            reject(e);\n          }\n        }\n      });\n    }\n    /**\n     * Set to true to not record the hash tag (anchor) portion of URLs\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} value\n     * @return {?}\n     */\n    discardHashTag(value) {\n      try {\n        const /** @type {?} */args = [value];\n        window[\"_paq\"].push(['discardHashTag', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * By default Matomo uses the browser DOM Timing API to accurately determine the time it takes to generate and download\n     * the page. You may overwrite the value by specifying a milliseconds value here.\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} generationTime\n     * @return {?}\n     */\n    setGenerationTimeMs(generationTime) {\n      try {\n        const /** @type {?} */args = [generationTime];\n        window[\"_paq\"].push(['setGenerationTimeMs', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Appends a custom string to the end of the HTTP request to piwik.php?\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} appendToUrl\n     * @return {?}\n     */\n    appendToTrackingUrl(appendToUrl) {\n      try {\n        const /** @type {?} */args = [appendToUrl];\n        window[\"_paq\"].push(['appendToTrackingUrl', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Set to true to not track users who opt out of tracking using Mozilla's (proposed) Do Not Track setting.\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} doNotTrack\n     * @return {?}\n     */\n    setDoNotTrack(doNotTrack) {\n      try {\n        const /** @type {?} */args = [doNotTrack];\n        window[\"_paq\"].push(['setDoNotTrack', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Enables a frame-buster to prevent the tracked web page from being framed/iframed.\n     *\n     * \\@memberof MatomoTracker\n     * @return {?}\n     */\n    killFrame() {\n      try {\n        window[\"_paq\"].push(['killFrame']);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Forces the browser load the live URL if the tracked web page is loaded from a local file (e.g., saved to someone's desktop).\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} url\n     * @return {?}\n     */\n    redirectFile(url) {\n      try {\n        const /** @type {?} */args = [url];\n        window[\"_paq\"].push(['redirectFile', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Records how long the page has been viewed if the minimumVisitLength (in seconds) is attained;\n     * the heartBeatDelay determines how frequently to update the server\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} minimumVisitLength\n     * @param {?} heartBeatDelay\n     * @return {?}\n     */\n    setHeartBeatTimer(minimumVisitLength, heartBeatDelay) {\n      try {\n        const /** @type {?} */args = [minimumVisitLength, heartBeatDelay];\n        window[\"_paq\"].push(['setHeartBeatTimer', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Returns the 16 characters ID for the visitor\n     *\n     * \\@memberof MatomoTracker\n     * @return {?}\n     */\n    getVisitorId() {\n      return new Promise((resolve, reject) => {\n        try {\n          window[\"_paq\"].push([function () {\n            resolve(this.getVisitorId());\n          }]);\n        } catch ( /** @type {?} */e) {\n          if (!(e instanceof ReferenceError)) {\n            reject(e);\n          }\n        }\n      });\n    }\n    /**\n     * Returns the visitor cookie contents in an array\n     *\n     * \\@memberof MatomoTracker\n     * @return {?}\n     */\n    getVisitorInfo() {\n      return new Promise((resolve, reject) => {\n        try {\n          window[\"_paq\"].push([function () {\n            resolve(this.getVisitorInfo());\n          }]);\n        } catch ( /** @type {?} */e) {\n          if (!(e instanceof ReferenceError)) {\n            reject(e);\n          }\n        }\n      });\n    }\n    /**\n     * Returns the visitor attribution array (Referer information and / or Campaign name & keyword).\n     * Attribution information is used by Matomo to credit the correct referrer (first or last referrer)\n     * used when a user triggers a goal conversion.\n     *\n     * \\@memberof MatomoTracker\n     * @return {?}\n     */\n    getAttributionInfo() {\n      return new Promise((resolve, reject) => {\n        try {\n          window[\"_paq\"].push([function () {\n            resolve(this.getAttributionInfo());\n          }]);\n        } catch ( /** @type {?} */e) {\n          if (!(e instanceof ReferenceError)) {\n            reject(e);\n          }\n        }\n      });\n    }\n    /**\n     * Returns the attribution campaign name.\n     *\n     * \\@memberof MatomoTracker\n     * @return {?}\n     */\n    getAttributionCampaignName() {\n      return new Promise((resolve, reject) => {\n        try {\n          window[\"_paq\"].push([function () {\n            resolve(this.getAttributionCampaignName());\n          }]);\n        } catch ( /** @type {?} */e) {\n          if (!(e instanceof ReferenceError)) {\n            reject(e);\n          }\n        }\n      });\n    }\n    /**\n     * Returns the attribution campaign keyword.\n     *\n     * \\@memberof MatomoTracker\n     * @return {?}\n     */\n    getAttributionCampaignKeyword() {\n      return new Promise((resolve, reject) => {\n        try {\n          window[\"_paq\"].push([function () {\n            resolve(this.getAttributionCampaignKeyword());\n          }]);\n        } catch ( /** @type {?} */e) {\n          if (!(e instanceof ReferenceError)) {\n            reject(e);\n          }\n        }\n      });\n    }\n    /**\n     * Returns the attribution referrer timestamp.\n     *\n     * \\@memberof MatomoTracker\n     * @return {?}\n     */\n    getAttributionReferrerTimestamp() {\n      return new Promise((resolve, reject) => {\n        try {\n          window[\"_paq\"].push([function () {\n            resolve(this.getAttributionReferrerTimestamp());\n          }]);\n        } catch ( /** @type {?} */e) {\n          if (!(e instanceof ReferenceError)) {\n            reject(e);\n          }\n        }\n      });\n    }\n    /**\n     * Returns the attribution referrer URL.\n     *\n     * \\@memberof MatomoTracker\n     * @return {?}\n     */\n    getAttributionReferrerUrl() {\n      return new Promise((resolve, reject) => {\n        try {\n          window[\"_paq\"].push([function () {\n            resolve(this.getAttributionReferrerUrl());\n          }]);\n        } catch ( /** @type {?} */e) {\n          if (!(e instanceof ReferenceError)) {\n            reject(e);\n          }\n        }\n      });\n    }\n    /**\n     *  Returns the User ID string if it was set.\n     *\n     * \\@memberof MatomoTracker\n     * @return {?}\n     */\n    getUserId() {\n      return new Promise((resolve, reject) => {\n        try {\n          window[\"_paq\"].push([function () {\n            resolve(this.getUserId());\n          }]);\n        } catch ( /** @type {?} */e) {\n          if (!(e instanceof ReferenceError)) {\n            reject(e);\n          }\n        }\n      });\n    }\n    /**\n     * Sets a User ID to this user (such as an email address or a username).\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} userId\n     * @return {?}\n     */\n    setUserId(userId) {\n      try {\n        const /** @type {?} */args = [userId];\n        window[\"_paq\"].push(['setUserId', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Resets the User ID which also generates a new Visitor ID.\n     *\n     * \\@memberof MatomoTracker\n     * @return {?}\n     */\n    resetUserId() {\n      try {\n        window[\"_paq\"].push(['resetUserId']);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Sets a custom variable.\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} index\n     * @param {?} name\n     * @param {?} value\n     * @param {?} scope\n     * @return {?}\n     */\n    setCustomVariable(index, name, value, scope) {\n      try {\n        const /** @type {?} */args = [index, name, value, scope];\n        window[\"_paq\"].push(['setCustomVariable', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Deletes a custom variable.\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} index\n     * @param {?} scope\n     * @return {?}\n     */\n    deleteCustomVariable(index, scope) {\n      try {\n        const /** @type {?} */args = [index, scope];\n        window[\"_paq\"].push(['deleteCustomVariable', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Retrieves a custom variable.\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} index\n     * @param {?} scope\n     * @return {?}\n     */\n    getCustomVariable(index, scope) {\n      return new Promise((resolve, reject) => {\n        try {\n          window[\"_paq\"].push([function () {\n            resolve(this.getCustomVariable(index, scope));\n          }]);\n        } catch ( /** @type {?} */e) {\n          if (!(e instanceof ReferenceError)) {\n            reject(e);\n          }\n        }\n      });\n    }\n    /**\n     * When called then the Custom Variables of scope \"visit\" will be stored (persisted) in a first party cookie\n     * for the duration of the visit. This is useful if you want to call getCustomVariable later in the visit.\n     * (by default custom variables are not stored on the visitor's computer.)\n     *\n     * \\@memberof MatomoTracker\n     * @return {?}\n     */\n    storeCustomVariablesInCookie() {\n      try {\n        window[\"_paq\"].push(['storeCustomVariablesInCookie']);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Sets a custom dimension.\n     * (requires Matomo 2.15.1 + Custom Dimensions plugin)\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} customDimensionId\n     * @param {?} customDimensionValue\n     * @return {?}\n     */\n    setCustomDimension(customDimensionId, customDimensionValue) {\n      try {\n        const /** @type {?} */args = [customDimensionId, customDimensionValue];\n        window[\"_paq\"].push(['setCustomDimension', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Deletes a custom dimension.\n     * (requires Matomo 2.15.1 + Custom Dimensions plugin)\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} customDimensionId\n     * @return {?}\n     */\n    deleteCustomDimension(customDimensionId) {\n      try {\n        const /** @type {?} */args = [customDimensionId];\n        window[\"_paq\"].push(['deleteCustomDimension', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Retrieve a custom dimension.\n     * (requires Matomo 2.15.1 + Custom Dimensions plugin)\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} customDimensionId\n     * @return {?}\n     */\n    getCustomDimension(customDimensionId) {\n      return new Promise((resolve, reject) => {\n        try {\n          window[\"_paq\"].push([function () {\n            resolve(this.getCustomDimension(customDimensionId));\n          }]);\n        } catch ( /** @type {?} */e) {\n          if (!(e instanceof ReferenceError)) {\n            reject(e);\n          }\n        }\n      });\n    }\n    /**\n     * Sets campaign name parameter(s).\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} name\n     * @return {?}\n     */\n    setCampaignNameKey(name) {\n      try {\n        const /** @type {?} */args = [name];\n        window[\"_paq\"].push(['setCampaignNameKey', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Sets campaign keyword parameter(s).\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} keyword\n     * @return {?}\n     */\n    setCampaignKeywordKey(keyword) {\n      try {\n        const /** @type {?} */args = [keyword];\n        window[\"_paq\"].push(['setCampaignKeywordKey', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Set to true to attribute a conversion to the first referrer.\n     * By default, conversion is attributed to the most recent referrer.\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} conversionToFirstReferrer\n     * @return {?}\n     */\n    setConversionAttributionFirstReferrer(conversionToFirstReferrer) {\n      try {\n        const /** @type {?} */args = [conversionToFirstReferrer];\n        window[\"_paq\"].push(['setConversionAttributionFirstReferrer', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Sets the current page view as a product or category page view.\n     * When you call setEcommerceView it must be followed by a call to trackPageView to record the product or category page view.\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} productSKU\n     * @param {?} productName\n     * @param {?} categoryName\n     * @param {?} price\n     * @return {?}\n     */\n    setEcommerceView(productSKU, productName, categoryName, price) {\n      try {\n        const /** @type {?} */args = [productSKU, productName, categoryName, price];\n        window[\"_paq\"].push(['setEcommerceView', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Adds a product into the ecommerce order.Must be called for each product in the order.\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} productSKU\n     * @param {?=} productName\n     * @param {?=} productCategory\n     * @param {?=} price\n     * @param {?=} quantity\n     * @return {?}\n     */\n    addEcommerceItem(productSKU, productName, productCategory, price, quantity) {\n      try {\n        const /** @type {?} */args = [productSKU];\n        if (!!productName) {\n          args.push(productName);\n        }\n        if (!!productCategory) {\n          args.push(productCategory);\n        }\n        if (typeof price === 'number') {\n          args.push(price);\n        }\n        if (typeof quantity === 'number') {\n          args.push(quantity);\n        }\n        window[\"_paq\"].push(['addEcommerceItem', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Tracks a shopping cart.Call this javascript function every time a user is adding, updating or deleting a product from the cart.\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} grandTotal\n     * @return {?}\n     */\n    trackEcommerceCartUpdate(grandTotal) {\n      try {\n        const /** @type {?} */args = [grandTotal];\n        window[\"_paq\"].push(['trackEcommerceCartUpdate', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Tracks an Ecommerce order, including any ecommerce item previously added to the order.\n     * orderId and grandTotal (ie.revenue) are required parameters.\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} orderId\n     * @param {?} grandTotal\n     * @param {?=} subTotal\n     * @param {?=} tax\n     * @param {?=} shipping\n     * @param {?=} discount\n     * @return {?}\n     */\n    trackEcommerceOrder(orderId, grandTotal, subTotal, tax, shipping, discount) {\n      try {\n        const /** @type {?} */args = [orderId, grandTotal];\n        if (typeof subTotal === 'number') {\n          args.push(subTotal);\n        }\n        if (typeof tax === 'number') {\n          args.push(tax);\n        }\n        if (typeof shipping === 'number') {\n          args.push(shipping);\n        }\n        if (typeof discount === 'number') {\n          args.push(discount);\n        }\n        window[\"_paq\"].push(['trackEcommerceOrder', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Disables all first party cookies. Existing Matomo cookies for this websites will be deleted on the next page view.\n     *\n     * \\@memberof MatomoTracker\n     * @return {?}\n     */\n    disableCookies() {\n      try {\n        window[\"_paq\"].push(['disableCookies']);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Deletes the tracking cookies currently set (useful when creating new visits).\n     *\n     * \\@memberof MatomoTracker\n     * @return {?}\n     */\n    deleteCookies() {\n      try {\n        window[\"_paq\"].push(['deleteCookies']);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Returns whether cookies are enabled and supported by this browser.\n     *\n     * \\@memberof MatomoTracker\n     * @return {?}\n     */\n    hasCookies() {\n      return new Promise((resolve, reject) => {\n        try {\n          window[\"_paq\"].push([function () {\n            resolve(this.hasCookies());\n          }]);\n        } catch ( /** @type {?} */e) {\n          if (!(e instanceof ReferenceError)) {\n            reject(e);\n          }\n        }\n      });\n    }\n    /**\n     * Sets the tracking cookie name prefix.\n     * Default prefix is 'pk'.\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} prefix\n     * @return {?}\n     */\n    setCookieNamePrefix(prefix) {\n      try {\n        const /** @type {?} */args = [prefix];\n        window[\"_paq\"].push(['setCookieNamePrefix', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Sets the domain of the tracking cookies.\n     * Default is the document domain.\n     * If your website can be visited at both www.example.com and example.com, you would use: '.example.com' or '*.example.com'.\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} domain\n     * @return {?}\n     */\n    setCookieDomain(domain) {\n      try {\n        const /** @type {?} */args = [domain];\n        window[\"_paq\"].push(['setCookieDomain', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Sets the path of the tracking cookies.\n     * Default is '/'.\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} path\n     * @return {?}\n     */\n    setCookiePath(path) {\n      try {\n        const /** @type {?} */args = [path];\n        window[\"_paq\"].push(['setCookiePath', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Set to true to enable the Secure cookie flag on all first party cookies.This should be used when your website is only available\n     * under HTTPS so that all tracking cookies are always sent over secure connection.\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} secure\n     * @return {?}\n     */\n    setSecureCookie(secure) {\n      try {\n        const /** @type {?} */args = [secure];\n        window[\"_paq\"].push(['setSecureCookie', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Sets the visitor cookie timeout.\n     * Default is 13 months.\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} seconds\n     * @return {?}\n     */\n    setVisitorCookieTimeout(seconds) {\n      try {\n        const /** @type {?} */args = [seconds];\n        window[\"_paq\"].push(['setVisitorCookieTimeout', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Sets the referral cookie timeout.\n     * Default is 6 months.\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} seconds\n     * @return {?}\n     */\n    setReferralCookieTimeout(seconds) {\n      try {\n        const /** @type {?} */args = [seconds];\n        window[\"_paq\"].push(['setReferralCookieTimeout', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Sets the session cookie timeout.\n     * Default is 30 minutes.\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} seconds\n     * @return {?}\n     */\n    setSessionCookieTimeout(seconds) {\n      try {\n        const /** @type {?} */args = [seconds];\n        window[\"_paq\"].push(['setSessionCookieTimeout', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     *  Adds a click listener to a specific link element. When clicked, Matomo will log the click automatically.\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} element\n     * @return {?}\n     */\n    addListener(element) {\n      try {\n        const /** @type {?} */args = [element];\n        window[\"_paq\"].push(['addListener', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Sets the request method to either \"GET\" or \"POST\". (The default is \"GET\".)\n     * To use the POST request method, either:\n     * 1) the Matomo host is the same as the tracked website host (Matomo installed in the same domain as your tracked website), or\n     * 2) if Matomo is not installed on the same host as your website, you need to enable CORS (Cross domain requests).\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} method\n     * @return {?}\n     */\n    setRequestMethod(method) {\n      try {\n        const /** @type {?} */args = [method];\n        window[\"_paq\"].push(['setRequestMethod', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Sets a function that will process the request content.\n     * The function will be called once the request (query parameters string) has been prepared, and before the request content is sent.\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} callback\n     * @return {?}\n     */\n    setCustomRequestProcessing(callback) {\n      try {\n        const /** @type {?} */args = [callback];\n        window[\"_paq\"].push(['setCustomRequestProcessing', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n    /**\n     * Sets request Content-Type header value.\n     * Applicable when \"POST\" request method is used via setRequestMethod.\n     *\n     * \\@memberof MatomoTracker\n     * @param {?} contentType\n     * @return {?}\n     */\n    setRequestContentType(contentType) {\n      try {\n        const /** @type {?} */args = [contentType];\n        window[\"_paq\"].push(['setRequestContentType', ...args]);\n      } catch ( /** @type {?} */e) {\n        if (!(e instanceof ReferenceError)) {\n          throw e;\n        }\n      }\n    }\n  }\n  MatomoTracker.ɵfac = function MatomoTracker_Factory(t) {\n    return new (t || MatomoTracker)();\n  };\n  MatomoTracker.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: MatomoTracker,\n    factory: MatomoTracker.ɵfac\n  });\n  /** @nocollapse */\n  return MatomoTracker;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nlet MatomoModule = /*#__PURE__*/(() => {\n  class MatomoModule {}\n  MatomoModule.ɵfac = function MatomoModule_Factory(t) {\n    return new (t || MatomoModule)();\n  };\n  MatomoModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatomoModule\n  });\n  MatomoModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [MatomoInjector, MatomoTracker]\n  });\n  return MatomoModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatomoInjector, MatomoTracker, MatomoModule };\n\n//# sourceMappingURL=ngx-matomo.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}