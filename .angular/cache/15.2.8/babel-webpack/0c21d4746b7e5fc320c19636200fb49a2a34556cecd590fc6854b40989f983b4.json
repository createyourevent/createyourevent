{"ast":null,"code":"import { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getPartnerIdentifier } from '../partner.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport class PartnerService {\n  constructor(http, applicationConfigService) {\n    this.http = http;\n    this.applicationConfigService = applicationConfigService;\n    this.resourceUrl = this.applicationConfigService.getEndpointFor('api/partners');\n  }\n  create(partner) {\n    return this.http.post(this.resourceUrl, partner, {\n      observe: 'response'\n    });\n  }\n  update(partner) {\n    return this.http.put(`${this.resourceUrl}/${getPartnerIdentifier(partner)}`, partner, {\n      observe: 'response'\n    });\n  }\n  partialUpdate(partner) {\n    return this.http.patch(`${this.resourceUrl}/${getPartnerIdentifier(partner)}`, partner, {\n      observe: 'response'\n    });\n  }\n  find(id) {\n    return this.http.get(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  query(req) {\n    const options = createRequestOption(req);\n    return this.http.get(this.resourceUrl, {\n      params: options,\n      observe: 'response'\n    });\n  }\n  delete(id) {\n    return this.http.delete(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  addPartnerToCollectionIfMissing(partnerCollection, ...partnersToCheck) {\n    const partners = partnersToCheck.filter(isPresent);\n    if (partners.length > 0) {\n      const partnerCollectionIdentifiers = partnerCollection.map(partnerItem => getPartnerIdentifier(partnerItem));\n      const partnersToAdd = partners.filter(partnerItem => {\n        const partnerIdentifier = getPartnerIdentifier(partnerItem);\n        if (partnerIdentifier == null || partnerCollectionIdentifiers.includes(partnerIdentifier)) {\n          return false;\n        }\n        partnerCollectionIdentifiers.push(partnerIdentifier);\n        return true;\n      });\n      return [...partnersToAdd, ...partnerCollection];\n    }\n    return partnerCollection;\n  }\n}\nPartnerService.ɵfac = function PartnerService_Factory(t) {\n  return new (t || PartnerService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n};\nPartnerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PartnerService,\n  factory: PartnerService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAIA,SAASA,SAAS,QAAQ,yBAAyB;AAEnD,SAASC,mBAAmB,QAAQ,+BAA+B;AACnE,SAAmBC,oBAAoB,QAAQ,kBAAkB;;;;AAMjE,OAAM,MAAOC,cAAc;EAGzBC,YAAsBC,IAAgB,EAAYC,wBAAkD;IAA9E,SAAI,GAAJD,IAAI;IAAwB,6BAAwB,GAAxBC,wBAAwB;IAFhE,gBAAW,GAAG,IAAI,CAACA,wBAAwB,CAACC,cAAc,CAAC,cAAc,CAAC;EAEmB;EAEvGC,MAAM,CAACC,OAAiB;IACtB,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAW,IAAI,CAACC,WAAW,EAAEF,OAAO,EAAE;MAAEG,OAAO,EAAE;IAAU,CAAE,CAAC;EACrF;EAEAC,MAAM,CAACJ,OAAiB;IACtB,OAAO,IAAI,CAACJ,IAAI,CAACS,GAAG,CAAW,GAAG,IAAI,CAACH,WAAW,IAAIT,oBAAoB,CAACO,OAAO,CAAW,EAAE,EAAEA,OAAO,EAAE;MAAEG,OAAO,EAAE;IAAU,CAAE,CAAC;EACpI;EAEAG,aAAa,CAACN,OAAiB;IAC7B,OAAO,IAAI,CAACJ,IAAI,CAACW,KAAK,CAAW,GAAG,IAAI,CAACL,WAAW,IAAIT,oBAAoB,CAACO,OAAO,CAAW,EAAE,EAAEA,OAAO,EAAE;MAAEG,OAAO,EAAE;IAAU,CAAE,CAAC;EACtI;EAEAK,IAAI,CAACC,EAAU;IACb,OAAO,IAAI,CAACb,IAAI,CAACc,GAAG,CAAW,GAAG,IAAI,CAACR,WAAW,IAAIO,EAAE,EAAE,EAAE;MAAEN,OAAO,EAAE;IAAU,CAAE,CAAC;EACtF;EAEAQ,KAAK,CAACC,GAAS;IACb,MAAMC,OAAO,GAAGrB,mBAAmB,CAACoB,GAAG,CAAC;IACxC,OAAO,IAAI,CAAChB,IAAI,CAACc,GAAG,CAAa,IAAI,CAACR,WAAW,EAAE;MAAEY,MAAM,EAAED,OAAO;MAAEV,OAAO,EAAE;IAAU,CAAE,CAAC;EAC9F;EAEAY,MAAM,CAACN,EAAU;IACf,OAAO,IAAI,CAACb,IAAI,CAACmB,MAAM,CAAC,GAAG,IAAI,CAACb,WAAW,IAAIO,EAAE,EAAE,EAAE;MAAEN,OAAO,EAAE;IAAU,CAAE,CAAC;EAC/E;EAEAa,+BAA+B,CAACC,iBAA6B,EAAE,GAAGC,eAAgD;IAChH,MAAMC,QAAQ,GAAeD,eAAe,CAACE,MAAM,CAAC7B,SAAS,CAAC;IAC9D,IAAI4B,QAAQ,CAACE,MAAM,GAAG,CAAC,EAAE;MACvB,MAAMC,4BAA4B,GAAGL,iBAAiB,CAACM,GAAG,CAACC,WAAW,IAAI/B,oBAAoB,CAAC+B,WAAW,CAAE,CAAC;MAC7G,MAAMC,aAAa,GAAGN,QAAQ,CAACC,MAAM,CAACI,WAAW,IAAG;QAClD,MAAME,iBAAiB,GAAGjC,oBAAoB,CAAC+B,WAAW,CAAC;QAC3D,IAAIE,iBAAiB,IAAI,IAAI,IAAIJ,4BAA4B,CAACK,QAAQ,CAACD,iBAAiB,CAAC,EAAE;UACzF,OAAO,KAAK;;QAEdJ,4BAA4B,CAACM,IAAI,CAACF,iBAAiB,CAAC;QACpD,OAAO,IAAI;MACb,CAAC,CAAC;MACF,OAAO,CAAC,GAAGD,aAAa,EAAE,GAAGR,iBAAiB,CAAC;;IAEjD,OAAOA,iBAAiB;EAC1B;;;mBA7CWvB,cAAc;AAAA;;SAAdA,cAAc;EAAAmC,SAAdnC,cAAc;EAAAoC,YADD;AAAM","names":["isPresent","createRequestOption","getPartnerIdentifier","PartnerService","constructor","http","applicationConfigService","getEndpointFor","create","partner","post","resourceUrl","observe","update","put","partialUpdate","patch","find","id","get","query","req","options","params","delete","addPartnerToCollectionIfMissing","partnerCollection","partnersToCheck","partners","filter","length","partnerCollectionIdentifiers","map","partnerItem","partnersToAdd","partnerIdentifier","includes","push","factory","providedIn"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/entities/partner/service/partner.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { isPresent } from 'app/core/util/operators';\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { IPartner, getPartnerIdentifier } from '../partner.model';\n\nexport type EntityResponseType = HttpResponse<IPartner>;\nexport type EntityArrayResponseType = HttpResponse<IPartner[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class PartnerService {\n  protected resourceUrl = this.applicationConfigService.getEndpointFor('api/partners');\n\n  constructor(protected http: HttpClient, protected applicationConfigService: ApplicationConfigService) {}\n\n  create(partner: IPartner): Observable<EntityResponseType> {\n    return this.http.post<IPartner>(this.resourceUrl, partner, { observe: 'response' });\n  }\n\n  update(partner: IPartner): Observable<EntityResponseType> {\n    return this.http.put<IPartner>(`${this.resourceUrl}/${getPartnerIdentifier(partner) as number}`, partner, { observe: 'response' });\n  }\n\n  partialUpdate(partner: IPartner): Observable<EntityResponseType> {\n    return this.http.patch<IPartner>(`${this.resourceUrl}/${getPartnerIdentifier(partner) as number}`, partner, { observe: 'response' });\n  }\n\n  find(id: number): Observable<EntityResponseType> {\n    return this.http.get<IPartner>(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  query(req?: any): Observable<EntityArrayResponseType> {\n    const options = createRequestOption(req);\n    return this.http.get<IPartner[]>(this.resourceUrl, { params: options, observe: 'response' });\n  }\n\n  delete(id: number): Observable<HttpResponse<{}>> {\n    return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  addPartnerToCollectionIfMissing(partnerCollection: IPartner[], ...partnersToCheck: (IPartner | null | undefined)[]): IPartner[] {\n    const partners: IPartner[] = partnersToCheck.filter(isPresent);\n    if (partners.length > 0) {\n      const partnerCollectionIdentifiers = partnerCollection.map(partnerItem => getPartnerIdentifier(partnerItem)!);\n      const partnersToAdd = partners.filter(partnerItem => {\n        const partnerIdentifier = getPartnerIdentifier(partnerItem);\n        if (partnerIdentifier == null || partnerCollectionIdentifiers.includes(partnerIdentifier)) {\n          return false;\n        }\n        partnerCollectionIdentifiers.push(partnerIdentifier);\n        return true;\n      });\n      return [...partnersToAdd, ...partnerCollection];\n    }\n    return partnerCollection;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}