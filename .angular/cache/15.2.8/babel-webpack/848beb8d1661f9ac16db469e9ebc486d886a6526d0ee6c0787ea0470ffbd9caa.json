{"ast":null,"code":"import * as dayjs from \"dayjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"app/general.service\";\nexport let TickerService = /*#__PURE__*/(() => {\n  class TickerService {\n    constructor(generalService) {\n      this.generalService = generalService;\n    }\n    getTags() {\n      return this.tags;\n    }\n    load() {\n      return new Promise((resolve, reject) => {\n        this.generalService.findAllTags().subscribe(response => {\n          const md = response.body;\n          const nd = [];\n          md.forEach(tag => {\n            if (tag.shop !== null && tag.shop.active === true && tag.shop.activeOwner === true) {\n              nd.push({\n                text: tag.tag,\n                weight: this.getRandomInt(5, 9),\n                color: this.getRandomColor(),\n                rotate: this.getRandomInt(-30, 30),\n                link: '/supplier/shop/' + tag.shop.id + '/overview'\n              });\n            } else if (tag.event !== null && tag.event.active === true && tag.event.dateStart > dayjs()) {\n              nd.push({\n                text: tag.tag,\n                weight: this.getRandomInt(5, 9),\n                color: this.getRandomColor(),\n                rotate: this.getRandomInt(-30, 30),\n                link: '/events/' + tag.event.id + '/view'\n              });\n            } else if (tag.service !== null && tag.service.active === true && tag.service.activeOwner === true) {\n              nd.push({\n                text: tag.tag,\n                weight: this.getRandomInt(5, 9),\n                color: this.getRandomColor(),\n                rotate: this.getRandomInt(-30, 30),\n                link: '/services/' + tag.service.id + '/viewService'\n              });\n            }\n          });\n          nd.sort(() => Math.random() - 0.5);\n          this.tags = nd.slice(0, 20);\n          resolve(true);\n        });\n      });\n    }\n    getRandomInt(min, max) {\n      min = Math.ceil(min);\n      max = Math.floor(max);\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n    getRandomColor() {\n      const c = '#' + (0x1000000 + Math.random() * 0xffffff).toString(16).substr(1, 6);\n      return c;\n    }\n  }\n  TickerService.ɵfac = function TickerService_Factory(t) {\n    return new (t || TickerService)(i0.ɵɵinject(i1.GeneralService));\n  };\n  TickerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TickerService,\n    factory: TickerService.ɵfac,\n    providedIn: 'root'\n  });\n  return TickerService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}