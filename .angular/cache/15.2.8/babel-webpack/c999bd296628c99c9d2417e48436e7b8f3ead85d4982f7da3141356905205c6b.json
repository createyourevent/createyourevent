{"ast":null,"code":"import { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"app/login/login.service\";\nimport * as i2 from \"app/core/auth/state-storage.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"app/core/auth/account.service\";\nexport let AuthExpiredInterceptor = /*#__PURE__*/(() => {\n  class AuthExpiredInterceptor {\n    constructor(loginService, stateStorageService, router, accountService) {\n      this.loginService = loginService;\n      this.stateStorageService = stateStorageService;\n      this.router = router;\n      this.accountService = accountService;\n    }\n    intercept(request, next) {\n      return next.handle(request).pipe(tap({\n        error: err => {\n          if (err.status === 401 && err.url && !err.url.includes('api/account') && this.accountService.isAuthenticated()) {\n            this.stateStorageService.storeUrl(this.router.routerState.snapshot.url);\n            this.loginService.login();\n          }\n        }\n      }));\n    }\n  }\n  AuthExpiredInterceptor.ɵfac = function AuthExpiredInterceptor_Factory(t) {\n    return new (t || AuthExpiredInterceptor)(i0.ɵɵinject(i1.LoginService), i0.ɵɵinject(i2.StateStorageService), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.AccountService));\n  };\n  AuthExpiredInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthExpiredInterceptor,\n    factory: AuthExpiredInterceptor.ɵfac\n  });\n  return AuthExpiredInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}