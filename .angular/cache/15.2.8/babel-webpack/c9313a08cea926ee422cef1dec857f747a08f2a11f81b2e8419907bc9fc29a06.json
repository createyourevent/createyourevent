{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\nimport { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getEventServiceMapOrderIdentifier } from '../event-service-map-order.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport let EventServiceMapOrderService = /*#__PURE__*/(() => {\n  class EventServiceMapOrderService {\n    constructor(http, applicationConfigService) {\n      this.http = http;\n      this.applicationConfigService = applicationConfigService;\n      this.resourceUrl = this.applicationConfigService.getEndpointFor('api/event-service-map-orders');\n    }\n    create(eventServiceMapOrder) {\n      const copy = this.convertDateFromClient(eventServiceMapOrder);\n      return this.http.post(this.resourceUrl, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    update(eventServiceMapOrder) {\n      const copy = this.convertDateFromClient(eventServiceMapOrder);\n      return this.http.put(`${this.resourceUrl}/${getEventServiceMapOrderIdentifier(eventServiceMapOrder)}`, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    partialUpdate(eventServiceMapOrder) {\n      const copy = this.convertDateFromClient(eventServiceMapOrder);\n      return this.http.patch(`${this.resourceUrl}/${getEventServiceMapOrderIdentifier(eventServiceMapOrder)}`, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      }).pipe(map(res => this.convertDateArrayFromServer(res)));\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    addEventServiceMapOrderToCollectionIfMissing(eventServiceMapOrderCollection, ...eventServiceMapOrdersToCheck) {\n      const eventServiceMapOrders = eventServiceMapOrdersToCheck.filter(isPresent);\n      if (eventServiceMapOrders.length > 0) {\n        const eventServiceMapOrderCollectionIdentifiers = eventServiceMapOrderCollection.map(eventServiceMapOrderItem => getEventServiceMapOrderIdentifier(eventServiceMapOrderItem));\n        const eventServiceMapOrdersToAdd = eventServiceMapOrders.filter(eventServiceMapOrderItem => {\n          const eventServiceMapOrderIdentifier = getEventServiceMapOrderIdentifier(eventServiceMapOrderItem);\n          if (eventServiceMapOrderIdentifier == null || eventServiceMapOrderCollectionIdentifiers.includes(eventServiceMapOrderIdentifier)) {\n            return false;\n          }\n          eventServiceMapOrderCollectionIdentifiers.push(eventServiceMapOrderIdentifier);\n          return true;\n        });\n        return [...eventServiceMapOrdersToAdd, ...eventServiceMapOrderCollection];\n      }\n      return eventServiceMapOrderCollection;\n    }\n    convertDateFromClient(eventServiceMapOrder) {\n      return Object.assign({}, eventServiceMapOrder, {\n        date: eventServiceMapOrder.date?.isValid() ? eventServiceMapOrder.date.toJSON() : undefined,\n        dateFrom: eventServiceMapOrder.dateFrom?.isValid() ? eventServiceMapOrder.dateFrom.toJSON() : undefined,\n        dateUntil: eventServiceMapOrder.dateUntil?.isValid() ? eventServiceMapOrder.dateUntil.toJSON() : undefined\n      });\n    }\n    convertDateFromServer(res) {\n      if (res.body) {\n        res.body.date = res.body.date ? dayjs(res.body.date) : undefined;\n        res.body.dateFrom = res.body.dateFrom ? dayjs(res.body.dateFrom) : undefined;\n        res.body.dateUntil = res.body.dateUntil ? dayjs(res.body.dateUntil) : undefined;\n      }\n      return res;\n    }\n    convertDateArrayFromServer(res) {\n      if (res.body) {\n        res.body.forEach(eventServiceMapOrder => {\n          eventServiceMapOrder.date = eventServiceMapOrder.date ? dayjs(eventServiceMapOrder.date) : undefined;\n          eventServiceMapOrder.dateFrom = eventServiceMapOrder.dateFrom ? dayjs(eventServiceMapOrder.dateFrom) : undefined;\n          eventServiceMapOrder.dateUntil = eventServiceMapOrder.dateUntil ? dayjs(eventServiceMapOrder.dateUntil) : undefined;\n        });\n      }\n      return res;\n    }\n  }\n  EventServiceMapOrderService.ɵfac = function EventServiceMapOrderService_Factory(t) {\n    return new (t || EventServiceMapOrderService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n  };\n  EventServiceMapOrderService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EventServiceMapOrderService,\n    factory: EventServiceMapOrderService.ɵfac,\n    providedIn: 'root'\n  });\n  return EventServiceMapOrderService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}