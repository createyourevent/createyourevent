{"ast":null,"code":"import { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getServiceOfferIdentifier } from '../service-offer.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport let ServiceOfferService = /*#__PURE__*/(() => {\n  class ServiceOfferService {\n    constructor(http, applicationConfigService) {\n      this.http = http;\n      this.applicationConfigService = applicationConfigService;\n      this.resourceUrl = this.applicationConfigService.getEndpointFor('api/service-offers');\n    }\n    create(serviceOffer) {\n      return this.http.post(this.resourceUrl, serviceOffer, {\n        observe: 'response'\n      });\n    }\n    update(serviceOffer) {\n      return this.http.put(`${this.resourceUrl}/${getServiceOfferIdentifier(serviceOffer)}`, serviceOffer, {\n        observe: 'response'\n      });\n    }\n    partialUpdate(serviceOffer) {\n      return this.http.patch(`${this.resourceUrl}/${getServiceOfferIdentifier(serviceOffer)}`, serviceOffer, {\n        observe: 'response'\n      });\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    addServiceOfferToCollectionIfMissing(serviceOfferCollection, ...serviceOffersToCheck) {\n      const serviceOffers = serviceOffersToCheck.filter(isPresent);\n      if (serviceOffers.length > 0) {\n        const serviceOfferCollectionIdentifiers = serviceOfferCollection.map(serviceOfferItem => getServiceOfferIdentifier(serviceOfferItem));\n        const serviceOffersToAdd = serviceOffers.filter(serviceOfferItem => {\n          const serviceOfferIdentifier = getServiceOfferIdentifier(serviceOfferItem);\n          if (serviceOfferIdentifier == null || serviceOfferCollectionIdentifiers.includes(serviceOfferIdentifier)) {\n            return false;\n          }\n          serviceOfferCollectionIdentifiers.push(serviceOfferIdentifier);\n          return true;\n        });\n        return [...serviceOffersToAdd, ...serviceOfferCollection];\n      }\n      return serviceOfferCollection;\n    }\n  }\n  ServiceOfferService.ɵfac = function ServiceOfferService_Factory(t) {\n    return new (t || ServiceOfferService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n  };\n  ServiceOfferService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ServiceOfferService,\n    factory: ServiceOfferService.ɵfac,\n    providedIn: 'root'\n  });\n  return ServiceOfferService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}