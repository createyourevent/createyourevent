{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\nimport { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getEventCommentIdentifier } from '../event-comment.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport let EventCommentService = /*#__PURE__*/(() => {\n  class EventCommentService {\n    constructor(http, applicationConfigService) {\n      this.http = http;\n      this.applicationConfigService = applicationConfigService;\n      this.resourceUrl = this.applicationConfigService.getEndpointFor('api/event-comments');\n    }\n    create(eventComment) {\n      const copy = this.convertDateFromClient(eventComment);\n      return this.http.post(this.resourceUrl, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    update(eventComment) {\n      const copy = this.convertDateFromClient(eventComment);\n      return this.http.put(`${this.resourceUrl}/${getEventCommentIdentifier(eventComment)}`, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    partialUpdate(eventComment) {\n      const copy = this.convertDateFromClient(eventComment);\n      return this.http.patch(`${this.resourceUrl}/${getEventCommentIdentifier(eventComment)}`, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      }).pipe(map(res => this.convertDateArrayFromServer(res)));\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    addEventCommentToCollectionIfMissing(eventCommentCollection, ...eventCommentsToCheck) {\n      const eventComments = eventCommentsToCheck.filter(isPresent);\n      if (eventComments.length > 0) {\n        const eventCommentCollectionIdentifiers = eventCommentCollection.map(eventCommentItem => getEventCommentIdentifier(eventCommentItem));\n        const eventCommentsToAdd = eventComments.filter(eventCommentItem => {\n          const eventCommentIdentifier = getEventCommentIdentifier(eventCommentItem);\n          if (eventCommentIdentifier == null || eventCommentCollectionIdentifiers.includes(eventCommentIdentifier)) {\n            return false;\n          }\n          eventCommentCollectionIdentifiers.push(eventCommentIdentifier);\n          return true;\n        });\n        return [...eventCommentsToAdd, ...eventCommentCollection];\n      }\n      return eventCommentCollection;\n    }\n    convertDateFromClient(eventComment) {\n      return Object.assign({}, eventComment, {\n        date: eventComment.date?.isValid() ? eventComment.date.toJSON() : undefined\n      });\n    }\n    convertDateFromServer(res) {\n      if (res.body) {\n        res.body.date = res.body.date ? dayjs(res.body.date) : undefined;\n      }\n      return res;\n    }\n    convertDateArrayFromServer(res) {\n      if (res.body) {\n        res.body.forEach(eventComment => {\n          eventComment.date = eventComment.date ? dayjs(eventComment.date) : undefined;\n        });\n      }\n      return res;\n    }\n  }\n  EventCommentService.ɵfac = function EventCommentService_Factory(t) {\n    return new (t || EventCommentService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n  };\n  EventCommentService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EventCommentService,\n    factory: EventCommentService.ɵfac,\n    providedIn: 'root'\n  });\n  return EventCommentService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}