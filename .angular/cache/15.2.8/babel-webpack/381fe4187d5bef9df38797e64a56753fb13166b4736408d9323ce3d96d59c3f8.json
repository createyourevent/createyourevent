{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { SERVER_API_URL } from 'app/app.constants';\nimport * as dayjs from 'dayjs';\nimport { map } from 'rxjs/operators';\nimport { createRequestOption } from './core/request/request-util';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let GeneralService = /*#__PURE__*/(() => {\n  class GeneralService {\n    constructor(http) {\n      this.http = http;\n      this.resourceUrl = SERVER_API_URL + 'api/users';\n      this.resourceUrl_keycloak = SERVER_API_URL + 'api/keycloak';\n      this.resourceUrlAddress = SERVER_API_URL + 'api/addresses';\n      this.resourceUrl_cye = SERVER_API_URL + 'api/users_createyourevent';\n      this.resourceUrl_worksheet = SERVER_API_URL + 'api/worksheets';\n      this.resourceUrl_eventproductrating = SERVER_API_URL + 'api/event-product-ratings';\n      this.resourceUrl_image = SERVER_API_URL + 'api/images';\n      this.resourceUrl_shop_like_dislikes = SERVER_API_URL + 'api/shop-like-dislikes';\n      this.resourceUrl_shop_comments = SERVER_API_URL + 'api/shop-comments';\n      this.resourceUrl_product_comments = SERVER_API_URL + 'api/product-comments';\n      this.resourceUrl_product_like_dislikes = SERVER_API_URL + 'api/product-like-dislikes';\n      this.resourceUrl_event_comments = SERVER_API_URL + 'api/event-comments';\n      this.resourceUrl_event_like_dislikes = SERVER_API_URL + 'api/event-like-dislikes';\n      this.resourceUrl_service_like_dislikes = SERVER_API_URL + 'api/service-like-dislikes';\n      this.resourceUrl_event = SERVER_API_URL + 'api/events';\n      this.resourceUrl_shop = SERVER_API_URL + 'api/shops';\n      this.resourceUrl_eventProductOrder = SERVER_API_URL + 'api/event-product-orders';\n      this.resourceUrl_product = SERVER_API_URL + 'api/products';\n      this.resourceUrl_chat = SERVER_API_URL + 'api/chatMessages';\n      this.resourceUrl_service = SERVER_API_URL + 'api/create-your-event-services';\n      this.resourceUrl_servicemaps = SERVER_API_URL + 'api/service-maps';\n      this.resourceUrl_serviceoffers = SERVER_API_URL + 'api/service-offers';\n      this.resourceUrl_service_comments = SERVER_API_URL + 'api/service-comments';\n      this.resourceUrl_event_service_map_orders = SERVER_API_URL + 'api/event-service-map-orders';\n      this.resourceUrl_event_star_ratings = SERVER_API_URL + 'api/event-star-ratings';\n      this.resourceUrl_reservation = SERVER_API_URL + 'api/reservations';\n      this.resourceUrl_tags = SERVER_API_URL + 'api/tags';\n      this.resourceUrl_points = SERVER_API_URL + 'api/points';\n      this.resourceUrl_pointsUsers = SERVER_API_URL + 'api/user-point-associations';\n      this.resourceUrl_shop_star_rating = SERVER_API_URL + 'api/shop-star-ratings';\n      this.resourceUrl_gifts = SERVER_API_URL + 'api/gifts';\n      this.resourceUrl_properties = SERVER_API_URL + 'api/properties';\n      this.resourceUrl_product_star_rating = SERVER_API_URL + 'api/product-star-ratings';\n      this.resourceUrl_service_star_rating = SERVER_API_URL + 'api/service-star-ratings';\n      this.resourceUrl_chips_collections = SERVER_API_URL + 'api/chips-collections';\n      this.resourceUrl_chips_admins = SERVER_API_URL + 'api/chips-admins';\n      this.resourceUrl_chips = SERVER_API_URL + 'api/chips';\n      this.resourceUrl_chips_collection_chips = SERVER_API_URL + 'api/chips-collection-chips';\n      this.resourceUrl_gift_shopping_carts = SERVER_API_URL + 'api/gift-shopping-carts';\n      this.resourceUrl_partners = SERVER_API_URL + 'api/partners';\n      this.resourceUrl_delivery_types = SERVER_API_URL + 'api/delivery-types';\n      this.resourceUrl_mp3 = SERVER_API_URL + 'api/mp-3-s';\n      this.resourceUrl_music = SERVER_API_URL + 'api/music';\n      this.resourceUrl_music_del = SERVER_API_URL + 'api/music_del';\n      this.resourceUrl_bond = SERVER_API_URL + 'api/bonds';\n      this.resourceUrl_datatrans = SERVER_API_URL + 'api/datatrans';\n      this.resourceUrl_tickets = SERVER_API_URL + 'api/tickets';\n      this.resourceUrl_send_ticket = SERVER_API_URL + 'api/send-ticket';\n      this.resourceUrl_restaurants = SERVER_API_URL + 'api/restaurants';\n      this.resourceUrl_hotels = SERVER_API_URL + 'api/hotels';\n      this.resourceUrl_clubs = SERVER_API_URL + 'api/clubs';\n      this.resourceUrl_buildings = SERVER_API_URL + 'api/buildings';\n      this.resourceUrl_organizations = SERVER_API_URL + 'api/organizations';\n      this.resourceUrl_organization_star_ratings = SERVER_API_URL + 'api/organization-star-ratings';\n      this.resourceUrl_organization_comments = SERVER_API_URL + 'api/organization-comments';\n      this.resourceUrl_organization_like_dislikes = SERVER_API_URL + 'api/organization-like-dislikes';\n      this.resourceUrl_organization_reservations = SERVER_API_URL + 'api/organization-reservations';\n      this.resourceUrl_slot_list_plum = SERVER_API_URL + 'api/slot-list-plums';\n      this.resourceUrl_slot_list_clock = SERVER_API_URL + 'api/slot-list-clocks';\n      this.resourceUrl_slot_list_orange = SERVER_API_URL + 'api/slot-list-oranges';\n      this.resourceUrl_slot_list_cherry = SERVER_API_URL + 'api/slot-list-cherries';\n      this.resourceUrl_coupons = SERVER_API_URL + 'api/coupons';\n    }\n    updatePointsKeycloak(points, userId) {\n      return this.http.put(`${this.resourceUrl_keycloak}/${userId}/${points}`, {\n        observe: 'response'\n      });\n    }\n    getPointsFromUser(userId) {\n      return this.http.get(`${this.resourceUrl_keycloak}/${userId}`, {\n        observe: 'response'\n      });\n    }\n    updateBond(bond) {\n      const copy = this.convertDateFromClient_Bond(bond);\n      return this.http.put(`${this.resourceUrl_bond}/${bond.id}`, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer_Bond(res)));\n    }\n    convertDateFromClient_Bond(bond) {\n      return Object.assign({}, bond, {\n        creationDate: dayjs(bond.creationDate)?.isValid() ? dayjs(bond.creationDate).toJSON() : undefined,\n        redemptionDate: dayjs(bond.redemptionDate)?.isValid() ? dayjs(bond.redemptionDate).toJSON() : undefined\n      });\n    }\n    convertDateFromServer_Bond(res) {\n      if (res.body) {\n        res.body.creationDate = res.body.creationDate ? dayjs(res.body.creationDate) : undefined;\n        res.body.redemptionDate = res.body.redemptionDate ? dayjs(res.body.redemptionDate) : undefined;\n      }\n      return res;\n    }\n    updateEvent(event) {\n      const copy = this.convertDateFromClient(event);\n      return this.http.put(`${this.resourceUrl_event}/${event.id}`, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    updateOrganizationReservation(organizationReservation) {\n      const copy = this.convertOrganizationReservationDateFromClient(organizationReservation);\n      return this.http.put(`${this.resourceUrl_organization_reservations}/${organizationReservation.id}`, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertOrganizationReservationDateFromServer(res)));\n    }\n    convertOrganizationReservationDateFromClient(organizationReservation) {\n      return Object.assign({}, organizationReservation, {\n        date: dayjs(organizationReservation.date)?.isValid() ? dayjs(organizationReservation.date).toJSON() : undefined,\n        dateFrom: dayjs(organizationReservation.dateFrom)?.isValid() ? dayjs(organizationReservation.dateFrom).toJSON() : undefined,\n        dateUntil: dayjs(organizationReservation.dateUntil)?.isValid() ? dayjs(organizationReservation.dateUntil).toJSON() : undefined\n      });\n    }\n    convertOrganizationReservationDateFromServer(res) {\n      if (res.body) {\n        res.body.date = res.body.date ? dayjs(res.body.date) : undefined;\n        res.body.dateFrom = res.body.dateFrom ? dayjs(res.body.dateFrom) : undefined;\n        res.body.dateUntil = res.body.dateUntil ? dayjs(res.body.dateUntil) : undefined;\n      }\n      return res;\n    }\n    findEventWithId(id) {\n      return this.http.get(`${this.resourceUrl_event}/findById/${id}`, {\n        observe: 'response'\n      });\n    }\n    convertDateFromClient(event) {\n      const copy = Object.assign({}, event, {\n        dateStart: event.dateStart && dayjs(event.dateStart).isValid() ? dayjs(event.dateStart).toJSON() : undefined,\n        dateEnd: event.dateEnd && dayjs(event.dateEnd).isValid() ? dayjs(event.dateEnd).toJSON() : undefined\n      });\n      return copy;\n    }\n    convertDateFromServer(res) {\n      if (res.body) {\n        res.body.dateStart = res.body.dateStart ? dayjs(res.body.dateStart) : undefined;\n        res.body.dateEnd = res.body.dateEnd ? dayjs(res.body.dateEnd) : undefined;\n      }\n      return res;\n    }\n    updateEventProductOrder(eventProductOrder) {\n      const copy = this.convertDateFromClientEPO(eventProductOrder);\n      return this.http.put(`${this.resourceUrl_eventProductOrder}/${eventProductOrder.id}`, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServerEPO(res)));\n    }\n    convertDateFromClientEPO(eventProductOrder) {\n      return Object.assign({}, eventProductOrder, {\n        date: dayjs(eventProductOrder.date).isValid() ? dayjs(eventProductOrder.date).toJSON() : undefined,\n        dateFrom: dayjs(eventProductOrder.dateFrom).isValid() ? dayjs(eventProductOrder.dateFrom).toJSON() : undefined,\n        dateUntil: dayjs(eventProductOrder.dateUntil).isValid() ? dayjs(eventProductOrder.dateUntil).toJSON() : undefined\n      });\n    }\n    convertDateFromServerEPO(res) {\n      if (res.body) {\n        res.body.date = res.body.date ? dayjs(res.body.date) : undefined;\n        res.body.dateFrom = res.body.dateFrom ? dayjs(res.body.dateFrom) : undefined;\n        res.body.dateUntil = res.body.dateUntil ? dayjs(res.body.dateUntil) : undefined;\n      }\n      return res;\n    }\n    updateEventServiceMapOrder(eventServiceMapOrder) {\n      const copy = this.convertDateFromClientESMO(eventServiceMapOrder);\n      return this.http.put(`${this.resourceUrl_event_service_map_orders}/${eventServiceMapOrder.id}`, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServerESMO(res)));\n    }\n    convertDateFromClientESMO(eventServiceMapOrder) {\n      return Object.assign({}, eventServiceMapOrder, {\n        date: dayjs(eventServiceMapOrder.date).isValid() ? dayjs(eventServiceMapOrder.date).toJSON() : undefined,\n        dateFrom: dayjs(eventServiceMapOrder.dateFrom).isValid() ? dayjs(eventServiceMapOrder.dateFrom).toJSON() : undefined,\n        dateUntil: dayjs(eventServiceMapOrder.dateUntil).isValid() ? dayjs(eventServiceMapOrder.dateUntil).toJSON() : undefined\n      });\n    }\n    convertDateFromServerESMO(res) {\n      if (res.body) {\n        res.body.date = res.body.date ? dayjs(res.body.date) : undefined;\n        res.body.dateFrom = res.body.dateFrom ? dayjs(res.body.dateFrom) : undefined;\n        res.body.dateUntil = res.body.dateUntil ? dayjs(res.body.dateUntil) : undefined;\n      }\n      return res;\n    }\n    findWidthAuthorities() {\n      return this.http.get(`${this.resourceUrl_cye}/loggedIn`, {\n        observe: 'response'\n      });\n    }\n    findUsersWidthAuthoritiesQuery(login) {\n      return this.http.get(`${this.resourceUrl_cye}/${login}/findByLogin`, {\n        observe: 'response'\n      });\n    }\n    findAddressByLocationId(addressId) {\n      return this.http.get(`${this.resourceUrlAddress}/${addressId}/findByLocationId`, {\n        observe: 'response'\n      });\n    }\n    findWidthAuthoritiesWidthId(id) {\n      return this.http.get(`${this.resourceUrl}/${id}/byId`, {\n        observe: 'response'\n      });\n    }\n    findWorksheetsByEventId(id) {\n      return this.http.get(`${this.resourceUrl_worksheet}/${id}/allByEventId`, {\n        observe: 'response'\n      });\n    }\n    findEventProductRatingsByEventIdAndProductId(eventId, productId) {\n      return this.http.get(`${this.resourceUrl_eventproductrating}/${eventId}/${productId}`, {\n        observe: 'response'\n      });\n    }\n    findImagesByProductId(productId) {\n      return this.http.get(`${this.resourceUrl_image}/${productId}/imagesFromProductId`, {\n        observe: 'response'\n      });\n    }\n    findImagesByProductIdAndUserId(productId, userId) {\n      return this.http.get(`${this.resourceUrl_image}/${productId}/${userId}/imagesFromProductIdAndUserId`, {\n        observe: 'response'\n      });\n    }\n    findImagesByShopId(shopId) {\n      return this.http.get(`${this.resourceUrl_image}/${shopId}/imagesFromShopId`, {\n        observe: 'response'\n      });\n    }\n    findImagesByShopIdAndUserId(shopId, userId) {\n      return this.http.get(`${this.resourceUrl_image}/${shopId}/${userId}/imagesFromShopIdAndUserId`, {\n        observe: 'response'\n      });\n    }\n    findImagesByOrganizationId(organizationId) {\n      return this.http.get(`${this.resourceUrl_image}/${organizationId}/imagesFromOrganizationId`, {\n        observe: 'response'\n      });\n    }\n    findImagesByOrganizationIdAndUserId(organizationId, userId) {\n      return this.http.get(`${this.resourceUrl_image}/${organizationId}/${userId}/imagesFromOrganizationIdAndUserId`, {\n        observe: 'response'\n      });\n    }\n    findImagesByServiceId(serviceId) {\n      return this.http.get(`${this.resourceUrl_image}/${serviceId}/imagesFromServiceId`, {\n        observe: 'response'\n      });\n    }\n    findImagesByServiceIdAndUserId(serviceId, userId) {\n      return this.http.get(`${this.resourceUrl_image}/${serviceId}/${userId}/imagesFromServiceIdAndUserId`, {\n        observe: 'response'\n      });\n    }\n    findImagesByEventId(eventId) {\n      return this.http.get(`${this.resourceUrl_image}/${eventId}/imagesFromEventId`, {\n        observe: 'response'\n      });\n    }\n    findImagesByEventIdAndUserId(eventId, userId) {\n      return this.http.get(`${this.resourceUrl_image}/${eventId}/${userId}/imagesFromEventIdAndUserId`, {\n        observe: 'response'\n      });\n    }\n    findShopLikeDislikeByShopId(shopId) {\n      return this.http.get(`${this.resourceUrl_shop_like_dislikes}/${shopId}/getShopLikeDislikeByShopId`, {\n        observe: 'response'\n      });\n    }\n    findServiceLikeDislikeByServiceId(serviceId) {\n      return this.http.get(`${this.resourceUrl_service_like_dislikes}/${serviceId}/getServiceLikeDislikeByServiceId`, {\n        observe: 'response'\n      });\n    }\n    findShopLikeDislikeByShopIdAndUserId(shopId, userId) {\n      return this.http.get(`${this.resourceUrl_shop_like_dislikes}/${shopId}/${userId}/getShopLikeDislikeByShopIdAndUserId`, {\n        observe: 'response'\n      });\n    }\n    findOrganizationLikeDislikeByOrganizationId(shopId) {\n      return this.http.get(`${this.resourceUrl_organization_like_dislikes}/${shopId}/getOrganizationLikeDislikeByOrganizationId`, {\n        observe: 'response'\n      });\n    }\n    findOrganizationLikeDislikeByOrganizationIdAndUserId(shopId, userId) {\n      return this.http.get(`${this.resourceUrl_organization_like_dislikes}/${shopId}/${userId}/getOrganizationLikeDislikeByOrganizationIdAndUserId`, {\n        observe: 'response'\n      });\n    }\n    findServiceLikeDislikeByServiceIdAndUserId(serviceId, userId) {\n      return this.http.get(`${this.resourceUrl_service_like_dislikes}/${serviceId}/${userId}/getServiceLikeDislikeByServiceIdAndUserId`, {\n        observe: 'response'\n      });\n    }\n    findShopCommentByShopId(shopId) {\n      return this.http.get(`${this.resourceUrl_shop_comments}/${shopId}/getShopCommentByShopId`, {\n        observe: 'response'\n      });\n    }\n    findServiceCommentByServiceId(serviceId) {\n      return this.http.get(`${this.resourceUrl_service_comments}/${serviceId}/getServiceCommentByServiceId`, {\n        observe: 'response'\n      });\n    }\n    findOrganizationCommentByOrganizationId(organizationId) {\n      return this.http.get(`${this.resourceUrl_organization_comments}/${organizationId}/getOrganizationCommentByOrganizationId`, {\n        observe: 'response'\n      });\n    }\n    findShopCommentByShopIdAndUserId(shopId, userId) {\n      return this.http.get(`${this.resourceUrl_shop_comments}/${shopId}/${userId}/getShopCommentByShopIdAndUserId`, {\n        observe: 'response'\n      });\n    }\n    findProductCommentByProductId(productId) {\n      return this.http.get(`${this.resourceUrl_product_comments}/${productId}/getProductCommentByProductId`, {\n        observe: 'response'\n      });\n    }\n    findProductCommentByProductIdAndUserId(productId, userId) {\n      return this.http.get(`${this.resourceUrl_product_comments}/${productId}/${userId}/getProductCommentByProductIdAndUserId`, {\n        observe: 'response'\n      });\n    }\n    findProductLikeDislikeByProductId(productId) {\n      return this.http.get(`${this.resourceUrl_product_like_dislikes}/${productId}/getProductLikeDislikeByProductId`, {\n        observe: 'response'\n      });\n    }\n    findProductLikeDislikeByProductIdAndUserId(productId, userId) {\n      return this.http.get(`${this.resourceUrl_product_like_dislikes}/${productId}/${userId}/getProductLikeDislikeByProductIdAndUserId`, {\n        observe: 'response'\n      });\n    }\n    findEventCommentByEventId(eventId) {\n      return this.http.get(`${this.resourceUrl_event_comments}/${eventId}/getEventCommentByEventId`, {\n        observe: 'response'\n      });\n    }\n    findEventCommentByEventIdAndUserId(eventId, userId) {\n      return this.http.get(`${this.resourceUrl_event_comments}/${eventId}/${userId}/getEventCommentByEventIdAndUserId`, {\n        observe: 'response'\n      });\n    }\n    findEventLikeDislikeByEventId(eventId) {\n      return this.http.get(`${this.resourceUrl_event_like_dislikes}/${eventId}/getEventLikeDislikeByEventId`, {\n        observe: 'response'\n      });\n    }\n    findEventLikeDislikeByEventIdAndUserId(eventId, userId) {\n      return this.http.get(`${this.resourceUrl_event_like_dislikes}/${eventId}/${userId}/getEventLikeDislikeByEventIdAndUserId`, {\n        observe: 'response'\n      });\n    }\n    findEventsByUserId(userId) {\n      return this.http.get(`${this.resourceUrl_event}/events/user/active/${userId}`, {\n        observe: 'response'\n      });\n    }\n    findEventByIsPublicAndActive(req) {\n      const options = createRequestOption(req);\n      return this.http.get(`${this.resourceUrl_event}/public/active`, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    findEventyByPrivateOrPublicAndActiveTrueAndDateEndAfter(dateEnd) {\n      const de = dateEnd.format();\n      let params = new HttpParams();\n      params = params.append('date', encodeURIComponent(de));\n      return this.http.get(`${this.resourceUrl_event}/dateEnd/public/active`, {\n        params: params,\n        observe: 'response'\n      });\n    }\n    findEventyByPrivateOrPublicAndActiveTrueAndDateEndBefor(dateEnd) {\n      const de = dateEnd.format();\n      let params = new HttpParams();\n      params = params.append('dateEnd', encodeURIComponent(de));\n      return this.http.get(`${this.resourceUrl_event}/dateEnd/befor/public/active`, {\n        params: params,\n        observe: 'response'\n      });\n    }\n    findShopByActiveTrue() {\n      return this.http.get(`${this.resourceUrl_shop}/active`, {\n        observe: 'response'\n      });\n    }\n    findShopByActiveTrueAndActiveOwnerTrue() {\n      return this.http.get(`${this.resourceUrl_shop}/active/activeOwner`, {\n        observe: 'response'\n      });\n    }\n    findOrganisationsByActiveTrue() {\n      return this.http.get(`${this.resourceUrl_organizations}/active`, {\n        observe: 'response'\n      });\n    }\n    findOrganizationsByActiveTrueAndActiveOwnerTrue() {\n      return this.http.get(`${this.resourceUrl_organizations}/active/activeOwner`, {\n        observe: 'response'\n      });\n    }\n    findEventProductOrdersByProductId(productId, req) {\n      const options = createRequestOption(req);\n      return this.http.get(`${this.resourceUrl_eventProductOrder}/${productId}/getEventProductOrderByProduct`, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    findEventProductOrdersByEventId(eventId, req) {\n      const options = createRequestOption(req);\n      return this.http.get(`${this.resourceUrl_eventProductOrder}/${eventId}/getProductsByEvent`, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    findAllProductsByShopId(shopId, req) {\n      const options = createRequestOption(req);\n      return this.http.get(`${this.resourceUrl_product}/${shopId}/all`, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    findAllChatMessagesByMessageToAndDateSeenIsNull(userToId) {\n      return this.http.get(`${this.resourceUrl_chat}/${userToId}/messageToAndDateSeenIsNull`, {\n        observe: 'response'\n      });\n    }\n    findAllEventProductOrdersByDateStartBetween(dateStartFrom, dateStartUntil) {\n      return this.http.get(`${this.resourceUrl_eventProductOrder}/${dateStartFrom}/${dateStartUntil}/findAllByDateStartBetween`, {\n        observe: 'response'\n      });\n    }\n    findAllEventProductOrdersByProductIdAndDateStartBetween(productId, dateStartFrom, dateStartUntil) {\n      const dSF = dateStartFrom.format();\n      const dSU = dateStartUntil.format();\n      let params = new HttpParams();\n      params = params.append('dateStartFrom', encodeURIComponent(dSF));\n      params = params.append('dateStartUntil', encodeURIComponent(dSU));\n      return this.http.get(`${this.resourceUrl_eventProductOrder}/${productId}/findAllByProductIdAndDateStartBetween`, {\n        params: params,\n        observe: 'response'\n      });\n    }\n    findAllEventProductOrdersByProductIdAndDateUntilBetween(productId, dateStartFrom, dateStartUntil) {\n      const dSF = dateStartFrom.format();\n      const dSU = dateStartUntil.format();\n      let params = new HttpParams();\n      params = params.append('dateStartFrom', encodeURIComponent(dSF));\n      params = params.append('dateStartUntil', encodeURIComponent(dSU));\n      return this.http.get(`${this.resourceUrl_eventProductOrder}/${productId}/findAllByProductIdAndDateUntilBetween`, {\n        params: params,\n        observe: 'response'\n      });\n    }\n    findAllEventProductOrdersByShopId(shopId) {\n      return this.http.get(`${this.resourceUrl_eventProductOrder}/${shopId}/getEventProductOrdersByShopId`, {\n        observe: 'response'\n      });\n    }\n    findAllEventProductOrdersByProductIdAndDateFromGreaterThenAndDateUntilSmallerThen(productId, dateStartFrom, dateStartUntil) {\n      const dSF = dateStartFrom.format();\n      const dSU = dateStartUntil.format();\n      let params = new HttpParams();\n      params = params.append('dateStartFrom', encodeURIComponent(dSF));\n      params = params.append('dateStartUntil', encodeURIComponent(dSU));\n      return this.http.get(`${this.resourceUrl_eventProductOrder}/${productId}/findAllWithProductIdAndDateFromGreaterThenAndDateUntilSmallerThen`, {\n        params: params,\n        observe: 'response'\n      });\n    }\n    findAllEventsByIsPublicAndActive(req) {\n      const options = createRequestOption(req);\n      return this.http.get(`${this.resourceUrl_event}/public/active`, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    findEventsByPrivateOrPublicAndActiveTrueAndDateEndAfter(dateEnd) {\n      const d = dateEnd.format();\n      let params = new HttpParams();\n      params = params.append('date', encodeURIComponent(d));\n      return this.http.get(`${this.resourceUrl_event}/dateEnd/public/active`, {\n        params: params,\n        observe: 'response'\n      });\n    }\n    getEventsFromUserAndActive(userId, req) {\n      const options = createRequestOption(req);\n      return this.http.get(`${this.resourceUrl_event}/user/active/${userId}`, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    findEventsByPrivateOrPublicAndActiveTrueAndDateStartBetween(dateStart, dateEnd) {\n      const s = dateStart.format();\n      const e = dateEnd.format();\n      let params = new HttpParams();\n      params = params.append('betweenStart', encodeURIComponent(s));\n      params = params.append('betweenEnd', encodeURIComponent(e));\n      return this.http.get(`${this.resourceUrl_event}/between/public/active`, {\n        params: params,\n        observe: 'response'\n      });\n    }\n    getServicesFromUserAndActive(userId, req) {\n      const options = createRequestOption(req);\n      return this.http.get(`${this.resourceUrl_service}/user/active/${userId}`, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    getServiceFromServiceMapId(serviceMapId, req) {\n      const options = createRequestOption(req);\n      return this.http.get(`${this.resourceUrl_service}/active/serviceMap/${serviceMapId}`, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    findByCreateYourEventServiceId(serviceId, req) {\n      const options = createRequestOption(req);\n      return this.http.get(`${this.resourceUrl_servicemaps}/byServiceId/${serviceId}`, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    getServicesWhereActive(req) {\n      const options = createRequestOption(req);\n      return this.http.get(`${this.resourceUrl_service}/active`, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    getServicesWhereActiveAndActiveOwnerTrue(req) {\n      const options = createRequestOption(req);\n      return this.http.get(`${this.resourceUrl_service}/active/activeOwner`, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    getAllServiceOffersByServiceMapId(serviceMapId, req) {\n      const options = createRequestOption(req);\n      return this.http.get(`${this.resourceUrl_serviceoffers}/byServiceMapId/${serviceMapId}`, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    getAllEventServiceMapsOrdersByServiceMapId(serviceMapId, req) {\n      const options = createRequestOption(req);\n      return this.http.get(`${this.resourceUrl_event_service_map_orders}/${serviceMapId}/getAllEventServiceMapsOrdersByServiceMapId`, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    getAllEventServiceMapsOrdersByServiceMapIdAndEventConfirmed(serviceMapId, req) {\n      const options = createRequestOption(req);\n      return this.http.get(`${this.resourceUrl_event_service_map_orders}/${serviceMapId}/getAllEventServiceMapsOrdersByServiceMapIdAndEventConfirmed`, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    getAllEventServiceMapsOrdersByEventId(eventId, req) {\n      const options = createRequestOption(req);\n      return this.http.get(`${this.resourceUrl_event_service_map_orders}/${eventId}/getAllEventServiceMapsOrdersByEventId`, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    findAllEventServiceMapOrdersWithDateRange(dateStart, dateEnd) {\n      const s = dateStart.format();\n      const e = dateEnd.format();\n      let params = new HttpParams();\n      params = params.append('betweenStart', encodeURIComponent(s));\n      params = params.append('betweenEnd', encodeURIComponent(e));\n      return this.http.get(`${this.resourceUrl_event_service_map_orders}/findAllEventServiceMapOrdersWithDateRange`, {\n        params: params,\n        observe: 'response'\n      });\n    }\n    findAllEventServiceMapOrdersWithDateRangeAndServiceMapId(serviceMapId, dateStart, dateEnd) {\n      const s = dateStart.format();\n      const e = dateEnd.format();\n      let params = new HttpParams();\n      params = params.append('betweenStart', encodeURIComponent(s));\n      params = params.append('betweenEnd', encodeURIComponent(e));\n      return this.http.get(`${this.resourceUrl_event_service_map_orders}/findAllEventServiceMapOrdersWithDateRangeAndServiceMapId/${serviceMapId}`, {\n        params: params,\n        observe: 'response'\n      });\n    }\n    findAllEventServiceMapOrdersWithDateRangeAndEventId(dateStart, dateEnd, eventId) {\n      const s = dateStart.format();\n      const e = dateEnd.format();\n      let params = new HttpParams();\n      params = params.append('betweenStart', encodeURIComponent(s));\n      params = params.append('betweenEnd', encodeURIComponent(e));\n      return this.http.get(`${this.resourceUrl_event_service_map_orders}/findAllEventServiceMapOrdersWithDateRangeAndEventId/${eventId}`, {\n        params: params,\n        observe: 'response'\n      });\n    }\n    findAllOrganizationReservationsWithDateRange(dateStart, dateEnd) {\n      const s = dateStart.format();\n      const e = dateEnd.format();\n      let params = new HttpParams();\n      params = params.append('betweenStart', encodeURIComponent(s));\n      params = params.append('betweenEnd', encodeURIComponent(e));\n      return this.http.get(`${this.resourceUrl_organization_reservations}/findAllIOrganizationReservationsWithDateRange`, {\n        params: params,\n        observe: 'response'\n      });\n    }\n    findAllEventProductOrdersWithDateRange(dateStart, dateEnd) {\n      const s = dateStart.format();\n      const e = dateEnd.format();\n      let params = new HttpParams();\n      params = params.append('betweenStart', encodeURIComponent(s));\n      params = params.append('betweenEnd', encodeURIComponent(e));\n      return this.http.get(`${this.resourceUrl_eventProductOrder}/findAllEventProductOrdersWithDateFromRange`, {\n        params: params,\n        observe: 'response'\n      });\n    }\n    /* --------------------------------------------------------------------------------------------------------------------------------------------------- */\n    findAllEventProductOrdersWithDateFromRange(dateStart, dateEnd) {\n      const s = dateStart.format();\n      const e = dateEnd.format();\n      let params = new HttpParams();\n      params = params.append('dateStart', encodeURIComponent(s));\n      params = params.append('dateEnd', encodeURIComponent(e));\n      return this.http.get(`${this.resourceUrl_eventProductOrder}/findAllEventProductOrdersWithDateFromRange`, {\n        params: params,\n        observe: 'response'\n      });\n    }\n    findAllEventProductOrdersWithDateFromSmallerThenAndDateUntilBetween(dateStart, dateEnd) {\n      const s = dateStart.format();\n      const e = dateEnd.format();\n      let params = new HttpParams();\n      params = params.append('dateStart', encodeURIComponent(s));\n      params = params.append('dateEnd', encodeURIComponent(e));\n      return this.http.get(`${this.resourceUrl_eventProductOrder}/findAllEventProductOrdersWithDateFromSmallerThenAndDateUntilBetween`, {\n        params: params,\n        observe: 'response'\n      });\n    }\n    findAllEventProductOrdersWithDateFromBetweenAndDateUntilBiggerThen(dateStart, dateEnd) {\n      const s = dateStart.format();\n      const e = dateEnd.format();\n      let params = new HttpParams();\n      params = params.append('dateStart', encodeURIComponent(s));\n      params = params.append('dateEnd', encodeURIComponent(e));\n      return this.http.get(`${this.resourceUrl_eventProductOrder}/findAllEventProductOrdersWithDateFromBetweenAndDateUntilBiggerThen`, {\n        params: params,\n        observe: 'response'\n      });\n    }\n    findAllEventProductOrdersWithDateFromSmallerThenAndDateUntilBiggerThenAndOnSameTimeRange(dateStart, dateEnd) {\n      const s = dateStart.format();\n      const e = dateEnd.format();\n      let params = new HttpParams();\n      params = params.append('dateStart', encodeURIComponent(s));\n      params = params.append('dateEnd', encodeURIComponent(e));\n      return this.http.get(`${this.resourceUrl_eventProductOrder}/findAllEventProductOrdersWithDateFromSmallerThenAndDateUntilBiggerThenAndOnSameTimeRange`, {\n        params: params,\n        observe: 'response'\n      });\n    }\n    /* --------------------------------------------------------------------------------------------------------------------------------------------------- */\n    findAllEventServiceMapOrdersByDateUntilLessGreaterThanNow(now) {\n      const s = now.format();\n      let params = new HttpParams();\n      params = params.append('now', encodeURIComponent(s));\n      return this.http.get(`${this.resourceUrl_event_service_map_orders}/findAllEventServiceMapOrdersByDateUntilLessGreaterThanNow`, {\n        params: params,\n        observe: 'response'\n      });\n    }\n    findAllEventProductOrderByDateGreaterThen(now) {\n      const s = now.format();\n      let params = new HttpParams();\n      params = params.append('now', encodeURIComponent(s));\n      return this.http.get(`${this.resourceUrl_eventProductOrder}/findAllEventProductOrderByDateGreaterThen`, {\n        params: params,\n        observe: 'response'\n      });\n    }\n    findShopsByUserAndActiveTrue(req) {\n      const options = createRequestOption(req);\n      return this.http.get(`${this.resourceUrl_shop}/user/active`, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    findShopsByUserIdAndActiveTrue(userId, req) {\n      const options = createRequestOption(req);\n      return this.http.get(`${this.resourceUrl_shop}/${userId}/active`, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    findByUserIdAndActiveTrueAndPrivateOrPublic(req) {\n      const options = createRequestOption(req);\n      return this.http.get(`${this.resourceUrl_event}/public/active/user`, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    getEventStarRatingByEventAndUser(eventId, userId, req) {\n      const options = createRequestOption(req);\n      return this.http.get(`${this.resourceUrl_event_star_ratings}/${eventId}/${userId}/getEventStarRatingByEventAndUser`, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    getEventStarRatingByEvent(eventId, req) {\n      const options = createRequestOption(req);\n      return this.http.get(`${this.resourceUrl_event_star_ratings}/${eventId}/getEventStarRatingByEvent`, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    getEventStarRatingByUser(userId, req) {\n      const options = createRequestOption(req);\n      return this.http.get(`${this.resourceUrl_event_star_ratings}/${userId}/getEventStarRatingByUser`, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    findAllWhereStarsBiggerAs(stars, req) {\n      const options = createRequestOption(req);\n      return this.http.get(`${this.resourceUrl_event_star_ratings}/${stars}/findAllWhereStarsBiggerAs`, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    createReservation(reservation) {\n      const copy = this.convertDateFromClient_Reservations(reservation);\n      return this.http.post(`${this.resourceUrl_reservation}/ext`, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer_Reservations(res)));\n    }\n    updateReservation(reservation) {\n      const copy = this.convertDateFromClient_Reservations(reservation);\n      return this.http.put(`${this.resourceUrl_reservation}/${reservation.id}/ext`, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer_Reservations(res)));\n    }\n    partialUpdateReservation(reservation) {\n      const copy = this.convertDateFromClient_Reservations(reservation);\n      return this.http.patch(`${this.resourceUrl_reservation}/${reservation.id}/ext`, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer_Reservations(res)));\n    }\n    deleteReservation(id) {\n      return this.http.delete(`${this.resourceUrl_reservation}/${id}/ext`, {\n        observe: 'response'\n      });\n    }\n    convertDateFromClient_Reservations(reservation) {\n      return Object.assign({}, reservation, {\n        date: reservation.date?.isValid() ? reservation.date.toJSON() : undefined,\n        accessDate: reservation.accessDate?.isValid() ? reservation.accessDate.toJSON() : undefined\n      });\n    }\n    convertDateFromServer_Reservations(res) {\n      if (res.body) {\n        res.body.date = res.body.date ? dayjs(res.body.date) : undefined;\n        res.body.accessDate = res.body.accessDate ? dayjs(res.body.accessDate) : undefined;\n      }\n      return res;\n    }\n    convertDateArrayFromServer_Reservations(res) {\n      if (res.body) {\n        res.body.forEach(reservation => {\n          reservation.date = reservation.date ? dayjs(reservation.date) : undefined;\n          reservation.accessDate = reservation.accessDate ? dayjs(reservation.accessDate) : undefined;\n        });\n      }\n      return res;\n    }\n    getReservationsByUser(userId, req) {\n      const options = createRequestOption(req);\n      return this.http.get(`${this.resourceUrl_reservation}/${userId}/getReservationsByUserId`, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    getReservationsByUserAndBilled(userId, req) {\n      const options = createRequestOption(req);\n      return this.http.get(`${this.resourceUrl_reservation}/${userId}/getReservationsByUserIdAndBilled`, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    getReservationsByUserAndNotBilled(userId, req) {\n      const options = createRequestOption(req);\n      return this.http.get(`${this.resourceUrl_reservation}/${userId}/getReservationsByUserIdAndNotBilled`, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    findAllEventsByActiveTrueAndBilledFalseAndDateEndBefor(date) {\n      const d = date.format();\n      let params = new HttpParams();\n      params = params.append('date', encodeURIComponent(d));\n      return this.http.get(`${this.resourceUrl_event}/dateBefor/active/notBilled`, {\n        params: params,\n        observe: 'response'\n      });\n    }\n    findEventById(eventId) {\n      return this.http.get(`${this.resourceUrl_event}/findById/${eventId}`, {\n        observe: 'response'\n      });\n    }\n    findAllEventsByActiveTrueAndBilledFalseAndDateEndBeforAndUserId(date, userId) {\n      const d = date.format();\n      let params = new HttpParams();\n      params = params.append('date', encodeURIComponent(d));\n      return this.http.get(`${this.resourceUrl_event}/dateBefor/active/notBilled/${userId}`, {\n        params: params,\n        observe: 'response'\n      });\n    }\n    findAllEventsByActiveTrueAndBilledTrueAndDateEndBeforAndUserId(date, userId) {\n      const d = date.format();\n      let params = new HttpParams();\n      params = params.append('date', encodeURIComponent(d));\n      return this.http.get(`${this.resourceUrl_event}/dateBefor/active/billed/${userId}`, {\n        params: params,\n        observe: 'response'\n      });\n    }\n    findAllEventsByActiveTrueAndDateEndBeforAndUserId(date, userId) {\n      const d = date.format();\n      let params = new HttpParams();\n      params = params.append('date', encodeURIComponent(d));\n      return this.http.get(`${this.resourceUrl_event}/dateBefor/active/${userId}`, {\n        params: params,\n        observe: 'response'\n      });\n    }\n    findAllEventsByActiveTrueAndDateEndAfterAndUserId(date, userId) {\n      const d = date.format();\n      let params = new HttpParams();\n      params = params.append('date', encodeURIComponent(d));\n      return this.http.get(`${this.resourceUrl_event}/dateAfter/active/${userId}`, {\n        params: params,\n        observe: 'response'\n      });\n    }\n    findAllEventProductOrderByShopIdAndBilledFalseAndDateStartSmallerThen(shopId, now) {\n      const s = now.format();\n      let params = new HttpParams();\n      params = params.append('now', encodeURIComponent(s));\n      return this.http.get(`${this.resourceUrl_eventProductOrder}/${shopId}/findAllEventProductOrderByShopIdAndBilledFalseAndDateStartSmallerThen`, {\n        params: params,\n        observe: 'response'\n      });\n    }\n    findAllEventProductOrderByShopIdAndBilledTrueAndDateStartSmallerThen(shopId, now) {\n      const s = now.format();\n      let params = new HttpParams();\n      params = params.append('now', encodeURIComponent(s));\n      return this.http.get(`${this.resourceUrl_eventProductOrder}/${shopId}/findAllEventProductOrderByShopIdAndBilledTrueAndDateStartSmallerThen`, {\n        params: params,\n        observe: 'response'\n      });\n    }\n    findAllEventProductOrderByShopIdAndDateStartSmallerThen(shopId, now) {\n      const s = now.format();\n      let params = new HttpParams();\n      params = params.append('now', encodeURIComponent(s));\n      return this.http.get(`${this.resourceUrl_eventProductOrder}/${shopId}/findAllEventProductOrderByShopIdAndDateStartSmallerThen`, {\n        params: params,\n        observe: 'response'\n      });\n    }\n    findEventServiceMapOrdersByServiceMapIdAndBilledFalseAndDateEndSmallerThen(serviceMapId, now) {\n      const s = now.format();\n      let params = new HttpParams();\n      params = params.append('now', encodeURIComponent(s));\n      return this.http.get(`${this.resourceUrl_event_service_map_orders}/${serviceMapId}/findEventServiceMapOrdersByServiceMapIdAndBilledFalseAndDateEndSmallerThen`, {\n        params: params,\n        observe: 'response'\n      });\n    }\n    findEventServiceMapOrdersByServiceMapIdAndDateEndSmallerThen(serviceMapId, now) {\n      const s = now.format();\n      let params = new HttpParams();\n      params = params.append('now', encodeURIComponent(s));\n      return this.http.get(`${this.resourceUrl_event_service_map_orders}/${serviceMapId}/findEventServiceMapOrdersByServiceMapIdAndDateEndSmallerThen`, {\n        params: params,\n        observe: 'response'\n      });\n    }\n    findEventServiceMapOrdersByServiceMapIdAndBilledTrueAndDateEndSmallerThen(serviceMapId, now) {\n      const s = now.format();\n      let params = new HttpParams();\n      params = params.append('now', encodeURIComponent(s));\n      return this.http.get(`${this.resourceUrl_event_service_map_orders}/${serviceMapId}/findEventServiceMapOrdersByServiceMapIdAndBilledTrueAndDateEndSmallerThen`, {\n        params: params,\n        observe: 'response'\n      });\n    }\n    deleteProductTag(id) {\n      return this.http.delete(`${this.resourceUrl_tags}/deleteProduct/${id}`, {\n        observe: 'response'\n      });\n    }\n    deleteEventTag(id) {\n      return this.http.delete(`${this.resourceUrl_tags}/deleteEvent/${id}`, {\n        observe: 'response'\n      });\n    }\n    deleteShopTag(id) {\n      return this.http.delete(`${this.resourceUrl_tags}/deleteShop/${id}`, {\n        observe: 'response'\n      });\n    }\n    deleteServiceTag(id) {\n      return this.http.delete(`${this.resourceUrl_tags}/deleteService/${id}`, {\n        observe: 'response'\n      });\n    }\n    deleteOrganization(id) {\n      return this.http.delete(`${this.resourceUrl_tags}/deleteOrganization/${id}`, {\n        observe: 'response'\n      });\n    }\n    findProductTags(id) {\n      return this.http.get(`${this.resourceUrl_tags}/findProduct/${id}`, {\n        observe: 'response'\n      });\n    }\n    findEventTags(id) {\n      return this.http.get(`${this.resourceUrl_tags}/findEvent/${id}`, {\n        observe: 'response'\n      });\n    }\n    findShopTags(id) {\n      return this.http.get(`${this.resourceUrl_tags}/findShop/${id}`, {\n        observe: 'response'\n      });\n    }\n    findServiceTags(id) {\n      return this.http.get(`${this.resourceUrl_tags}/findService/${id}`, {\n        observe: 'response'\n      });\n    }\n    findOrganizations(id) {\n      return this.http.get(`${this.resourceUrl_tags}/findOrganization/${id}`, {\n        observe: 'response'\n      });\n    }\n    findAllTags() {\n      return this.http.get(`${this.resourceUrl_tags}/all`, {\n        observe: 'response'\n      });\n    }\n    find50TagsRandomly() {\n      return this.http.get(`${this.resourceUrl_tags}/50`, {\n        observe: 'response'\n      });\n    }\n    find50EventTagsRandomly() {\n      const t = this.http.get(`${this.resourceUrl_tags}/50event`, {\n        observe: 'response'\n      });\n      return t;\n    }\n    findAllTagsWithActiveTrue() {\n      return this.http.get(`${this.resourceUrl_tags}/active/all`, {\n        observe: 'response'\n      });\n    }\n    findPointsByKey(key) {\n      return this.http.get(`${this.resourceUrl_points}/key/${key}`, {\n        observe: 'response'\n      });\n    }\n    updateUserLoggedIn(id, loggedIn) {\n      return this.http.put(`${this.resourceUrl}/${id}/${loggedIn}`, {\n        observe: 'response'\n      });\n    }\n    updateUserLoggedInAndPoints(userId, loggedIn, points) {\n      return this.http.put(`${this.resourceUrl}/${userId}/${loggedIn}/${points}`, {\n        observe: 'response'\n      });\n    }\n    updateAddressAndPhoneFromUser(userId, address, phone) {\n      return this.http.put(`${this.resourceUrl}/${userId}/update/${encodeURIComponent(address)}/${encodeURIComponent(phone)}`, {\n        observe: 'response'\n      });\n    }\n    updateAGBTrue(userId) {\n      return this.http.put(`${this.resourceUrl}/updateAGBTrue/${userId}`, {\n        observe: 'response'\n      });\n    }\n    updateAddressAndPhoneAndIBanFromUser(userId, address, phone, iban) {\n      return this.http.put(`${this.resourceUrl}/${userId}/update/${encodeURIComponent(address)}/${encodeURIComponent(phone)}/${encodeURIComponent(iban)}`, {\n        observe: 'response'\n      });\n    }\n    updateAddressAndPhoneAndIBanAndBanknameAndBankaddressFromUser(userId, address, phone, iban, bankname, bankaddress) {\n      //let params = new HttpParams().set('address',address).set('phone', phone);\n      return this.http.put(`${this.resourceUrl}/${userId}/update/${encodeURIComponent(address)}/${encodeURIComponent(phone)}/${encodeURIComponent(iban)}/${encodeURIComponent(bankname)}/${encodeURIComponent(bankaddress)}`, {\n        observe: 'response'\n      });\n    }\n    getAllPointsFromUser(userId) {\n      return this.http.get(`${this.resourceUrl_pointsUsers}/${userId}/getAllPointsFromUser`, {\n        observe: 'response'\n      });\n    }\n    findUserPointAssociationByUsersIdAndDateBetween(userId, betweenStart, betweenEnd) {\n      const s = betweenStart.format();\n      const e = betweenEnd.format();\n      let params = new HttpParams();\n      params = params.append('betweenStart', encodeURIComponent(s));\n      params = params.append('betweenEnd', encodeURIComponent(e));\n      return this.http.get(`${this.resourceUrl_pointsUsers}/${userId}/findByUsersIdAndDateBetween`, {\n        params: params,\n        observe: 'response'\n      });\n    }\n    findUserPointAssociationByUsersIdAndPointkeyAndDateBetween(userId, key, betweenStart, betweenEnd) {\n      const s = betweenStart.format();\n      const e = betweenEnd.format();\n      let params = new HttpParams();\n      params = params.append('betweenStart', encodeURIComponent(s));\n      params = params.append('betweenEnd', encodeURIComponent(e));\n      return this.http.get(`${this.resourceUrl_pointsUsers}/${userId}/${key}/findByUsersIdAndPointkeyAndDateBetween`, {\n        params: params,\n        observe: 'response'\n      });\n    }\n    findUserPointAssociationByUsersIdAndPointkey(userId, key) {\n      return this.http.get(`${this.resourceUrl_pointsUsers}/${userId}/${key}/findByUsersIdAndPointkey`, {\n        observe: 'response'\n      });\n    }\n    findShopStarRatingsByShopId(shopId) {\n      return this.http.get(`${this.resourceUrl_shop_star_rating}/${shopId}/findShopStarRatingsByShopId`, {\n        observe: 'response'\n      });\n    }\n    findShopStarRatingsByShopIdAndUserId(shopId, userId) {\n      return this.http.get(`${this.resourceUrl_shop_star_rating}/${shopId}/${userId}/findShopStarRatingsByShopIdAndUserId`, {\n        observe: 'response'\n      });\n    }\n    findOrganizationStarRatingsByOrganizationId(organizationId) {\n      return this.http.get(`${this.resourceUrl_organization_star_ratings}/${organizationId}/findOrganizationStarRatingsByOrganizationId`, {\n        observe: 'response'\n      });\n    }\n    findOrganizationStarRatingsByOrganizationIdAndUserId(organizationId, userId) {\n      return this.http.get(`${this.resourceUrl_organization_star_ratings}/${organizationId}/${userId}/findOrganizationStarRatingsByOrganizationIdAndUserId`, {\n        observe: 'response'\n      });\n    }\n    findServiceStarRatingsByServiceId(serviceId) {\n      return this.http.get(`${this.resourceUrl_service_star_rating}/${serviceId}/findServiceStarRatingsByServiceId`, {\n        observe: 'response'\n      });\n    }\n    findServiceStarRatingsByServiceIdAndUserId(serviceId, userId) {\n      return this.http.get(`${this.resourceUrl_service_star_rating}/${serviceId}/${userId}/findServiceStarRatingsByServiceIdAndUserId`, {\n        observe: 'response'\n      });\n    }\n    findGiftsByActiveTrue() {\n      return this.http.get(`${this.resourceUrl_gifts}/active`, {\n        observe: 'response'\n      });\n    }\n    findBondsByCode(code) {\n      return this.http.get(`${this.resourceUrl_bond}/findByCode/${code}`, {\n        observe: 'response'\n      });\n    }\n    findPropertyByKey(key) {\n      return this.http.get(`${this.resourceUrl_properties}/key/${key}`, {\n        observe: 'response'\n      });\n    }\n    findProductStarRatingsByProductId(productId) {\n      return this.http.get(`${this.resourceUrl_product_star_rating}/${productId}/findProductStarRatingsByProductId`, {\n        observe: 'response'\n      });\n    }\n    findProductStarRatingsByProductIdAndUserId(productId, userId) {\n      return this.http.get(`${this.resourceUrl_product_star_rating}/${productId}/${userId}/findProductStarRatingsByProductIdAndUserId`, {\n        observe: 'response'\n      });\n    }\n    findChipsCollectionByUserId(userId) {\n      return this.http.get(`${this.resourceUrl_chips_collections}/${userId}/findChipsCollectionByUserId`, {\n        observe: 'response'\n      });\n    }\n    findAllChipsCollectionChipsByChipsCollectionId(id) {\n      return this.http.get(`${this.resourceUrl_chips_collection_chips}/${id}/findAllChipsCollectionChipsByChipsCollectionId`, {\n        observe: 'response'\n      });\n    }\n    findOndChipsCollectionChipsByChipsCollectionIdAndChipsId(collectionId, chipsId) {\n      return this.http.get(`${this.resourceUrl_chips_collection_chips}/${collectionId}/${chipsId}/findOneChipsCollectionChipsByChipsCollectionIdAndChipsId`, {\n        observe: 'response'\n      });\n    }\n    deleteAllChipsCollectionChips() {\n      return this.http.delete(`${this.resourceUrl_chips_collection_chips}/deleteAllChipsCollectionChips`, {\n        observe: 'response'\n      });\n    }\n    findAllProductsWhereShopActiveAndProductActive(req) {\n      const options = createRequestOption(req);\n      return this.http.get(`${this.resourceUrl_product}/shop/product/active`, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    findAllIGiftShoppingCartsByUserId(userId, req) {\n      const options = createRequestOption(req);\n      return this.http.get(`${this.resourceUrl_gift_shopping_carts}/${userId}/findByUserId`, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    findAllPartnersWhereActiveTrue(req) {\n      const options = createRequestOption(req);\n      return this.http.get(`${this.resourceUrl_partners}/active`, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    findDeliveryTypeByProductId(id, req) {\n      const options = createRequestOption(req);\n      return this.http.get(`${this.resourceUrl_delivery_types}/${id}/findDeliveryTypeByProductId`, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    deleteDeliveryTypesByProductId(id) {\n      return this.http.delete(`${this.resourceUrl_delivery_types}/${id}/deleteByProductId`, {\n        observe: 'response'\n      });\n    }\n    findMp3ByServiceIdAndUserId(serviceId, userId) {\n      return this.http.get(`${this.resourceUrl_mp3}/${userId}/${serviceId}/service`, {\n        observe: 'response'\n      });\n    }\n    findMp3ByServiceId(serviceId) {\n      return this.http.get(`${this.resourceUrl_mp3}/${serviceId}/service`, {\n        observe: 'response'\n      });\n    }\n    findMp3ByProductIdAndUserId(productId, userId) {\n      return this.http.get(`${this.resourceUrl_mp3}/${userId}/${productId}/product`, {\n        observe: 'response'\n      });\n    }\n    findMp3ByProductId(productId) {\n      return this.http.get(`${this.resourceUrl_mp3}/${productId}/product`, {\n        observe: 'response'\n      });\n    }\n    findMp3ByEventIdAndUserId(eventId, userId) {\n      return this.http.get(`${this.resourceUrl_mp3}/${userId}/${eventId}/event`, {\n        observe: 'response'\n      });\n    }\n    findMp3ByEventId(eventId) {\n      return this.http.get(`${this.resourceUrl_mp3}/${eventId}/event`, {\n        observe: 'response'\n      });\n    }\n    findMp3ByShopIdAndUserId(shopId, userId) {\n      return this.http.get(`${this.resourceUrl_mp3}/${userId}/${shopId}/shop`, {\n        observe: 'response'\n      });\n    }\n    findMp3ByShopId(shopId) {\n      return this.http.get(`${this.resourceUrl_mp3}/${shopId}/shop`, {\n        observe: 'response'\n      });\n    }\n    deleteMP3(mp3Id) {\n      return this.http.delete(`${this.resourceUrl_music_del}/${mp3Id}/delete`, {\n        observe: 'response'\n      });\n    }\n    findShopCommentsByEager() {\n      return this.http.get(`${this.resourceUrl_shop_comments}/findAllByEager`, {\n        observe: 'response'\n      });\n    }\n    getTransactionIdFromDatatrans(amount, type, id) {\n      return this.http.get(`${this.resourceUrl_datatrans}/${amount}/${type}/${id}`, {\n        observe: 'response'\n      });\n    }\n    getStatusFromTransactionIdFromDatatrans(id) {\n      return this.http.get(`${this.resourceUrl_datatrans}/txId/${id}`, {\n        observe: 'response'\n      });\n    }\n    findTicketsByEventId(eventId) {\n      return this.http.get(`${this.resourceUrl_tickets}/${eventId}/getAllTicketsByEventId`, {\n        observe: 'response'\n      });\n    }\n    uploadPdf(data, reservationId, mail, lang) {\n      let params = new HttpParams();\n      params = params.append('mail', mail);\n      return this.http.post(`${this.resourceUrl_send_ticket}/${reservationId}/${lang}/uploadPdf`, data, {\n        params: params,\n        observe: 'response'\n      });\n    }\n    findRestaurantsByUserAndActive() {\n      return this.http.get(`${this.resourceUrl_restaurants}/byUser/active`, {\n        observe: 'response'\n      });\n    }\n    findHotelsByUserAndActive() {\n      return this.http.get(`${this.resourceUrl_hotels}/byUser/active`, {\n        observe: 'response'\n      });\n    }\n    findClubsByUserAndActive() {\n      return this.http.get(`${this.resourceUrl_clubs}/byUser/active`, {\n        observe: 'response'\n      });\n    }\n    findBuildingsByUserAndActive() {\n      return this.http.get(`${this.resourceUrl_buildings}/byUser/active`, {\n        observe: 'response'\n      });\n    }\n    findOrganizationsByActiveAndActiveOwner() {\n      return this.http.get(`${this.resourceUrl_organizations}/active/activeOwner`, {\n        observe: 'response'\n      });\n    }\n    findOrganizationReservationsByEventId(eventId) {\n      return this.http.get(`${this.resourceUrl_organization_reservations}/${eventId}/findOrganizationReservationsByEventId`, {\n        observe: 'response'\n      });\n    }\n    findOrganizationReservationsByOrganizationId(eventId) {\n      return this.http.get(`${this.resourceUrl_organization_reservations}/${eventId}/findOrganizationReservationsByOrganizationId`, {\n        observe: 'response'\n      });\n    }\n    findClubByOrganizationId(id) {\n      return this.http.get(`${this.resourceUrl_clubs}/${id}/clubByOrganizationId`, {\n        observe: 'response'\n      });\n    }\n    findHotelByOrganizationId(id) {\n      return this.http.get(`${this.resourceUrl_hotels}/${id}/hotelByOrganizationId`, {\n        observe: 'response'\n      });\n    }\n    findRestaurantByOrganizationId(id) {\n      return this.http.get(`${this.resourceUrl_restaurants}/${id}/restaurantByOrganizationId`, {\n        observe: 'response'\n      });\n    }\n    byActiveTrueAndUserIdAndDateUntilSmallerThanNow(userId) {\n      return this.http.get(`${this.resourceUrl_organization_reservations}/${userId}/byActiveTrueAndUserIdAndDateUntilSmallerThanNow`, {\n        observe: 'response'\n      });\n    }\n    findOrganizationReservationsByOrganizationWithUserId(userId) {\n      return this.http.get(`${this.resourceUrl_organization_reservations}/${userId}/findOrganizationReservationsByOrganizationWithUserId`, {\n        observe: 'response'\n      });\n    }\n    findEventServiceMapOrdersByEventDateEndSmallerThenNow(req) {\n      const options = createRequestOption(req);\n      return this.http.get(`${this.resourceUrl_event_service_map_orders}/findEventServiceMapOrdersByEventDateEndSmallerThenNow`, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    deleteAllSlotListPlum() {\n      return this.http.delete(`${this.resourceUrl_slot_list_plum}/deleteAll`, {\n        observe: 'response'\n      });\n    }\n    deleteAllSlotListOrange() {\n      return this.http.delete(`${this.resourceUrl_slot_list_orange}/deleteAll`, {\n        observe: 'response'\n      });\n    }\n    deleteAllSlotListCherry() {\n      return this.http.delete(`${this.resourceUrl_slot_list_cherry}/deleteAll`, {\n        observe: 'response'\n      });\n    }\n    deleteAllSlotListClock() {\n      return this.http.delete(`${this.resourceUrl_slot_list_clock}/deleteAll`, {\n        observe: 'response'\n      });\n    }\n    findCouponsByActiveUser() {\n      return this.http.get(`${this.resourceUrl_coupons}/byUser`, {\n        observe: 'response'\n      });\n    }\n    findCouponsByUser(userId) {\n      return this.http.get(`${this.resourceUrl_coupons}/${userId}/byUser`, {\n        observe: 'response'\n      });\n    }\n  }\n  GeneralService.ɵfac = function GeneralService_Factory(t) {\n    return new (t || GeneralService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  GeneralService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GeneralService,\n    factory: GeneralService.ɵfac,\n    providedIn: 'root'\n  });\n  return GeneralService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}