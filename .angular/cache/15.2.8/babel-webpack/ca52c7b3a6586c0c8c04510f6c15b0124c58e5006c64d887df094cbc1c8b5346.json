{"ast":null,"code":"import { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getChipsCollectionIdentifier } from '../chips-collection.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport let ChipsCollectionService = /*#__PURE__*/(() => {\n  class ChipsCollectionService {\n    constructor(http, applicationConfigService) {\n      this.http = http;\n      this.applicationConfigService = applicationConfigService;\n      this.resourceUrl = this.applicationConfigService.getEndpointFor('api/chips-collections');\n    }\n    create(chipsCollection) {\n      return this.http.post(this.resourceUrl, chipsCollection, {\n        observe: 'response'\n      });\n    }\n    update(chipsCollection) {\n      return this.http.put(`${this.resourceUrl}/${getChipsCollectionIdentifier(chipsCollection)}`, chipsCollection, {\n        observe: 'response'\n      });\n    }\n    partialUpdate(chipsCollection) {\n      return this.http.patch(`${this.resourceUrl}/${getChipsCollectionIdentifier(chipsCollection)}`, chipsCollection, {\n        observe: 'response'\n      });\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    addChipsCollectionToCollectionIfMissing(chipsCollectionCollection, ...chipsCollectionsToCheck) {\n      const chipsCollections = chipsCollectionsToCheck.filter(isPresent);\n      if (chipsCollections.length > 0) {\n        const chipsCollectionCollectionIdentifiers = chipsCollectionCollection.map(chipsCollectionItem => getChipsCollectionIdentifier(chipsCollectionItem));\n        const chipsCollectionsToAdd = chipsCollections.filter(chipsCollectionItem => {\n          const chipsCollectionIdentifier = getChipsCollectionIdentifier(chipsCollectionItem);\n          if (chipsCollectionIdentifier == null || chipsCollectionCollectionIdentifiers.includes(chipsCollectionIdentifier)) {\n            return false;\n          }\n          chipsCollectionCollectionIdentifiers.push(chipsCollectionIdentifier);\n          return true;\n        });\n        return [...chipsCollectionsToAdd, ...chipsCollectionCollection];\n      }\n      return chipsCollectionCollection;\n    }\n  }\n  ChipsCollectionService.ɵfac = function ChipsCollectionService_Factory(t) {\n    return new (t || ChipsCollectionService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n  };\n  ChipsCollectionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ChipsCollectionService,\n    factory: ChipsCollectionService.ɵfac,\n    providedIn: 'root'\n  });\n  return ChipsCollectionService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}