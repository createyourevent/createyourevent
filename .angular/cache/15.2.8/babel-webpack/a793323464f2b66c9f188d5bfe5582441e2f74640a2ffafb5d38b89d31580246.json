{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\nimport { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getFeeBalanceIdentifier } from '../fee-balance.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport let FeeBalanceService = /*#__PURE__*/(() => {\n  class FeeBalanceService {\n    constructor(http, applicationConfigService) {\n      this.http = http;\n      this.applicationConfigService = applicationConfigService;\n      this.resourceUrl = this.applicationConfigService.getEndpointFor('api/fee-balances');\n    }\n    create(feeBalance) {\n      const copy = this.convertDateFromClient(feeBalance);\n      return this.http.post(this.resourceUrl, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    update(feeBalance) {\n      const copy = this.convertDateFromClient(feeBalance);\n      return this.http.put(`${this.resourceUrl}/${getFeeBalanceIdentifier(feeBalance)}`, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    partialUpdate(feeBalance) {\n      const copy = this.convertDateFromClient(feeBalance);\n      return this.http.patch(`${this.resourceUrl}/${getFeeBalanceIdentifier(feeBalance)}`, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      }).pipe(map(res => this.convertDateArrayFromServer(res)));\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    addFeeBalanceToCollectionIfMissing(feeBalanceCollection, ...feeBalancesToCheck) {\n      const feeBalances = feeBalancesToCheck.filter(isPresent);\n      if (feeBalances.length > 0) {\n        const feeBalanceCollectionIdentifiers = feeBalanceCollection.map(feeBalanceItem => getFeeBalanceIdentifier(feeBalanceItem));\n        const feeBalancesToAdd = feeBalances.filter(feeBalanceItem => {\n          const feeBalanceIdentifier = getFeeBalanceIdentifier(feeBalanceItem);\n          if (feeBalanceIdentifier == null || feeBalanceCollectionIdentifiers.includes(feeBalanceIdentifier)) {\n            return false;\n          }\n          feeBalanceCollectionIdentifiers.push(feeBalanceIdentifier);\n          return true;\n        });\n        return [...feeBalancesToAdd, ...feeBalanceCollection];\n      }\n      return feeBalanceCollection;\n    }\n    convertDateFromClient(feeBalance) {\n      return Object.assign({}, feeBalance, {\n        date: feeBalance.date?.isValid() ? feeBalance.date.toJSON() : undefined\n      });\n    }\n    convertDateFromServer(res) {\n      if (res.body) {\n        res.body.date = res.body.date ? dayjs(res.body.date) : undefined;\n      }\n      return res;\n    }\n    convertDateArrayFromServer(res) {\n      if (res.body) {\n        res.body.forEach(feeBalance => {\n          feeBalance.date = feeBalance.date ? dayjs(feeBalance.date) : undefined;\n        });\n      }\n      return res;\n    }\n  }\n  FeeBalanceService.ɵfac = function FeeBalanceService_Factory(t) {\n    return new (t || FeeBalanceService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n  };\n  FeeBalanceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FeeBalanceService,\n    factory: FeeBalanceService.ɵfac,\n    providedIn: 'root'\n  });\n  return FeeBalanceService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}