{"ast":null,"code":"import { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getDeliveryTypeIdentifier } from '../delivery-type.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport let DeliveryTypeService = /*#__PURE__*/(() => {\n  class DeliveryTypeService {\n    constructor(http, applicationConfigService) {\n      this.http = http;\n      this.applicationConfigService = applicationConfigService;\n      this.resourceUrl = this.applicationConfigService.getEndpointFor('api/delivery-types');\n    }\n    create(deliveryType) {\n      return this.http.post(this.resourceUrl, deliveryType, {\n        observe: 'response'\n      });\n    }\n    update(deliveryType) {\n      return this.http.put(`${this.resourceUrl}/${getDeliveryTypeIdentifier(deliveryType)}`, deliveryType, {\n        observe: 'response'\n      });\n    }\n    partialUpdate(deliveryType) {\n      return this.http.patch(`${this.resourceUrl}/${getDeliveryTypeIdentifier(deliveryType)}`, deliveryType, {\n        observe: 'response'\n      });\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    addDeliveryTypeToCollectionIfMissing(deliveryTypeCollection, ...deliveryTypesToCheck) {\n      const deliveryTypes = deliveryTypesToCheck.filter(isPresent);\n      if (deliveryTypes.length > 0) {\n        const deliveryTypeCollectionIdentifiers = deliveryTypeCollection.map(deliveryTypeItem => getDeliveryTypeIdentifier(deliveryTypeItem));\n        const deliveryTypesToAdd = deliveryTypes.filter(deliveryTypeItem => {\n          const deliveryTypeIdentifier = getDeliveryTypeIdentifier(deliveryTypeItem);\n          if (deliveryTypeIdentifier == null || deliveryTypeCollectionIdentifiers.includes(deliveryTypeIdentifier)) {\n            return false;\n          }\n          deliveryTypeCollectionIdentifiers.push(deliveryTypeIdentifier);\n          return true;\n        });\n        return [...deliveryTypesToAdd, ...deliveryTypeCollection];\n      }\n      return deliveryTypeCollection;\n    }\n  }\n  DeliveryTypeService.ɵfac = function DeliveryTypeService_Factory(t) {\n    return new (t || DeliveryTypeService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n  };\n  DeliveryTypeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DeliveryTypeService,\n    factory: DeliveryTypeService.ɵfac,\n    providedIn: 'root'\n  });\n  return DeliveryTypeService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}