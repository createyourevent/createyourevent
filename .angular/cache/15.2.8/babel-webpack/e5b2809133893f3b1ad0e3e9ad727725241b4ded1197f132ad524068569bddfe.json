{"ast":null,"code":"import _defineProperty from \"/home/ceo/mmmm/createyourevent/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { ReplaySubject, of } from 'rxjs';\nimport { shareReplay, tap, catchError } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\nimport { ChipsCollection } from 'app/entities/chips-collection/chips-collection.model';\nimport { UserPointAssociation } from 'app/entities/user-point-association/user-point-association.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngx-translate/core\";\nimport * as i2 from \"ngx-webstorage\";\nimport * as i3 from \"@angular/common/http\";\nimport * as i4 from \"app/core/auth/state-storage.service\";\nimport * as i5 from \"@angular/router\";\nimport * as i6 from \"../config/application-config.service\";\nimport * as i7 from \"ng-jhipster\";\nimport * as i8 from \"../../system-notification/SharedNotificationService.service\";\nimport * as i9 from \"app/points/points-display/points-display.service\";\nimport * as i10 from \"app/general.service\";\nimport * as i11 from \"ngx-socket-io\";\nimport * as i12 from \"app/entities/user-point-association/service/user-point-association.service\";\nimport * as i13 from \"app/entities/chips-collection/service/chips-collection.service\";\nimport * as i14 from \"app/chat.service\";\nf;\nexport class AccountService {\n  constructor(translateService, sessionStorage, http, stateStorageService, router, applicationConfigService, languageService, sharedNotificationService, pointsDataService, generalService, socket, userPointAssociationService, chipsCollectionService, sharedChatService) {\n    _defineProperty(this, \"translateService\", void 0);\n    _defineProperty(this, \"sessionStorage\", void 0);\n    _defineProperty(this, \"http\", void 0);\n    _defineProperty(this, \"stateStorageService\", void 0);\n    _defineProperty(this, \"router\", void 0);\n    _defineProperty(this, \"applicationConfigService\", void 0);\n    _defineProperty(this, \"languageService\", void 0);\n    _defineProperty(this, \"sharedNotificationService\", void 0);\n    _defineProperty(this, \"pointsDataService\", void 0);\n    _defineProperty(this, \"generalService\", void 0);\n    _defineProperty(this, \"socket\", void 0);\n    _defineProperty(this, \"userPointAssociationService\", void 0);\n    _defineProperty(this, \"chipsCollectionService\", void 0);\n    _defineProperty(this, \"sharedChatService\", void 0);\n    _defineProperty(this, \"userIdentity\", null);\n    _defineProperty(this, \"authenticationState\", new ReplaySubject(1));\n    _defineProperty(this, \"accountCache$\", void 0);\n    this.translateService = translateService;\n    this.sessionStorage = sessionStorage;\n    this.http = http;\n    this.stateStorageService = stateStorageService;\n    this.router = router;\n    this.applicationConfigService = applicationConfigService;\n    this.languageService = languageService;\n    this.sharedNotificationService = sharedNotificationService;\n    this.pointsDataService = pointsDataService;\n    this.generalService = generalService;\n    this.socket = socket;\n    this.userPointAssociationService = userPointAssociationService;\n    this.chipsCollectionService = chipsCollectionService;\n    this.sharedChatService = sharedChatService;\n  }\n  authenticate(identity) {\n    this.userIdentity = identity;\n    this.authenticationState.next(this.userIdentity);\n  }\n  hasAnyAuthority(authorities) {\n    if (!this.userIdentity) {\n      return false;\n    }\n    if (!Array.isArray(authorities)) {\n      authorities = [authorities];\n    }\n    return this.userIdentity.authorities.some(authority => authorities.includes(authority));\n  }\n  identity(force) {\n    if (!this.accountCache$ || force || !this.isAuthenticated()) {\n      this.accountCache$ = this.fetch().pipe(catchError(() => of(null)), tap(account => {\n        this.authenticate(account);\n        // After retrieve the account info, the language will be changed to\n        // the user's preferred language configured in the account setting\n        if (account && account.langKey) {\n          this.sharedChatService.onLoginComplete();\n          const langKey = this.sessionStorage.retrieve('locale') || account.langKey;\n          this.languageService.changeLanguage(langKey);\n          this.generalService.findWidthAuthorities().subscribe(u => {\n            if (u.body.agb === null || u.body.agb === undefined || u.body.agb === false) {\n              this.router.navigate(['/agb']);\n              return;\n            }\n            if (u.body.address === null || u.body.phone === null || u.body.iban === null) {\n              this.router.navigate(['/settings']);\n              return;\n            }\n            this.generalService.getPointsFromUser(u.body.id).subscribe(p => {\n              const pointsKc = p.body;\n              u.body.points = pointsKc;\n              this.pointsDataService.changePoint(u.body.points);\n              if (u.body.points === null) {\n                u.body.points = 0;\n                this.generalService.updateUserLoggedInAndPoints(u.body.id, u.body.loggedIn, u.body.points).subscribe();\n              }\n              u.body.loggedIn = true;\n              this.generalService.updateUserLoggedInAndPoints(u.body.id, u.body.loggedIn, u.body.points).subscribe();\n            });\n            this.generalService.findChipsCollectionByUserId(u.body.id).subscribe(ucc => {\n              if (ucc.body === null || ucc.body === undefined) {\n                const chipsCollection = new ChipsCollection();\n                chipsCollection.user = u.body;\n                this.chipsCollectionService.create(chipsCollection).subscribe();\n              }\n            });\n            this.socket.emit('join', account.firstName + ' ' + account.lastName, u.body.id);\n            this.pointsDataService.changePoint(u.body.points);\n            if (!u.body.loggedIn) {\n              this.generalService.findPointsByKey('login').subscribe(p => {\n                const points = p.body;\n                this.generalService.findUserPointAssociationByUsersIdAndPointkey(u.body.id, points.key).subscribe(s => {\n                  const upa = s.body;\n                  const day = dayjs();\n                  let i = 0;\n                  upa.forEach(element => {\n                    if (day.isSame(element.date, 'day')) {\n                      i++;\n                    }\n                  });\n                  if (i <= points.countPerDay) {\n                    const iupa = new UserPointAssociation();\n                    iupa.users = u.body;\n                    iupa.points = points;\n                    iupa.date = dayjs();\n                    this.userPointAssociationService.create(iupa).subscribe();\n                    u.body.points += points.points;\n                    u.body.loggedIn = true;\n                    this.generalService.findWidthAuthorities().subscribe(us => {\n                      const user = us.body;\n                      this.generalService.updateUserLoggedInAndPoints(u.body.id, u.body.loggedIn, u.body.points).subscribe(t => {\n                        this.pointsDataService.changePoint(u.body.points);\n                      });\n                    });\n                  }\n                });\n              });\n            }\n          });\n          this.sharedNotificationService.sendLoginEvent();\n        }\n        // After retrieve the account info, the language will be changed to\n        // the user's preferred language configured in the account setting\n        if (account?.langKey) {\n          const langKey = this.sessionStorage.retrieve('locale') ?? account.langKey;\n          this.translateService.use(langKey);\n        }\n        if (account) {\n          this.navigateToStoredUrl();\n        }\n      }), shareReplay());\n    }\n    return this.accountCache$;\n  }\n  isAuthenticated() {\n    return this.userIdentity !== null;\n  }\n  getAuthenticationState() {\n    return this.authenticationState.asObservable();\n  }\n  getImageUrl() {\n    return this.userIdentity?.imageUrl ?? '';\n  }\n  getAccount() {\n    return this.userIdentity;\n  }\n  fetch() {\n    return this.http.get(this.applicationConfigService.getEndpointFor('api/account'));\n  }\n  navigateToStoredUrl() {\n    // previousState can be set in the authExpiredInterceptor and in the userRouteAccessService\n    // if login is successful, go to stored previousState and clear previousState\n    const previousUrl = this.stateStorageService.getUrl();\n    if (previousUrl) {\n      this.stateStorageService.clearUrl();\n      this.router.navigateByUrl(previousUrl);\n    }\n  }\n}\n_defineProperty(AccountService, \"\\u0275fac\", function AccountService_Factory(t) {\n  return new (t || AccountService)(i0.ɵɵinject(i1.TranslateService), i0.ɵɵinject(i2.SessionStorageService), i0.ɵɵinject(i3.HttpClient), i0.ɵɵinject(i4.StateStorageService), i0.ɵɵinject(i5.Router), i0.ɵɵinject(i6.ApplicationConfigService), i0.ɵɵinject(i7.JhiLanguageService), i0.ɵɵinject(i8.SharedNotificationService), i0.ɵɵinject(i9.PointsDataService), i0.ɵɵinject(i10.GeneralService), i0.ɵɵinject(i11.Socket), i0.ɵɵinject(i12.UserPointAssociationService), i0.ɵɵinject(i13.ChipsCollectionService), i0.ɵɵinject(i14.SharedChatService));\n});\n_defineProperty(AccountService, \"\\u0275prov\", /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AccountService,\n  factory: AccountService.ɵfac,\n  providedIn: 'root'\n}));","map":{"version":3,"mappings":"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","names":["ReplaySubject","of","shareReplay","tap","catchError","dayjs","ChipsCollection","UserPointAssociation","f","AccountService","constructor","translateService","sessionStorage","http","stateStorageService","router","applicationConfigService","languageService","sharedNotificationService","pointsDataService","generalService","socket","userPointAssociationService","chipsCollectionService","sharedChatService","authenticate","identity","userIdentity","authenticationState","next","hasAnyAuthority","authorities","Array","isArray","some","authority","includes","force","accountCache$","isAuthenticated","fetch","pipe","account","langKey","onLoginComplete","retrieve","changeLanguage","findWidthAuthorities","subscribe","u","body","agb","undefined","navigate","address","phone","iban","getPointsFromUser","id","p","pointsKc","points","changePoint","updateUserLoggedInAndPoints","loggedIn","findChipsCollectionByUserId","ucc","chipsCollection","user","create","emit","firstName","lastName","findPointsByKey","findUserPointAssociationByUsersIdAndPointkey","key","s","upa","day","i","forEach","element","isSame","date","countPerDay","iupa","users","us","t","sendLoginEvent","use","navigateToStoredUrl","getAuthenticationState","asObservable","getImageUrl","imageUrl","getAccount","get","getEndpointFor","previousUrl","getUrl","clearUrl","navigateByUrl","factory","providedIn"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/core/auth/account.service.ts"],"sourcesContent":["\nimport { Router } from '@angular/router';\nimport { HttpClient } from '@angular/common/http';\nimport { TranslateService } from '@ngx-translate/core';\nimport { SessionStorageService } from 'ngx-webstorage';\nimport { Observable, ReplaySubject, of } from 'rxjs';\nimport { shareReplay, tap, catchError } from 'rxjs/operators';\n\nimport { StateStorageService } from 'app/core/auth/state-storage.service';\nimport { ApplicationConfigService } from '../config/application-config.service';\nimport { Account } from 'app/core/auth/account.model';\nimport { JhiLanguageService } from 'ng-jhipster';\nimport { SharedNotificationService } from '../../system-notification/SharedNotificationService.service';\nimport { PointsDataService } from 'app/points/points-display/points-display.service';\nimport { GeneralService } from 'app/general.service';\nimport { Socket } from 'ngx-socket-io';\nimport * as dayjs from 'dayjs';\nimport { ChipsCollection } from 'app/entities/chips-collection/chips-collection.model';\nimport { ChipsCollectionService } from 'app/entities/chips-collection/service/chips-collection.service';\nimport { UserPointAssociationService } from 'app/entities/user-point-association/service/user-point-association.service';\nimport { UserPointAssociation } from 'app/entities/user-point-association/user-point-association.model';\nimport { SharedChatService } from 'app/chat.service';\nimport { Injectable } from '@angular/core';\nf\n\n\n@Injectable({ providedIn: 'root' })\nexport class AccountService {\n  private userIdentity: Account | null = null;\n  private authenticationState = new ReplaySubject<Account | null>(1);\n  private accountCache$?: Observable<Account | null>;\n\n  constructor(\n    private translateService: TranslateService,\n    private sessionStorage: SessionStorageService,\n    private http: HttpClient,\n    private stateStorageService: StateStorageService,\n    private router: Router,\n    private applicationConfigService: ApplicationConfigService,\n    private languageService: JhiLanguageService,\n    private sharedNotificationService: SharedNotificationService,\n    private pointsDataService: PointsDataService,\n    private generalService: GeneralService,\n    private socket: Socket,\n    private userPointAssociationService: UserPointAssociationService,\n    private chipsCollectionService: ChipsCollectionService,\n    private sharedChatService: SharedChatService,\n  ) {}\n\n  authenticate(identity: Account | null): void {\n    this.userIdentity = identity;\n    this.authenticationState.next(this.userIdentity);\n  }\n\n  hasAnyAuthority(authorities: string[] | string): boolean {\n    if (!this.userIdentity) {\n      return false;\n    }\n    if (!Array.isArray(authorities)) {\n      authorities = [authorities];\n    }\n\n    return this.userIdentity.authorities.some((authority: string) => authorities.includes(authority));\n  }\n\n  identity(force?: boolean): Observable<Account | null> {\n    if (!this.accountCache$   || force || !this.isAuthenticated()) {\n      this.accountCache$ = this.fetch().pipe(\n        catchError(() => of(null)),\n        tap((account: Account | null) => {\n          this.authenticate(account);\n\n                    // After retrieve the account info, the language will be changed to\n          // the user's preferred language configured in the account setting\n          if (account && account.langKey) {\n\n            this.sharedChatService.onLoginComplete();\n            const langKey = this.sessionStorage.retrieve('locale') || account.langKey;\n            this.languageService.changeLanguage(langKey);\n\n            this.generalService.findWidthAuthorities().subscribe(u => {\n\n              if(u.body.agb === null || u.body.agb === undefined ||u.body.agb === false) {\n                this.router.navigate(['/agb']);\n                return;\n              }\n\n              if(u.body.address === null || u.body.phone === null || u.body.iban === null) {\n                this.router.navigate(['/settings']);\n                return;\n              }\n              this.generalService.getPointsFromUser(u.body.id).subscribe(p => {\n                const pointsKc = p.body;\n                u.body.points = pointsKc;\n                this.pointsDataService.changePoint(u.body.points);\n                if(u.body.points === null) {\n                  u.body.points = 0;\n                  this.generalService.updateUserLoggedInAndPoints(u.body.id, u.body.loggedIn, u.body.points).subscribe();\n                }\n\n                u.body.loggedIn = true;\n                this.generalService.updateUserLoggedInAndPoints(u.body.id, u.body.loggedIn, u.body.points).subscribe();\n              });\n\n              this.generalService.findChipsCollectionByUserId(u.body.id).subscribe(ucc => {\n                if (ucc.body === null || ucc.body === undefined) {\n                  const chipsCollection = new ChipsCollection();\n                  chipsCollection.user = u.body;\n                  this.chipsCollectionService.create(chipsCollection).subscribe();\n                }\n              });\n\n              this.socket.emit('join', account.firstName + ' ' + account.lastName, u.body.id);\n\n              this.pointsDataService.changePoint(u.body.points);\n              if (!u.body.loggedIn) {\n                this.generalService.findPointsByKey('login').subscribe(p => {\n                  const points = p.body;\n                  this.generalService.findUserPointAssociationByUsersIdAndPointkey(u.body.id, points.key).subscribe(s => {\n                    const upa = s.body;\n                    const day = dayjs();\n                    let i = 0;\n                    upa.forEach(element => {\n                      if (day.isSame(element.date, 'day')) {\n                        i++;\n                      }\n                    });\n                    if (i <= points.countPerDay) {\n                      const iupa = new UserPointAssociation();\n                      iupa.users = u.body;\n                      iupa.points = points;\n                      iupa.date = dayjs();\n                      this.userPointAssociationService.create(iupa).subscribe();\n                      u.body.points += points.points;\n                      u.body.loggedIn = true;\n                      this.generalService.findWidthAuthorities().subscribe(us => {\n                        const user = us.body;\n                        this.generalService.updateUserLoggedInAndPoints(u.body.id, u.body.loggedIn, u.body.points).subscribe(t => {\n                            this.pointsDataService.changePoint(u.body.points);\n                        });\n                      });\n                    }\n                  });\n                });\n              }\n            });\n\n            this.sharedNotificationService.sendLoginEvent();\n          }\n\n          // After retrieve the account info, the language will be changed to\n          // the user's preferred language configured in the account setting\n          if (account?.langKey) {\n            const langKey = this.sessionStorage.retrieve('locale') ?? account.langKey;\n            this.translateService.use(langKey);\n          }\n\n          if (account) {\n            this.navigateToStoredUrl();\n          }\n        }),\n        shareReplay()\n      );\n    }\n    return this.accountCache$;\n  }\n\n  isAuthenticated(): boolean {\n    return this.userIdentity !== null;\n  }\n\n  getAuthenticationState(): Observable<Account | null> {\n    return this.authenticationState.asObservable();\n  }\n\n  getImageUrl(): string {\n    return this.userIdentity?.imageUrl ?? '';\n  }\n\n  getAccount(): Account {\n    return this.userIdentity;\n  }\n\n  private fetch(): Observable<Account> {\n    return this.http.get<Account>(this.applicationConfigService.getEndpointFor('api/account'));\n  }\n\n  private navigateToStoredUrl(): void {\n    // previousState can be set in the authExpiredInterceptor and in the userRouteAccessService\n    // if login is successful, go to stored previousState and clear previousState\n    const previousUrl = this.stateStorageService.getUrl();\n    if (previousUrl) {\n      this.stateStorageService.clearUrl();\n      this.router.navigateByUrl(previousUrl);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}