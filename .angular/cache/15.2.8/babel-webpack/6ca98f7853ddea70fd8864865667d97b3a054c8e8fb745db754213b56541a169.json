{"ast":null,"code":"import { Pipe, NgModule } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nimport * as ɵngcc0 from '@angular/core';\nlet FormlySelectOptionsPipe = /*#__PURE__*/(() => {\n  class FormlySelectOptionsPipe {\n    /**\n     * @param {?} options\n     * @param {?=} field\n     * @return {?}\n     */\n    transform(options, field) {\n      if (!(options instanceof Observable)) {\n        options = this.observableOf(options, field);\n      } else {\n        this.dispose();\n      }\n      return (/** @type {?} */options.pipe(map(\n        /**\n        * @param {?} value\n        * @return {?}\n        */\n        value => this.toOptions(value, field || {})))\n      );\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n      this.dispose();\n    }\n    /**\n     * @private\n     * @param {?} options\n     * @param {?} field\n     * @return {?}\n     */\n    toOptions(options, field) {\n      /** @type {?} */\n      const gOptions = [];\n      /** @type {?} */\n      const groups = {};\n      /** @type {?} */\n      const to = field.templateOptions || {};\n      to._flatOptions = true;\n      options.map(\n      /**\n      * @param {?} option\n      * @return {?}\n      */\n      option => {\n        if (!this.getGroupProp(option, to)) {\n          gOptions.push(this.toOption(option, to));\n        } else {\n          to._flatOptions = false;\n          if (!groups[this.getGroupProp(option, to)]) {\n            groups[this.getGroupProp(option, to)] = [];\n            gOptions.push({\n              label: this.getGroupProp(option, to),\n              group: groups[this.getGroupProp(option, to)]\n            });\n          }\n          groups[this.getGroupProp(option, to)].push(this.toOption(option, to));\n        }\n      });\n      return gOptions;\n    }\n    /**\n     * @private\n     * @param {?} item\n     * @param {?} to\n     * @return {?}\n     */\n    toOption(item, to) {\n      return {\n        label: this.getLabelProp(item, to),\n        value: this.getValueProp(item, to),\n        disabled: this.getDisabledProp(item, to) || false\n      };\n    }\n    /**\n     * @private\n     * @param {?} item\n     * @param {?} to\n     * @return {?}\n     */\n    getLabelProp(item, to) {\n      if (typeof to.labelProp === 'function') {\n        return to.labelProp(item);\n      }\n      if (this.shouldUseLegacyOption(item, to)) {\n        console.warn(`NgxFormly: legacy select option '{key, value}' is deprecated since v5.5, use '{value, label}' instead.`);\n        return item.value;\n      }\n      return item[to.labelProp || 'label'];\n    }\n    /**\n     * @private\n     * @param {?} item\n     * @param {?} to\n     * @return {?}\n     */\n    getValueProp(item, to) {\n      if (typeof to.valueProp === 'function') {\n        return to.valueProp(item);\n      }\n      if (this.shouldUseLegacyOption(item, to)) {\n        return item.key;\n      }\n      return item[to.valueProp || 'value'];\n    }\n    /**\n     * @private\n     * @param {?} item\n     * @param {?} to\n     * @return {?}\n     */\n    getDisabledProp(item, to) {\n      if (typeof to.disabledProp === 'function') {\n        return to.disabledProp(item);\n      }\n      return item[to.disabledProp || 'disabled'];\n    }\n    /**\n     * @private\n     * @param {?} item\n     * @param {?} to\n     * @return {?}\n     */\n    getGroupProp(item, to) {\n      if (typeof to.groupProp === 'function') {\n        return to.groupProp(item);\n      }\n      return item[to.groupProp || 'group'];\n    }\n    /**\n     * @private\n     * @param {?} item\n     * @param {?} to\n     * @return {?}\n     */\n    shouldUseLegacyOption(item, to) {\n      return !to.valueProp && !to.labelProp && item != null && typeof item === 'object' && 'key' in item && 'value' in item;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    dispose() {\n      if (this._options) {\n        this._options.complete();\n        this._options = null;\n      }\n      if (this._subscription) {\n        this._subscription.unsubscribe();\n        this._subscription = null;\n      }\n    }\n    /**\n     * @private\n     * @param {?} options\n     * @param {?=} f\n     * @return {?}\n     */\n    observableOf(options, f) {\n      this.dispose();\n      if (f && f.options && f.options.fieldChanges) {\n        this._subscription = f.options.fieldChanges.pipe(filter(\n        /**\n        * @param {?} __0\n        * @return {?}\n        */\n        ({\n          property,\n          type,\n          field\n        }) => {\n          return type === 'expressionChanges' && property.indexOf('templateOptions.options') === 0 && field === f && Array.isArray(field.templateOptions.options) && !!this._options;\n        }), tap(\n        /**\n        * @return {?}\n        */\n        () => this._options.next( /** @type {?} */f.templateOptions.options))).subscribe();\n      }\n      this._options = new BehaviorSubject(options);\n      return this._options.asObservable();\n    }\n  }\n  FormlySelectOptionsPipe.ɵfac = function FormlySelectOptionsPipe_Factory(t) {\n    return new (t || FormlySelectOptionsPipe)();\n  };\n  FormlySelectOptionsPipe.ɵpipe = /*@__PURE__*/ɵngcc0.ɵɵdefinePipe({\n    name: \"formlySelectOptions\",\n    type: FormlySelectOptionsPipe,\n    pure: true\n  });\n  return FormlySelectOptionsPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nlet FormlySelectModule = /*#__PURE__*/(() => {\n  class FormlySelectModule {}\n  FormlySelectModule.ɵfac = function FormlySelectModule_Factory(t) {\n    return new (t || FormlySelectModule)();\n  };\n  FormlySelectModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: FormlySelectModule\n  });\n  FormlySelectModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return FormlySelectModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FormlySelectModule, {\n    declarations: [FormlySelectOptionsPipe],\n    exports: [FormlySelectOptionsPipe]\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { FormlySelectModule, FormlySelectOptionsPipe };\n\n//# sourceMappingURL=ngx-formly-core-select.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}