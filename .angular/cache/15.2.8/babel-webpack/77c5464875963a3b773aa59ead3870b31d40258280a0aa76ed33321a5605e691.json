{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\nimport { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getEventLikeDislikeIdentifier } from '../event-like-dislike.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport let EventLikeDislikeService = /*#__PURE__*/(() => {\n  class EventLikeDislikeService {\n    constructor(http, applicationConfigService) {\n      this.http = http;\n      this.applicationConfigService = applicationConfigService;\n      this.resourceUrl = this.applicationConfigService.getEndpointFor('api/event-like-dislikes');\n    }\n    create(eventLikeDislike) {\n      const copy = this.convertDateFromClient(eventLikeDislike);\n      return this.http.post(this.resourceUrl, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    update(eventLikeDislike) {\n      const copy = this.convertDateFromClient(eventLikeDislike);\n      return this.http.put(`${this.resourceUrl}/${getEventLikeDislikeIdentifier(eventLikeDislike)}`, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    partialUpdate(eventLikeDislike) {\n      const copy = this.convertDateFromClient(eventLikeDislike);\n      return this.http.patch(`${this.resourceUrl}/${getEventLikeDislikeIdentifier(eventLikeDislike)}`, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      }).pipe(map(res => this.convertDateArrayFromServer(res)));\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    addEventLikeDislikeToCollectionIfMissing(eventLikeDislikeCollection, ...eventLikeDislikesToCheck) {\n      const eventLikeDislikes = eventLikeDislikesToCheck.filter(isPresent);\n      if (eventLikeDislikes.length > 0) {\n        const eventLikeDislikeCollectionIdentifiers = eventLikeDislikeCollection.map(eventLikeDislikeItem => getEventLikeDislikeIdentifier(eventLikeDislikeItem));\n        const eventLikeDislikesToAdd = eventLikeDislikes.filter(eventLikeDislikeItem => {\n          const eventLikeDislikeIdentifier = getEventLikeDislikeIdentifier(eventLikeDislikeItem);\n          if (eventLikeDislikeIdentifier == null || eventLikeDislikeCollectionIdentifiers.includes(eventLikeDislikeIdentifier)) {\n            return false;\n          }\n          eventLikeDislikeCollectionIdentifiers.push(eventLikeDislikeIdentifier);\n          return true;\n        });\n        return [...eventLikeDislikesToAdd, ...eventLikeDislikeCollection];\n      }\n      return eventLikeDislikeCollection;\n    }\n    convertDateFromClient(eventLikeDislike) {\n      return Object.assign({}, eventLikeDislike, {\n        date: eventLikeDislike.date?.isValid() ? eventLikeDislike.date.toJSON() : undefined\n      });\n    }\n    convertDateFromServer(res) {\n      if (res.body) {\n        res.body.date = res.body.date ? dayjs(res.body.date) : undefined;\n      }\n      return res;\n    }\n    convertDateArrayFromServer(res) {\n      if (res.body) {\n        res.body.forEach(eventLikeDislike => {\n          eventLikeDislike.date = eventLikeDislike.date ? dayjs(eventLikeDislike.date) : undefined;\n        });\n      }\n      return res;\n    }\n  }\n  EventLikeDislikeService.ɵfac = function EventLikeDislikeService_Factory(t) {\n    return new (t || EventLikeDislikeService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n  };\n  EventLikeDislikeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EventLikeDislikeService,\n    factory: EventLikeDislikeService.ɵfac,\n    providedIn: 'root'\n  });\n  return EventLikeDislikeService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}