{"ast":null,"code":"import { NavigationEnd } from \"@angular/router\";\nimport { ChipsCollectionChips } from \"app/entities/chips-collection-chips/chips-collection-chips.model\";\nimport { ChipItem } from \"./chip-item\";\nimport { ChipComponent } from \"./chip.component\";\nimport { ChipHolderDirective } from \"./chip.directive\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../chips-controller.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"app/general.service\";\nimport * as i4 from \"app/entities/chips-collection/service/chips-collection.service\";\nimport * as i5 from \"../switch-off-on-emitter.service\";\nimport * as i6 from \"app/entities/chips-admin/service/chips-admin.service\";\nimport * as i7 from \"app/entities/chips-collection-chips/service/chips-collection-chips.service\";\nimport * as i8 from \"app/points/points-display/points-display.service\";\nimport * as i9 from \"./chip.directive\";\nfunction ChipHolderComponent_ng_template_1_Template(rf, ctx) {}\nexport let ChipHolderComponent = /*#__PURE__*/(() => {\n  class ChipHolderComponent {\n    constructor(componentFactoryResolver, chipsControllerService, router, generalService, chipsCollectionService, switchOffOnEmitterService, chipsAdminService, chipsCollectionChipsService, pointsData) {\n      this.componentFactoryResolver = componentFactoryResolver;\n      this.chipsControllerService = chipsControllerService;\n      this.router = router;\n      this.generalService = generalService;\n      this.chipsCollectionService = chipsCollectionService;\n      this.switchOffOnEmitterService = switchOffOnEmitterService;\n      this.chipsAdminService = chipsAdminService;\n      this.chipsCollectionChipsService = chipsCollectionChipsService;\n      this.pointsData = pointsData;\n      this.chipsComponent = [];\n      this.currentAdIndex = -1;\n    }\n    ngOnInit() {\n      this.generalService.findWidthAuthorities().subscribe(u => {\n        this.user = u.body;\n        if (this.user != null) {\n          this.getChips().then(() => {\n            this.loadComponent();\n          });\n          this.chipsAdminService.find(1).subscribe(m => {\n            const gameActive = m.body;\n            if (gameActive.gameActive) {\n              this.valueOffOn = \"on\";\n            } else {\n              this.valueOffOn = \"off\";\n            }\n            this.router.events.subscribe(val => {\n              if (val instanceof NavigationEnd) {\n                // this.getChips().then(() => {\n                this.loadComponent();\n                // });\n              }\n            });\n\n            if (this.switchOffOnEmitterService.subsVar === undefined) {\n              this.switchOffOnEmitterService.subsVar = this.switchOffOnEmitterService.invokeSwitchOffOn.subscribe(value => {\n                this.valueOffOn = value;\n                this.chipsAdminService.find(1).subscribe(ms => {\n                  const activeGame = ms.body;\n                  if (value === 'on') {\n                    activeGame.gameActive = true;\n                  } else {\n                    activeGame.gameActive = false;\n                  }\n                  this.chipsAdminService.update(activeGame).subscribe();\n                });\n              });\n            }\n          });\n        }\n      });\n    }\n    ngAfterViewInit() {}\n    loadComponent() {\n      this.viewContainerRef = this.chipHolder.viewContainerRef;\n      this.viewContainerRef.clear();\n      if (this.valueOffOn === \"on\") {\n        this.chipsComponent.forEach(chipItem => {\n          this.generalService.findChipsCollectionByUserId(this.user.id).subscribe(uc => {\n            this.userChipCollection = uc.body;\n            this.generalService.findOndChipsCollectionChipsByChipsCollectionIdAndChipsId(this.userChipCollection.id, chipItem.data.id).subscribe(res => {\n              const ucc = res.body;\n              if (this.router.url.includes(chipItem.data.website) && (ucc === null || ucc === undefined)) {\n                const componentFactory = this.componentFactoryResolver.resolveComponentFactory(chipItem.component);\n                this.componentRef = this.viewContainerRef.createComponent(componentFactory);\n                this.componentRef.instance.id = chipItem.data.id;\n                this.componentRef.instance.points = chipItem.data.points;\n                this.componentRef.instance.left = chipItem.data.left;\n                this.componentRef.instance.top = chipItem.data.top;\n                this.componentRef.instance.website = chipItem.data.website;\n                this.componentRef.instance.image = chipItem.data.image;\n                this.componentRef.instance.imageContentType = chipItem.data.imageContentType;\n                this.componentRef.instance.color = chipItem.data.color;\n                this.componentRef.changeDetectorRef.detectChanges();\n                const sub = this.componentRef.instance.clickChip.subscribe(event => this.clickChip(event));\n                this.componentRef.onDestroy(() => {\n                  sub.unsubscribe();\n                });\n              }\n            });\n          });\n        });\n      }\n    }\n    clickChip(event) {\n      this.viewContainerRef.clear();\n      const chip = event.chip;\n      const foundChip = new ChipsCollectionChips();\n      this.generalService.findChipsCollectionByUserId(this.user.id).subscribe(cc => {\n        this.pointsData.changePoint(this.user.points + chip.points);\n        const collection = cc.body;\n        foundChip.chips = chip;\n        foundChip.chipsCollection = collection;\n        this.chipsCollectionChipsService.create(foundChip).subscribe();\n        this.user.points += chip.points;\n        this.generalService.updateUserLoggedInAndPoints(this.user.id, this.user.loggedIn, this.user.points).subscribe();\n      });\n    }\n    getChips() {\n      return new Promise(resolve => {\n        this.chipsComponent = [];\n        this.chipsControllerService.getAllChips().subscribe(c => {\n          this.chips = c.body;\n          this.chips.forEach(chip => {\n            this.chipsComponent.push(new ChipItem(ChipComponent, {\n              id: chip.id,\n              points: chip.points,\n              left: chip.x,\n              top: chip.y,\n              website: chip.website,\n              image: chip.image,\n              imageContentType: chip.imageContentType,\n              color: chip.color\n            }));\n          });\n          resolve();\n        });\n      });\n    }\n  }\n  ChipHolderComponent.ɵfac = function ChipHolderComponent_Factory(t) {\n    return new (t || ChipHolderComponent)(i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver), i0.ɵɵdirectiveInject(i1.ChipsControllerService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.GeneralService), i0.ɵɵdirectiveInject(i4.ChipsCollectionService), i0.ɵɵdirectiveInject(i5.SwitchOffOnEmitterService), i0.ɵɵdirectiveInject(i6.ChipsAdminService), i0.ɵɵdirectiveInject(i7.ChipsCollectionChipsService), i0.ɵɵdirectiveInject(i8.PointsDataService));\n  };\n  ChipHolderComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ChipHolderComponent,\n    selectors: [[\"jhi-chip-holder\"]],\n    viewQuery: function ChipHolderComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(ChipHolderDirective, 7);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chipHolder = _t.first);\n      }\n    },\n    decls: 3,\n    vars: 0,\n    consts: [[\"jhiChipHolder\", \"\"]],\n    template: function ChipHolderComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtext(0, \"\\n                \");\n        i0.ɵɵtemplate(1, ChipHolderComponent_ng_template_1_Template, 0, 0, \"ng-template\", 0);\n        i0.ɵɵtext(2, \"\\n            \");\n      }\n    },\n    dependencies: [i9.ChipHolderDirective],\n    styles: [\".centered[_ngcontent-%COMP%]{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);font-size:xx-large;font-weight:bolder}.container_chip[_ngcontent-%COMP%]{position:relative;text-align:center}\"]\n  });\n  return ChipHolderComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}