{"ast":null,"code":"import { InjectionToken, forwardRef, Optional, Inject, ElementRef, KeyValueDiffers, Directive, Input, HostListener, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport * as Éµngcc0 from '@angular/core';\nvar CurrencyMaskInputMode;\n(function (CurrencyMaskInputMode) {\n  CurrencyMaskInputMode[CurrencyMaskInputMode[\"FINANCIAL\"] = 0] = \"FINANCIAL\";\n  CurrencyMaskInputMode[CurrencyMaskInputMode[\"NATURAL\"] = 1] = \"NATURAL\";\n})(CurrencyMaskInputMode || (CurrencyMaskInputMode = {}));\nlet CURRENCY_MASK_CONFIG = new InjectionToken(\"currency.mask.config\");\nclass InputManager {\n  constructor(htmlInputElement) {\n    this.htmlInputElement = htmlInputElement;\n  }\n  setCursorAt(position) {\n    if (this.htmlInputElement.setSelectionRange) {\n      this.htmlInputElement.focus();\n      this.htmlInputElement.setSelectionRange(position, position);\n    } else if (this.htmlInputElement.createTextRange) {\n      let textRange = this.htmlInputElement.createTextRange();\n      textRange.collapse(true);\n      textRange.moveEnd(\"character\", position);\n      textRange.moveStart(\"character\", position);\n      textRange.select();\n    }\n  }\n  updateValueAndCursor(newRawValue, oldLength, selectionStart) {\n    this.rawValue = newRawValue;\n    let newLength = newRawValue.length;\n    selectionStart = selectionStart - (oldLength - newLength);\n    this.setCursorAt(selectionStart);\n  }\n  get canInputMoreNumbers() {\n    let onlyNumbers = this.rawValue.replace(/[^0-9\\u0660-\\u0669\\u06F0-\\u06F9]/g, \"\");\n    let haventReachedMaxLength = !(onlyNumbers.length >= this.htmlInputElement.maxLength && this.htmlInputElement.maxLength >= 0);\n    let selectionStart = this.inputSelection.selectionStart;\n    let selectionEnd = this.inputSelection.selectionEnd;\n    let haveNumberSelected = !!(selectionStart != selectionEnd && this.htmlInputElement.value.substring(selectionStart, selectionEnd).match(/[^0-9\\u0660-\\u0669\\u06F0-\\u06F9]/));\n    let startWithZero = this.htmlInputElement.value.substring(0, 1) == \"0\";\n    return haventReachedMaxLength || haveNumberSelected || startWithZero;\n  }\n  get inputSelection() {\n    let selectionStart = 0;\n    let selectionEnd = 0;\n    if (typeof this.htmlInputElement.selectionStart == \"number\" && typeof this.htmlInputElement.selectionEnd == \"number\") {\n      selectionStart = this.htmlInputElement.selectionStart;\n      selectionEnd = this.htmlInputElement.selectionEnd;\n    } else {\n      let range = document.selection.createRange();\n      if (range && range.parentElement() == this.htmlInputElement) {\n        let lenght = this.htmlInputElement.value.length;\n        let normalizedValue = this.htmlInputElement.value.replace(/\\r\\n/g, \"\\n\");\n        let startRange = this.htmlInputElement.createTextRange();\n        startRange.moveToBookmark(range.getBookmark());\n        let endRange = this.htmlInputElement.createTextRange();\n        endRange.collapse(false);\n        if (startRange.compareEndPoints(\"StartToEnd\", endRange) > -1) {\n          selectionStart = selectionEnd = lenght;\n        } else {\n          selectionStart = -startRange.moveStart(\"character\", -lenght);\n          selectionStart += normalizedValue.slice(0, selectionStart).split(\"\\n\").length - 1;\n          if (startRange.compareEndPoints(\"EndToEnd\", endRange) > -1) {\n            selectionEnd = lenght;\n          } else {\n            selectionEnd = -startRange.moveEnd(\"character\", -lenght);\n            selectionEnd += normalizedValue.slice(0, selectionEnd).split(\"\\n\").length - 1;\n          }\n        }\n      }\n    }\n    return {\n      selectionStart: selectionStart,\n      selectionEnd: selectionEnd\n    };\n  }\n  get rawValue() {\n    return this.htmlInputElement && this.htmlInputElement.value;\n  }\n  set rawValue(value) {\n    this._storedRawValue = value;\n    if (this.htmlInputElement) {\n      this.htmlInputElement.value = value;\n    }\n  }\n  get storedRawValue() {\n    return this._storedRawValue || '';\n  }\n}\nclass InputService {\n  constructor(htmlInputElement, options) {\n    this.htmlInputElement = htmlInputElement;\n    this.options = options;\n    this.SINGLE_DIGIT_REGEX = new RegExp(/^[0-9\\u0660-\\u0669\\u06F0-\\u06F9]$/);\n    this.ONLY_NUMBERS_REGEX = new RegExp(/[^0-9\\u0660-\\u0669\\u06F0-\\u06F9]/g);\n    this.PER_AR_NUMBER = new Map();\n    this.inputManager = new InputManager(htmlInputElement);\n    this.initialize();\n  }\n  initialize() {\n    this.PER_AR_NUMBER.set(\"\\u06F0\", \"0\");\n    this.PER_AR_NUMBER.set(\"\\u06F1\", \"1\");\n    this.PER_AR_NUMBER.set(\"\\u06F2\", \"2\");\n    this.PER_AR_NUMBER.set(\"\\u06F3\", \"3\");\n    this.PER_AR_NUMBER.set(\"\\u06F4\", \"4\");\n    this.PER_AR_NUMBER.set(\"\\u06F5\", \"5\");\n    this.PER_AR_NUMBER.set(\"\\u06F6\", \"6\");\n    this.PER_AR_NUMBER.set(\"\\u06F7\", \"7\");\n    this.PER_AR_NUMBER.set(\"\\u06F8\", \"8\");\n    this.PER_AR_NUMBER.set(\"\\u06F9\", \"9\");\n    this.PER_AR_NUMBER.set(\"\\u0660\", \"0\");\n    this.PER_AR_NUMBER.set(\"\\u0661\", \"1\");\n    this.PER_AR_NUMBER.set(\"\\u0662\", \"2\");\n    this.PER_AR_NUMBER.set(\"\\u0663\", \"3\");\n    this.PER_AR_NUMBER.set(\"\\u0664\", \"4\");\n    this.PER_AR_NUMBER.set(\"\\u0665\", \"5\");\n    this.PER_AR_NUMBER.set(\"\\u0666\", \"6\");\n    this.PER_AR_NUMBER.set(\"\\u0667\", \"7\");\n    this.PER_AR_NUMBER.set(\"\\u0668\", \"8\");\n    this.PER_AR_NUMBER.set(\"\\u0669\", \"9\");\n  }\n  addNumber(keyCode) {\n    const {\n      decimal,\n      precision,\n      inputMode\n    } = this.options;\n    let keyChar = String.fromCharCode(keyCode);\n    const isDecimalChar = keyChar === this.options.decimal;\n    if (!this.rawValue) {\n      this.rawValue = this.applyMask(false, keyChar);\n      let selectionStart = undefined;\n      if (inputMode === CurrencyMaskInputMode.NATURAL && precision > 0) {\n        selectionStart = this.rawValue.indexOf(decimal);\n        if (isDecimalChar) {\n          selectionStart++;\n        }\n      }\n      this.updateFieldValue(selectionStart);\n    } else {\n      let selectionStart = this.inputSelection.selectionStart;\n      let selectionEnd = this.inputSelection.selectionEnd;\n      const rawValueStart = this.rawValue.substring(0, selectionStart);\n      let rawValueEnd = this.rawValue.substring(selectionEnd, this.rawValue.length);\n      // In natural mode, replace decimals instead of shifting them.\n      const inDecimalPortion = rawValueStart.indexOf(decimal) !== -1;\n      if (inputMode === CurrencyMaskInputMode.NATURAL && inDecimalPortion && selectionStart === selectionEnd) {\n        rawValueEnd = rawValueEnd.substring(1);\n      }\n      const newValue = rawValueStart + keyChar + rawValueEnd;\n      let nextSelectionStart = selectionStart + 1;\n      const isDecimalOrThousands = isDecimalChar || keyChar === this.options.thousands;\n      if (isDecimalOrThousands && keyChar === rawValueEnd[0]) {\n        // If the cursor is just before the decimal or thousands separator and the user types the\n        // decimal or thousands separator, move the cursor past it.\n        nextSelectionStart++;\n      } else if (!this.SINGLE_DIGIT_REGEX.test(keyChar)) {\n        // Ignore other non-numbers.\n        return;\n      }\n      this.rawValue = newValue;\n      this.updateFieldValue(nextSelectionStart);\n    }\n  }\n  applyMask(isNumber, rawValue, disablePadAndTrim = false) {\n    let {\n      allowNegative,\n      decimal,\n      precision,\n      prefix,\n      suffix,\n      thousands,\n      min,\n      max,\n      inputMode\n    } = this.options;\n    rawValue = isNumber ? new Number(rawValue).toFixed(precision) : rawValue;\n    let onlyNumbers = rawValue.replace(this.ONLY_NUMBERS_REGEX, \"\");\n    if (!onlyNumbers && rawValue !== decimal) {\n      return \"\";\n    }\n    if (inputMode === CurrencyMaskInputMode.NATURAL && !isNumber && !disablePadAndTrim) {\n      rawValue = this.padOrTrimPrecision(rawValue);\n      onlyNumbers = rawValue.replace(this.ONLY_NUMBERS_REGEX, \"\");\n    }\n    let integerPart = onlyNumbers.slice(0, onlyNumbers.length - precision).replace(/^\\u0660*/g, \"\").replace(/^\\u06F0*/g, \"\").replace(/^0*/g, \"\");\n    if (integerPart == \"\") {\n      integerPart = \"0\";\n    }\n    let integerValue = parseInt(integerPart);\n    integerPart = integerPart.replace(/\\B(?=([0-9\\u0660-\\u0669\\u06F0-\\u06F9]{3})+(?![0-9\\u0660-\\u0669\\u06F0-\\u06F9]))/g, thousands);\n    if (thousands && integerPart.startsWith(thousands)) {\n      integerPart = integerPart.substring(1);\n    }\n    let newRawValue = integerPart;\n    let decimalPart = onlyNumbers.slice(onlyNumbers.length - precision);\n    let decimalValue = parseInt(decimalPart) || 0;\n    let isNegative = rawValue.indexOf(\"-\") > -1;\n    // Ensure max is at least as large as min.\n    max = this.isNullOrUndefined(max) || this.isNullOrUndefined(min) ? max : Math.max(max, min);\n    // Ensure precision number works well with more than 2 digits\n    // 23 / 100... 233 / 1000 and so on\n    const divideBy = Number('1'.padEnd(precision + 1, '0'));\n    // Restrict to the min and max values.\n    let newValue = integerValue + decimalValue / divideBy;\n    newValue = isNegative ? -newValue : newValue;\n    if (!this.isNullOrUndefined(max) && newValue > max) {\n      return this.applyMask(true, max + '');\n    } else if (!this.isNullOrUndefined(min) && newValue < min) {\n      return this.applyMask(true, min + '');\n    }\n    if (precision > 0) {\n      if (newRawValue == \"0\" && decimalPart.length < precision) {\n        newRawValue += decimal + \"0\".repeat(precision - 1) + decimalPart;\n      } else {\n        newRawValue += decimal + decimalPart;\n      }\n    }\n    let isZero = newValue == 0;\n    let operator = isNegative && allowNegative && !isZero ? \"-\" : \"\";\n    return operator + prefix + newRawValue + suffix;\n  }\n  padOrTrimPrecision(rawValue) {\n    let {\n      decimal,\n      precision\n    } = this.options;\n    let decimalIndex = rawValue.lastIndexOf(decimal);\n    if (decimalIndex === -1) {\n      decimalIndex = rawValue.length;\n      rawValue += decimal;\n    }\n    let decimalPortion = rawValue.substring(decimalIndex).replace(this.ONLY_NUMBERS_REGEX, \"\");\n    const actualPrecision = decimalPortion.length;\n    if (actualPrecision < precision) {\n      for (let i = actualPrecision; i < precision; i++) {\n        decimalPortion += '0';\n      }\n    } else if (actualPrecision > precision) {\n      decimalPortion = decimalPortion.substring(0, decimalPortion.length + precision - actualPrecision);\n    }\n    return rawValue.substring(0, decimalIndex) + decimal + decimalPortion;\n  }\n  clearMask(rawValue) {\n    if (this.isNullable() && rawValue === \"\") return null;\n    let value = (rawValue || \"0\").replace(this.options.prefix, \"\").replace(this.options.suffix, \"\");\n    if (this.options.thousands) {\n      value = value.replace(new RegExp(\"\\\\\" + this.options.thousands, \"g\"), \"\");\n    }\n    if (this.options.decimal) {\n      value = value.replace(this.options.decimal, \".\");\n    }\n    this.PER_AR_NUMBER.forEach((val, key) => {\n      const re = new RegExp(key, \"g\");\n      value = value.replace(re, val);\n    });\n    return parseFloat(value);\n  }\n  changeToNegative() {\n    if (this.options.allowNegative && this.rawValue != \"\" && this.rawValue.charAt(0) != \"-\" && this.value != 0) {\n      // Apply the mask to ensure the min and max values are enforced.\n      this.rawValue = this.applyMask(false, \"-\" + this.rawValue);\n    }\n  }\n  changeToPositive() {\n    // Apply the mask to ensure the min and max values are enforced.\n    this.rawValue = this.applyMask(false, this.rawValue.replace(\"-\", \"\"));\n  }\n  removeNumber(keyCode) {\n    let {\n      decimal,\n      thousands,\n      prefix,\n      suffix,\n      inputMode\n    } = this.options;\n    if (this.isNullable() && this.value == 0) {\n      this.rawValue = null;\n      return;\n    }\n    let selectionEnd = this.inputSelection.selectionEnd;\n    let selectionStart = this.inputSelection.selectionStart;\n    const suffixStart = this.rawValue.length - suffix.length;\n    selectionEnd = Math.min(suffixStart, Math.max(selectionEnd, prefix.length));\n    selectionStart = Math.min(suffixStart, Math.max(selectionStart, prefix.length));\n    // Check if selection was entirely in the prefix or suffix. \n    if (selectionStart === selectionEnd && this.inputSelection.selectionStart !== this.inputSelection.selectionEnd) {\n      this.updateFieldValue(selectionStart);\n      return;\n    }\n    let decimalIndex = this.rawValue.indexOf(decimal);\n    if (decimalIndex === -1) {\n      decimalIndex = this.rawValue.length;\n    }\n    let shiftSelection = 0;\n    let insertChars = '';\n    const isCursorInDecimals = decimalIndex < selectionEnd;\n    const isCursorImmediatelyAfterDecimalPoint = decimalIndex + 1 === selectionEnd;\n    if (selectionEnd === selectionStart) {\n      if (keyCode == 8) {\n        if (selectionStart <= prefix.length) {\n          return;\n        }\n        selectionStart--;\n        // If previous char isn't a number, go back one more.\n        if (!this.rawValue.substr(selectionStart, 1).match(/\\d/)) {\n          selectionStart--;\n        }\n        // In natural mode, jump backwards when in decimal portion of number.\n        if (inputMode === CurrencyMaskInputMode.NATURAL && isCursorInDecimals) {\n          shiftSelection = -1;\n          // when removing a single whole number, replace it with 0\n          if (isCursorImmediatelyAfterDecimalPoint && this.value < 10 && this.value > -10) {\n            insertChars += '0';\n          }\n        }\n      } else if (keyCode == 46 || keyCode == 63272) {\n        if (selectionStart === suffixStart) {\n          return;\n        }\n        selectionEnd++;\n        // If next char isn't a number, go one more.\n        if (!this.rawValue.substr(selectionStart, 1).match(/\\d/)) {\n          selectionStart++;\n          selectionEnd++;\n        }\n      }\n    }\n    // In natural mode, replace decimals with 0s.\n    if (inputMode === CurrencyMaskInputMode.NATURAL && selectionStart > decimalIndex) {\n      const replacedDecimalCount = selectionEnd - selectionStart;\n      for (let i = 0; i < replacedDecimalCount; i++) {\n        insertChars += '0';\n      }\n    }\n    let selectionFromEnd = this.rawValue.length - selectionEnd;\n    this.rawValue = this.rawValue.substring(0, selectionStart) + insertChars + this.rawValue.substring(selectionEnd);\n    // Remove leading thousand separator from raw value.\n    const startChar = this.rawValue.substr(prefix.length, 1);\n    if (startChar === thousands) {\n      this.rawValue = this.rawValue.substring(0, prefix.length) + this.rawValue.substring(prefix.length + 1);\n      selectionFromEnd = Math.min(selectionFromEnd, this.rawValue.length - prefix.length);\n    }\n    this.updateFieldValue(this.rawValue.length - selectionFromEnd + shiftSelection, true);\n  }\n  updateFieldValue(selectionStart, disablePadAndTrim = false) {\n    let newRawValue = this.applyMask(false, this.rawValue || \"\", disablePadAndTrim);\n    selectionStart = selectionStart == undefined ? this.rawValue.length : selectionStart;\n    selectionStart = Math.max(this.options.prefix.length, Math.min(selectionStart, this.rawValue.length - this.options.suffix.length));\n    this.inputManager.updateValueAndCursor(newRawValue, this.rawValue.length, selectionStart);\n  }\n  updateOptions(options) {\n    let value = this.value;\n    this.options = options;\n    this.value = value;\n  }\n  prefixLength() {\n    return this.options.prefix.length;\n  }\n  suffixLength() {\n    return this.options.suffix.length;\n  }\n  isNullable() {\n    return this.options.nullable;\n  }\n  get canInputMoreNumbers() {\n    return this.inputManager.canInputMoreNumbers;\n  }\n  get inputSelection() {\n    return this.inputManager.inputSelection;\n  }\n  get rawValue() {\n    return this.inputManager.rawValue;\n  }\n  set rawValue(value) {\n    this.inputManager.rawValue = value;\n  }\n  get storedRawValue() {\n    return this.inputManager.storedRawValue;\n  }\n  get value() {\n    return this.clearMask(this.rawValue);\n  }\n  set value(value) {\n    this.rawValue = this.applyMask(true, \"\" + value);\n  }\n  isNullOrUndefined(value) {\n    return value === null || value === undefined;\n  }\n}\nclass InputHandler {\n  constructor(htmlInputElement, options) {\n    this.inputService = new InputService(htmlInputElement, options);\n  }\n  handleCut(event) {\n    setTimeout(() => {\n      this.inputService.updateFieldValue();\n      this.setValue(this.inputService.value);\n      this.onModelChange(this.inputService.value);\n    }, 0);\n  }\n  handleInput(event) {\n    let selectionStart = this.inputService.inputSelection.selectionStart;\n    let keyCode = this.inputService.rawValue.charCodeAt(selectionStart - 1);\n    let rawValueLength = this.inputService.rawValue.length;\n    let storedRawValueLength = this.inputService.storedRawValue.length;\n    if (Math.abs(rawValueLength - storedRawValueLength) != 1) {\n      this.inputService.updateFieldValue(selectionStart);\n      this.onModelChange(this.inputService.value);\n      return;\n    }\n    // Restore the old value.\n    this.inputService.rawValue = this.inputService.storedRawValue;\n    if (rawValueLength < storedRawValueLength) {\n      // Chrome Android seems to move the cursor in response to a backspace AFTER processing the\n      // input event, so we need to wrap this in a timeout.\n      this.timer(() => {\n        // Move the cursor to just after the deleted value.\n        this.inputService.updateFieldValue(selectionStart + 1);\n        // Then backspace it.\n        this.inputService.removeNumber(8);\n        this.onModelChange(this.inputService.value);\n      }, 0);\n    }\n    if (rawValueLength > storedRawValueLength) {\n      // Move the cursor to just before the new value.\n      this.inputService.updateFieldValue(selectionStart - 1);\n      // Process the character like a keypress.\n      this.handleKeypressImpl(keyCode);\n    }\n  }\n  handleKeydown(event) {\n    let keyCode = event.which || event.charCode || event.keyCode;\n    if (keyCode == 8 || keyCode == 46 || keyCode == 63272) {\n      event.preventDefault();\n      if (this.inputService.inputSelection.selectionStart <= this.inputService.prefixLength() && this.inputService.inputSelection.selectionEnd >= this.inputService.rawValue.length - this.inputService.suffixLength()) {\n        this.clearValue();\n      } else {\n        this.inputService.removeNumber(keyCode);\n        this.onModelChange(this.inputService.value);\n      }\n    }\n  }\n  clearValue() {\n    this.setValue(this.inputService.isNullable() ? null : 0);\n    this.onModelChange(this.inputService.value);\n  }\n  handleKeypress(event) {\n    let keyCode = event.which || event.charCode || event.keyCode;\n    event.preventDefault();\n    if (keyCode === 97 && event.ctrlKey) {\n      return;\n    }\n    this.handleKeypressImpl(keyCode);\n  }\n  handleKeypressImpl(keyCode) {\n    switch (keyCode) {\n      case undefined:\n      case 9:\n      case 13:\n        return;\n      case 43:\n        this.inputService.changeToPositive();\n        break;\n      case 45:\n        this.inputService.changeToNegative();\n        break;\n      default:\n        if (this.inputService.canInputMoreNumbers) {\n          let selectionRangeLength = Math.abs(this.inputService.inputSelection.selectionEnd - this.inputService.inputSelection.selectionStart);\n          if (selectionRangeLength == this.inputService.rawValue.length) {\n            this.setValue(null);\n          }\n          this.inputService.addNumber(keyCode);\n        }\n        break;\n    }\n    this.onModelChange(this.inputService.value);\n  }\n  handlePaste(event) {\n    setTimeout(() => {\n      this.inputService.updateFieldValue();\n      this.setValue(this.inputService.value);\n      this.onModelChange(this.inputService.value);\n    }, 1);\n  }\n  updateOptions(options) {\n    this.inputService.updateOptions(options);\n  }\n  getOnModelChange() {\n    return this.onModelChange;\n  }\n  setOnModelChange(callbackFunction) {\n    this.onModelChange = callbackFunction;\n  }\n  getOnModelTouched() {\n    return this.onModelTouched;\n  }\n  setOnModelTouched(callbackFunction) {\n    this.onModelTouched = callbackFunction;\n  }\n  setValue(value) {\n    this.inputService.value = value;\n  }\n  /**\n   * Passthrough to setTimeout that can be stubbed out in tests.\n   */\n  timer(callback, delayMillis) {\n    setTimeout(callback, delayMillis);\n  }\n}\nconst CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => CurrencyMaskDirective),\n  multi: true\n};\nclass CurrencyMaskDirective {\n  constructor(currencyMaskConfig, elementRef, keyValueDiffers) {\n    this.currencyMaskConfig = currencyMaskConfig;\n    this.elementRef = elementRef;\n    this.keyValueDiffers = keyValueDiffers;\n    this.options = {};\n    this.optionsTemplate = {\n      align: \"right\",\n      allowNegative: true,\n      allowZero: true,\n      decimal: \".\",\n      precision: 2,\n      prefix: \"$ \",\n      suffix: \"\",\n      thousands: \",\",\n      nullable: false,\n      inputMode: CurrencyMaskInputMode.FINANCIAL\n    };\n    if (currencyMaskConfig) {\n      this.optionsTemplate = currencyMaskConfig;\n    }\n    this.keyValueDiffer = keyValueDiffers.find({}).create();\n  }\n  ngAfterViewInit() {\n    this.elementRef.nativeElement.style.textAlign = this.options && this.options.align ? this.options.align : this.optionsTemplate.align;\n  }\n  ngDoCheck() {\n    if (this.keyValueDiffer.diff(this.options)) {\n      this.elementRef.nativeElement.style.textAlign = this.options.align ? this.options.align : this.optionsTemplate.align;\n      this.inputHandler.updateOptions(Object.assign({}, this.optionsTemplate, this.options));\n    }\n  }\n  ngOnInit() {\n    this.inputHandler = new InputHandler(this.elementRef.nativeElement, Object.assign({}, this.optionsTemplate, this.options));\n  }\n  handleBlur(event) {\n    this.inputHandler.getOnModelTouched().apply(event);\n  }\n  handleCut(event) {\n    if (!this.isChromeAndroid()) {\n      !this.isReadOnly() && this.inputHandler.handleCut(event);\n    }\n  }\n  handleInput(event) {\n    if (this.isChromeAndroid()) {\n      !this.isReadOnly() && this.inputHandler.handleInput(event);\n    }\n  }\n  handleKeydown(event) {\n    if (!this.isChromeAndroid()) {\n      !this.isReadOnly() && this.inputHandler.handleKeydown(event);\n    }\n  }\n  handleKeypress(event) {\n    if (!this.isChromeAndroid()) {\n      !this.isReadOnly() && this.inputHandler.handleKeypress(event);\n    }\n  }\n  handlePaste(event) {\n    if (!this.isChromeAndroid()) {\n      !this.isReadOnly() && this.inputHandler.handlePaste(event);\n    }\n  }\n  handleDrop(event) {\n    if (!this.isChromeAndroid()) {\n      event.preventDefault();\n    }\n  }\n  isChromeAndroid() {\n    return /chrome/i.test(navigator.userAgent) && /android/i.test(navigator.userAgent);\n  }\n  isReadOnly() {\n    return this.elementRef.nativeElement.hasAttribute('readonly');\n  }\n  registerOnChange(callbackFunction) {\n    this.inputHandler.setOnModelChange(callbackFunction);\n  }\n  registerOnTouched(callbackFunction) {\n    this.inputHandler.setOnModelTouched(callbackFunction);\n  }\n  setDisabledState(value) {\n    this.elementRef.nativeElement.disabled = value;\n  }\n  writeValue(value) {\n    this.inputHandler.setValue(value);\n  }\n}\nCurrencyMaskDirective.Éµfac = function CurrencyMaskDirective_Factory(t) {\n  return new (t || CurrencyMaskDirective)(Éµngcc0.ÉµÉµdirectiveInject(CURRENCY_MASK_CONFIG, 8), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ElementRef), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.KeyValueDiffers));\n};\nCurrencyMaskDirective.Éµdir = /*@__PURE__*/Éµngcc0.ÉµÉµdefineDirective({\n  type: CurrencyMaskDirective,\n  selectors: [[\"\", \"currencyMask\", \"\"]],\n  hostBindings: function CurrencyMaskDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      Éµngcc0.ÉµÉµlistener(\"blur\", function CurrencyMaskDirective_blur_HostBindingHandler($event) {\n        return ctx.handleBlur($event);\n      })(\"cut\", function CurrencyMaskDirective_cut_HostBindingHandler($event) {\n        return ctx.handleCut($event);\n      })(\"input\", function CurrencyMaskDirective_input_HostBindingHandler($event) {\n        return ctx.handleInput($event);\n      })(\"keydown\", function CurrencyMaskDirective_keydown_HostBindingHandler($event) {\n        return ctx.handleKeydown($event);\n      })(\"keypress\", function CurrencyMaskDirective_keypress_HostBindingHandler($event) {\n        return ctx.handleKeypress($event);\n      })(\"paste\", function CurrencyMaskDirective_paste_HostBindingHandler($event) {\n        return ctx.handlePaste($event);\n      })(\"drop\", function CurrencyMaskDirective_drop_HostBindingHandler($event) {\n        return ctx.handleDrop($event);\n      });\n    }\n  },\n  inputs: {\n    options: \"options\"\n  },\n  features: [Éµngcc0.ÉµÉµProvidersFeature([CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR])]\n});\nCurrencyMaskDirective.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [CURRENCY_MASK_CONFIG]\n  }]\n}, {\n  type: ElementRef\n}, {\n  type: KeyValueDiffers\n}];\nCurrencyMaskDirective.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [CURRENCY_MASK_CONFIG]\n  }]\n}, {\n  type: ElementRef\n}, {\n  type: KeyValueDiffers\n}];\nCurrencyMaskDirective.propDecorators = {\n  options: [{\n    type: Input\n  }],\n  handleBlur: [{\n    type: HostListener,\n    args: [\"blur\", [\"$event\"]]\n  }],\n  handleCut: [{\n    type: HostListener,\n    args: [\"cut\", [\"$event\"]]\n  }],\n  handleInput: [{\n    type: HostListener,\n    args: [\"input\", [\"$event\"]]\n  }],\n  handleKeydown: [{\n    type: HostListener,\n    args: [\"keydown\", [\"$event\"]]\n  }],\n  handleKeypress: [{\n    type: HostListener,\n    args: [\"keypress\", [\"$event\"]]\n  }],\n  handlePaste: [{\n    type: HostListener,\n    args: [\"paste\", [\"$event\"]]\n  }],\n  handleDrop: [{\n    type: HostListener,\n    args: [\"drop\", [\"$event\"]]\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(CurrencyMaskDirective, [{\n    type: Directive,\n    args: [{\n      selector: \"[currencyMask]\",\n      providers: [CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [CURRENCY_MASK_CONFIG]\n      }]\n    }, {\n      type: Éµngcc0.ElementRef\n    }, {\n      type: Éµngcc0.KeyValueDiffers\n    }];\n  }, {\n    options: [{\n      type: Input\n    }],\n    handleBlur: [{\n      type: HostListener,\n      args: [\"blur\", [\"$event\"]]\n    }],\n    handleCut: [{\n      type: HostListener,\n      args: [\"cut\", [\"$event\"]]\n    }],\n    handleInput: [{\n      type: HostListener,\n      args: [\"input\", [\"$event\"]]\n    }],\n    handleKeydown: [{\n      type: HostListener,\n      args: [\"keydown\", [\"$event\"]]\n    }],\n    handleKeypress: [{\n      type: HostListener,\n      args: [\"keypress\", [\"$event\"]]\n    }],\n    handlePaste: [{\n      type: HostListener,\n      args: [\"paste\", [\"$event\"]]\n    }],\n    handleDrop: [{\n      type: HostListener,\n      args: [\"drop\", [\"$event\"]]\n    }]\n  });\n})();\nclass NgxCurrencyModule {\n  static forRoot(config) {\n    return {\n      ngModule: NgxCurrencyModule,\n      providers: [{\n        provide: CURRENCY_MASK_CONFIG,\n        useValue: config\n      }]\n    };\n  }\n}\nNgxCurrencyModule.Éµfac = function NgxCurrencyModule_Factory(t) {\n  return new (t || NgxCurrencyModule)();\n};\nNgxCurrencyModule.Éµmod = /*@__PURE__*/Éµngcc0.ÉµÉµdefineNgModule({\n  type: NgxCurrencyModule\n});\nNgxCurrencyModule.Éµinj = /*@__PURE__*/Éµngcc0.ÉµÉµdefineInjector({\n  imports: [CommonModule, FormsModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(NgxCurrencyModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, FormsModule],\n      declarations: [CurrencyMaskDirective],\n      exports: [CurrencyMaskDirective]\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(NgxCurrencyModule, {\n    declarations: function () {\n      return [CurrencyMaskDirective];\n    },\n    imports: function () {\n      return [CommonModule, FormsModule];\n    },\n    exports: function () {\n      return [CurrencyMaskDirective];\n    }\n  });\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR, CURRENCY_MASK_CONFIG, CurrencyMaskDirective, CurrencyMaskInputMode, NgxCurrencyModule };","map":{"version":3,"names":["InjectionToken","forwardRef","Optional","Inject","ElementRef","KeyValueDiffers","Directive","Input","HostListener","NgModule","NG_VALUE_ACCESSOR","FormsModule","CommonModule","Éµngcc0","CurrencyMaskInputMode","CURRENCY_MASK_CONFIG","InputManager","constructor","htmlInputElement","setCursorAt","position","setSelectionRange","focus","createTextRange","textRange","collapse","moveEnd","moveStart","select","updateValueAndCursor","newRawValue","oldLength","selectionStart","rawValue","newLength","length","canInputMoreNumbers","onlyNumbers","replace","haventReachedMaxLength","maxLength","inputSelection","selectionEnd","haveNumberSelected","value","substring","match","startWithZero","range","document","selection","createRange","parentElement","lenght","normalizedValue","startRange","moveToBookmark","getBookmark","endRange","compareEndPoints","slice","split","_storedRawValue","storedRawValue","InputService","options","SINGLE_DIGIT_REGEX","RegExp","ONLY_NUMBERS_REGEX","PER_AR_NUMBER","Map","inputManager","initialize","set","addNumber","keyCode","decimal","precision","inputMode","keyChar","String","fromCharCode","isDecimalChar","applyMask","undefined","NATURAL","indexOf","updateFieldValue","rawValueStart","rawValueEnd","inDecimalPortion","newValue","nextSelectionStart","isDecimalOrThousands","thousands","test","isNumber","disablePadAndTrim","allowNegative","prefix","suffix","min","max","Number","toFixed","padOrTrimPrecision","integerPart","integerValue","parseInt","startsWith","decimalPart","decimalValue","isNegative","isNullOrUndefined","Math","divideBy","padEnd","repeat","isZero","operator","decimalIndex","lastIndexOf","decimalPortion","actualPrecision","i","clearMask","isNullable","forEach","val","key","re","parseFloat","changeToNegative","charAt","changeToPositive","removeNumber","suffixStart","shiftSelection","insertChars","isCursorInDecimals","isCursorImmediatelyAfterDecimalPoint","substr","replacedDecimalCount","selectionFromEnd","startChar","updateOptions","prefixLength","suffixLength","nullable","InputHandler","inputService","handleCut","event","setTimeout","setValue","onModelChange","handleInput","charCodeAt","rawValueLength","storedRawValueLength","abs","timer","handleKeypressImpl","handleKeydown","which","charCode","preventDefault","clearValue","handleKeypress","ctrlKey","selectionRangeLength","handlePaste","getOnModelChange","setOnModelChange","callbackFunction","getOnModelTouched","onModelTouched","setOnModelTouched","callback","delayMillis","CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR","provide","useExisting","CurrencyMaskDirective","multi","currencyMaskConfig","elementRef","keyValueDiffers","optionsTemplate","align","allowZero","FINANCIAL","keyValueDiffer","find","create","ngAfterViewInit","nativeElement","style","textAlign","ngDoCheck","diff","inputHandler","Object","assign","ngOnInit","handleBlur","apply","isChromeAndroid","isReadOnly","handleDrop","navigator","userAgent","hasAttribute","registerOnChange","registerOnTouched","setDisabledState","disabled","writeValue","Éµfac","CurrencyMaskDirective_Factory","t","ÉµÉµdirectiveInject","Éµdir","ÉµÉµdefineDirective","type","selectors","hostBindings","CurrencyMaskDirective_HostBindings","rf","ctx","ÉµÉµlistener","CurrencyMaskDirective_blur_HostBindingHandler","$event","CurrencyMaskDirective_cut_HostBindingHandler","CurrencyMaskDirective_input_HostBindingHandler","CurrencyMaskDirective_keydown_HostBindingHandler","CurrencyMaskDirective_keypress_HostBindingHandler","CurrencyMaskDirective_paste_HostBindingHandler","CurrencyMaskDirective_drop_HostBindingHandler","inputs","features","ÉµÉµProvidersFeature","ctorParameters","decorators","args","propDecorators","ngDevMode","ÉµsetClassMetadata","selector","providers","NgxCurrencyModule","forRoot","config","ngModule","useValue","NgxCurrencyModule_Factory","Éµmod","ÉµÉµdefineNgModule","Éµinj","ÉµÉµdefineInjector","imports","declarations","exports","ngJitMode","ÉµÉµsetNgModuleScope"],"sources":["/home/ceo/mmmm/createyourevent/node_modules/ngx-currency/__ivy_ngcc__/fesm2015/ngx-currency.js"],"sourcesContent":["import { InjectionToken, forwardRef, Optional, Inject, ElementRef, KeyValueDiffers, Directive, Input, HostListener, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nimport * as Éµngcc0 from '@angular/core';\nvar CurrencyMaskInputMode;\n(function (CurrencyMaskInputMode) {\n    CurrencyMaskInputMode[CurrencyMaskInputMode[\"FINANCIAL\"] = 0] = \"FINANCIAL\";\n    CurrencyMaskInputMode[CurrencyMaskInputMode[\"NATURAL\"] = 1] = \"NATURAL\";\n})(CurrencyMaskInputMode || (CurrencyMaskInputMode = {}));\nlet CURRENCY_MASK_CONFIG = new InjectionToken(\"currency.mask.config\");\n\nclass InputManager {\n    constructor(htmlInputElement) {\n        this.htmlInputElement = htmlInputElement;\n    }\n    setCursorAt(position) {\n        if (this.htmlInputElement.setSelectionRange) {\n            this.htmlInputElement.focus();\n            this.htmlInputElement.setSelectionRange(position, position);\n        }\n        else if (this.htmlInputElement.createTextRange) {\n            let textRange = this.htmlInputElement.createTextRange();\n            textRange.collapse(true);\n            textRange.moveEnd(\"character\", position);\n            textRange.moveStart(\"character\", position);\n            textRange.select();\n        }\n    }\n    updateValueAndCursor(newRawValue, oldLength, selectionStart) {\n        this.rawValue = newRawValue;\n        let newLength = newRawValue.length;\n        selectionStart = selectionStart - (oldLength - newLength);\n        this.setCursorAt(selectionStart);\n    }\n    get canInputMoreNumbers() {\n        let onlyNumbers = this.rawValue.replace(/[^0-9\\u0660-\\u0669\\u06F0-\\u06F9]/g, \"\");\n        let haventReachedMaxLength = !(onlyNumbers.length >= this.htmlInputElement.maxLength && this.htmlInputElement.maxLength >= 0);\n        let selectionStart = this.inputSelection.selectionStart;\n        let selectionEnd = this.inputSelection.selectionEnd;\n        let haveNumberSelected = !!(selectionStart != selectionEnd &&\n            this.htmlInputElement.value.substring(selectionStart, selectionEnd).match(/[^0-9\\u0660-\\u0669\\u06F0-\\u06F9]/));\n        let startWithZero = (this.htmlInputElement.value.substring(0, 1) == \"0\");\n        return haventReachedMaxLength || haveNumberSelected || startWithZero;\n    }\n    get inputSelection() {\n        let selectionStart = 0;\n        let selectionEnd = 0;\n        if (typeof this.htmlInputElement.selectionStart == \"number\" && typeof this.htmlInputElement.selectionEnd == \"number\") {\n            selectionStart = this.htmlInputElement.selectionStart;\n            selectionEnd = this.htmlInputElement.selectionEnd;\n        }\n        else {\n            let range = document.selection.createRange();\n            if (range && range.parentElement() == this.htmlInputElement) {\n                let lenght = this.htmlInputElement.value.length;\n                let normalizedValue = this.htmlInputElement.value.replace(/\\r\\n/g, \"\\n\");\n                let startRange = this.htmlInputElement.createTextRange();\n                startRange.moveToBookmark(range.getBookmark());\n                let endRange = this.htmlInputElement.createTextRange();\n                endRange.collapse(false);\n                if (startRange.compareEndPoints(\"StartToEnd\", endRange) > -1) {\n                    selectionStart = selectionEnd = lenght;\n                }\n                else {\n                    selectionStart = -startRange.moveStart(\"character\", -lenght);\n                    selectionStart += normalizedValue.slice(0, selectionStart).split(\"\\n\").length - 1;\n                    if (startRange.compareEndPoints(\"EndToEnd\", endRange) > -1) {\n                        selectionEnd = lenght;\n                    }\n                    else {\n                        selectionEnd = -startRange.moveEnd(\"character\", -lenght);\n                        selectionEnd += normalizedValue.slice(0, selectionEnd).split(\"\\n\").length - 1;\n                    }\n                }\n            }\n        }\n        return {\n            selectionStart: selectionStart,\n            selectionEnd: selectionEnd\n        };\n    }\n    get rawValue() {\n        return this.htmlInputElement && this.htmlInputElement.value;\n    }\n    set rawValue(value) {\n        this._storedRawValue = value;\n        if (this.htmlInputElement) {\n            this.htmlInputElement.value = value;\n        }\n    }\n    get storedRawValue() {\n        return this._storedRawValue || '';\n    }\n}\n\nclass InputService {\n    constructor(htmlInputElement, options) {\n        this.htmlInputElement = htmlInputElement;\n        this.options = options;\n        this.SINGLE_DIGIT_REGEX = new RegExp(/^[0-9\\u0660-\\u0669\\u06F0-\\u06F9]$/);\n        this.ONLY_NUMBERS_REGEX = new RegExp(/[^0-9\\u0660-\\u0669\\u06F0-\\u06F9]/g);\n        this.PER_AR_NUMBER = new Map();\n        this.inputManager = new InputManager(htmlInputElement);\n        this.initialize();\n    }\n    initialize() {\n        this.PER_AR_NUMBER.set(\"\\u06F0\", \"0\");\n        this.PER_AR_NUMBER.set(\"\\u06F1\", \"1\");\n        this.PER_AR_NUMBER.set(\"\\u06F2\", \"2\");\n        this.PER_AR_NUMBER.set(\"\\u06F3\", \"3\");\n        this.PER_AR_NUMBER.set(\"\\u06F4\", \"4\");\n        this.PER_AR_NUMBER.set(\"\\u06F5\", \"5\");\n        this.PER_AR_NUMBER.set(\"\\u06F6\", \"6\");\n        this.PER_AR_NUMBER.set(\"\\u06F7\", \"7\");\n        this.PER_AR_NUMBER.set(\"\\u06F8\", \"8\");\n        this.PER_AR_NUMBER.set(\"\\u06F9\", \"9\");\n        this.PER_AR_NUMBER.set(\"\\u0660\", \"0\");\n        this.PER_AR_NUMBER.set(\"\\u0661\", \"1\");\n        this.PER_AR_NUMBER.set(\"\\u0662\", \"2\");\n        this.PER_AR_NUMBER.set(\"\\u0663\", \"3\");\n        this.PER_AR_NUMBER.set(\"\\u0664\", \"4\");\n        this.PER_AR_NUMBER.set(\"\\u0665\", \"5\");\n        this.PER_AR_NUMBER.set(\"\\u0666\", \"6\");\n        this.PER_AR_NUMBER.set(\"\\u0667\", \"7\");\n        this.PER_AR_NUMBER.set(\"\\u0668\", \"8\");\n        this.PER_AR_NUMBER.set(\"\\u0669\", \"9\");\n    }\n    addNumber(keyCode) {\n        const { decimal, precision, inputMode } = this.options;\n        let keyChar = String.fromCharCode(keyCode);\n        const isDecimalChar = keyChar === this.options.decimal;\n        if (!this.rawValue) {\n            this.rawValue = this.applyMask(false, keyChar);\n            let selectionStart = undefined;\n            if (inputMode === CurrencyMaskInputMode.NATURAL && precision > 0) {\n                selectionStart = this.rawValue.indexOf(decimal);\n                if (isDecimalChar) {\n                    selectionStart++;\n                }\n            }\n            this.updateFieldValue(selectionStart);\n        }\n        else {\n            let selectionStart = this.inputSelection.selectionStart;\n            let selectionEnd = this.inputSelection.selectionEnd;\n            const rawValueStart = this.rawValue.substring(0, selectionStart);\n            let rawValueEnd = this.rawValue.substring(selectionEnd, this.rawValue.length);\n            // In natural mode, replace decimals instead of shifting them.\n            const inDecimalPortion = rawValueStart.indexOf(decimal) !== -1;\n            if (inputMode === CurrencyMaskInputMode.NATURAL && inDecimalPortion && selectionStart === selectionEnd) {\n                rawValueEnd = rawValueEnd.substring(1);\n            }\n            const newValue = rawValueStart + keyChar + rawValueEnd;\n            let nextSelectionStart = selectionStart + 1;\n            const isDecimalOrThousands = isDecimalChar || keyChar === this.options.thousands;\n            if (isDecimalOrThousands && keyChar === rawValueEnd[0]) {\n                // If the cursor is just before the decimal or thousands separator and the user types the\n                // decimal or thousands separator, move the cursor past it.\n                nextSelectionStart++;\n            }\n            else if (!this.SINGLE_DIGIT_REGEX.test(keyChar)) {\n                // Ignore other non-numbers.\n                return;\n            }\n            this.rawValue = newValue;\n            this.updateFieldValue(nextSelectionStart);\n        }\n    }\n    applyMask(isNumber, rawValue, disablePadAndTrim = false) {\n        let { allowNegative, decimal, precision, prefix, suffix, thousands, min, max, inputMode } = this.options;\n        rawValue = isNumber ? new Number(rawValue).toFixed(precision) : rawValue;\n        let onlyNumbers = rawValue.replace(this.ONLY_NUMBERS_REGEX, \"\");\n        if (!onlyNumbers && rawValue !== decimal) {\n            return \"\";\n        }\n        if (inputMode === CurrencyMaskInputMode.NATURAL && !isNumber && !disablePadAndTrim) {\n            rawValue = this.padOrTrimPrecision(rawValue);\n            onlyNumbers = rawValue.replace(this.ONLY_NUMBERS_REGEX, \"\");\n        }\n        let integerPart = onlyNumbers.slice(0, onlyNumbers.length - precision)\n            .replace(/^\\u0660*/g, \"\")\n            .replace(/^\\u06F0*/g, \"\")\n            .replace(/^0*/g, \"\");\n        if (integerPart == \"\") {\n            integerPart = \"0\";\n        }\n        let integerValue = parseInt(integerPart);\n        integerPart = integerPart.replace(/\\B(?=([0-9\\u0660-\\u0669\\u06F0-\\u06F9]{3})+(?![0-9\\u0660-\\u0669\\u06F0-\\u06F9]))/g, thousands);\n        if (thousands && integerPart.startsWith(thousands)) {\n            integerPart = integerPart.substring(1);\n        }\n        let newRawValue = integerPart;\n        let decimalPart = onlyNumbers.slice(onlyNumbers.length - precision);\n        let decimalValue = parseInt(decimalPart) || 0;\n        let isNegative = rawValue.indexOf(\"-\") > -1;\n        // Ensure max is at least as large as min.\n        max = (this.isNullOrUndefined(max) || this.isNullOrUndefined(min)) ? max : Math.max(max, min);\n        // Ensure precision number works well with more than 2 digits\n        // 23 / 100... 233 / 1000 and so on\n        const divideBy = Number('1'.padEnd(precision + 1, '0'));\n        // Restrict to the min and max values.\n        let newValue = integerValue + (decimalValue / divideBy);\n        newValue = isNegative ? -newValue : newValue;\n        if (!this.isNullOrUndefined(max) && newValue > max) {\n            return this.applyMask(true, max + '');\n        }\n        else if (!this.isNullOrUndefined(min) && newValue < min) {\n            return this.applyMask(true, min + '');\n        }\n        if (precision > 0) {\n            if (newRawValue == \"0\" && decimalPart.length < precision) {\n                newRawValue += decimal + \"0\".repeat(precision - 1) + decimalPart;\n            }\n            else {\n                newRawValue += decimal + decimalPart;\n            }\n        }\n        let isZero = newValue == 0;\n        let operator = (isNegative && allowNegative && !isZero) ? \"-\" : \"\";\n        return operator + prefix + newRawValue + suffix;\n    }\n    padOrTrimPrecision(rawValue) {\n        let { decimal, precision } = this.options;\n        let decimalIndex = rawValue.lastIndexOf(decimal);\n        if (decimalIndex === -1) {\n            decimalIndex = rawValue.length;\n            rawValue += decimal;\n        }\n        let decimalPortion = rawValue.substring(decimalIndex).replace(this.ONLY_NUMBERS_REGEX, \"\");\n        const actualPrecision = decimalPortion.length;\n        if (actualPrecision < precision) {\n            for (let i = actualPrecision; i < precision; i++) {\n                decimalPortion += '0';\n            }\n        }\n        else if (actualPrecision > precision) {\n            decimalPortion = decimalPortion.substring(0, decimalPortion.length + precision - actualPrecision);\n        }\n        return rawValue.substring(0, decimalIndex) + decimal + decimalPortion;\n    }\n    clearMask(rawValue) {\n        if (this.isNullable() && rawValue === \"\")\n            return null;\n        let value = (rawValue || \"0\").replace(this.options.prefix, \"\").replace(this.options.suffix, \"\");\n        if (this.options.thousands) {\n            value = value.replace(new RegExp(\"\\\\\" + this.options.thousands, \"g\"), \"\");\n        }\n        if (this.options.decimal) {\n            value = value.replace(this.options.decimal, \".\");\n        }\n        this.PER_AR_NUMBER.forEach((val, key) => {\n            const re = new RegExp(key, \"g\");\n            value = value.replace(re, val);\n        });\n        return parseFloat(value);\n    }\n    changeToNegative() {\n        if (this.options.allowNegative && this.rawValue != \"\" && this.rawValue.charAt(0) != \"-\" && this.value != 0) {\n            // Apply the mask to ensure the min and max values are enforced.\n            this.rawValue = this.applyMask(false, \"-\" + this.rawValue);\n        }\n    }\n    changeToPositive() {\n        // Apply the mask to ensure the min and max values are enforced.\n        this.rawValue = this.applyMask(false, this.rawValue.replace(\"-\", \"\"));\n    }\n    removeNumber(keyCode) {\n        let { decimal, thousands, prefix, suffix, inputMode } = this.options;\n        if (this.isNullable() && this.value == 0) {\n            this.rawValue = null;\n            return;\n        }\n        let selectionEnd = this.inputSelection.selectionEnd;\n        let selectionStart = this.inputSelection.selectionStart;\n        const suffixStart = this.rawValue.length - suffix.length;\n        selectionEnd = Math.min(suffixStart, Math.max(selectionEnd, prefix.length));\n        selectionStart = Math.min(suffixStart, Math.max(selectionStart, prefix.length));\n        // Check if selection was entirely in the prefix or suffix. \n        if (selectionStart === selectionEnd &&\n            this.inputSelection.selectionStart !== this.inputSelection.selectionEnd) {\n            this.updateFieldValue(selectionStart);\n            return;\n        }\n        let decimalIndex = this.rawValue.indexOf(decimal);\n        if (decimalIndex === -1) {\n            decimalIndex = this.rawValue.length;\n        }\n        let shiftSelection = 0;\n        let insertChars = '';\n        const isCursorInDecimals = decimalIndex < selectionEnd;\n        const isCursorImmediatelyAfterDecimalPoint = decimalIndex + 1 === selectionEnd;\n        if (selectionEnd === selectionStart) {\n            if (keyCode == 8) {\n                if (selectionStart <= prefix.length) {\n                    return;\n                }\n                selectionStart--;\n                // If previous char isn't a number, go back one more.\n                if (!this.rawValue.substr(selectionStart, 1).match(/\\d/)) {\n                    selectionStart--;\n                }\n                // In natural mode, jump backwards when in decimal portion of number.\n                if (inputMode === CurrencyMaskInputMode.NATURAL && isCursorInDecimals) {\n                    shiftSelection = -1;\n                    // when removing a single whole number, replace it with 0\n                    if (isCursorImmediatelyAfterDecimalPoint && this.value < 10 && this.value > -10) {\n                        insertChars += '0';\n                    }\n                }\n            }\n            else if (keyCode == 46 || keyCode == 63272) {\n                if (selectionStart === suffixStart) {\n                    return;\n                }\n                selectionEnd++;\n                // If next char isn't a number, go one more.\n                if (!this.rawValue.substr(selectionStart, 1).match(/\\d/)) {\n                    selectionStart++;\n                    selectionEnd++;\n                }\n            }\n        }\n        // In natural mode, replace decimals with 0s.\n        if (inputMode === CurrencyMaskInputMode.NATURAL && selectionStart > decimalIndex) {\n            const replacedDecimalCount = selectionEnd - selectionStart;\n            for (let i = 0; i < replacedDecimalCount; i++) {\n                insertChars += '0';\n            }\n        }\n        let selectionFromEnd = this.rawValue.length - selectionEnd;\n        this.rawValue = this.rawValue.substring(0, selectionStart) + insertChars + this.rawValue.substring(selectionEnd);\n        // Remove leading thousand separator from raw value.\n        const startChar = this.rawValue.substr(prefix.length, 1);\n        if (startChar === thousands) {\n            this.rawValue = this.rawValue.substring(0, prefix.length) + this.rawValue.substring(prefix.length + 1);\n            selectionFromEnd = Math.min(selectionFromEnd, this.rawValue.length - prefix.length);\n        }\n        this.updateFieldValue(this.rawValue.length - selectionFromEnd + shiftSelection, true);\n    }\n    updateFieldValue(selectionStart, disablePadAndTrim = false) {\n        let newRawValue = this.applyMask(false, this.rawValue || \"\", disablePadAndTrim);\n        selectionStart = selectionStart == undefined ? this.rawValue.length : selectionStart;\n        selectionStart = Math.max(this.options.prefix.length, Math.min(selectionStart, this.rawValue.length - this.options.suffix.length));\n        this.inputManager.updateValueAndCursor(newRawValue, this.rawValue.length, selectionStart);\n    }\n    updateOptions(options) {\n        let value = this.value;\n        this.options = options;\n        this.value = value;\n    }\n    prefixLength() {\n        return this.options.prefix.length;\n    }\n    suffixLength() {\n        return this.options.suffix.length;\n    }\n    isNullable() {\n        return this.options.nullable;\n    }\n    get canInputMoreNumbers() {\n        return this.inputManager.canInputMoreNumbers;\n    }\n    get inputSelection() {\n        return this.inputManager.inputSelection;\n    }\n    get rawValue() {\n        return this.inputManager.rawValue;\n    }\n    set rawValue(value) {\n        this.inputManager.rawValue = value;\n    }\n    get storedRawValue() {\n        return this.inputManager.storedRawValue;\n    }\n    get value() {\n        return this.clearMask(this.rawValue);\n    }\n    set value(value) {\n        this.rawValue = this.applyMask(true, \"\" + value);\n    }\n    isNullOrUndefined(value) {\n        return value === null || value === undefined;\n    }\n}\n\nclass InputHandler {\n    constructor(htmlInputElement, options) {\n        this.inputService = new InputService(htmlInputElement, options);\n    }\n    handleCut(event) {\n        setTimeout(() => {\n            this.inputService.updateFieldValue();\n            this.setValue(this.inputService.value);\n            this.onModelChange(this.inputService.value);\n        }, 0);\n    }\n    handleInput(event) {\n        let selectionStart = this.inputService.inputSelection.selectionStart;\n        let keyCode = this.inputService.rawValue.charCodeAt(selectionStart - 1);\n        let rawValueLength = this.inputService.rawValue.length;\n        let storedRawValueLength = this.inputService.storedRawValue.length;\n        if (Math.abs(rawValueLength - storedRawValueLength) != 1) {\n            this.inputService.updateFieldValue(selectionStart);\n            this.onModelChange(this.inputService.value);\n            return;\n        }\n        // Restore the old value.\n        this.inputService.rawValue = this.inputService.storedRawValue;\n        if (rawValueLength < storedRawValueLength) {\n            // Chrome Android seems to move the cursor in response to a backspace AFTER processing the\n            // input event, so we need to wrap this in a timeout.\n            this.timer(() => {\n                // Move the cursor to just after the deleted value.\n                this.inputService.updateFieldValue(selectionStart + 1);\n                // Then backspace it.\n                this.inputService.removeNumber(8);\n                this.onModelChange(this.inputService.value);\n            }, 0);\n        }\n        if (rawValueLength > storedRawValueLength) {\n            // Move the cursor to just before the new value.\n            this.inputService.updateFieldValue(selectionStart - 1);\n            // Process the character like a keypress.\n            this.handleKeypressImpl(keyCode);\n        }\n    }\n    handleKeydown(event) {\n        let keyCode = event.which || event.charCode || event.keyCode;\n        if (keyCode == 8 || keyCode == 46 || keyCode == 63272) {\n            event.preventDefault();\n            if (this.inputService.inputSelection.selectionStart <= this.inputService.prefixLength() &&\n                this.inputService.inputSelection.selectionEnd >= this.inputService.rawValue.length - this.inputService.suffixLength()) {\n                this.clearValue();\n            }\n            else {\n                this.inputService.removeNumber(keyCode);\n                this.onModelChange(this.inputService.value);\n            }\n        }\n    }\n    clearValue() {\n        this.setValue(this.inputService.isNullable() ? null : 0);\n        this.onModelChange(this.inputService.value);\n    }\n    handleKeypress(event) {\n        let keyCode = event.which || event.charCode || event.keyCode;\n        event.preventDefault();\n        if (keyCode === 97 && event.ctrlKey) {\n            return;\n        }\n        this.handleKeypressImpl(keyCode);\n    }\n    handleKeypressImpl(keyCode) {\n        switch (keyCode) {\n            case undefined:\n            case 9:\n            case 13:\n                return;\n            case 43:\n                this.inputService.changeToPositive();\n                break;\n            case 45:\n                this.inputService.changeToNegative();\n                break;\n            default:\n                if (this.inputService.canInputMoreNumbers) {\n                    let selectionRangeLength = Math.abs(this.inputService.inputSelection.selectionEnd - this.inputService.inputSelection.selectionStart);\n                    if (selectionRangeLength == this.inputService.rawValue.length) {\n                        this.setValue(null);\n                    }\n                    this.inputService.addNumber(keyCode);\n                }\n                break;\n        }\n        this.onModelChange(this.inputService.value);\n    }\n    handlePaste(event) {\n        setTimeout(() => {\n            this.inputService.updateFieldValue();\n            this.setValue(this.inputService.value);\n            this.onModelChange(this.inputService.value);\n        }, 1);\n    }\n    updateOptions(options) {\n        this.inputService.updateOptions(options);\n    }\n    getOnModelChange() {\n        return this.onModelChange;\n    }\n    setOnModelChange(callbackFunction) {\n        this.onModelChange = callbackFunction;\n    }\n    getOnModelTouched() {\n        return this.onModelTouched;\n    }\n    setOnModelTouched(callbackFunction) {\n        this.onModelTouched = callbackFunction;\n    }\n    setValue(value) {\n        this.inputService.value = value;\n    }\n    /**\n     * Passthrough to setTimeout that can be stubbed out in tests.\n     */\n    timer(callback, delayMillis) {\n        setTimeout(callback, delayMillis);\n    }\n}\n\nconst CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => CurrencyMaskDirective),\n    multi: true,\n};\nclass CurrencyMaskDirective {\n    constructor(currencyMaskConfig, elementRef, keyValueDiffers) {\n        this.currencyMaskConfig = currencyMaskConfig;\n        this.elementRef = elementRef;\n        this.keyValueDiffers = keyValueDiffers;\n        this.options = {};\n        this.optionsTemplate = {\n            align: \"right\",\n            allowNegative: true,\n            allowZero: true,\n            decimal: \".\",\n            precision: 2,\n            prefix: \"$ \",\n            suffix: \"\",\n            thousands: \",\",\n            nullable: false,\n            inputMode: CurrencyMaskInputMode.FINANCIAL\n        };\n        if (currencyMaskConfig) {\n            this.optionsTemplate = currencyMaskConfig;\n        }\n        this.keyValueDiffer = keyValueDiffers.find({}).create();\n    }\n    ngAfterViewInit() {\n        this.elementRef.nativeElement.style.textAlign = this.options && this.options.align ? this.options.align : this.optionsTemplate.align;\n    }\n    ngDoCheck() {\n        if (this.keyValueDiffer.diff(this.options)) {\n            this.elementRef.nativeElement.style.textAlign = this.options.align ? this.options.align : this.optionsTemplate.align;\n            this.inputHandler.updateOptions(Object.assign({}, this.optionsTemplate, this.options));\n        }\n    }\n    ngOnInit() {\n        this.inputHandler = new InputHandler(this.elementRef.nativeElement, Object.assign({}, this.optionsTemplate, this.options));\n    }\n    handleBlur(event) {\n        this.inputHandler.getOnModelTouched().apply(event);\n    }\n    handleCut(event) {\n        if (!this.isChromeAndroid()) {\n            !this.isReadOnly() && this.inputHandler.handleCut(event);\n        }\n    }\n    handleInput(event) {\n        if (this.isChromeAndroid()) {\n            !this.isReadOnly() && this.inputHandler.handleInput(event);\n        }\n    }\n    handleKeydown(event) {\n        if (!this.isChromeAndroid()) {\n            !this.isReadOnly() && this.inputHandler.handleKeydown(event);\n        }\n    }\n    handleKeypress(event) {\n        if (!this.isChromeAndroid()) {\n            !this.isReadOnly() && this.inputHandler.handleKeypress(event);\n        }\n    }\n    handlePaste(event) {\n        if (!this.isChromeAndroid()) {\n            !this.isReadOnly() && this.inputHandler.handlePaste(event);\n        }\n    }\n    handleDrop(event) {\n        if (!this.isChromeAndroid()) {\n            event.preventDefault();\n        }\n    }\n    isChromeAndroid() {\n        return /chrome/i.test(navigator.userAgent) && /android/i.test(navigator.userAgent);\n    }\n    isReadOnly() {\n        return this.elementRef.nativeElement.hasAttribute('readonly');\n    }\n    registerOnChange(callbackFunction) {\n        this.inputHandler.setOnModelChange(callbackFunction);\n    }\n    registerOnTouched(callbackFunction) {\n        this.inputHandler.setOnModelTouched(callbackFunction);\n    }\n    setDisabledState(value) {\n        this.elementRef.nativeElement.disabled = value;\n    }\n    writeValue(value) {\n        this.inputHandler.setValue(value);\n    }\n}\nCurrencyMaskDirective.Éµfac = function CurrencyMaskDirective_Factory(t) { return new (t || CurrencyMaskDirective)(Éµngcc0.ÉµÉµdirectiveInject(CURRENCY_MASK_CONFIG, 8), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ElementRef), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.KeyValueDiffers)); };\nCurrencyMaskDirective.Éµdir = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineDirective({ type: CurrencyMaskDirective, selectors: [[\"\", \"currencyMask\", \"\"]], hostBindings: function CurrencyMaskDirective_HostBindings(rf, ctx) { if (rf & 1) {\n        Éµngcc0.ÉµÉµlistener(\"blur\", function CurrencyMaskDirective_blur_HostBindingHandler($event) { return ctx.handleBlur($event); })(\"cut\", function CurrencyMaskDirective_cut_HostBindingHandler($event) { return ctx.handleCut($event); })(\"input\", function CurrencyMaskDirective_input_HostBindingHandler($event) { return ctx.handleInput($event); })(\"keydown\", function CurrencyMaskDirective_keydown_HostBindingHandler($event) { return ctx.handleKeydown($event); })(\"keypress\", function CurrencyMaskDirective_keypress_HostBindingHandler($event) { return ctx.handleKeypress($event); })(\"paste\", function CurrencyMaskDirective_paste_HostBindingHandler($event) { return ctx.handlePaste($event); })(\"drop\", function CurrencyMaskDirective_drop_HostBindingHandler($event) { return ctx.handleDrop($event); });\n    } }, inputs: { options: \"options\" }, features: [Éµngcc0.ÉµÉµProvidersFeature([CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR])] });\nCurrencyMaskDirective.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CURRENCY_MASK_CONFIG,] }] },\n    { type: ElementRef },\n    { type: KeyValueDiffers }\n];\nCurrencyMaskDirective.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CURRENCY_MASK_CONFIG,] }] },\n    { type: ElementRef },\n    { type: KeyValueDiffers }\n];\nCurrencyMaskDirective.propDecorators = {\n    options: [{ type: Input }],\n    handleBlur: [{ type: HostListener, args: [\"blur\", [\"$event\"],] }],\n    handleCut: [{ type: HostListener, args: [\"cut\", [\"$event\"],] }],\n    handleInput: [{ type: HostListener, args: [\"input\", [\"$event\"],] }],\n    handleKeydown: [{ type: HostListener, args: [\"keydown\", [\"$event\"],] }],\n    handleKeypress: [{ type: HostListener, args: [\"keypress\", [\"$event\"],] }],\n    handlePaste: [{ type: HostListener, args: [\"paste\", [\"$event\"],] }],\n    handleDrop: [{ type: HostListener, args: [\"drop\", [\"$event\"],] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(CurrencyMaskDirective, [{\n        type: Directive,\n        args: [{\n                selector: \"[currencyMask]\",\n                providers: [CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR]\n            }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CURRENCY_MASK_CONFIG]\n            }] }, { type: Éµngcc0.ElementRef }, { type: Éµngcc0.KeyValueDiffers }]; }, { options: [{\n            type: Input\n        }], handleBlur: [{\n            type: HostListener,\n            args: [\"blur\", [\"$event\"]]\n        }], handleCut: [{\n            type: HostListener,\n            args: [\"cut\", [\"$event\"]]\n        }], handleInput: [{\n            type: HostListener,\n            args: [\"input\", [\"$event\"]]\n        }], handleKeydown: [{\n            type: HostListener,\n            args: [\"keydown\", [\"$event\"]]\n        }], handleKeypress: [{\n            type: HostListener,\n            args: [\"keypress\", [\"$event\"]]\n        }], handlePaste: [{\n            type: HostListener,\n            args: [\"paste\", [\"$event\"]]\n        }], handleDrop: [{\n            type: HostListener,\n            args: [\"drop\", [\"$event\"]]\n        }] }); })();\n\nclass NgxCurrencyModule {\n    static forRoot(config) {\n        return {\n            ngModule: NgxCurrencyModule,\n            providers: [{\n                    provide: CURRENCY_MASK_CONFIG,\n                    useValue: config,\n                }]\n        };\n    }\n}\nNgxCurrencyModule.Éµfac = function NgxCurrencyModule_Factory(t) { return new (t || NgxCurrencyModule)(); };\nNgxCurrencyModule.Éµmod = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineNgModule({ type: NgxCurrencyModule });\nNgxCurrencyModule.Éµinj = /*@__PURE__*/ Éµngcc0.ÉµÉµdefineInjector({ imports: [CommonModule, FormsModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && Éµngcc0.ÉµsetClassMetadata(NgxCurrencyModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule, FormsModule],\n                declarations: [CurrencyMaskDirective],\n                exports: [CurrencyMaskDirective]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(NgxCurrencyModule, { declarations: function () { return [CurrencyMaskDirective]; }, imports: function () { return [CommonModule, FormsModule]; }, exports: function () { return [CurrencyMaskDirective]; } }); })();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR, CURRENCY_MASK_CONFIG, CurrencyMaskDirective, CurrencyMaskInputMode, NgxCurrencyModule };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}