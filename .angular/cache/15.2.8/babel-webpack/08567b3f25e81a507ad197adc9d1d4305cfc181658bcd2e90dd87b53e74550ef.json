{"ast":null,"code":"import _defineProperty from \"/home/ceo/mmmm/createyourevent/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\nimport { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getBondIdentifier } from '../bond.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport class BondService {\n  constructor(http, applicationConfigService) {\n    _defineProperty(this, \"http\", void 0);\n    _defineProperty(this, \"applicationConfigService\", void 0);\n    _defineProperty(this, \"resourceUrl\", this.applicationConfigService.getEndpointFor('api/bonds'));\n    this.http = http;\n    this.applicationConfigService = applicationConfigService;\n  }\n  create(bond) {\n    const copy = this.convertDateFromClient(bond);\n    return this.http.post(this.resourceUrl, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  update(bond) {\n    const copy = this.convertDateFromClient(bond);\n    return this.http.put(`${this.resourceUrl}/${getBondIdentifier(bond)}`, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  partialUpdate(bond) {\n    const copy = this.convertDateFromClient(bond);\n    return this.http.patch(`${this.resourceUrl}/${getBondIdentifier(bond)}`, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  find(id) {\n    return this.http.get(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  query(req) {\n    const options = createRequestOption(req);\n    return this.http.get(this.resourceUrl, {\n      params: options,\n      observe: 'response'\n    }).pipe(map(res => this.convertDateArrayFromServer(res)));\n  }\n  delete(id) {\n    return this.http.delete(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  addBondToCollectionIfMissing(bondCollection, ...bondsToCheck) {\n    const bonds = bondsToCheck.filter(isPresent);\n    if (bonds.length > 0) {\n      const bondCollectionIdentifiers = bondCollection.map(bondItem => getBondIdentifier(bondItem));\n      const bondsToAdd = bonds.filter(bondItem => {\n        const bondIdentifier = getBondIdentifier(bondItem);\n        if (bondIdentifier == null || bondCollectionIdentifiers.includes(bondIdentifier)) {\n          return false;\n        }\n        bondCollectionIdentifiers.push(bondIdentifier);\n        return true;\n      });\n      return [...bondsToAdd, ...bondCollection];\n    }\n    return bondCollection;\n  }\n  convertDateFromClient(bond) {\n    return Object.assign({}, bond, {\n      creationDate: bond.creationDate?.isValid() ? bond.creationDate.toJSON() : undefined,\n      redemptionDate: bond.redemptionDate?.isValid() ? bond.redemptionDate.toJSON() : undefined\n    });\n  }\n  convertDateFromServer(res) {\n    if (res.body) {\n      res.body.creationDate = res.body.creationDate ? dayjs(res.body.creationDate) : undefined;\n      res.body.redemptionDate = res.body.redemptionDate ? dayjs(res.body.redemptionDate) : undefined;\n    }\n    return res;\n  }\n  convertDateArrayFromServer(res) {\n    if (res.body) {\n      res.body.forEach(bond => {\n        bond.creationDate = bond.creationDate ? dayjs(bond.creationDate) : undefined;\n        bond.redemptionDate = bond.redemptionDate ? dayjs(bond.redemptionDate) : undefined;\n      });\n    }\n    return res;\n  }\n}\n_defineProperty(BondService, \"\\u0275fac\", function BondService_Factory(t) {\n  return new (t || BondService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n});\n_defineProperty(BondService, \"\\u0275prov\", /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BondService,\n  factory: BondService.ɵfac,\n  providedIn: 'root'\n}));","map":{"version":3,"mappings":"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","names":["map","dayjs","isPresent","createRequestOption","getBondIdentifier","BondService","constructor","http","applicationConfigService","getEndpointFor","create","bond","copy","convertDateFromClient","post","resourceUrl","observe","pipe","res","convertDateFromServer","update","put","partialUpdate","patch","find","id","get","query","req","options","params","convertDateArrayFromServer","delete","addBondToCollectionIfMissing","bondCollection","bondsToCheck","bonds","filter","length","bondCollectionIdentifiers","bondItem","bondsToAdd","bondIdentifier","includes","push","Object","assign","creationDate","isValid","toJSON","undefined","redemptionDate","body","forEach","factory","providedIn"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/entities/bond/service/bond.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\n\nimport { isPresent } from 'app/core/util/operators';\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { IBond, getBondIdentifier } from '../bond.model';\n\nexport type EntityResponseType = HttpResponse<IBond>;\nexport type EntityArrayResponseType = HttpResponse<IBond[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class BondService {\n  protected resourceUrl = this.applicationConfigService.getEndpointFor('api/bonds');\n\n  constructor(protected http: HttpClient, protected applicationConfigService: ApplicationConfigService) {}\n\n  create(bond: IBond): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(bond);\n    return this.http\n      .post<IBond>(this.resourceUrl, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  update(bond: IBond): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(bond);\n    return this.http\n      .put<IBond>(`${this.resourceUrl}/${getBondIdentifier(bond) as number}`, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  partialUpdate(bond: IBond): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(bond);\n    return this.http\n      .patch<IBond>(`${this.resourceUrl}/${getBondIdentifier(bond) as number}`, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  find(id: number): Observable<EntityResponseType> {\n    return this.http\n      .get<IBond>(`${this.resourceUrl}/${id}`, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  query(req?: any): Observable<EntityArrayResponseType> {\n    const options = createRequestOption(req);\n    return this.http\n      .get<IBond[]>(this.resourceUrl, { params: options, observe: 'response' })\n      .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n  }\n\n  delete(id: number): Observable<HttpResponse<{}>> {\n    return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  addBondToCollectionIfMissing(bondCollection: IBond[], ...bondsToCheck: (IBond | null | undefined)[]): IBond[] {\n    const bonds: IBond[] = bondsToCheck.filter(isPresent);\n    if (bonds.length > 0) {\n      const bondCollectionIdentifiers = bondCollection.map(bondItem => getBondIdentifier(bondItem)!);\n      const bondsToAdd = bonds.filter(bondItem => {\n        const bondIdentifier = getBondIdentifier(bondItem);\n        if (bondIdentifier == null || bondCollectionIdentifiers.includes(bondIdentifier)) {\n          return false;\n        }\n        bondCollectionIdentifiers.push(bondIdentifier);\n        return true;\n      });\n      return [...bondsToAdd, ...bondCollection];\n    }\n    return bondCollection;\n  }\n\n  protected convertDateFromClient(bond: IBond): IBond {\n    return Object.assign({}, bond, {\n      creationDate: bond.creationDate?.isValid() ? bond.creationDate.toJSON() : undefined,\n      redemptionDate: bond.redemptionDate?.isValid() ? bond.redemptionDate.toJSON() : undefined,\n    });\n  }\n\n  protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\n    if (res.body) {\n      res.body.creationDate = res.body.creationDate ? dayjs(res.body.creationDate) : undefined;\n      res.body.redemptionDate = res.body.redemptionDate ? dayjs(res.body.redemptionDate) : undefined;\n    }\n    return res;\n  }\n\n  protected convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\n    if (res.body) {\n      res.body.forEach((bond: IBond) => {\n        bond.creationDate = bond.creationDate ? dayjs(bond.creationDate) : undefined;\n        bond.redemptionDate = bond.redemptionDate ? dayjs(bond.redemptionDate) : undefined;\n      });\n    }\n    return res;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}