{"ast":null,"code":"import { map, shareReplay } from 'rxjs/operators';\nimport { SERVER_API_URL } from 'app/app.constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ProfileService = /*#__PURE__*/(() => {\n  class ProfileService {\n    constructor(http) {\n      this.http = http;\n      this.infoUrl = SERVER_API_URL + 'management/info';\n    }\n    getProfileInfo() {\n      if (this.profileInfo$) {\n        return this.profileInfo$;\n      }\n      this.profileInfo$ = this.http.get(this.infoUrl).pipe(map(response => {\n        const profileInfo = {\n          activeProfiles: response.activeProfiles,\n          inProduction: response.activeProfiles && response.activeProfiles.includes('prod'),\n          swaggerEnabled: response.activeProfiles && response.activeProfiles.includes('swagger')\n        };\n        if (response.activeProfiles && response['display-ribbon-on-profiles']) {\n          const displayRibbonOnProfiles = response['display-ribbon-on-profiles'].split(',');\n          const ribbonProfiles = displayRibbonOnProfiles.filter(profile => response.activeProfiles && response.activeProfiles.includes(profile));\n          if (ribbonProfiles.length > 0) {\n            profileInfo.ribbonEnv = ribbonProfiles[0];\n          }\n        }\n        return profileInfo;\n      }), shareReplay());\n      return this.profileInfo$;\n    }\n  }\n  ProfileService.ɵfac = function ProfileService_Factory(t) {\n    return new (t || ProfileService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  ProfileService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProfileService,\n    factory: ProfileService.ɵfac,\n    providedIn: 'root'\n  });\n  return ProfileService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}