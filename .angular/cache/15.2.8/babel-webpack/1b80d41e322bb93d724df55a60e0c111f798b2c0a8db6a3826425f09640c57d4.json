{"ast":null,"code":"import { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getChipsAdminIdentifier } from '../chips-admin.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport let ChipsAdminService = /*#__PURE__*/(() => {\n  class ChipsAdminService {\n    constructor(http, applicationConfigService) {\n      this.http = http;\n      this.applicationConfigService = applicationConfigService;\n      this.resourceUrl = this.applicationConfigService.getEndpointFor('api/chips-admins');\n    }\n    create(chipsAdmin) {\n      return this.http.post(this.resourceUrl, chipsAdmin, {\n        observe: 'response'\n      });\n    }\n    update(chipsAdmin) {\n      return this.http.put(`${this.resourceUrl}/${getChipsAdminIdentifier(chipsAdmin)}`, chipsAdmin, {\n        observe: 'response'\n      });\n    }\n    partialUpdate(chipsAdmin) {\n      return this.http.patch(`${this.resourceUrl}/${getChipsAdminIdentifier(chipsAdmin)}`, chipsAdmin, {\n        observe: 'response'\n      });\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    addChipsAdminToCollectionIfMissing(chipsAdminCollection, ...chipsAdminsToCheck) {\n      const chipsAdmins = chipsAdminsToCheck.filter(isPresent);\n      if (chipsAdmins.length > 0) {\n        const chipsAdminCollectionIdentifiers = chipsAdminCollection.map(chipsAdminItem => getChipsAdminIdentifier(chipsAdminItem));\n        const chipsAdminsToAdd = chipsAdmins.filter(chipsAdminItem => {\n          const chipsAdminIdentifier = getChipsAdminIdentifier(chipsAdminItem);\n          if (chipsAdminIdentifier == null || chipsAdminCollectionIdentifiers.includes(chipsAdminIdentifier)) {\n            return false;\n          }\n          chipsAdminCollectionIdentifiers.push(chipsAdminIdentifier);\n          return true;\n        });\n        return [...chipsAdminsToAdd, ...chipsAdminCollection];\n      }\n      return chipsAdminCollection;\n    }\n  }\n  ChipsAdminService.ɵfac = function ChipsAdminService_Factory(t) {\n    return new (t || ChipsAdminService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n  };\n  ChipsAdminService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ChipsAdminService,\n    factory: ChipsAdminService.ɵfac,\n    providedIn: 'root'\n  });\n  return ChipsAdminService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}