{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\nimport { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getFeeTransactionIdentifier } from '../fee-transaction.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport let FeeTransactionService = /*#__PURE__*/(() => {\n  class FeeTransactionService {\n    constructor(http, applicationConfigService) {\n      this.http = http;\n      this.applicationConfigService = applicationConfigService;\n      this.resourceUrl = this.applicationConfigService.getEndpointFor('api/fee-transactions');\n    }\n    create(feeTransaction) {\n      const copy = this.convertDateFromClient(feeTransaction);\n      return this.http.post(this.resourceUrl, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    update(feeTransaction) {\n      const copy = this.convertDateFromClient(feeTransaction);\n      return this.http.put(`${this.resourceUrl}/${getFeeTransactionIdentifier(feeTransaction)}`, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    partialUpdate(feeTransaction) {\n      const copy = this.convertDateFromClient(feeTransaction);\n      return this.http.patch(`${this.resourceUrl}/${getFeeTransactionIdentifier(feeTransaction)}`, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      }).pipe(map(res => this.convertDateArrayFromServer(res)));\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    addFeeTransactionToCollectionIfMissing(feeTransactionCollection, ...feeTransactionsToCheck) {\n      const feeTransactions = feeTransactionsToCheck.filter(isPresent);\n      if (feeTransactions.length > 0) {\n        const feeTransactionCollectionIdentifiers = feeTransactionCollection.map(feeTransactionItem => getFeeTransactionIdentifier(feeTransactionItem));\n        const feeTransactionsToAdd = feeTransactions.filter(feeTransactionItem => {\n          const feeTransactionIdentifier = getFeeTransactionIdentifier(feeTransactionItem);\n          if (feeTransactionIdentifier == null || feeTransactionCollectionIdentifiers.includes(feeTransactionIdentifier)) {\n            return false;\n          }\n          feeTransactionCollectionIdentifiers.push(feeTransactionIdentifier);\n          return true;\n        });\n        return [...feeTransactionsToAdd, ...feeTransactionCollection];\n      }\n      return feeTransactionCollection;\n    }\n    convertDateFromClient(feeTransaction) {\n      return Object.assign({}, feeTransaction, {\n        date: feeTransaction.date?.isValid() ? feeTransaction.date.toJSON() : undefined\n      });\n    }\n    convertDateFromServer(res) {\n      if (res.body) {\n        res.body.date = res.body.date ? dayjs(res.body.date) : undefined;\n      }\n      return res;\n    }\n    convertDateArrayFromServer(res) {\n      if (res.body) {\n        res.body.forEach(feeTransaction => {\n          feeTransaction.date = feeTransaction.date ? dayjs(feeTransaction.date) : undefined;\n        });\n      }\n      return res;\n    }\n  }\n  FeeTransactionService.ɵfac = function FeeTransactionService_Factory(t) {\n    return new (t || FeeTransactionService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n  };\n  FeeTransactionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FeeTransactionService,\n    factory: FeeTransactionService.ɵfac,\n    providedIn: 'root'\n  });\n  return FeeTransactionService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}