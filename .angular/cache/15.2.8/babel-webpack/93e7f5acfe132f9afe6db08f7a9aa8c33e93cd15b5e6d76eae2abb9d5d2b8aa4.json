{"ast":null,"code":"import { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { AriaDescriber, FocusMonitor, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, ElementRef, ViewContainerRef, NgZone, Inject, Input, Optional, ChangeDetectorRef, Component, ViewEncapsulation, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { ScrollDispatcher, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\nimport { normalizePassiveListenerOptions, Platform } from '@angular/cdk/platform';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Subject } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate, keyframes } from '@angular/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/overlay';\nimport * as ɵngcc2 from '@angular/cdk/scrolling';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/a11y';\nimport * as ɵngcc5 from '@angular/cdk/bidi';\nimport * as ɵngcc6 from '@angular/cdk/layout';\nimport * as ɵngcc7 from '@angular/common';\nconst matTooltipAnimations = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [state('initial, void, hidden', style({\n    opacity: 0,\n    transform: 'scale(0)'\n  })), state('visible', style({\n    transform: 'scale(1)'\n  })), transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([style({\n    opacity: 0,\n    transform: 'scale(0)',\n    offset: 0\n  }), style({\n    opacity: 0.5,\n    transform: 'scale(0.99)',\n    offset: 0.5\n  }), style({\n    opacity: 1,\n    transform: 'scale(1)',\n    offset: 1\n  })]))), transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({\n    opacity: 0\n  })))])\n};\n\n/** Time in ms to throttle repositioning after scroll events. */\nconst SCROLL_THROTTLE_MS = 20;\n/**\n * CSS class that will be attached to the overlay panel.\n * @deprecated\n * @breaking-change 13.0.0 remove this variable\n */\nconst TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\nconst PANEL_CLASS = 'tooltip-panel';\n/** Options used to bind passive event listeners. */\nconst passiveListenerOptions = normalizePassiveListenerOptions({\n  passive: true\n});\n/**\n * Time between the user putting the pointer on a tooltip\n * trigger and the long press event being fired.\n */\nconst LONGPRESS_DELAY = 500;\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nfunction getMatTooltipInvalidPositionError(position) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nconst MAT_TOOLTIP_SCROLL_STRATEGY = new InjectionToken('mat-tooltip-scroll-strategy');\n/** @docs-private */\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition({\n    scrollThrottle: SCROLL_THROTTLE_MS\n  });\n}\n/** @docs-private */\nconst MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY\n};\n/** Injection token to be used to override the default options for `matTooltip`. */\nconst MAT_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken('mat-tooltip-default-options', {\n  providedIn: 'root',\n  factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500\n  };\n}\nclass _MatTooltipBase {\n  constructor(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions, _document) {\n    this._overlay = _overlay;\n    this._elementRef = _elementRef;\n    this._scrollDispatcher = _scrollDispatcher;\n    this._viewContainerRef = _viewContainerRef;\n    this._ngZone = _ngZone;\n    this._platform = _platform;\n    this._ariaDescriber = _ariaDescriber;\n    this._focusMonitor = _focusMonitor;\n    this._dir = _dir;\n    this._defaultOptions = _defaultOptions;\n    this._position = 'below';\n    this._disabled = false;\n    this._viewInitialized = false;\n    this._pointerExitEventsInitialized = false;\n    this._viewportMargin = 8;\n    this._cssClassPrefix = 'mat';\n    /** The default delay in ms before showing the tooltip after show is called */\n    this.showDelay = this._defaultOptions.showDelay;\n    /** The default delay in ms before hiding the tooltip after hide is called */\n    this.hideDelay = this._defaultOptions.hideDelay;\n    /**\n     * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\n     * uses a long press gesture to show and hide, however it can conflict with the native browser\n     * gestures. To work around the conflict, Angular Material disables native gestures on the\n     * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\n     * elements). The different values for this option configure the touch event handling as follows:\n     * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native\n     *   browser gestures on particular elements. In particular, it allows text selection on inputs\n     *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.\n     * - `on` - Enables touch gestures for all elements and disables native\n     *   browser gestures with no exceptions.\n     * - `off` - Disables touch gestures. Note that this will prevent the tooltip from\n     *   showing on touch devices.\n     */\n    this.touchGestures = 'auto';\n    this._message = '';\n    /** Manually-bound passive event listeners. */\n    this._passiveListeners = [];\n    /** Emits when the component is destroyed. */\n    this._destroyed = new Subject();\n    /**\n     * Handles the keydown events on the host element.\n     * Needs to be an arrow function so that we can use it in addEventListener.\n     */\n    this._handleKeydown = event => {\n      if (this._isTooltipVisible() && event.keyCode === ESCAPE && !hasModifierKey(event)) {\n        event.preventDefault();\n        event.stopPropagation();\n        this._ngZone.run(() => this.hide(0));\n      }\n    };\n    this._scrollStrategy = scrollStrategy;\n    this._document = _document;\n    if (_defaultOptions) {\n      if (_defaultOptions.position) {\n        this.position = _defaultOptions.position;\n      }\n      if (_defaultOptions.touchGestures) {\n        this.touchGestures = _defaultOptions.touchGestures;\n      }\n    }\n    _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      if (this._overlayRef) {\n        this._updatePosition(this._overlayRef);\n      }\n    });\n    _ngZone.runOutsideAngular(() => {\n      _elementRef.nativeElement.addEventListener('keydown', this._handleKeydown);\n    });\n  }\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  get position() {\n    return this._position;\n  }\n  set position(value) {\n    var _a;\n    if (value !== this._position) {\n      this._position = value;\n      if (this._overlayRef) {\n        this._updatePosition(this._overlayRef);\n        (_a = this._tooltipInstance) === null || _a === void 0 ? void 0 : _a.show(0);\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n  /** Disables the display of the tooltip. */\n  get disabled() {\n    return this._disabled;\n  }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    } else {\n      this._setupPointerEnterEventsIfNeeded();\n    }\n  }\n  /** The message to be displayed in the tooltip */\n  get message() {\n    return this._message;\n  }\n  set message(value) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message, 'tooltip');\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    // Must convert with `String(value)`, not `${value}`, otherwise Closure Compiler optimises\n    // away the string-conversion: https://github.com/angular/components/issues/20684\n    this._message = value != null ? String(value).trim() : '';\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._setupPointerEnterEventsIfNeeded();\n      this._updateTooltipMessage();\n      this._ngZone.runOutsideAngular(() => {\n        // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n        // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n        // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n        // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n        Promise.resolve().then(() => {\n          this._ariaDescriber.describe(this._elementRef.nativeElement, this.message, 'tooltip');\n        });\n      });\n    }\n  }\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  get tooltipClass() {\n    return this._tooltipClass;\n  }\n  set tooltipClass(value) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n  ngAfterViewInit() {\n    // This needs to happen after view init so the initial values for all inputs have been set.\n    this._viewInitialized = true;\n    this._setupPointerEnterEventsIfNeeded();\n    this._focusMonitor.monitor(this._elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        this._ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        this._ngZone.run(() => this.show());\n      }\n    });\n  }\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    const nativeElement = this._elementRef.nativeElement;\n    clearTimeout(this._touchstartTimeout);\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n    // Clean up the event listeners set in the constructor\n    nativeElement.removeEventListener('keydown', this._handleKeydown);\n    this._passiveListeners.forEach(([event, listener]) => {\n      nativeElement.removeEventListener(event, listener, passiveListenerOptions);\n    });\n    this._passiveListeners.length = 0;\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._ariaDescriber.removeDescription(nativeElement, this.message, 'tooltip');\n    this._focusMonitor.stopMonitoring(nativeElement);\n  }\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay = this.showDelay) {\n    if (this.disabled || !this.message || this._isTooltipVisible() && !this._tooltipInstance._showTimeoutId && !this._tooltipInstance._hideTimeoutId) {\n      return;\n    }\n    const overlayRef = this._createOverlay();\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(this._tooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden().pipe(takeUntil(this._destroyed)).subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance.show(delay);\n  }\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay = this.hideDelay) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n  /** Shows/hides the tooltip */\n  toggle() {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible() {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n  /** Create the overlay config and position strategy */\n  _createOverlay() {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n    const scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position().flexibleConnectedTo(this._elementRef).withTransformOriginOn(`.${this._cssClassPrefix}-tooltip`).withFlexibleDimensions(false).withViewportMargin(this._viewportMargin).withScrollableContainers(scrollableAncestors);\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      this._updateCurrentPositionClass(change.connectionPair);\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: `${this._cssClassPrefix}-${PANEL_CLASS}`,\n      scrollStrategy: this._scrollStrategy()\n    });\n    this._updatePosition(this._overlayRef);\n    this._overlayRef.detachments().pipe(takeUntil(this._destroyed)).subscribe(() => this._detach());\n    this._overlayRef.outsidePointerEvents().pipe(takeUntil(this._destroyed)).subscribe(() => {\n      var _a;\n      return (_a = this._tooltipInstance) === null || _a === void 0 ? void 0 : _a._handleBodyInteraction();\n    });\n    return this._overlayRef;\n  }\n  /** Detaches the currently-attached tooltip. */\n  _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n    this._tooltipInstance = null;\n  }\n  /** Updates the position of the current tooltip. */\n  _updatePosition(overlayRef) {\n    const position = overlayRef.getConfig().positionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n    position.withPositions([this._addOffset(Object.assign(Object.assign({}, origin.main), overlay.main)), this._addOffset(Object.assign(Object.assign({}, origin.fallback), overlay.fallback))]);\n  }\n  /** Adds the configured offset to a position. Used as a hook for child classes. */\n  _addOffset(position) {\n    return position;\n  }\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin() {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition;\n    if (position == 'above' || position == 'below') {\n      originPosition = {\n        originX: 'center',\n        originY: position == 'above' ? 'top' : 'bottom'\n      };\n    } else if (position == 'before' || position == 'left' && isLtr || position == 'right' && !isLtr) {\n      originPosition = {\n        originX: 'start',\n        originY: 'center'\n      };\n    } else if (position == 'after' || position == 'right' && isLtr || position == 'left' && !isLtr) {\n      originPosition = {\n        originX: 'end',\n        originY: 'center'\n      };\n    } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n    const {\n      x,\n      y\n    } = this._invertPosition(originPosition.originX, originPosition.originY);\n    return {\n      main: originPosition,\n      fallback: {\n        originX: x,\n        originY: y\n      }\n    };\n  }\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition() {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition;\n    if (position == 'above') {\n      overlayPosition = {\n        overlayX: 'center',\n        overlayY: 'bottom'\n      };\n    } else if (position == 'below') {\n      overlayPosition = {\n        overlayX: 'center',\n        overlayY: 'top'\n      };\n    } else if (position == 'before' || position == 'left' && isLtr || position == 'right' && !isLtr) {\n      overlayPosition = {\n        overlayX: 'end',\n        overlayY: 'center'\n      };\n    } else if (position == 'after' || position == 'right' && isLtr || position == 'left' && !isLtr) {\n      overlayPosition = {\n        overlayX: 'start',\n        overlayY: 'center'\n      };\n    } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n    const {\n      x,\n      y\n    } = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n    return {\n      main: overlayPosition,\n      fallback: {\n        overlayX: x,\n        overlayY: y\n      }\n    };\n  }\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n      this._ngZone.onMicrotaskEmpty.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef.updatePosition();\n        }\n      });\n    }\n  }\n  /** Updates the tooltip class */\n  _setTooltipClass(tooltipClass) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n  /** Inverts an overlay position. */\n  _invertPosition(x, y) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n    return {\n      x,\n      y\n    };\n  }\n  /** Updates the class on the overlay panel based on the current position of the tooltip. */\n  _updateCurrentPositionClass(connectionPair) {\n    const {\n      overlayY,\n      originX,\n      originY\n    } = connectionPair;\n    let newPosition;\n    // If the overlay is in the middle along the Y axis,\n    // it means that it's either before or after.\n    if (overlayY === 'center') {\n      // Note that since this information is used for styling, we want to\n      // resolve `start` and `end` to their real values, otherwise consumers\n      // would have to remember to do it themselves on each consumption.\n      if (this._dir && this._dir.value === 'rtl') {\n        newPosition = originX === 'end' ? 'left' : 'right';\n      } else {\n        newPosition = originX === 'start' ? 'left' : 'right';\n      }\n    } else {\n      newPosition = overlayY === 'bottom' && originY === 'top' ? 'above' : 'below';\n    }\n    if (newPosition !== this._currentPosition) {\n      const overlayRef = this._overlayRef;\n      if (overlayRef) {\n        const classPrefix = `${this._cssClassPrefix}-${PANEL_CLASS}-`;\n        overlayRef.removePanelClass(classPrefix + this._currentPosition);\n        overlayRef.addPanelClass(classPrefix + newPosition);\n      }\n      this._currentPosition = newPosition;\n    }\n  }\n  /** Binds the pointer events to the tooltip trigger. */\n  _setupPointerEnterEventsIfNeeded() {\n    // Optimization: Defer hooking up events if there's no message or the tooltip is disabled.\n    if (this._disabled || !this.message || !this._viewInitialized || this._passiveListeners.length) {\n      return;\n    }\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (this._platformSupportsMouseEvents()) {\n      this._passiveListeners.push(['mouseenter', () => {\n        this._setupPointerExitEventsIfNeeded();\n        this.show();\n      }]);\n    } else if (this.touchGestures !== 'off') {\n      this._disableNativeGesturesIfNecessary();\n      this._passiveListeners.push(['touchstart', () => {\n        // Note that it's important that we don't `preventDefault` here,\n        // because it can prevent click events from firing on the element.\n        this._setupPointerExitEventsIfNeeded();\n        clearTimeout(this._touchstartTimeout);\n        this._touchstartTimeout = setTimeout(() => this.show(), LONGPRESS_DELAY);\n      }]);\n    }\n    this._addListeners(this._passiveListeners);\n  }\n  _setupPointerExitEventsIfNeeded() {\n    if (this._pointerExitEventsInitialized) {\n      return;\n    }\n    this._pointerExitEventsInitialized = true;\n    const exitListeners = [];\n    if (this._platformSupportsMouseEvents()) {\n      exitListeners.push(['mouseleave', () => this.hide()], ['wheel', event => this._wheelListener(event)]);\n    } else if (this.touchGestures !== 'off') {\n      this._disableNativeGesturesIfNecessary();\n      const touchendListener = () => {\n        clearTimeout(this._touchstartTimeout);\n        this.hide(this._defaultOptions.touchendHideDelay);\n      };\n      exitListeners.push(['touchend', touchendListener], ['touchcancel', touchendListener]);\n    }\n    this._addListeners(exitListeners);\n    this._passiveListeners.push(...exitListeners);\n  }\n  _addListeners(listeners) {\n    listeners.forEach(([event, listener]) => {\n      this._elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);\n    });\n  }\n  _platformSupportsMouseEvents() {\n    return !this._platform.IOS && !this._platform.ANDROID;\n  }\n  /** Listener for the `wheel` event on the element. */\n  _wheelListener(event) {\n    if (this._isTooltipVisible()) {\n      const elementUnderPointer = this._document.elementFromPoint(event.clientX, event.clientY);\n      const element = this._elementRef.nativeElement;\n      // On non-touch devices we depend on the `mouseleave` event to close the tooltip, but it\n      // won't fire if the user scrolls away using the wheel without moving their cursor. We\n      // work around it by finding the element under the user's cursor and closing the tooltip\n      // if it's not the trigger.\n      if (elementUnderPointer !== element && !element.contains(elementUnderPointer)) {\n        this.hide();\n      }\n    }\n  }\n  /** Disables the native browser gestures, based on how the tooltip has been configured. */\n  _disableNativeGesturesIfNecessary() {\n    const gestures = this.touchGestures;\n    if (gestures !== 'off') {\n      const element = this._elementRef.nativeElement;\n      const style = element.style;\n      // If gestures are set to `auto`, we don't disable text selection on inputs and\n      // textareas, because it prevents the user from typing into them on iOS Safari.\n      if (gestures === 'on' || element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA') {\n        style.userSelect = style.msUserSelect = style.webkitUserSelect = style.MozUserSelect = 'none';\n      }\n      // If we have `auto` gestures and the element uses native HTML dragging,\n      // we don't set `-webkit-user-drag` because it prevents the native behavior.\n      if (gestures === 'on' || !element.draggable) {\n        style.webkitUserDrag = 'none';\n      }\n      style.touchAction = 'none';\n      style.webkitTapHighlightColor = 'transparent';\n    }\n  }\n}\n_MatTooltipBase.ɵfac = function _MatTooltipBase_Factory(t) {\n  return new (t || _MatTooltipBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Directionality), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(DOCUMENT));\n};\n_MatTooltipBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: _MatTooltipBase,\n  inputs: {\n    showDelay: [\"matTooltipShowDelay\", \"showDelay\"],\n    hideDelay: [\"matTooltipHideDelay\", \"hideDelay\"],\n    touchGestures: [\"matTooltipTouchGestures\", \"touchGestures\"],\n    position: [\"matTooltipPosition\", \"position\"],\n    disabled: [\"matTooltipDisabled\", \"disabled\"],\n    message: [\"matTooltip\", \"message\"],\n    tooltipClass: [\"matTooltipClass\", \"tooltipClass\"]\n  }\n});\n_MatTooltipBase.ctorParameters = () => [{\n  type: Overlay\n}, {\n  type: ElementRef\n}, {\n  type: ScrollDispatcher\n}, {\n  type: ViewContainerRef\n}, {\n  type: NgZone\n}, {\n  type: Platform\n}, {\n  type: AriaDescriber\n}, {\n  type: FocusMonitor\n}, {\n  type: undefined\n}, {\n  type: Directionality\n}, {\n  type: undefined\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n_MatTooltipBase.propDecorators = {\n  position: [{\n    type: Input,\n    args: ['matTooltipPosition']\n  }],\n  disabled: [{\n    type: Input,\n    args: ['matTooltipDisabled']\n  }],\n  showDelay: [{\n    type: Input,\n    args: ['matTooltipShowDelay']\n  }],\n  hideDelay: [{\n    type: Input,\n    args: ['matTooltipHideDelay']\n  }],\n  touchGestures: [{\n    type: Input,\n    args: ['matTooltipTouchGestures']\n  }],\n  message: [{\n    type: Input,\n    args: ['matTooltip']\n  }],\n  tooltipClass: [{\n    type: Input,\n    args: ['matTooltipClass']\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatTooltipBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: ɵngcc1.Overlay\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc2.ScrollDispatcher\n    }, {\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc3.Platform\n    }, {\n      type: ɵngcc4.AriaDescriber\n    }, {\n      type: ɵngcc4.FocusMonitor\n    }, {\n      type: undefined\n    }, {\n      type: ɵngcc5.Directionality\n    }, {\n      type: undefined\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, {\n    showDelay: [{\n      type: Input,\n      args: ['matTooltipShowDelay']\n    }],\n    hideDelay: [{\n      type: Input,\n      args: ['matTooltipHideDelay']\n    }],\n    touchGestures: [{\n      type: Input,\n      args: ['matTooltipTouchGestures']\n    }],\n    position: [{\n      type: Input,\n      args: ['matTooltipPosition']\n    }],\n    disabled: [{\n      type: Input,\n      args: ['matTooltipDisabled']\n    }],\n    message: [{\n      type: Input,\n      args: ['matTooltip']\n    }],\n    tooltipClass: [{\n      type: Input,\n      args: ['matTooltipClass']\n    }]\n  });\n})();\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\nclass MatTooltip extends _MatTooltipBase {\n  constructor(overlay, elementRef, scrollDispatcher, viewContainerRef, ngZone, platform, ariaDescriber, focusMonitor, scrollStrategy, dir, defaultOptions, _document) {\n    super(overlay, elementRef, scrollDispatcher, viewContainerRef, ngZone, platform, ariaDescriber, focusMonitor, scrollStrategy, dir, defaultOptions, _document);\n    this._tooltipComponent = TooltipComponent;\n  }\n}\nMatTooltip.ɵfac = function MatTooltip_Factory(t) {\n  return new (t || MatTooltip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(DOCUMENT));\n};\nMatTooltip.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatTooltip,\n  selectors: [[\"\", \"matTooltip\", \"\"]],\n  hostAttrs: [1, \"mat-tooltip-trigger\"],\n  exportAs: [\"matTooltip\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nMatTooltip.ctorParameters = () => [{\n  type: Overlay\n}, {\n  type: ElementRef\n}, {\n  type: ScrollDispatcher\n}, {\n  type: ViewContainerRef\n}, {\n  type: NgZone\n}, {\n  type: Platform\n}, {\n  type: AriaDescriber\n}, {\n  type: FocusMonitor\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n  }]\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTooltip, [{\n    type: Directive,\n    args: [{\n      selector: '[matTooltip]',\n      exportAs: 'matTooltip',\n      host: {\n        'class': 'mat-tooltip-trigger'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.Overlay\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc2.ScrollDispatcher\n    }, {\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc3.Platform\n    }, {\n      type: ɵngcc4.AriaDescriber\n    }, {\n      type: ɵngcc4.FocusMonitor\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: ɵngcc5.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\nclass _TooltipComponentBase {\n  constructor(_changeDetectorRef) {\n    this._changeDetectorRef = _changeDetectorRef;\n    /** Property watched by the animation framework to show or hide the tooltip */\n    this._visibility = 'initial';\n    /** Whether interactions on the page should close the tooltip */\n    this._closeOnInteraction = false;\n    /** Subject for notifying that the tooltip has been hidden from the view */\n    this._onHide = new Subject();\n  }\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay) {\n    // Cancel the delayed hide if it is scheduled\n    clearTimeout(this._hideTimeoutId);\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = undefined;\n      this._onShow();\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay) {\n    // Cancel the delayed show if it is scheduled\n    clearTimeout(this._showTimeoutId);\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = undefined;\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden() {\n    return this._onHide;\n  }\n  /** Whether the tooltip is being displayed. */\n  isVisible() {\n    return this._visibility === 'visible';\n  }\n  ngOnDestroy() {\n    clearTimeout(this._showTimeoutId);\n    clearTimeout(this._hideTimeoutId);\n    this._onHide.complete();\n  }\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n  _animationDone(event) {\n    const toState = event.toState;\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction() {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck() {\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * Callback for when the timeout in this.show() gets completed.\n   * This method is only needed by the mdc-tooltip, and so it is only implemented\n   * in the mdc-tooltip, not here.\n   */\n  _onShow() {}\n}\n_TooltipComponentBase.ɵfac = function _TooltipComponentBase_Factory(t) {\n  return new (t || _TooltipComponentBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n};\n_TooltipComponentBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: _TooltipComponentBase\n});\n_TooltipComponentBase.ctorParameters = () => [{\n  type: ChangeDetectorRef\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_TooltipComponentBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: ɵngcc0.ChangeDetectorRef\n    }];\n  }, null);\n})();\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\nclass TooltipComponent extends _TooltipComponentBase {\n  constructor(changeDetectorRef, _breakpointObserver) {\n    super(changeDetectorRef);\n    this._breakpointObserver = _breakpointObserver;\n    /** Stream that emits whether the user has a handset-sized display.  */\n    this._isHandset = this._breakpointObserver.observe(Breakpoints.Handset);\n  }\n}\nTooltipComponent.ɵfac = function TooltipComponent_Factory(t) {\n  return new (t || TooltipComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.BreakpointObserver));\n};\nTooltipComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: TooltipComponent,\n  selectors: [[\"mat-tooltip-component\"]],\n  hostAttrs: [\"aria-hidden\", \"true\"],\n  hostVars: 2,\n  hostBindings: function TooltipComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵstyleProp(\"zoom\", ctx._visibility === \"visible\" ? 1 : null);\n    }\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 4,\n  vars: 7,\n  consts: [[1, \"mat-tooltip\", 3, \"ngClass\"]],\n  template: function TooltipComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵlistener(\"@state.start\", function TooltipComponent_Template_div_animation_state_start_0_listener() {\n        return ctx._animationStart();\n      })(\"@state.done\", function TooltipComponent_Template_div_animation_state_done_0_listener($event) {\n        return ctx._animationDone($event);\n      });\n      ɵngcc0.ɵɵpipe(1, \"async\");\n      ɵngcc0.ɵɵtext(2);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtext(3, \"\\n\");\n    }\n    if (rf & 2) {\n      let tmp_0_0;\n      ɵngcc0.ɵɵclassProp(\"mat-tooltip-handset\", (tmp_0_0 = ɵngcc0.ɵɵpipeBind1(1, 5, ctx._isHandset)) == null ? null : tmp_0_0.matches);\n      ɵngcc0.ɵɵproperty(\"ngClass\", ctx.tooltipClass)(\"@state\", ctx._visibility);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵtextInterpolate(ctx.message);\n    }\n  },\n  dependencies: [ɵngcc7.NgClass, ɵngcc7.AsyncPipe],\n  styles: [\".mat-tooltip-panel{pointer-events:none !important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\\n\"],\n  encapsulation: 2,\n  data: {\n    animation: [matTooltipAnimations.tooltipState]\n  },\n  changeDetection: 0\n});\nTooltipComponent.ctorParameters = () => [{\n  type: ChangeDetectorRef\n}, {\n  type: BreakpointObserver\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TooltipComponent, [{\n    type: Component,\n    args: [{\n      selector: 'mat-tooltip-component',\n      template: \"<div class=\\\"mat-tooltip\\\"\\n     [ngClass]=\\\"tooltipClass\\\"\\n     [class.mat-tooltip-handset]=\\\"(_isHandset | async)?.matches\\\"\\n     [@state]=\\\"_visibility\\\"\\n     (@state.start)=\\\"_animationStart()\\\"\\n     (@state.done)=\\\"_animationDone($event)\\\">{{message}}</div>\\n\",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [matTooltipAnimations.tooltipState],\n      host: {\n        // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n        // won't be rendered if the animations are disabled or there is no web animations polyfill.\n        '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n        'aria-hidden': 'true'\n      },\n      styles: [\".mat-tooltip-panel{pointer-events:none !important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc6.BreakpointObserver\n    }];\n  }, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatTooltipModule {}\nMatTooltipModule.ɵfac = function MatTooltipModule_Factory(t) {\n  return new (t || MatTooltipModule)();\n};\nMatTooltipModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatTooltipModule\n});\nMatTooltipModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],\n  imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule, MatCommonModule, CdkScrollableModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTooltipModule, [{\n    type: NgModule,\n    args: [{\n      imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule],\n      exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule],\n      declarations: [MatTooltip, TooltipComponent],\n      entryComponents: [TooltipComponent],\n      providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTooltipModule, {\n    declarations: function () {\n      return [MatTooltip, TooltipComponent];\n    },\n    imports: function () {\n      return [A11yModule, CommonModule, OverlayModule, MatCommonModule];\n    },\n    exports: function () {\n      return [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule];\n    }\n  });\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_TOOLTIP_DEFAULT_OPTIONS, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MatTooltip, MatTooltipModule, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, TooltipComponent, _MatTooltipBase, _TooltipComponentBase, getMatTooltipInvalidPositionError, matTooltipAnimations };","map":{"version":3,"names":["Overlay","OverlayModule","AriaDescriber","FocusMonitor","A11yModule","DOCUMENT","CommonModule","InjectionToken","Directive","ElementRef","ViewContainerRef","NgZone","Inject","Input","Optional","ChangeDetectorRef","Component","ViewEncapsulation","ChangeDetectionStrategy","NgModule","MatCommonModule","ScrollDispatcher","CdkScrollableModule","Directionality","coerceBooleanProperty","ESCAPE","hasModifierKey","Breakpoints","BreakpointObserver","normalizePassiveListenerOptions","Platform","ComponentPortal","Subject","takeUntil","take","trigger","state","style","transition","animate","keyframes","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","ɵngcc5","ɵngcc6","ɵngcc7","matTooltipAnimations","tooltipState","opacity","transform","offset","SCROLL_THROTTLE_MS","TOOLTIP_PANEL_CLASS","PANEL_CLASS","passiveListenerOptions","passive","LONGPRESS_DELAY","getMatTooltipInvalidPositionError","position","Error","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","scrollThrottle","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","provide","deps","useFactory","MAT_TOOLTIP_DEFAULT_OPTIONS","providedIn","factory","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","showDelay","hideDelay","touchendHideDelay","_MatTooltipBase","constructor","_overlay","_elementRef","_scrollDispatcher","_viewContainerRef","_ngZone","_platform","_ariaDescriber","_focusMonitor","scrollStrategy","_dir","_defaultOptions","_document","_position","_disabled","_viewInitialized","_pointerExitEventsInitialized","_viewportMargin","_cssClassPrefix","touchGestures","_message","_passiveListeners","_destroyed","_handleKeydown","event","_isTooltipVisible","keyCode","preventDefault","stopPropagation","run","hide","_scrollStrategy","change","pipe","subscribe","_overlayRef","_updatePosition","runOutsideAngular","nativeElement","addEventListener","value","_a","_tooltipInstance","show","updatePosition","disabled","_setupPointerEnterEventsIfNeeded","message","removeDescription","String","trim","_updateTooltipMessage","Promise","resolve","then","describe","tooltipClass","_tooltipClass","_setTooltipClass","ngAfterViewInit","monitor","origin","ngOnDestroy","clearTimeout","_touchstartTimeout","dispose","removeEventListener","forEach","listener","length","next","complete","stopMonitoring","delay","_showTimeoutId","_hideTimeoutId","overlayRef","_createOverlay","_detach","_portal","_tooltipComponent","attach","instance","afterHidden","toggle","isVisible","scrollableAncestors","getAncestorScrollContainers","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withScrollableContainers","positionChanges","_updateCurrentPositionClass","connectionPair","scrollableViewProperties","isOverlayClipped","create","direction","positionStrategy","panelClass","detachments","outsidePointerEvents","_handleBodyInteraction","hasAttached","detach","getConfig","_getOrigin","_getOverlayPosition","withPositions","_addOffset","Object","assign","main","fallback","isLtr","originPosition","originX","originY","ngDevMode","x","y","_invertPosition","overlayPosition","overlayX","overlayY","_markForCheck","onMicrotaskEmpty","newPosition","_currentPosition","classPrefix","removePanelClass","addPanelClass","_platformSupportsMouseEvents","push","_setupPointerExitEventsIfNeeded","_disableNativeGesturesIfNecessary","setTimeout","_addListeners","exitListeners","_wheelListener","touchendListener","listeners","IOS","ANDROID","elementUnderPointer","elementFromPoint","clientX","clientY","element","contains","gestures","nodeName","userSelect","msUserSelect","webkitUserSelect","MozUserSelect","draggable","webkitUserDrag","touchAction","webkitTapHighlightColor","ɵfac","_MatTooltipBase_Factory","t","ɵɵdirectiveInject","undefined","ɵdir","ɵɵdefineDirective","type","inputs","ctorParameters","decorators","args","propDecorators","ɵsetClassMetadata","MatTooltip","elementRef","scrollDispatcher","viewContainerRef","ngZone","platform","ariaDescriber","focusMonitor","dir","defaultOptions","TooltipComponent","MatTooltip_Factory","selectors","hostAttrs","exportAs","features","ɵɵInheritDefinitionFeature","selector","host","_TooltipComponentBase","_changeDetectorRef","_visibility","_closeOnInteraction","_onHide","_onShow","_animationStart","_animationDone","toState","markForCheck","_TooltipComponentBase_Factory","changeDetectorRef","_breakpointObserver","_isHandset","observe","Handset","TooltipComponent_Factory","ɵcmp","ɵɵdefineComponent","hostVars","hostBindings","TooltipComponent_HostBindings","rf","ctx","ɵɵstyleProp","decls","vars","consts","template","TooltipComponent_Template","ɵɵelementStart","ɵɵlistener","TooltipComponent_Template_div_animation_state_start_0_listener","TooltipComponent_Template_div_animation_state_done_0_listener","$event","ɵɵpipe","ɵɵtext","ɵɵelementEnd","tmp_0_0","ɵɵclassProp","ɵɵpipeBind1","matches","ɵɵproperty","ɵɵadvance","ɵɵtextInterpolate","dependencies","NgClass","AsyncPipe","styles","encapsulation","data","animation","changeDetection","None","OnPush","animations","MatTooltipModule","MatTooltipModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","imports","exports","declarations","entryComponents","ngJitMode","ɵɵsetNgModuleScope"],"sources":["/home/ceo/mmmm/createyourevent/node_modules/@angular/material/__ivy_ngcc__/fesm2015/tooltip.js"],"sourcesContent":["import { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { AriaDescriber, FocusMonitor, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, ElementRef, ViewContainerRef, NgZone, Inject, Input, Optional, ChangeDetectorRef, Component, ViewEncapsulation, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { ScrollDispatcher, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\nimport { normalizePassiveListenerOptions, Platform } from '@angular/cdk/platform';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Subject } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate, keyframes } from '@angular/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/overlay';\nimport * as ɵngcc2 from '@angular/cdk/scrolling';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/a11y';\nimport * as ɵngcc5 from '@angular/cdk/bidi';\nimport * as ɵngcc6 from '@angular/cdk/layout';\nimport * as ɵngcc7 from '@angular/common';\nconst matTooltipAnimations = {\n    /** Animation that transitions a tooltip in and out. */\n    tooltipState: trigger('state', [\n        state('initial, void, hidden', style({ opacity: 0, transform: 'scale(0)' })),\n        state('visible', style({ transform: 'scale(1)' })),\n        transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n            style({ opacity: 0, transform: 'scale(0)', offset: 0 }),\n            style({ opacity: 0.5, transform: 'scale(0.99)', offset: 0.5 }),\n            style({ opacity: 1, transform: 'scale(1)', offset: 1 })\n        ]))),\n        transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({ opacity: 0 }))),\n    ])\n};\n\n/** Time in ms to throttle repositioning after scroll events. */\nconst SCROLL_THROTTLE_MS = 20;\n/**\n * CSS class that will be attached to the overlay panel.\n * @deprecated\n * @breaking-change 13.0.0 remove this variable\n */\nconst TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\nconst PANEL_CLASS = 'tooltip-panel';\n/** Options used to bind passive event listeners. */\nconst passiveListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * Time between the user putting the pointer on a tooltip\n * trigger and the long press event being fired.\n */\nconst LONGPRESS_DELAY = 500;\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nfunction getMatTooltipInvalidPositionError(position) {\n    return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nconst MAT_TOOLTIP_SCROLL_STRATEGY = new InjectionToken('mat-tooltip-scroll-strategy');\n/** @docs-private */\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n/** @docs-private */\nconst MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n/** Injection token to be used to override the default options for `matTooltip`. */\nconst MAT_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken('mat-tooltip-default-options', {\n    providedIn: 'root',\n    factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500,\n    };\n}\nclass _MatTooltipBase {\n    constructor(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions, _document) {\n        this._overlay = _overlay;\n        this._elementRef = _elementRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewContainerRef = _viewContainerRef;\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        this._ariaDescriber = _ariaDescriber;\n        this._focusMonitor = _focusMonitor;\n        this._dir = _dir;\n        this._defaultOptions = _defaultOptions;\n        this._position = 'below';\n        this._disabled = false;\n        this._viewInitialized = false;\n        this._pointerExitEventsInitialized = false;\n        this._viewportMargin = 8;\n        this._cssClassPrefix = 'mat';\n        /** The default delay in ms before showing the tooltip after show is called */\n        this.showDelay = this._defaultOptions.showDelay;\n        /** The default delay in ms before hiding the tooltip after hide is called */\n        this.hideDelay = this._defaultOptions.hideDelay;\n        /**\n         * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\n         * uses a long press gesture to show and hide, however it can conflict with the native browser\n         * gestures. To work around the conflict, Angular Material disables native gestures on the\n         * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\n         * elements). The different values for this option configure the touch event handling as follows:\n         * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native\n         *   browser gestures on particular elements. In particular, it allows text selection on inputs\n         *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.\n         * - `on` - Enables touch gestures for all elements and disables native\n         *   browser gestures with no exceptions.\n         * - `off` - Disables touch gestures. Note that this will prevent the tooltip from\n         *   showing on touch devices.\n         */\n        this.touchGestures = 'auto';\n        this._message = '';\n        /** Manually-bound passive event listeners. */\n        this._passiveListeners = [];\n        /** Emits when the component is destroyed. */\n        this._destroyed = new Subject();\n        /**\n         * Handles the keydown events on the host element.\n         * Needs to be an arrow function so that we can use it in addEventListener.\n         */\n        this._handleKeydown = (event) => {\n            if (this._isTooltipVisible() && event.keyCode === ESCAPE && !hasModifierKey(event)) {\n                event.preventDefault();\n                event.stopPropagation();\n                this._ngZone.run(() => this.hide(0));\n            }\n        };\n        this._scrollStrategy = scrollStrategy;\n        this._document = _document;\n        if (_defaultOptions) {\n            if (_defaultOptions.position) {\n                this.position = _defaultOptions.position;\n            }\n            if (_defaultOptions.touchGestures) {\n                this.touchGestures = _defaultOptions.touchGestures;\n            }\n        }\n        _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            if (this._overlayRef) {\n                this._updatePosition(this._overlayRef);\n            }\n        });\n        _ngZone.runOutsideAngular(() => {\n            _elementRef.nativeElement.addEventListener('keydown', this._handleKeydown);\n        });\n    }\n    /** Allows the user to define the position of the tooltip relative to the parent element */\n    get position() { return this._position; }\n    set position(value) {\n        var _a;\n        if (value !== this._position) {\n            this._position = value;\n            if (this._overlayRef) {\n                this._updatePosition(this._overlayRef);\n                (_a = this._tooltipInstance) === null || _a === void 0 ? void 0 : _a.show(0);\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    /** Disables the display of the tooltip. */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // If tooltip is disabled, hide immediately.\n        if (this._disabled) {\n            this.hide(0);\n        }\n        else {\n            this._setupPointerEnterEventsIfNeeded();\n        }\n    }\n    /** The message to be displayed in the tooltip */\n    get message() { return this._message; }\n    set message(value) {\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message, 'tooltip');\n        // If the message is not a string (e.g. number), convert it to a string and trim it.\n        // Must convert with `String(value)`, not `${value}`, otherwise Closure Compiler optimises\n        // away the string-conversion: https://github.com/angular/components/issues/20684\n        this._message = value != null ? String(value).trim() : '';\n        if (!this._message && this._isTooltipVisible()) {\n            this.hide(0);\n        }\n        else {\n            this._setupPointerEnterEventsIfNeeded();\n            this._updateTooltipMessage();\n            this._ngZone.runOutsideAngular(() => {\n                // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n                // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n                // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n                // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n                Promise.resolve().then(() => {\n                    this._ariaDescriber.describe(this._elementRef.nativeElement, this.message, 'tooltip');\n                });\n            });\n        }\n    }\n    /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n    get tooltipClass() { return this._tooltipClass; }\n    set tooltipClass(value) {\n        this._tooltipClass = value;\n        if (this._tooltipInstance) {\n            this._setTooltipClass(this._tooltipClass);\n        }\n    }\n    ngAfterViewInit() {\n        // This needs to happen after view init so the initial values for all inputs have been set.\n        this._viewInitialized = true;\n        this._setupPointerEnterEventsIfNeeded();\n        this._focusMonitor.monitor(this._elementRef)\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(origin => {\n            // Note that the focus monitor runs outside the Angular zone.\n            if (!origin) {\n                this._ngZone.run(() => this.hide(0));\n            }\n            else if (origin === 'keyboard') {\n                this._ngZone.run(() => this.show());\n            }\n        });\n    }\n    /**\n     * Dispose the tooltip when destroyed.\n     */\n    ngOnDestroy() {\n        const nativeElement = this._elementRef.nativeElement;\n        clearTimeout(this._touchstartTimeout);\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._tooltipInstance = null;\n        }\n        // Clean up the event listeners set in the constructor\n        nativeElement.removeEventListener('keydown', this._handleKeydown);\n        this._passiveListeners.forEach(([event, listener]) => {\n            nativeElement.removeEventListener(event, listener, passiveListenerOptions);\n        });\n        this._passiveListeners.length = 0;\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._ariaDescriber.removeDescription(nativeElement, this.message, 'tooltip');\n        this._focusMonitor.stopMonitoring(nativeElement);\n    }\n    /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n    show(delay = this.showDelay) {\n        if (this.disabled || !this.message || (this._isTooltipVisible() &&\n            !this._tooltipInstance._showTimeoutId && !this._tooltipInstance._hideTimeoutId)) {\n            return;\n        }\n        const overlayRef = this._createOverlay();\n        this._detach();\n        this._portal = this._portal ||\n            new ComponentPortal(this._tooltipComponent, this._viewContainerRef);\n        this._tooltipInstance = overlayRef.attach(this._portal).instance;\n        this._tooltipInstance.afterHidden()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n        this._setTooltipClass(this._tooltipClass);\n        this._updateTooltipMessage();\n        this._tooltipInstance.show(delay);\n    }\n    /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n    hide(delay = this.hideDelay) {\n        if (this._tooltipInstance) {\n            this._tooltipInstance.hide(delay);\n        }\n    }\n    /** Shows/hides the tooltip */\n    toggle() {\n        this._isTooltipVisible() ? this.hide() : this.show();\n    }\n    /** Returns true if the tooltip is currently visible to the user */\n    _isTooltipVisible() {\n        return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n    }\n    /** Create the overlay config and position strategy */\n    _createOverlay() {\n        if (this._overlayRef) {\n            return this._overlayRef;\n        }\n        const scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n        // Create connected position strategy that listens for scroll events to reposition.\n        const strategy = this._overlay.position()\n            .flexibleConnectedTo(this._elementRef)\n            .withTransformOriginOn(`.${this._cssClassPrefix}-tooltip`)\n            .withFlexibleDimensions(false)\n            .withViewportMargin(this._viewportMargin)\n            .withScrollableContainers(scrollableAncestors);\n        strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n            this._updateCurrentPositionClass(change.connectionPair);\n            if (this._tooltipInstance) {\n                if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n                    // After position changes occur and the overlay is clipped by\n                    // a parent scrollable then close the tooltip.\n                    this._ngZone.run(() => this.hide(0));\n                }\n            }\n        });\n        this._overlayRef = this._overlay.create({\n            direction: this._dir,\n            positionStrategy: strategy,\n            panelClass: `${this._cssClassPrefix}-${PANEL_CLASS}`,\n            scrollStrategy: this._scrollStrategy()\n        });\n        this._updatePosition(this._overlayRef);\n        this._overlayRef.detachments()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n        this._overlayRef.outsidePointerEvents()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => { var _a; return (_a = this._tooltipInstance) === null || _a === void 0 ? void 0 : _a._handleBodyInteraction(); });\n        return this._overlayRef;\n    }\n    /** Detaches the currently-attached tooltip. */\n    _detach() {\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n        this._tooltipInstance = null;\n    }\n    /** Updates the position of the current tooltip. */\n    _updatePosition(overlayRef) {\n        const position = overlayRef.getConfig().positionStrategy;\n        const origin = this._getOrigin();\n        const overlay = this._getOverlayPosition();\n        position.withPositions([\n            this._addOffset(Object.assign(Object.assign({}, origin.main), overlay.main)),\n            this._addOffset(Object.assign(Object.assign({}, origin.fallback), overlay.fallback))\n        ]);\n    }\n    /** Adds the configured offset to a position. Used as a hook for child classes. */\n    _addOffset(position) {\n        return position;\n    }\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     */\n    _getOrigin() {\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        const position = this.position;\n        let originPosition;\n        if (position == 'above' || position == 'below') {\n            originPosition = { originX: 'center', originY: position == 'above' ? 'top' : 'bottom' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            originPosition = { originX: 'start', originY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            originPosition = { originX: 'end', originY: 'center' };\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(originPosition.originX, originPosition.originY);\n        return {\n            main: originPosition,\n            fallback: { originX: x, originY: y }\n        };\n    }\n    /** Returns the overlay position and a fallback position based on the user's preference */\n    _getOverlayPosition() {\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        const position = this.position;\n        let overlayPosition;\n        if (position == 'above') {\n            overlayPosition = { overlayX: 'center', overlayY: 'bottom' };\n        }\n        else if (position == 'below') {\n            overlayPosition = { overlayX: 'center', overlayY: 'top' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            overlayPosition = { overlayX: 'end', overlayY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            overlayPosition = { overlayX: 'start', overlayY: 'center' };\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n        return {\n            main: overlayPosition,\n            fallback: { overlayX: x, overlayY: y }\n        };\n    }\n    /** Updates the tooltip message and repositions the overlay according to the new message length */\n    _updateTooltipMessage() {\n        // Must wait for the message to be painted to the tooltip so that the overlay can properly\n        // calculate the correct positioning based on the size of the text.\n        if (this._tooltipInstance) {\n            this._tooltipInstance.message = this.message;\n            this._tooltipInstance._markForCheck();\n            this._ngZone.onMicrotaskEmpty.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n                if (this._tooltipInstance) {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n    }\n    /** Updates the tooltip class */\n    _setTooltipClass(tooltipClass) {\n        if (this._tooltipInstance) {\n            this._tooltipInstance.tooltipClass = tooltipClass;\n            this._tooltipInstance._markForCheck();\n        }\n    }\n    /** Inverts an overlay position. */\n    _invertPosition(x, y) {\n        if (this.position === 'above' || this.position === 'below') {\n            if (y === 'top') {\n                y = 'bottom';\n            }\n            else if (y === 'bottom') {\n                y = 'top';\n            }\n        }\n        else {\n            if (x === 'end') {\n                x = 'start';\n            }\n            else if (x === 'start') {\n                x = 'end';\n            }\n        }\n        return { x, y };\n    }\n    /** Updates the class on the overlay panel based on the current position of the tooltip. */\n    _updateCurrentPositionClass(connectionPair) {\n        const { overlayY, originX, originY } = connectionPair;\n        let newPosition;\n        // If the overlay is in the middle along the Y axis,\n        // it means that it's either before or after.\n        if (overlayY === 'center') {\n            // Note that since this information is used for styling, we want to\n            // resolve `start` and `end` to their real values, otherwise consumers\n            // would have to remember to do it themselves on each consumption.\n            if (this._dir && this._dir.value === 'rtl') {\n                newPosition = originX === 'end' ? 'left' : 'right';\n            }\n            else {\n                newPosition = originX === 'start' ? 'left' : 'right';\n            }\n        }\n        else {\n            newPosition = overlayY === 'bottom' && originY === 'top' ? 'above' : 'below';\n        }\n        if (newPosition !== this._currentPosition) {\n            const overlayRef = this._overlayRef;\n            if (overlayRef) {\n                const classPrefix = `${this._cssClassPrefix}-${PANEL_CLASS}-`;\n                overlayRef.removePanelClass(classPrefix + this._currentPosition);\n                overlayRef.addPanelClass(classPrefix + newPosition);\n            }\n            this._currentPosition = newPosition;\n        }\n    }\n    /** Binds the pointer events to the tooltip trigger. */\n    _setupPointerEnterEventsIfNeeded() {\n        // Optimization: Defer hooking up events if there's no message or the tooltip is disabled.\n        if (this._disabled || !this.message || !this._viewInitialized ||\n            this._passiveListeners.length) {\n            return;\n        }\n        // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n        // first tap from firing its click event or can cause the tooltip to open for clicks.\n        if (this._platformSupportsMouseEvents()) {\n            this._passiveListeners\n                .push(['mouseenter', () => {\n                    this._setupPointerExitEventsIfNeeded();\n                    this.show();\n                }]);\n        }\n        else if (this.touchGestures !== 'off') {\n            this._disableNativeGesturesIfNecessary();\n            this._passiveListeners\n                .push(['touchstart', () => {\n                    // Note that it's important that we don't `preventDefault` here,\n                    // because it can prevent click events from firing on the element.\n                    this._setupPointerExitEventsIfNeeded();\n                    clearTimeout(this._touchstartTimeout);\n                    this._touchstartTimeout = setTimeout(() => this.show(), LONGPRESS_DELAY);\n                }]);\n        }\n        this._addListeners(this._passiveListeners);\n    }\n    _setupPointerExitEventsIfNeeded() {\n        if (this._pointerExitEventsInitialized) {\n            return;\n        }\n        this._pointerExitEventsInitialized = true;\n        const exitListeners = [];\n        if (this._platformSupportsMouseEvents()) {\n            exitListeners.push(['mouseleave', () => this.hide()], ['wheel', event => this._wheelListener(event)]);\n        }\n        else if (this.touchGestures !== 'off') {\n            this._disableNativeGesturesIfNecessary();\n            const touchendListener = () => {\n                clearTimeout(this._touchstartTimeout);\n                this.hide(this._defaultOptions.touchendHideDelay);\n            };\n            exitListeners.push(['touchend', touchendListener], ['touchcancel', touchendListener]);\n        }\n        this._addListeners(exitListeners);\n        this._passiveListeners.push(...exitListeners);\n    }\n    _addListeners(listeners) {\n        listeners.forEach(([event, listener]) => {\n            this._elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);\n        });\n    }\n    _platformSupportsMouseEvents() {\n        return !this._platform.IOS && !this._platform.ANDROID;\n    }\n    /** Listener for the `wheel` event on the element. */\n    _wheelListener(event) {\n        if (this._isTooltipVisible()) {\n            const elementUnderPointer = this._document.elementFromPoint(event.clientX, event.clientY);\n            const element = this._elementRef.nativeElement;\n            // On non-touch devices we depend on the `mouseleave` event to close the tooltip, but it\n            // won't fire if the user scrolls away using the wheel without moving their cursor. We\n            // work around it by finding the element under the user's cursor and closing the tooltip\n            // if it's not the trigger.\n            if (elementUnderPointer !== element && !element.contains(elementUnderPointer)) {\n                this.hide();\n            }\n        }\n    }\n    /** Disables the native browser gestures, based on how the tooltip has been configured. */\n    _disableNativeGesturesIfNecessary() {\n        const gestures = this.touchGestures;\n        if (gestures !== 'off') {\n            const element = this._elementRef.nativeElement;\n            const style = element.style;\n            // If gestures are set to `auto`, we don't disable text selection on inputs and\n            // textareas, because it prevents the user from typing into them on iOS Safari.\n            if (gestures === 'on' || (element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA')) {\n                style.userSelect = style.msUserSelect = style.webkitUserSelect =\n                    style.MozUserSelect = 'none';\n            }\n            // If we have `auto` gestures and the element uses native HTML dragging,\n            // we don't set `-webkit-user-drag` because it prevents the native behavior.\n            if (gestures === 'on' || !element.draggable) {\n                style.webkitUserDrag = 'none';\n            }\n            style.touchAction = 'none';\n            style.webkitTapHighlightColor = 'transparent';\n        }\n    }\n}\n_MatTooltipBase.ɵfac = function _MatTooltipBase_Factory(t) { return new (t || _MatTooltipBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Directionality), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };\n_MatTooltipBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatTooltipBase, inputs: { showDelay: [\"matTooltipShowDelay\", \"showDelay\"], hideDelay: [\"matTooltipHideDelay\", \"hideDelay\"], touchGestures: [\"matTooltipTouchGestures\", \"touchGestures\"], position: [\"matTooltipPosition\", \"position\"], disabled: [\"matTooltipDisabled\", \"disabled\"], message: [\"matTooltip\", \"message\"], tooltipClass: [\"matTooltipClass\", \"tooltipClass\"] } });\n_MatTooltipBase.ctorParameters = () => [\n    { type: Overlay },\n    { type: ElementRef },\n    { type: ScrollDispatcher },\n    { type: ViewContainerRef },\n    { type: NgZone },\n    { type: Platform },\n    { type: AriaDescriber },\n    { type: FocusMonitor },\n    { type: undefined },\n    { type: Directionality },\n    { type: undefined },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n_MatTooltipBase.propDecorators = {\n    position: [{ type: Input, args: ['matTooltipPosition',] }],\n    disabled: [{ type: Input, args: ['matTooltipDisabled',] }],\n    showDelay: [{ type: Input, args: ['matTooltipShowDelay',] }],\n    hideDelay: [{ type: Input, args: ['matTooltipHideDelay',] }],\n    touchGestures: [{ type: Input, args: ['matTooltipTouchGestures',] }],\n    message: [{ type: Input, args: ['matTooltip',] }],\n    tooltipClass: [{ type: Input, args: ['matTooltipClass',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatTooltipBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc1.Overlay }, { type: ɵngcc0.ElementRef }, { type: ɵngcc2.ScrollDispatcher }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc3.Platform }, { type: ɵngcc4.AriaDescriber }, { type: ɵngcc4.FocusMonitor }, { type: undefined }, { type: ɵngcc5.Directionality }, { type: undefined }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { showDelay: [{\n            type: Input,\n            args: ['matTooltipShowDelay']\n        }], hideDelay: [{\n            type: Input,\n            args: ['matTooltipHideDelay']\n        }], touchGestures: [{\n            type: Input,\n            args: ['matTooltipTouchGestures']\n        }], position: [{\n            type: Input,\n            args: ['matTooltipPosition']\n        }], disabled: [{\n            type: Input,\n            args: ['matTooltipDisabled']\n        }], message: [{\n            type: Input,\n            args: ['matTooltip']\n        }], tooltipClass: [{\n            type: Input,\n            args: ['matTooltipClass']\n        }] }); })();\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\nclass MatTooltip extends _MatTooltipBase {\n    constructor(overlay, elementRef, scrollDispatcher, viewContainerRef, ngZone, platform, ariaDescriber, focusMonitor, scrollStrategy, dir, defaultOptions, _document) {\n        super(overlay, elementRef, scrollDispatcher, viewContainerRef, ngZone, platform, ariaDescriber, focusMonitor, scrollStrategy, dir, defaultOptions, _document);\n        this._tooltipComponent = TooltipComponent;\n    }\n}\nMatTooltip.ɵfac = function MatTooltip_Factory(t) { return new (t || MatTooltip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };\nMatTooltip.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTooltip, selectors: [[\"\", \"matTooltip\", \"\"]], hostAttrs: [1, \"mat-tooltip-trigger\"], exportAs: [\"matTooltip\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTooltip.ctorParameters = () => [\n    { type: Overlay },\n    { type: ElementRef },\n    { type: ScrollDispatcher },\n    { type: ViewContainerRef },\n    { type: NgZone },\n    { type: Platform },\n    { type: AriaDescriber },\n    { type: FocusMonitor },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_TOOLTIP_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_TOOLTIP_DEFAULT_OPTIONS,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTooltip, [{\n        type: Directive,\n        args: [{\n                selector: '[matTooltip]',\n                exportAs: 'matTooltip',\n                host: {\n                    'class': 'mat-tooltip-trigger'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc1.Overlay }, { type: ɵngcc0.ElementRef }, { type: ɵngcc2.ScrollDispatcher }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc3.Platform }, { type: ɵngcc4.AriaDescriber }, { type: ɵngcc4.FocusMonitor }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc5.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\nclass _TooltipComponentBase {\n    constructor(_changeDetectorRef) {\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Property watched by the animation framework to show or hide the tooltip */\n        this._visibility = 'initial';\n        /** Whether interactions on the page should close the tooltip */\n        this._closeOnInteraction = false;\n        /** Subject for notifying that the tooltip has been hidden from the view */\n        this._onHide = new Subject();\n    }\n    /**\n     * Shows the tooltip with an animation originating from the provided origin\n     * @param delay Amount of milliseconds to the delay showing the tooltip.\n     */\n    show(delay) {\n        // Cancel the delayed hide if it is scheduled\n        clearTimeout(this._hideTimeoutId);\n        // Body interactions should cancel the tooltip if there is a delay in showing.\n        this._closeOnInteraction = true;\n        this._showTimeoutId = setTimeout(() => {\n            this._visibility = 'visible';\n            this._showTimeoutId = undefined;\n            this._onShow();\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this._markForCheck();\n        }, delay);\n    }\n    /**\n     * Begins the animation to hide the tooltip after the provided delay in ms.\n     * @param delay Amount of milliseconds to delay showing the tooltip.\n     */\n    hide(delay) {\n        // Cancel the delayed show if it is scheduled\n        clearTimeout(this._showTimeoutId);\n        this._hideTimeoutId = setTimeout(() => {\n            this._visibility = 'hidden';\n            this._hideTimeoutId = undefined;\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this._markForCheck();\n        }, delay);\n    }\n    /** Returns an observable that notifies when the tooltip has been hidden from view. */\n    afterHidden() {\n        return this._onHide;\n    }\n    /** Whether the tooltip is being displayed. */\n    isVisible() {\n        return this._visibility === 'visible';\n    }\n    ngOnDestroy() {\n        clearTimeout(this._showTimeoutId);\n        clearTimeout(this._hideTimeoutId);\n        this._onHide.complete();\n    }\n    _animationStart() {\n        this._closeOnInteraction = false;\n    }\n    _animationDone(event) {\n        const toState = event.toState;\n        if (toState === 'hidden' && !this.isVisible()) {\n            this._onHide.next();\n        }\n        if (toState === 'visible' || toState === 'hidden') {\n            this._closeOnInteraction = true;\n        }\n    }\n    /**\n     * Interactions on the HTML body should close the tooltip immediately as defined in the\n     * material design spec.\n     * https://material.io/design/components/tooltips.html#behavior\n     */\n    _handleBodyInteraction() {\n        if (this._closeOnInteraction) {\n            this.hide(0);\n        }\n    }\n    /**\n     * Marks that the tooltip needs to be checked in the next change detection run.\n     * Mainly used for rendering the initial text before positioning a tooltip, which\n     * can be problematic in components with OnPush change detection.\n     */\n    _markForCheck() {\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Callback for when the timeout in this.show() gets completed.\n     * This method is only needed by the mdc-tooltip, and so it is only implemented\n     * in the mdc-tooltip, not here.\n     */\n    _onShow() { }\n}\n_TooltipComponentBase.ɵfac = function _TooltipComponentBase_Factory(t) { return new (t || _TooltipComponentBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\n_TooltipComponentBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _TooltipComponentBase });\n_TooltipComponentBase.ctorParameters = () => [\n    { type: ChangeDetectorRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_TooltipComponentBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, null); })();\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\nclass TooltipComponent extends _TooltipComponentBase {\n    constructor(changeDetectorRef, _breakpointObserver) {\n        super(changeDetectorRef);\n        this._breakpointObserver = _breakpointObserver;\n        /** Stream that emits whether the user has a handset-sized display.  */\n        this._isHandset = this._breakpointObserver.observe(Breakpoints.Handset);\n    }\n}\nTooltipComponent.ɵfac = function TooltipComponent_Factory(t) { return new (t || TooltipComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.BreakpointObserver)); };\nTooltipComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TooltipComponent, selectors: [[\"mat-tooltip-component\"]], hostAttrs: [\"aria-hidden\", \"true\"], hostVars: 2, hostBindings: function TooltipComponent_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"zoom\", ctx._visibility === \"visible\" ? 1 : null);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 4, vars: 7, consts: [[1, \"mat-tooltip\", 3, \"ngClass\"]], template: function TooltipComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵlistener(\"@state.start\", function TooltipComponent_Template_div_animation_state_start_0_listener() { return ctx._animationStart(); })(\"@state.done\", function TooltipComponent_Template_div_animation_state_done_0_listener($event) { return ctx._animationDone($event); });\n        ɵngcc0.ɵɵpipe(1, \"async\");\n        ɵngcc0.ɵɵtext(2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtext(3, \"\\n\");\n    } if (rf & 2) {\n        let tmp_0_0;\n        ɵngcc0.ɵɵclassProp(\"mat-tooltip-handset\", (tmp_0_0 = ɵngcc0.ɵɵpipeBind1(1, 5, ctx._isHandset)) == null ? null : tmp_0_0.matches);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.tooltipClass)(\"@state\", ctx._visibility);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate(ctx.message);\n    } }, dependencies: [ɵngcc7.NgClass, ɵngcc7.AsyncPipe], styles: [\".mat-tooltip-panel{pointer-events:none !important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\\n\"], encapsulation: 2, data: { animation: [matTooltipAnimations.tooltipState] }, changeDetection: 0 });\nTooltipComponent.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: BreakpointObserver }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TooltipComponent, [{\n        type: Component,\n        args: [{ selector: 'mat-tooltip-component', template: \"<div class=\\\"mat-tooltip\\\"\\n     [ngClass]=\\\"tooltipClass\\\"\\n     [class.mat-tooltip-handset]=\\\"(_isHandset | async)?.matches\\\"\\n     [@state]=\\\"_visibility\\\"\\n     (@state.start)=\\\"_animationStart()\\\"\\n     (@state.done)=\\\"_animationDone($event)\\\">{{message}}</div>\\n\", encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [matTooltipAnimations.tooltipState], host: {\n                    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n                    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n                    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n                    'aria-hidden': 'true'\n                }, styles: [\".mat-tooltip-panel{pointer-events:none !important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\\n\"] }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc6.BreakpointObserver }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatTooltipModule {\n}\nMatTooltipModule.ɵfac = function MatTooltipModule_Factory(t) { return new (t || MatTooltipModule)(); };\nMatTooltipModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatTooltipModule });\nMatTooltipModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [A11yModule,\n        CommonModule,\n        OverlayModule,\n        MatCommonModule, MatCommonModule, CdkScrollableModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTooltipModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    A11yModule,\n                    CommonModule,\n                    OverlayModule,\n                    MatCommonModule,\n                ],\n                exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule],\n                declarations: [MatTooltip, TooltipComponent],\n                entryComponents: [TooltipComponent],\n                providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTooltipModule, { declarations: function () { return [MatTooltip, TooltipComponent]; }, imports: function () { return [A11yModule,\n        CommonModule,\n        OverlayModule,\n        MatCommonModule]; }, exports: function () { return [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_TOOLTIP_DEFAULT_OPTIONS, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MatTooltip, MatTooltipModule, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, TooltipComponent, _MatTooltipBase, _TooltipComponentBase, getMatTooltipInvalidPositionError, matTooltipAnimations };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}