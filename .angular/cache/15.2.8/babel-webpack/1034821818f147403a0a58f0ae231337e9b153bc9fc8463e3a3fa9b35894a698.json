{"ast":null,"code":"import { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getReservationTransactionIdIdentifier } from '../reservation-transaction-id.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport let ReservationTransactionIdService = /*#__PURE__*/(() => {\n  class ReservationTransactionIdService {\n    constructor(http, applicationConfigService) {\n      this.http = http;\n      this.applicationConfigService = applicationConfigService;\n      this.resourceUrl = this.applicationConfigService.getEndpointFor('api/reservation-transaction-ids');\n    }\n    create(reservationTransactionId) {\n      return this.http.post(this.resourceUrl, reservationTransactionId, {\n        observe: 'response'\n      });\n    }\n    update(reservationTransactionId) {\n      return this.http.put(`${this.resourceUrl}/${getReservationTransactionIdIdentifier(reservationTransactionId)}`, reservationTransactionId, {\n        observe: 'response'\n      });\n    }\n    partialUpdate(reservationTransactionId) {\n      return this.http.patch(`${this.resourceUrl}/${getReservationTransactionIdIdentifier(reservationTransactionId)}`, reservationTransactionId, {\n        observe: 'response'\n      });\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    addReservationTransactionIdToCollectionIfMissing(reservationTransactionIdCollection, ...reservationTransactionIdsToCheck) {\n      const reservationTransactionIds = reservationTransactionIdsToCheck.filter(isPresent);\n      if (reservationTransactionIds.length > 0) {\n        const reservationTransactionIdCollectionIdentifiers = reservationTransactionIdCollection.map(reservationTransactionIdItem => getReservationTransactionIdIdentifier(reservationTransactionIdItem));\n        const reservationTransactionIdsToAdd = reservationTransactionIds.filter(reservationTransactionIdItem => {\n          const reservationTransactionIdIdentifier = getReservationTransactionIdIdentifier(reservationTransactionIdItem);\n          if (reservationTransactionIdIdentifier == null || reservationTransactionIdCollectionIdentifiers.includes(reservationTransactionIdIdentifier)) {\n            return false;\n          }\n          reservationTransactionIdCollectionIdentifiers.push(reservationTransactionIdIdentifier);\n          return true;\n        });\n        return [...reservationTransactionIdsToAdd, ...reservationTransactionIdCollection];\n      }\n      return reservationTransactionIdCollection;\n    }\n  }\n  ReservationTransactionIdService.ɵfac = function ReservationTransactionIdService_Factory(t) {\n    return new (t || ReservationTransactionIdService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n  };\n  ReservationTransactionIdService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ReservationTransactionIdService,\n    factory: ReservationTransactionIdService.ɵfac,\n    providedIn: 'root'\n  });\n  return ReservationTransactionIdService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}