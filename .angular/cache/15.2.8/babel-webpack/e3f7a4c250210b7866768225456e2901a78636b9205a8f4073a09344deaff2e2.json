{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\nimport { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getProductIdentifier } from '../product.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport class ProductService {\n  constructor(http, applicationConfigService) {\n    this.http = http;\n    this.applicationConfigService = applicationConfigService;\n    this.resourceUrl = this.applicationConfigService.getEndpointFor('api/products');\n  }\n  create(product) {\n    const copy = this.convertDateFromClient(product);\n    return this.http.post(this.resourceUrl, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  update(product) {\n    const copy = this.convertDateFromClient(product);\n    return this.http.put(`${this.resourceUrl}/${getProductIdentifier(product)}`, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  partialUpdate(product) {\n    const copy = this.convertDateFromClient(product);\n    return this.http.patch(`${this.resourceUrl}/${getProductIdentifier(product)}`, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  find(id) {\n    return this.http.get(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  query(req) {\n    const options = createRequestOption(req);\n    return this.http.get(this.resourceUrl, {\n      params: options,\n      observe: 'response'\n    }).pipe(map(res => this.convertDateArrayFromServer(res)));\n  }\n  delete(id) {\n    return this.http.delete(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  addProductToCollectionIfMissing(productCollection, ...productsToCheck) {\n    const products = productsToCheck.filter(isPresent);\n    if (products.length > 0) {\n      const productCollectionIdentifiers = productCollection.map(productItem => getProductIdentifier(productItem));\n      const productsToAdd = products.filter(productItem => {\n        const productIdentifier = getProductIdentifier(productItem);\n        if (productIdentifier == null || productCollectionIdentifiers.includes(productIdentifier)) {\n          return false;\n        }\n        productCollectionIdentifiers.push(productIdentifier);\n        return true;\n      });\n      return [...productsToAdd, ...productCollection];\n    }\n    return productCollection;\n  }\n  convertDateFromClient(product) {\n    return Object.assign({}, product, {\n      dateAdded: product.dateAdded?.isValid() ? product.dateAdded.toJSON() : undefined,\n      dateModified: product.dateModified?.isValid() ? product.dateModified.toJSON() : undefined\n    });\n  }\n  convertDateFromServer(res) {\n    if (res.body) {\n      res.body.dateAdded = res.body.dateAdded ? dayjs(res.body.dateAdded) : undefined;\n      res.body.dateModified = res.body.dateModified ? dayjs(res.body.dateModified) : undefined;\n    }\n    return res;\n  }\n  convertDateArrayFromServer(res) {\n    if (res.body) {\n      res.body.forEach(product => {\n        product.dateAdded = product.dateAdded ? dayjs(product.dateAdded) : undefined;\n        product.dateModified = product.dateModified ? dayjs(product.dateModified) : undefined;\n      });\n    }\n    return res;\n  }\n}\nProductService.ɵfac = function ProductService_Factory(t) {\n  return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n};\nProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductService,\n  factory: ProductService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["map","dayjs","isPresent","createRequestOption","getProductIdentifier","ProductService","constructor","http","applicationConfigService","getEndpointFor","create","product","copy","convertDateFromClient","post","resourceUrl","observe","pipe","res","convertDateFromServer","update","put","partialUpdate","patch","find","id","get","query","req","options","params","convertDateArrayFromServer","delete","addProductToCollectionIfMissing","productCollection","productsToCheck","products","filter","length","productCollectionIdentifiers","productItem","productsToAdd","productIdentifier","includes","push","Object","assign","dateAdded","isValid","toJSON","undefined","dateModified","body","forEach","factory","providedIn"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/entities/product/service/product.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\n\nimport { isPresent } from 'app/core/util/operators';\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { IProduct, getProductIdentifier } from '../product.model';\n\nexport type EntityResponseType = HttpResponse<IProduct>;\nexport type EntityArrayResponseType = HttpResponse<IProduct[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class ProductService {\n  protected resourceUrl = this.applicationConfigService.getEndpointFor('api/products');\n\n  constructor(protected http: HttpClient, protected applicationConfigService: ApplicationConfigService) {}\n\n  create(product: IProduct): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(product);\n    return this.http\n      .post<IProduct>(this.resourceUrl, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  update(product: IProduct): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(product);\n    return this.http\n      .put<IProduct>(`${this.resourceUrl}/${getProductIdentifier(product) as number}`, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  partialUpdate(product: IProduct): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(product);\n    return this.http\n      .patch<IProduct>(`${this.resourceUrl}/${getProductIdentifier(product) as number}`, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  find(id: number): Observable<EntityResponseType> {\n    return this.http\n      .get<IProduct>(`${this.resourceUrl}/${id}`, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  query(req?: any): Observable<EntityArrayResponseType> {\n    const options = createRequestOption(req);\n    return this.http\n      .get<IProduct[]>(this.resourceUrl, { params: options, observe: 'response' })\n      .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n  }\n\n  delete(id: number): Observable<HttpResponse<{}>> {\n    return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  addProductToCollectionIfMissing(productCollection: IProduct[], ...productsToCheck: (IProduct | null | undefined)[]): IProduct[] {\n    const products: IProduct[] = productsToCheck.filter(isPresent);\n    if (products.length > 0) {\n      const productCollectionIdentifiers = productCollection.map(productItem => getProductIdentifier(productItem)!);\n      const productsToAdd = products.filter(productItem => {\n        const productIdentifier = getProductIdentifier(productItem);\n        if (productIdentifier == null || productCollectionIdentifiers.includes(productIdentifier)) {\n          return false;\n        }\n        productCollectionIdentifiers.push(productIdentifier);\n        return true;\n      });\n      return [...productsToAdd, ...productCollection];\n    }\n    return productCollection;\n  }\n\n  protected convertDateFromClient(product: IProduct): IProduct {\n    return Object.assign({}, product, {\n      dateAdded: product.dateAdded?.isValid() ? product.dateAdded.toJSON() : undefined,\n      dateModified: product.dateModified?.isValid() ? product.dateModified.toJSON() : undefined,\n    });\n  }\n\n  protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\n    if (res.body) {\n      res.body.dateAdded = res.body.dateAdded ? dayjs(res.body.dateAdded) : undefined;\n      res.body.dateModified = res.body.dateModified ? dayjs(res.body.dateModified) : undefined;\n    }\n    return res;\n  }\n\n  protected convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\n    if (res.body) {\n      res.body.forEach((product: IProduct) => {\n        product.dateAdded = product.dateAdded ? dayjs(product.dateAdded) : undefined;\n        product.dateModified = product.dateModified ? dayjs(product.dateModified) : undefined;\n      });\n    }\n    return res;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}