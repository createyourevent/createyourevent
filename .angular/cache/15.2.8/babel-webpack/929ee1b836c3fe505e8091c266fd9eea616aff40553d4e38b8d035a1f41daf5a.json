{"ast":null,"code":"import { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getAddressIdentifier } from '../address.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport let AddressService = /*#__PURE__*/(() => {\n  class AddressService {\n    constructor(http, applicationConfigService) {\n      this.http = http;\n      this.applicationConfigService = applicationConfigService;\n      this.resourceUrl = this.applicationConfigService.getEndpointFor('api/addresses');\n    }\n    create(address) {\n      return this.http.post(this.resourceUrl, address, {\n        observe: 'response'\n      });\n    }\n    update(address) {\n      return this.http.put(`${this.resourceUrl}/${getAddressIdentifier(address)}`, address, {\n        observe: 'response'\n      });\n    }\n    partialUpdate(address) {\n      return this.http.patch(`${this.resourceUrl}/${getAddressIdentifier(address)}`, address, {\n        observe: 'response'\n      });\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    addAddressToCollectionIfMissing(addressCollection, ...addressesToCheck) {\n      const addresses = addressesToCheck.filter(isPresent);\n      if (addresses.length > 0) {\n        const addressCollectionIdentifiers = addressCollection.map(addressItem => getAddressIdentifier(addressItem));\n        const addressesToAdd = addresses.filter(addressItem => {\n          const addressIdentifier = getAddressIdentifier(addressItem);\n          if (addressIdentifier == null || addressCollectionIdentifiers.includes(addressIdentifier)) {\n            return false;\n          }\n          addressCollectionIdentifiers.push(addressIdentifier);\n          return true;\n        });\n        return [...addressesToAdd, ...addressCollection];\n      }\n      return addressCollection;\n    }\n  }\n  AddressService.ɵfac = function AddressService_Factory(t) {\n    return new (t || AddressService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n  };\n  AddressService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AddressService,\n    factory: AddressService.ɵfac,\n    providedIn: 'root'\n  });\n  return AddressService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}