{"ast":null,"code":"import { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getFeeTransactionEntryIdentifier } from '../fee-transaction-entry.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport let FeeTransactionEntryService = /*#__PURE__*/(() => {\n  class FeeTransactionEntryService {\n    constructor(http, applicationConfigService) {\n      this.http = http;\n      this.applicationConfigService = applicationConfigService;\n      this.resourceUrl = this.applicationConfigService.getEndpointFor('api/fee-transaction-entries');\n    }\n    create(feeTransactionEntry) {\n      return this.http.post(this.resourceUrl, feeTransactionEntry, {\n        observe: 'response'\n      });\n    }\n    update(feeTransactionEntry) {\n      return this.http.put(`${this.resourceUrl}/${getFeeTransactionEntryIdentifier(feeTransactionEntry)}`, feeTransactionEntry, {\n        observe: 'response'\n      });\n    }\n    partialUpdate(feeTransactionEntry) {\n      return this.http.patch(`${this.resourceUrl}/${getFeeTransactionEntryIdentifier(feeTransactionEntry)}`, feeTransactionEntry, {\n        observe: 'response'\n      });\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    addFeeTransactionEntryToCollectionIfMissing(feeTransactionEntryCollection, ...feeTransactionEntriesToCheck) {\n      const feeTransactionEntries = feeTransactionEntriesToCheck.filter(isPresent);\n      if (feeTransactionEntries.length > 0) {\n        const feeTransactionEntryCollectionIdentifiers = feeTransactionEntryCollection.map(feeTransactionEntryItem => getFeeTransactionEntryIdentifier(feeTransactionEntryItem));\n        const feeTransactionEntriesToAdd = feeTransactionEntries.filter(feeTransactionEntryItem => {\n          const feeTransactionEntryIdentifier = getFeeTransactionEntryIdentifier(feeTransactionEntryItem);\n          if (feeTransactionEntryIdentifier == null || feeTransactionEntryCollectionIdentifiers.includes(feeTransactionEntryIdentifier)) {\n            return false;\n          }\n          feeTransactionEntryCollectionIdentifiers.push(feeTransactionEntryIdentifier);\n          return true;\n        });\n        return [...feeTransactionEntriesToAdd, ...feeTransactionEntryCollection];\n      }\n      return feeTransactionEntryCollection;\n    }\n  }\n  FeeTransactionEntryService.ɵfac = function FeeTransactionEntryService_Factory(t) {\n    return new (t || FeeTransactionEntryService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n  };\n  FeeTransactionEntryService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FeeTransactionEntryService,\n    factory: FeeTransactionEntryService.ɵfac,\n    providedIn: 'root'\n  });\n  return FeeTransactionEntryService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}