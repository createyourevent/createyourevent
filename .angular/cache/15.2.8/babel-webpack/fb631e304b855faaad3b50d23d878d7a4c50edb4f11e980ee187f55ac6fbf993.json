{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\nimport { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getOrganizationReservationIdentifier } from '../organization-reservation.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport let OrganizationReservationService = /*#__PURE__*/(() => {\n  class OrganizationReservationService {\n    constructor(http, applicationConfigService) {\n      this.http = http;\n      this.applicationConfigService = applicationConfigService;\n      this.resourceUrl = this.applicationConfigService.getEndpointFor('api/organization-reservations');\n    }\n    create(organizationReservation) {\n      const copy = this.convertDateFromClient(organizationReservation);\n      return this.http.post(this.resourceUrl, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    update(organizationReservation) {\n      const copy = this.convertDateFromClient(organizationReservation);\n      return this.http.put(`${this.resourceUrl}/${getOrganizationReservationIdentifier(organizationReservation)}`, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    partialUpdate(organizationReservation) {\n      const copy = this.convertDateFromClient(organizationReservation);\n      return this.http.patch(`${this.resourceUrl}/${getOrganizationReservationIdentifier(organizationReservation)}`, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      }).pipe(map(res => this.convertDateArrayFromServer(res)));\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    addOrganizationReservationToCollectionIfMissing(organizationReservationCollection, ...organizationReservationsToCheck) {\n      const organizationReservations = organizationReservationsToCheck.filter(isPresent);\n      if (organizationReservations.length > 0) {\n        const organizationReservationCollectionIdentifiers = organizationReservationCollection.map(organizationReservationItem => getOrganizationReservationIdentifier(organizationReservationItem));\n        const organizationReservationsToAdd = organizationReservations.filter(organizationReservationItem => {\n          const organizationReservationIdentifier = getOrganizationReservationIdentifier(organizationReservationItem);\n          if (organizationReservationIdentifier == null || organizationReservationCollectionIdentifiers.includes(organizationReservationIdentifier)) {\n            return false;\n          }\n          organizationReservationCollectionIdentifiers.push(organizationReservationIdentifier);\n          return true;\n        });\n        return [...organizationReservationsToAdd, ...organizationReservationCollection];\n      }\n      return organizationReservationCollection;\n    }\n    convertDateFromClient(organizationReservation) {\n      return Object.assign({}, organizationReservation, {\n        date: organizationReservation.date?.isValid() ? organizationReservation.date.toJSON() : undefined,\n        dateFrom: organizationReservation.dateFrom?.isValid() ? organizationReservation.dateFrom.toJSON() : undefined,\n        dateUntil: organizationReservation.dateUntil?.isValid() ? organizationReservation.dateUntil.toJSON() : undefined\n      });\n    }\n    convertDateFromServer(res) {\n      if (res.body) {\n        res.body.date = res.body.date ? dayjs(res.body.date) : undefined;\n        res.body.dateFrom = res.body.dateFrom ? dayjs(res.body.dateFrom) : undefined;\n        res.body.dateUntil = res.body.dateUntil ? dayjs(res.body.dateUntil) : undefined;\n      }\n      return res;\n    }\n    convertDateArrayFromServer(res) {\n      if (res.body) {\n        res.body.forEach(organizationReservation => {\n          organizationReservation.date = organizationReservation.date ? dayjs(organizationReservation.date) : undefined;\n          organizationReservation.dateFrom = organizationReservation.dateFrom ? dayjs(organizationReservation.dateFrom) : undefined;\n          organizationReservation.dateUntil = organizationReservation.dateUntil ? dayjs(organizationReservation.dateUntil) : undefined;\n        });\n      }\n      return res;\n    }\n  }\n  OrganizationReservationService.ɵfac = function OrganizationReservationService_Factory(t) {\n    return new (t || OrganizationReservationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n  };\n  OrganizationReservationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OrganizationReservationService,\n    factory: OrganizationReservationService.ɵfac,\n    providedIn: 'root'\n  });\n  return OrganizationReservationService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}