{"ast":null,"code":"import { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getCreateYourEventServiceIdentifier } from '../create-your-event-service.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport let CreateYourEventServiceService = /*#__PURE__*/(() => {\n  class CreateYourEventServiceService {\n    constructor(http, applicationConfigService) {\n      this.http = http;\n      this.applicationConfigService = applicationConfigService;\n      this.resourceUrl = this.applicationConfigService.getEndpointFor('api/create-your-event-services');\n    }\n    create(createYourEventService) {\n      return this.http.post(this.resourceUrl, createYourEventService, {\n        observe: 'response'\n      });\n    }\n    update(createYourEventService) {\n      return this.http.put(`${this.resourceUrl}/${getCreateYourEventServiceIdentifier(createYourEventService)}`, createYourEventService, {\n        observe: 'response'\n      });\n    }\n    partialUpdate(createYourEventService) {\n      return this.http.patch(`${this.resourceUrl}/${getCreateYourEventServiceIdentifier(createYourEventService)}`, createYourEventService, {\n        observe: 'response'\n      });\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    addCreateYourEventServiceToCollectionIfMissing(createYourEventServiceCollection, ...createYourEventServicesToCheck) {\n      const createYourEventServices = createYourEventServicesToCheck.filter(isPresent);\n      if (createYourEventServices.length > 0) {\n        const createYourEventServiceCollectionIdentifiers = createYourEventServiceCollection.map(createYourEventServiceItem => getCreateYourEventServiceIdentifier(createYourEventServiceItem));\n        const createYourEventServicesToAdd = createYourEventServices.filter(createYourEventServiceItem => {\n          const createYourEventServiceIdentifier = getCreateYourEventServiceIdentifier(createYourEventServiceItem);\n          if (createYourEventServiceIdentifier == null || createYourEventServiceCollectionIdentifiers.includes(createYourEventServiceIdentifier)) {\n            return false;\n          }\n          createYourEventServiceCollectionIdentifiers.push(createYourEventServiceIdentifier);\n          return true;\n        });\n        return [...createYourEventServicesToAdd, ...createYourEventServiceCollection];\n      }\n      return createYourEventServiceCollection;\n    }\n  }\n  CreateYourEventServiceService.ɵfac = function CreateYourEventServiceService_Factory(t) {\n    return new (t || CreateYourEventServiceService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n  };\n  CreateYourEventServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CreateYourEventServiceService,\n    factory: CreateYourEventServiceService.ɵfac,\n    providedIn: 'root'\n  });\n  return CreateYourEventServiceService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}