{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ng-jhipster\";\nimport * as i3 from \"app/general.service\";\nexport class TransactionIdPipe {\n  constructor(http, languageService, generalService) {\n    this.http = http;\n    this.languageService = languageService;\n    this.generalService = generalService;\n  }\n  transform(value, type, id) {\n    return new Promise((resolve, reject) => {\n      const b = this.genround(value, 0.05);\n      const a = this.genround(b * 100, 0.05);\n      this.generalService.getTransactionIdFromDatatrans(a, type, id).subscribe(res => {\n        const z = res.body;\n        resolve(z.transactionId);\n      });\n    });\n  }\n  genround(amt, prec) {\n    var rndd = Number((Math.round(amt / prec) * prec).toFixed(2));\n    return rndd;\n  }\n}\nTransactionIdPipe.ɵfac = function TransactionIdPipe_Factory(t) {\n  return new (t || TransactionIdPipe)(i0.ɵɵdirectiveInject(i1.HttpClient, 16), i0.ɵɵdirectiveInject(i2.JhiLanguageService, 16), i0.ɵɵdirectiveInject(i3.GeneralService, 16));\n};\nTransactionIdPipe.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n  name: \"transactionId\",\n  type: TransactionIdPipe,\n  pure: true\n});","map":{"version":3,"mappings":";;;;AASA,OAAM,MAAOA,iBAAiB;EAI5BC,YAAoBC,IAAgB,EAAUC,eAAmC,EAAUC,cAA8B;IAArG,SAAI,GAAJF,IAAI;IAAsB,oBAAe,GAAfC,eAAe;IAA8B,mBAAc,GAAdC,cAAc;EAAmB;EAE5HC,SAAS,CAACC,KAAU,EAAEC,IAAY,EAAEC,EAAU;IAC5C,OAAO,IAAIC,OAAO,CAAM,CAACC,OAAO,EAAEC,MAAM,KAAI;MAC1C,MAAMC,CAAC,GAAG,IAAI,CAACC,QAAQ,CAACP,KAAK,EAAE,IAAI,CAAC;MACpC,MAAMQ,CAAC,GAAG,IAAI,CAACD,QAAQ,CAACD,CAAC,GAAG,GAAG,EAAE,IAAI,CAAC;MACtC,IAAI,CAACR,cAAc,CAACW,6BAA6B,CAACD,CAAC,EAAEP,IAAI,EAAEC,EAAE,CAAC,CAACQ,SAAS,CAACC,GAAG,IAAG;QAC7E,MAAMC,CAAC,GAAGD,GAAG,CAACE,IAAI;QAClBT,OAAO,CAACQ,CAAC,CAACE,aAAa,CAAC;MAC1B,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEAP,QAAQ,CAACQ,GAAW,EAAEC,IAAY;IAChC,IAAIC,IAAI,GAAGC,MAAM,CAAC,CAACC,IAAI,CAACC,KAAK,CAACL,GAAG,GAAGC,IAAI,CAAC,GAAGA,IAAI,EAAEK,OAAO,CAAC,CAAC,CAAC,CAAC;IAC7D,OAAOJ,IAAI;EACb;;;mBApBWvB,iBAAiB;AAAA;;;QAAjBA,iBAAiB;EAAA4B;AAAA","names":["TransactionIdPipe","constructor","http","languageService","generalService","transform","value","type","id","Promise","resolve","reject","b","genround","a","getTransactionIdFromDatatrans","subscribe","res","z","body","transactionId","amt","prec","rndd","Number","Math","round","toFixed","pure"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/pipes/transactionId.pipe.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { JhiLanguageService } from 'ng-jhipster';\nimport { HttpHeaders } from '@angular/common/http';\nimport { GeneralService } from 'app/general.service';\n\n@Pipe({\n  name: 'transactionId'\n})\nexport class TransactionIdPipe implements PipeTransform {\n\n  msgBackend: string;\n\n  constructor(private http: HttpClient, private languageService: JhiLanguageService, private generalService: GeneralService) {}\n\n  transform(value: any, type: string, id: number): Promise<any> {\n    return new Promise<any>((resolve, reject) => {\n      const b = this.genround(value, 0.05);\n      const a = this.genround(b * 100, 0.05);\n      this.generalService.getTransactionIdFromDatatrans(a, type, id).subscribe(res => {\n        const z = res.body;\n        resolve(z.transactionId);\n      });\n    });\n  }\n\n  genround(amt: number, prec: number): number {\n    var rndd = Number((Math.round(amt / prec) * prec).toFixed(2));\n    return rndd ;\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}