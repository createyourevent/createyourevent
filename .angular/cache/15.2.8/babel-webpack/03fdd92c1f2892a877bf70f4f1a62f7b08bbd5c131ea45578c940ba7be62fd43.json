{"ast":null,"code":"import { DeliveryTypes } from 'app/entities/enumerations/delivery-types.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"app/google-geocode.service\";\nexport let SharedEventService = /*#__PURE__*/(() => {\n  class SharedEventService {\n    constructor(googleGeocoderService) {\n      this.googleGeocoderService = googleGeocoderService;\n      this.sharedEvent = {};\n      this.sharedFlyer = '';\n      this.sharedFlyerContentType = '';\n      this.sharedYoutube = '';\n      this.selectedEventProductOrders = [];\n      this.selectedEventServiceMapOrders = [];\n      this.select_products = [];\n      this.select_services = [];\n      this.totalProducts = 0;\n      this.totalServices = 0;\n      this.totalRideCosts = 0;\n      this.totalCart = 0;\n      this.totalShipping = 0;\n      this.totalDeliveryCosts = 0;\n      this.totalDeliveryRideCosts = 0;\n    }\n    getInvestment() {\n      this.model = this.sharedEvent;\n      return Number(this.model.investment);\n    }\n    getLocationCosts() {\n      this.model = this.sharedEvent;\n      return Number(this.model.organizationReservation.total);\n    }\n    calcRevenue() {\n      this.model = this.sharedEvent;\n      return Number(this.model.price) * Number(this.model.minPlacenumber);\n    }\n    calcProducts() {\n      let totalProducts = 0;\n      this.selectedEventProductOrders.forEach(element => {\n        totalProducts += element.total;\n      });\n      this.totalProducts = totalProducts;\n      return this.totalProducts;\n    }\n    calcServices() {\n      let totalServices = 0;\n      this.selectedEventServiceMapOrders.forEach(element => {\n        totalServices += element.total;\n      });\n      this.totalServices = totalServices;\n      return this.totalServices;\n    }\n    calcRideCosts() {\n      let totalRideCosts = 0;\n      this.selectedEventServiceMapOrders.forEach(element => {\n        totalRideCosts += element.rideCosts;\n      });\n      this.totalRideCosts = totalRideCosts;\n      return this.totalRideCosts;\n    }\n    calcTotalInCart() {\n      this.totalCart = this.getLocationCosts() + this.calcProducts() + this.calcServices() + this.calcRideCosts() + this.totalDeliveryCosts + this.totalDeliveryRideCosts + this.totalShipping;\n      return this.totalCart;\n    }\n    calcShipping() {\n      let shippingCosts = 0;\n      if (this.selectedEventProductOrders.length === 0) {\n        return -1;\n      }\n      this.selectedEventProductOrders.forEach(element => {\n        if (element.deliveryType.deliveryType === DeliveryTypes.SHIPPING) {\n          shippingCosts += element.deliveryType.price;\n        }\n      });\n      this.totalShipping = shippingCosts;\n      return this.totalShipping;\n    }\n    calcDeliveryCosts() {\n      this.totalDeliveryCosts = 0;\n      this.totalDeliveryRideCosts = 0;\n      if (this.selectedEventProductOrders.length === 0) {\n        return;\n      }\n      let tdc = 0;\n      this.selectedEventProductOrders.forEach(element => {\n        tdc += element.deliveryType.price;\n      });\n      this.totalDeliveryCosts = tdc / this.selectedEventProductOrders.length;\n      let shops = [];\n      let rideCosts = [];\n      this.selectedEventProductOrders.forEach(element => {\n        const found = shops.find(x => x.id === element.shop.id);\n        if (!found || found === undefined) {\n          shops.push(element.shop);\n          const shopOrders = this.selectedEventProductOrders.filter(x => x.shop.id === element.shop.id);\n          let trc = 0;\n          shopOrders.forEach(shopOrder => {\n            trc += shopOrder.deliveryType.pricePerKilometre;\n          });\n          rideCosts.push(trc / shopOrders.length);\n        }\n      });\n      this.model = this.sharedEvent;\n      let distances;\n      this.getDistancesFromShops(shops).then(ds => {\n        distances = ds;\n        for (let i = 0; i < shops.length; i++) {\n          const shop = shops[i];\n          const distance = distances[i];\n          const rideCost = rideCosts[i];\n          this.totalDeliveryRideCosts = distance / 1000 * rideCost;\n        }\n        this.calcTotalInCart();\n      });\n    }\n    getDistancesFromShops(shops) {\n      let p = new Promise((resolve, reject) => {\n        const addressEvent = this.model.address;\n        let distances = [];\n        let posEvent;\n        let latEvent = 0;\n        let lngEvent = 0;\n        let latShop = 0;\n        let lngShop = 0;\n        let posShop;\n        const queryParamEvent = addressEvent.replace(' ', '+');\n        this.googleGeocoderService.getFromAddress(queryParamEvent).subscribe(resShop => {\n          const geocoderShop = resShop.body['results'];\n          const geometryShop = geocoderShop[0].geometry;\n          latEvent = geometryShop.location.lat;\n          lngEvent = geometryShop.location.lng;\n          posEvent = new google.maps.LatLng(latEvent, lngEvent);\n          shops.forEach(shop => {\n            const queryParamShop = shop.address.replace(' ', '+');\n            this.googleGeocoderService.getFromAddress(queryParamShop).subscribe(resShop => {\n              const geocoderShop = resShop.body['results'];\n              const geometryShop = geocoderShop[0].geometry;\n              latShop = geometryShop.location.lat;\n              lngShop = geometryShop.location.lng;\n              posShop = new google.maps.LatLng(latShop, lngShop);\n              let d = google.maps.geometry.spherical.computeDistanceBetween(posEvent, posShop);\n              distances.push(d);\n              if (distances.length === shops.length) {\n                resolve(distances);\n              }\n            });\n          });\n        });\n      });\n      return p;\n    }\n  }\n  SharedEventService.ɵfac = function SharedEventService_Factory(t) {\n    return new (t || SharedEventService)(i0.ɵɵinject(i1.GoogleGeocodeService));\n  };\n  SharedEventService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SharedEventService,\n    factory: SharedEventService.ɵfac,\n    providedIn: 'root'\n  });\n  return SharedEventService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}