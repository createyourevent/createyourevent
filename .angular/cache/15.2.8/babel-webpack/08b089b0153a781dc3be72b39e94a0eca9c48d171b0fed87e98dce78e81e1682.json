{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\nimport { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getEventLikeDislikeIdentifier } from '../event-like-dislike.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport class EventLikeDislikeService {\n  constructor(http, applicationConfigService) {\n    this.http = http;\n    this.applicationConfigService = applicationConfigService;\n    this.resourceUrl = this.applicationConfigService.getEndpointFor('api/event-like-dislikes');\n  }\n  create(eventLikeDislike) {\n    const copy = this.convertDateFromClient(eventLikeDislike);\n    return this.http.post(this.resourceUrl, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  update(eventLikeDislike) {\n    const copy = this.convertDateFromClient(eventLikeDislike);\n    return this.http.put(`${this.resourceUrl}/${getEventLikeDislikeIdentifier(eventLikeDislike)}`, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  partialUpdate(eventLikeDislike) {\n    const copy = this.convertDateFromClient(eventLikeDislike);\n    return this.http.patch(`${this.resourceUrl}/${getEventLikeDislikeIdentifier(eventLikeDislike)}`, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  find(id) {\n    return this.http.get(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  query(req) {\n    const options = createRequestOption(req);\n    return this.http.get(this.resourceUrl, {\n      params: options,\n      observe: 'response'\n    }).pipe(map(res => this.convertDateArrayFromServer(res)));\n  }\n  delete(id) {\n    return this.http.delete(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  addEventLikeDislikeToCollectionIfMissing(eventLikeDislikeCollection, ...eventLikeDislikesToCheck) {\n    const eventLikeDislikes = eventLikeDislikesToCheck.filter(isPresent);\n    if (eventLikeDislikes.length > 0) {\n      const eventLikeDislikeCollectionIdentifiers = eventLikeDislikeCollection.map(eventLikeDislikeItem => getEventLikeDislikeIdentifier(eventLikeDislikeItem));\n      const eventLikeDislikesToAdd = eventLikeDislikes.filter(eventLikeDislikeItem => {\n        const eventLikeDislikeIdentifier = getEventLikeDislikeIdentifier(eventLikeDislikeItem);\n        if (eventLikeDislikeIdentifier == null || eventLikeDislikeCollectionIdentifiers.includes(eventLikeDislikeIdentifier)) {\n          return false;\n        }\n        eventLikeDislikeCollectionIdentifiers.push(eventLikeDislikeIdentifier);\n        return true;\n      });\n      return [...eventLikeDislikesToAdd, ...eventLikeDislikeCollection];\n    }\n    return eventLikeDislikeCollection;\n  }\n  convertDateFromClient(eventLikeDislike) {\n    return Object.assign({}, eventLikeDislike, {\n      date: eventLikeDislike.date?.isValid() ? eventLikeDislike.date.toJSON() : undefined\n    });\n  }\n  convertDateFromServer(res) {\n    if (res.body) {\n      res.body.date = res.body.date ? dayjs(res.body.date) : undefined;\n    }\n    return res;\n  }\n  convertDateArrayFromServer(res) {\n    if (res.body) {\n      res.body.forEach(eventLikeDislike => {\n        eventLikeDislike.date = eventLikeDislike.date ? dayjs(eventLikeDislike.date) : undefined;\n      });\n    }\n    return res;\n  }\n}\nEventLikeDislikeService.ɵfac = function EventLikeDislikeService_Factory(t) {\n  return new (t || EventLikeDislikeService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n};\nEventLikeDislikeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: EventLikeDislikeService,\n  factory: EventLikeDislikeService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["map","dayjs","isPresent","createRequestOption","getEventLikeDislikeIdentifier","EventLikeDislikeService","constructor","http","applicationConfigService","getEndpointFor","create","eventLikeDislike","copy","convertDateFromClient","post","resourceUrl","observe","pipe","res","convertDateFromServer","update","put","partialUpdate","patch","find","id","get","query","req","options","params","convertDateArrayFromServer","delete","addEventLikeDislikeToCollectionIfMissing","eventLikeDislikeCollection","eventLikeDislikesToCheck","eventLikeDislikes","filter","length","eventLikeDislikeCollectionIdentifiers","eventLikeDislikeItem","eventLikeDislikesToAdd","eventLikeDislikeIdentifier","includes","push","Object","assign","date","isValid","toJSON","undefined","body","forEach","factory","providedIn"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/entities/event-like-dislike/service/event-like-dislike.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\n\nimport { isPresent } from 'app/core/util/operators';\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { IEventLikeDislike, getEventLikeDislikeIdentifier } from '../event-like-dislike.model';\n\nexport type EntityResponseType = HttpResponse<IEventLikeDislike>;\nexport type EntityArrayResponseType = HttpResponse<IEventLikeDislike[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class EventLikeDislikeService {\n  protected resourceUrl = this.applicationConfigService.getEndpointFor('api/event-like-dislikes');\n\n  constructor(protected http: HttpClient, protected applicationConfigService: ApplicationConfigService) {}\n\n  create(eventLikeDislike: IEventLikeDislike): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(eventLikeDislike);\n    return this.http\n      .post<IEventLikeDislike>(this.resourceUrl, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  update(eventLikeDislike: IEventLikeDislike): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(eventLikeDislike);\n    return this.http\n      .put<IEventLikeDislike>(`${this.resourceUrl}/${getEventLikeDislikeIdentifier(eventLikeDislike) as number}`, copy, {\n        observe: 'response',\n      })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  partialUpdate(eventLikeDislike: IEventLikeDislike): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(eventLikeDislike);\n    return this.http\n      .patch<IEventLikeDislike>(`${this.resourceUrl}/${getEventLikeDislikeIdentifier(eventLikeDislike) as number}`, copy, {\n        observe: 'response',\n      })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  find(id: number): Observable<EntityResponseType> {\n    return this.http\n      .get<IEventLikeDislike>(`${this.resourceUrl}/${id}`, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  query(req?: any): Observable<EntityArrayResponseType> {\n    const options = createRequestOption(req);\n    return this.http\n      .get<IEventLikeDislike[]>(this.resourceUrl, { params: options, observe: 'response' })\n      .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n  }\n\n  delete(id: number): Observable<HttpResponse<{}>> {\n    return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  addEventLikeDislikeToCollectionIfMissing(\n    eventLikeDislikeCollection: IEventLikeDislike[],\n    ...eventLikeDislikesToCheck: (IEventLikeDislike | null | undefined)[]\n  ): IEventLikeDislike[] {\n    const eventLikeDislikes: IEventLikeDislike[] = eventLikeDislikesToCheck.filter(isPresent);\n    if (eventLikeDislikes.length > 0) {\n      const eventLikeDislikeCollectionIdentifiers = eventLikeDislikeCollection.map(\n        eventLikeDislikeItem => getEventLikeDislikeIdentifier(eventLikeDislikeItem)!\n      );\n      const eventLikeDislikesToAdd = eventLikeDislikes.filter(eventLikeDislikeItem => {\n        const eventLikeDislikeIdentifier = getEventLikeDislikeIdentifier(eventLikeDislikeItem);\n        if (eventLikeDislikeIdentifier == null || eventLikeDislikeCollectionIdentifiers.includes(eventLikeDislikeIdentifier)) {\n          return false;\n        }\n        eventLikeDislikeCollectionIdentifiers.push(eventLikeDislikeIdentifier);\n        return true;\n      });\n      return [...eventLikeDislikesToAdd, ...eventLikeDislikeCollection];\n    }\n    return eventLikeDislikeCollection;\n  }\n\n  protected convertDateFromClient(eventLikeDislike: IEventLikeDislike): IEventLikeDislike {\n    return Object.assign({}, eventLikeDislike, {\n      date: eventLikeDislike.date?.isValid() ? eventLikeDislike.date.toJSON() : undefined,\n    });\n  }\n\n  protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\n    if (res.body) {\n      res.body.date = res.body.date ? dayjs(res.body.date) : undefined;\n    }\n    return res;\n  }\n\n  protected convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\n    if (res.body) {\n      res.body.forEach((eventLikeDislike: IEventLikeDislike) => {\n        eventLikeDislike.date = eventLikeDislike.date ? dayjs(eventLikeDislike.date) : undefined;\n      });\n    }\n    return res;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}