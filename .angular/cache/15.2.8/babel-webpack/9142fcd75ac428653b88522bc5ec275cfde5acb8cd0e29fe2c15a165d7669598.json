{"ast":null,"code":"import { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getServiceMapIdentifier } from '../service-map.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport let ServiceMapService = /*#__PURE__*/(() => {\n  class ServiceMapService {\n    constructor(http, applicationConfigService) {\n      this.http = http;\n      this.applicationConfigService = applicationConfigService;\n      this.resourceUrl = this.applicationConfigService.getEndpointFor('api/service-maps');\n    }\n    create(serviceMap) {\n      return this.http.post(this.resourceUrl, serviceMap, {\n        observe: 'response'\n      });\n    }\n    update(serviceMap) {\n      return this.http.put(`${this.resourceUrl}/${getServiceMapIdentifier(serviceMap)}`, serviceMap, {\n        observe: 'response'\n      });\n    }\n    partialUpdate(serviceMap) {\n      return this.http.patch(`${this.resourceUrl}/${getServiceMapIdentifier(serviceMap)}`, serviceMap, {\n        observe: 'response'\n      });\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    addServiceMapToCollectionIfMissing(serviceMapCollection, ...serviceMapsToCheck) {\n      const serviceMaps = serviceMapsToCheck.filter(isPresent);\n      if (serviceMaps.length > 0) {\n        const serviceMapCollectionIdentifiers = serviceMapCollection.map(serviceMapItem => getServiceMapIdentifier(serviceMapItem));\n        const serviceMapsToAdd = serviceMaps.filter(serviceMapItem => {\n          const serviceMapIdentifier = getServiceMapIdentifier(serviceMapItem);\n          if (serviceMapIdentifier == null || serviceMapCollectionIdentifiers.includes(serviceMapIdentifier)) {\n            return false;\n          }\n          serviceMapCollectionIdentifiers.push(serviceMapIdentifier);\n          return true;\n        });\n        return [...serviceMapsToAdd, ...serviceMapCollection];\n      }\n      return serviceMapCollection;\n    }\n  }\n  ServiceMapService.ɵfac = function ServiceMapService_Factory(t) {\n    return new (t || ServiceMapService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n  };\n  ServiceMapService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ServiceMapService,\n    factory: ServiceMapService.ɵfac,\n    providedIn: 'root'\n  });\n  return ServiceMapService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}