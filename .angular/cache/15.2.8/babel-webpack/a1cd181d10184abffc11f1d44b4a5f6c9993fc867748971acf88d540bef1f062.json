{"ast":null,"code":"import _defineProperty from \"/home/ceo/mmmm/createyourevent/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\nimport { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getOrganizationCommentIdentifier } from '../organization-comment.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport class OrganizationCommentService {\n  constructor(http, applicationConfigService) {\n    _defineProperty(this, \"http\", void 0);\n    _defineProperty(this, \"applicationConfigService\", void 0);\n    _defineProperty(this, \"resourceUrl\", this.applicationConfigService.getEndpointFor('api/organization-comments'));\n    this.http = http;\n    this.applicationConfigService = applicationConfigService;\n  }\n  create(organizationComment) {\n    const copy = this.convertDateFromClient(organizationComment);\n    return this.http.post(this.resourceUrl, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  update(organizationComment) {\n    const copy = this.convertDateFromClient(organizationComment);\n    return this.http.put(`${this.resourceUrl}/${getOrganizationCommentIdentifier(organizationComment)}`, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  partialUpdate(organizationComment) {\n    const copy = this.convertDateFromClient(organizationComment);\n    return this.http.patch(`${this.resourceUrl}/${getOrganizationCommentIdentifier(organizationComment)}`, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  find(id) {\n    return this.http.get(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  query(req) {\n    const options = createRequestOption(req);\n    return this.http.get(this.resourceUrl, {\n      params: options,\n      observe: 'response'\n    }).pipe(map(res => this.convertDateArrayFromServer(res)));\n  }\n  delete(id) {\n    return this.http.delete(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  addOrganizationCommentToCollectionIfMissing(organizationCommentCollection, ...organizationCommentsToCheck) {\n    const organizationComments = organizationCommentsToCheck.filter(isPresent);\n    if (organizationComments.length > 0) {\n      const organizationCommentCollectionIdentifiers = organizationCommentCollection.map(organizationCommentItem => getOrganizationCommentIdentifier(organizationCommentItem));\n      const organizationCommentsToAdd = organizationComments.filter(organizationCommentItem => {\n        const organizationCommentIdentifier = getOrganizationCommentIdentifier(organizationCommentItem);\n        if (organizationCommentIdentifier == null || organizationCommentCollectionIdentifiers.includes(organizationCommentIdentifier)) {\n          return false;\n        }\n        organizationCommentCollectionIdentifiers.push(organizationCommentIdentifier);\n        return true;\n      });\n      return [...organizationCommentsToAdd, ...organizationCommentCollection];\n    }\n    return organizationCommentCollection;\n  }\n  convertDateFromClient(organizationComment) {\n    return Object.assign({}, organizationComment, {\n      date: organizationComment.date?.isValid() ? organizationComment.date.toJSON() : undefined\n    });\n  }\n  convertDateFromServer(res) {\n    if (res.body) {\n      res.body.date = res.body.date ? dayjs(res.body.date) : undefined;\n    }\n    return res;\n  }\n  convertDateArrayFromServer(res) {\n    if (res.body) {\n      res.body.forEach(organizationComment => {\n        organizationComment.date = organizationComment.date ? dayjs(organizationComment.date) : undefined;\n      });\n    }\n    return res;\n  }\n}\n_defineProperty(OrganizationCommentService, \"\\u0275fac\", function OrganizationCommentService_Factory(t) {\n  return new (t || OrganizationCommentService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n});\n_defineProperty(OrganizationCommentService, \"\\u0275prov\", /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: OrganizationCommentService,\n  factory: OrganizationCommentService.ɵfac,\n  providedIn: 'root'\n}));","map":{"version":3,"mappings":"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","names":["map","dayjs","isPresent","createRequestOption","getOrganizationCommentIdentifier","OrganizationCommentService","constructor","http","applicationConfigService","getEndpointFor","create","organizationComment","copy","convertDateFromClient","post","resourceUrl","observe","pipe","res","convertDateFromServer","update","put","partialUpdate","patch","find","id","get","query","req","options","params","convertDateArrayFromServer","delete","addOrganizationCommentToCollectionIfMissing","organizationCommentCollection","organizationCommentsToCheck","organizationComments","filter","length","organizationCommentCollectionIdentifiers","organizationCommentItem","organizationCommentsToAdd","organizationCommentIdentifier","includes","push","Object","assign","date","isValid","toJSON","undefined","body","forEach","factory","providedIn"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/entities/organization-comment/service/organization-comment.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\n\nimport { isPresent } from 'app/core/util/operators';\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { IOrganizationComment, getOrganizationCommentIdentifier } from '../organization-comment.model';\n\nexport type EntityResponseType = HttpResponse<IOrganizationComment>;\nexport type EntityArrayResponseType = HttpResponse<IOrganizationComment[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class OrganizationCommentService {\n  protected resourceUrl = this.applicationConfigService.getEndpointFor('api/organization-comments');\n\n  constructor(protected http: HttpClient, protected applicationConfigService: ApplicationConfigService) {}\n\n  create(organizationComment: IOrganizationComment): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(organizationComment);\n    return this.http\n      .post<IOrganizationComment>(this.resourceUrl, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  update(organizationComment: IOrganizationComment): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(organizationComment);\n    return this.http\n      .put<IOrganizationComment>(`${this.resourceUrl}/${getOrganizationCommentIdentifier(organizationComment) as number}`, copy, {\n        observe: 'response',\n      })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  partialUpdate(organizationComment: IOrganizationComment): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(organizationComment);\n    return this.http\n      .patch<IOrganizationComment>(`${this.resourceUrl}/${getOrganizationCommentIdentifier(organizationComment) as number}`, copy, {\n        observe: 'response',\n      })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  find(id: number): Observable<EntityResponseType> {\n    return this.http\n      .get<IOrganizationComment>(`${this.resourceUrl}/${id}`, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  query(req?: any): Observable<EntityArrayResponseType> {\n    const options = createRequestOption(req);\n    return this.http\n      .get<IOrganizationComment[]>(this.resourceUrl, { params: options, observe: 'response' })\n      .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n  }\n\n  delete(id: number): Observable<HttpResponse<{}>> {\n    return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  addOrganizationCommentToCollectionIfMissing(\n    organizationCommentCollection: IOrganizationComment[],\n    ...organizationCommentsToCheck: (IOrganizationComment | null | undefined)[]\n  ): IOrganizationComment[] {\n    const organizationComments: IOrganizationComment[] = organizationCommentsToCheck.filter(isPresent);\n    if (organizationComments.length > 0) {\n      const organizationCommentCollectionIdentifiers = organizationCommentCollection.map(\n        organizationCommentItem => getOrganizationCommentIdentifier(organizationCommentItem)!\n      );\n      const organizationCommentsToAdd = organizationComments.filter(organizationCommentItem => {\n        const organizationCommentIdentifier = getOrganizationCommentIdentifier(organizationCommentItem);\n        if (organizationCommentIdentifier == null || organizationCommentCollectionIdentifiers.includes(organizationCommentIdentifier)) {\n          return false;\n        }\n        organizationCommentCollectionIdentifiers.push(organizationCommentIdentifier);\n        return true;\n      });\n      return [...organizationCommentsToAdd, ...organizationCommentCollection];\n    }\n    return organizationCommentCollection;\n  }\n\n  protected convertDateFromClient(organizationComment: IOrganizationComment): IOrganizationComment {\n    return Object.assign({}, organizationComment, {\n      date: organizationComment.date?.isValid() ? organizationComment.date.toJSON() : undefined,\n    });\n  }\n\n  protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\n    if (res.body) {\n      res.body.date = res.body.date ? dayjs(res.body.date) : undefined;\n    }\n    return res;\n  }\n\n  protected convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\n    if (res.body) {\n      res.body.forEach((organizationComment: IOrganizationComment) => {\n        organizationComment.date = organizationComment.date ? dayjs(organizationComment.date) : undefined;\n      });\n    }\n    return res;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}