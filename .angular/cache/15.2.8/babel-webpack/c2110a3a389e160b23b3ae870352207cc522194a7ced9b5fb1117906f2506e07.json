{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.renderElement = undefined;\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\nvar _Logger = require('./Logger');\nvar _Logger2 = _interopRequireDefault(_Logger);\nvar _NodeParser = require('./NodeParser');\nvar _Renderer = require('./Renderer');\nvar _Renderer2 = _interopRequireDefault(_Renderer);\nvar _ForeignObjectRenderer = require('./renderer/ForeignObjectRenderer');\nvar _ForeignObjectRenderer2 = _interopRequireDefault(_ForeignObjectRenderer);\nvar _Feature = require('./Feature');\nvar _Feature2 = _interopRequireDefault(_Feature);\nvar _Bounds = require('./Bounds');\nvar _Clone = require('./Clone');\nvar _Font = require('./Font');\nvar _Color = require('./Color');\nvar _Color2 = _interopRequireDefault(_Color);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar renderElement = exports.renderElement = function renderElement(element, options, logger) {\n  var ownerDocument = element.ownerDocument;\n  var windowBounds = new _Bounds.Bounds(options.scrollX, options.scrollY, options.windowWidth, options.windowHeight);\n\n  // http://www.w3.org/TR/css3-background/#special-backgrounds\n  var documentBackgroundColor = ownerDocument.documentElement ? new _Color2.default(getComputedStyle(ownerDocument.documentElement).backgroundColor) : _Color.TRANSPARENT;\n  var bodyBackgroundColor = ownerDocument.body ? new _Color2.default(getComputedStyle(ownerDocument.body).backgroundColor) : _Color.TRANSPARENT;\n  var backgroundColor = element === ownerDocument.documentElement ? documentBackgroundColor.isTransparent() ? bodyBackgroundColor.isTransparent() ? options.backgroundColor ? new _Color2.default(options.backgroundColor) : null : bodyBackgroundColor : documentBackgroundColor : options.backgroundColor ? new _Color2.default(options.backgroundColor) : null;\n  return (options.foreignObjectRendering ?\n  // $FlowFixMe\n  _Feature2.default.SUPPORT_FOREIGNOBJECT_DRAWING : Promise.resolve(false)).then(function (supportForeignObject) {\n    return supportForeignObject ? function (cloner) {\n      if (process.env.NODE_ENV !== 'production') {\n        logger.log('Document cloned, using foreignObject rendering');\n      }\n      return cloner.inlineFonts(ownerDocument).then(function () {\n        return cloner.resourceLoader.ready();\n      }).then(function () {\n        var renderer = new _ForeignObjectRenderer2.default(cloner.documentElement);\n        var defaultView = ownerDocument.defaultView;\n        var scrollX = defaultView.pageXOffset;\n        var scrollY = defaultView.pageYOffset;\n        var isDocument = element.tagName === 'HTML' || element.tagName === 'BODY';\n        var _ref = isDocument ? (0, _Bounds.parseDocumentSize)(ownerDocument) : (0, _Bounds.parseBounds)(element, scrollX, scrollY),\n          width = _ref.width,\n          height = _ref.height,\n          left = _ref.left,\n          top = _ref.top;\n        return renderer.render({\n          backgroundColor: backgroundColor,\n          logger: logger,\n          scale: options.scale,\n          x: typeof options.x === 'number' ? options.x : left,\n          y: typeof options.y === 'number' ? options.y : top,\n          width: typeof options.width === 'number' ? options.width : Math.ceil(width),\n          height: typeof options.height === 'number' ? options.height : Math.ceil(height),\n          windowWidth: options.windowWidth,\n          windowHeight: options.windowHeight,\n          scrollX: options.scrollX,\n          scrollY: options.scrollY\n        });\n      });\n    }(new _Clone.DocumentCloner(element, options, logger, true, renderElement)) : (0, _Clone.cloneWindow)(ownerDocument, windowBounds, element, options, logger, renderElement).then(function (_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 3),\n        container = _ref3[0],\n        clonedElement = _ref3[1],\n        resourceLoader = _ref3[2];\n      if (process.env.NODE_ENV !== 'production') {\n        logger.log('Document cloned, using computed rendering');\n      }\n      var stack = (0, _NodeParser.NodeParser)(clonedElement, resourceLoader, logger);\n      var clonedDocument = clonedElement.ownerDocument;\n      if (backgroundColor === stack.container.style.background.backgroundColor) {\n        stack.container.style.background.backgroundColor = _Color.TRANSPARENT;\n      }\n      return resourceLoader.ready().then(function (imageStore) {\n        var fontMetrics = new _Font.FontMetrics(clonedDocument);\n        if (process.env.NODE_ENV !== 'production') {\n          logger.log('Starting renderer');\n        }\n        var defaultView = clonedDocument.defaultView;\n        var scrollX = defaultView.pageXOffset;\n        var scrollY = defaultView.pageYOffset;\n        var isDocument = clonedElement.tagName === 'HTML' || clonedElement.tagName === 'BODY';\n        var _ref4 = isDocument ? (0, _Bounds.parseDocumentSize)(ownerDocument) : (0, _Bounds.parseBounds)(clonedElement, scrollX, scrollY),\n          width = _ref4.width,\n          height = _ref4.height,\n          left = _ref4.left,\n          top = _ref4.top;\n        var renderOptions = {\n          backgroundColor: backgroundColor,\n          fontMetrics: fontMetrics,\n          imageStore: imageStore,\n          logger: logger,\n          scale: options.scale,\n          x: typeof options.x === 'number' ? options.x : left,\n          y: typeof options.y === 'number' ? options.y : top,\n          width: typeof options.width === 'number' ? options.width : Math.ceil(width),\n          height: typeof options.height === 'number' ? options.height : Math.ceil(height)\n        };\n        if (Array.isArray(options.target)) {\n          return Promise.all(options.target.map(function (target) {\n            var renderer = new _Renderer2.default(target, renderOptions);\n            return renderer.render(stack);\n          }));\n        } else {\n          var renderer = new _Renderer2.default(options.target, renderOptions);\n          var canvas = renderer.render(stack);\n          if (options.removeContainer === true) {\n            if (container.parentNode) {\n              container.parentNode.removeChild(container);\n            } else if (process.env.NODE_ENV !== 'production') {\n              logger.log('Cannot detach cloned iframe as it is not in the DOM anymore');\n            }\n          }\n          return canvas;\n        }\n      });\n    });\n  });\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}