{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, Input, Output, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nlet GMap = /*#__PURE__*/(() => {\n  class GMap {\n    constructor(el, differs, cd, zone) {\n      this.el = el;\n      this.cd = cd;\n      this.zone = zone;\n      this.onMapClick = new EventEmitter();\n      this.onOverlayClick = new EventEmitter();\n      this.onOverlayDblClick = new EventEmitter();\n      this.onOverlayDragStart = new EventEmitter();\n      this.onOverlayDrag = new EventEmitter();\n      this.onOverlayDragEnd = new EventEmitter();\n      this.onMapReady = new EventEmitter();\n      this.onMapDragEnd = new EventEmitter();\n      this.onZoomChanged = new EventEmitter();\n      this.differ = differs.find([]).create(null);\n    }\n    ngAfterViewChecked() {\n      if (!this.map && this.el.nativeElement.offsetParent) {\n        this.initialize();\n      }\n    }\n    initialize() {\n      this.map = new google.maps.Map(this.el.nativeElement.children[0], this.options);\n      this.onMapReady.emit({\n        map: this.map\n      });\n      if (this.overlays) {\n        for (let overlay of this.overlays) {\n          overlay.setMap(this.map);\n          this.bindOverlayEvents(overlay);\n        }\n      }\n      this.map.addListener('click', event => {\n        this.zone.run(() => {\n          this.onMapClick.emit(event);\n        });\n      });\n      this.map.addListener('dragend', event => {\n        this.zone.run(() => {\n          this.onMapDragEnd.emit(event);\n        });\n      });\n      this.map.addListener('zoom_changed', event => {\n        this.zone.run(() => {\n          this.onZoomChanged.emit(event);\n        });\n      });\n    }\n    bindOverlayEvents(overlay) {\n      overlay.addListener('click', event => {\n        this.zone.run(() => {\n          this.onOverlayClick.emit({\n            originalEvent: event,\n            'overlay': overlay,\n            map: this.map\n          });\n        });\n      });\n      overlay.addListener('dblclick', event => {\n        this.zone.run(() => {\n          this.onOverlayDblClick.emit({\n            originalEvent: event,\n            'overlay': overlay,\n            map: this.map\n          });\n        });\n      });\n      if (overlay.getDraggable()) {\n        this.bindDragEvents(overlay);\n      }\n    }\n    ngDoCheck() {\n      let changes = this.differ.diff(this.overlays);\n      if (changes && this.map) {\n        changes.forEachRemovedItem(record => {\n          google.maps.event.clearInstanceListeners(record.item);\n          record.item.setMap(null);\n        });\n        changes.forEachAddedItem(record => {\n          record.item.setMap(this.map);\n          record.item.addListener('click', event => {\n            this.zone.run(() => {\n              this.onOverlayClick.emit({\n                originalEvent: event,\n                overlay: record.item,\n                map: this.map\n              });\n            });\n          });\n          if (record.item.getDraggable()) {\n            this.bindDragEvents(record.item);\n          }\n        });\n      }\n    }\n    bindDragEvents(overlay) {\n      overlay.addListener('dragstart', event => {\n        this.zone.run(() => {\n          this.onOverlayDragStart.emit({\n            originalEvent: event,\n            overlay: overlay,\n            map: this.map\n          });\n        });\n      });\n      overlay.addListener('drag', event => {\n        this.zone.run(() => {\n          this.onOverlayDrag.emit({\n            originalEvent: event,\n            overlay: overlay,\n            map: this.map\n          });\n        });\n      });\n      overlay.addListener('dragend', event => {\n        this.zone.run(() => {\n          this.onOverlayDragEnd.emit({\n            originalEvent: event,\n            overlay: overlay,\n            map: this.map\n          });\n        });\n      });\n    }\n    getMap() {\n      return this.map;\n    }\n  }\n  GMap.ɵfac = function GMap_Factory(t) {\n    return new (t || GMap)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n  GMap.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: GMap,\n    selectors: [[\"p-gmap\"]],\n    hostAttrs: [1, \"p-element\"],\n    inputs: {\n      style: \"style\",\n      styleClass: \"styleClass\",\n      options: \"options\",\n      overlays: \"overlays\"\n    },\n    outputs: {\n      onMapClick: \"onMapClick\",\n      onOverlayClick: \"onOverlayClick\",\n      onOverlayDblClick: \"onOverlayDblClick\",\n      onOverlayDragStart: \"onOverlayDragStart\",\n      onOverlayDrag: \"onOverlayDrag\",\n      onOverlayDragEnd: \"onOverlayDragEnd\",\n      onMapReady: \"onMapReady\",\n      onMapDragEnd: \"onMapDragEnd\",\n      onZoomChanged: \"onZoomChanged\"\n    },\n    decls: 1,\n    vars: 3,\n    consts: [[3, \"ngStyle\"]],\n    template: function GMap_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵclassMap(ctx.styleClass);\n        i0.ɵɵproperty(\"ngStyle\", ctx.style);\n      }\n    },\n    dependencies: [i1.NgStyle],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return GMap;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet GMapModule = /*#__PURE__*/(() => {\n  class GMapModule {}\n  GMapModule.ɵfac = function GMapModule_Factory(t) {\n    return new (t || GMapModule)();\n  };\n  GMapModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: GMapModule\n  });\n  GMapModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return GMapModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { GMap, GMapModule };\n//# sourceMappingURL=primeng-gmap.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}