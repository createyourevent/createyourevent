{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\nimport { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getTicketIdentifier } from '../ticket.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport let TicketService = /*#__PURE__*/(() => {\n  class TicketService {\n    constructor(http, applicationConfigService) {\n      this.http = http;\n      this.applicationConfigService = applicationConfigService;\n      this.resourceUrl = this.applicationConfigService.getEndpointFor('api/tickets');\n    }\n    create(ticket) {\n      const copy = this.convertDateFromClient(ticket);\n      return this.http.post(this.resourceUrl, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    update(ticket) {\n      const copy = this.convertDateFromClient(ticket);\n      return this.http.put(`${this.resourceUrl}/${getTicketIdentifier(ticket)}`, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    partialUpdate(ticket) {\n      const copy = this.convertDateFromClient(ticket);\n      return this.http.patch(`${this.resourceUrl}/${getTicketIdentifier(ticket)}`, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      }).pipe(map(res => this.convertDateArrayFromServer(res)));\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    addTicketToCollectionIfMissing(ticketCollection, ...ticketsToCheck) {\n      const tickets = ticketsToCheck.filter(isPresent);\n      if (tickets.length > 0) {\n        const ticketCollectionIdentifiers = ticketCollection.map(ticketItem => getTicketIdentifier(ticketItem));\n        const ticketsToAdd = tickets.filter(ticketItem => {\n          const ticketIdentifier = getTicketIdentifier(ticketItem);\n          if (ticketIdentifier == null || ticketCollectionIdentifiers.includes(ticketIdentifier)) {\n            return false;\n          }\n          ticketCollectionIdentifiers.push(ticketIdentifier);\n          return true;\n        });\n        return [...ticketsToAdd, ...ticketCollection];\n      }\n      return ticketCollection;\n    }\n    convertDateFromClient(ticket) {\n      return Object.assign({}, ticket, {\n        date: ticket.date?.isValid() ? ticket.date.toJSON() : undefined,\n        accessDate: ticket.accessDate?.isValid() ? ticket.accessDate.toJSON() : undefined\n      });\n    }\n    convertDateFromServer(res) {\n      if (res.body) {\n        res.body.date = res.body.date ? dayjs(res.body.date) : undefined;\n        res.body.accessDate = res.body.accessDate ? dayjs(res.body.accessDate) : undefined;\n      }\n      return res;\n    }\n    convertDateArrayFromServer(res) {\n      if (res.body) {\n        res.body.forEach(ticket => {\n          ticket.date = ticket.date ? dayjs(ticket.date) : undefined;\n          ticket.accessDate = ticket.accessDate ? dayjs(ticket.accessDate) : undefined;\n        });\n      }\n      return res;\n    }\n  }\n  TicketService.ɵfac = function TicketService_Factory(t) {\n    return new (t || TicketService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n  };\n  TicketService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TicketService,\n    factory: TicketService.ɵfac,\n    providedIn: 'root'\n  });\n  return TicketService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}