{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\nimport { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getOrganizationLikeDislikeIdentifier } from '../organization-like-dislike.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport let OrganizationLikeDislikeService = /*#__PURE__*/(() => {\n  class OrganizationLikeDislikeService {\n    constructor(http, applicationConfigService) {\n      this.http = http;\n      this.applicationConfigService = applicationConfigService;\n      this.resourceUrl = this.applicationConfigService.getEndpointFor('api/organization-like-dislikes');\n    }\n    create(organizationLikeDislike) {\n      const copy = this.convertDateFromClient(organizationLikeDislike);\n      return this.http.post(this.resourceUrl, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    update(organizationLikeDislike) {\n      const copy = this.convertDateFromClient(organizationLikeDislike);\n      return this.http.put(`${this.resourceUrl}/${getOrganizationLikeDislikeIdentifier(organizationLikeDislike)}`, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    partialUpdate(organizationLikeDislike) {\n      const copy = this.convertDateFromClient(organizationLikeDislike);\n      return this.http.patch(`${this.resourceUrl}/${getOrganizationLikeDislikeIdentifier(organizationLikeDislike)}`, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      }).pipe(map(res => this.convertDateArrayFromServer(res)));\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    addOrganizationLikeDislikeToCollectionIfMissing(organizationLikeDislikeCollection, ...organizationLikeDislikesToCheck) {\n      const organizationLikeDislikes = organizationLikeDislikesToCheck.filter(isPresent);\n      if (organizationLikeDislikes.length > 0) {\n        const organizationLikeDislikeCollectionIdentifiers = organizationLikeDislikeCollection.map(organizationLikeDislikeItem => getOrganizationLikeDislikeIdentifier(organizationLikeDislikeItem));\n        const organizationLikeDislikesToAdd = organizationLikeDislikes.filter(organizationLikeDislikeItem => {\n          const organizationLikeDislikeIdentifier = getOrganizationLikeDislikeIdentifier(organizationLikeDislikeItem);\n          if (organizationLikeDislikeIdentifier == null || organizationLikeDislikeCollectionIdentifiers.includes(organizationLikeDislikeIdentifier)) {\n            return false;\n          }\n          organizationLikeDislikeCollectionIdentifiers.push(organizationLikeDislikeIdentifier);\n          return true;\n        });\n        return [...organizationLikeDislikesToAdd, ...organizationLikeDislikeCollection];\n      }\n      return organizationLikeDislikeCollection;\n    }\n    convertDateFromClient(organizationLikeDislike) {\n      return Object.assign({}, organizationLikeDislike, {\n        date: organizationLikeDislike.date?.isValid() ? organizationLikeDislike.date.toJSON() : undefined\n      });\n    }\n    convertDateFromServer(res) {\n      if (res.body) {\n        res.body.date = res.body.date ? dayjs(res.body.date) : undefined;\n      }\n      return res;\n    }\n    convertDateArrayFromServer(res) {\n      if (res.body) {\n        res.body.forEach(organizationLikeDislike => {\n          organizationLikeDislike.date = organizationLikeDislike.date ? dayjs(organizationLikeDislike.date) : undefined;\n        });\n      }\n      return res;\n    }\n  }\n  OrganizationLikeDislikeService.ɵfac = function OrganizationLikeDislikeService_Factory(t) {\n    return new (t || OrganizationLikeDislikeService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n  };\n  OrganizationLikeDislikeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OrganizationLikeDislikeService,\n    factory: OrganizationLikeDislikeService.ɵfac,\n    providedIn: 'root'\n  });\n  return OrganizationLikeDislikeService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}