{"ast":null,"code":"import { ReplaySubject, of } from 'rxjs';\nimport { shareReplay, tap, catchError } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\nimport { ChipsCollection } from 'app/entities/chips-collection/chips-collection.model';\nimport { UserPointAssociation } from 'app/entities/user-point-association/user-point-association.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngx-translate/core\";\nimport * as i2 from \"ngx-webstorage\";\nimport * as i3 from \"@angular/common/http\";\nimport * as i4 from \"app/core/auth/state-storage.service\";\nimport * as i5 from \"@angular/router\";\nimport * as i6 from \"../config/application-config.service\";\nimport * as i7 from \"ng-jhipster\";\nimport * as i8 from \"../../system-notification/SharedNotificationService.service\";\nimport * as i9 from \"app/points/points-display/points-display.service\";\nimport * as i10 from \"app/general.service\";\nimport * as i11 from \"ngx-socket-io\";\nimport * as i12 from \"app/entities/user-point-association/service/user-point-association.service\";\nimport * as i13 from \"app/entities/chips-collection/service/chips-collection.service\";\nimport * as i14 from \"app/chat.service\";\nexport let AccountService = /*#__PURE__*/(() => {\n  class AccountService {\n    constructor(translateService, sessionStorage, http, stateStorageService, router, applicationConfigService, languageService, sharedNotificationService, pointsDataService, generalService, socket, userPointAssociationService, chipsCollectionService, sharedChatService) {\n      this.translateService = translateService;\n      this.sessionStorage = sessionStorage;\n      this.http = http;\n      this.stateStorageService = stateStorageService;\n      this.router = router;\n      this.applicationConfigService = applicationConfigService;\n      this.languageService = languageService;\n      this.sharedNotificationService = sharedNotificationService;\n      this.pointsDataService = pointsDataService;\n      this.generalService = generalService;\n      this.socket = socket;\n      this.userPointAssociationService = userPointAssociationService;\n      this.chipsCollectionService = chipsCollectionService;\n      this.sharedChatService = sharedChatService;\n      this.userIdentity = null;\n      this.authenticationState = new ReplaySubject(1);\n    }\n    authenticate(identity) {\n      this.userIdentity = identity;\n      this.authenticationState.next(this.userIdentity);\n    }\n    hasAnyAuthority(authorities) {\n      if (!this.userIdentity) {\n        return false;\n      }\n      if (!Array.isArray(authorities)) {\n        authorities = [authorities];\n      }\n      return this.userIdentity.authorities.some(authority => authorities.includes(authority));\n    }\n    identity(force) {\n      if (!this.accountCache$ || force || !this.isAuthenticated()) {\n        this.accountCache$ = this.fetch().pipe(catchError(() => of(null)), tap(account => {\n          this.authenticate(account);\n          // After retrieve the account info, the language will be changed to\n          // the user's preferred language configured in the account setting\n          if (account && account.langKey) {\n            this.sharedChatService.onLoginComplete();\n            const langKey = this.sessionStorage.retrieve('locale') || account.langKey;\n            this.languageService.changeLanguage(langKey);\n            this.generalService.findWidthAuthorities().subscribe(u => {\n              if (u.body.agb === null || u.body.agb === undefined || u.body.agb === false) {\n                this.router.navigate(['/agb']);\n                return;\n              }\n              if (u.body.address === null || u.body.phone === null || u.body.iban === null) {\n                this.router.navigate(['/settings']);\n                return;\n              }\n              this.generalService.getPointsFromUser(u.body.id).subscribe(p => {\n                const pointsKc = p.body;\n                u.body.points = pointsKc;\n                this.pointsDataService.changePoint(u.body.points);\n                if (u.body.points === null) {\n                  u.body.points = 0;\n                  this.generalService.updateUserLoggedInAndPoints(u.body.id, u.body.loggedIn, u.body.points).subscribe();\n                }\n                u.body.loggedIn = true;\n                this.generalService.updateUserLoggedInAndPoints(u.body.id, u.body.loggedIn, u.body.points).subscribe();\n              });\n              this.generalService.findChipsCollectionByUserId(u.body.id).subscribe(ucc => {\n                if (ucc.body === null || ucc.body === undefined) {\n                  const chipsCollection = new ChipsCollection();\n                  chipsCollection.user = u.body;\n                  this.chipsCollectionService.create(chipsCollection).subscribe();\n                }\n              });\n              this.socket.emit('join', account.firstName + ' ' + account.lastName, u.body.id);\n              this.pointsDataService.changePoint(u.body.points);\n              if (!u.body.loggedIn) {\n                this.generalService.findPointsByKey('login').subscribe(p => {\n                  const points = p.body;\n                  this.generalService.findUserPointAssociationByUsersIdAndPointkey(u.body.id, points.key).subscribe(s => {\n                    const upa = s.body;\n                    const day = dayjs();\n                    let i = 0;\n                    upa.forEach(element => {\n                      if (day.isSame(element.date, 'day')) {\n                        i++;\n                      }\n                    });\n                    if (i <= points.countPerDay) {\n                      const iupa = new UserPointAssociation();\n                      iupa.users = u.body;\n                      iupa.points = points;\n                      iupa.date = dayjs();\n                      this.userPointAssociationService.create(iupa).subscribe();\n                      u.body.points += points.points;\n                      u.body.loggedIn = true;\n                      this.generalService.findWidthAuthorities().subscribe(us => {\n                        const user = us.body;\n                        this.generalService.updateUserLoggedInAndPoints(u.body.id, u.body.loggedIn, u.body.points).subscribe(t => {\n                          this.pointsDataService.changePoint(u.body.points);\n                        });\n                      });\n                    }\n                  });\n                });\n              }\n            });\n            this.sharedNotificationService.sendLoginEvent();\n          }\n          // After retrieve the account info, the language will be changed to\n          // the user's preferred language configured in the account setting\n          if (account?.langKey) {\n            const langKey = this.sessionStorage.retrieve('locale') ?? account.langKey;\n            this.translateService.use(langKey);\n          }\n          if (account) {\n            this.navigateToStoredUrl();\n          }\n        }), shareReplay());\n      }\n      return this.accountCache$;\n    }\n    isAuthenticated() {\n      return this.userIdentity !== null;\n    }\n    getAuthenticationState() {\n      return this.authenticationState.asObservable();\n    }\n    getImageUrl() {\n      return this.userIdentity?.imageUrl ?? '';\n    }\n    getAccount() {\n      return this.userIdentity;\n    }\n    fetch() {\n      return this.http.get(this.applicationConfigService.getEndpointFor('api/account'));\n    }\n    navigateToStoredUrl() {\n      // previousState can be set in the authExpiredInterceptor and in the userRouteAccessService\n      // if login is successful, go to stored previousState and clear previousState\n      const previousUrl = this.stateStorageService.getUrl();\n      if (previousUrl) {\n        this.stateStorageService.clearUrl();\n        this.router.navigateByUrl(previousUrl);\n      }\n    }\n  }\n  AccountService.ɵfac = function AccountService_Factory(t) {\n    return new (t || AccountService)(i0.ɵɵinject(i1.TranslateService), i0.ɵɵinject(i2.SessionStorageService), i0.ɵɵinject(i3.HttpClient), i0.ɵɵinject(i4.StateStorageService), i0.ɵɵinject(i5.Router), i0.ɵɵinject(i6.ApplicationConfigService), i0.ɵɵinject(i7.JhiLanguageService), i0.ɵɵinject(i8.SharedNotificationService), i0.ɵɵinject(i9.PointsDataService), i0.ɵɵinject(i10.GeneralService), i0.ɵɵinject(i11.Socket), i0.ɵɵinject(i12.UserPointAssociationService), i0.ɵɵinject(i13.ChipsCollectionService), i0.ɵɵinject(i14.SharedChatService));\n  };\n  AccountService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AccountService,\n    factory: AccountService.ɵfac,\n    providedIn: 'root'\n  });\n  return AccountService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}