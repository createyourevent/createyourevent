{"ast":null,"code":"import { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getUserExtensionIdentifier } from '../user-extension.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport class UserExtensionService {\n  constructor(http, applicationConfigService) {\n    this.http = http;\n    this.applicationConfigService = applicationConfigService;\n    this.resourceUrl = this.applicationConfigService.getEndpointFor('api/user-extensions');\n  }\n  create(userExtension) {\n    return this.http.post(this.resourceUrl, userExtension, {\n      observe: 'response'\n    });\n  }\n  update(userExtension) {\n    return this.http.put(`${this.resourceUrl}/${getUserExtensionIdentifier(userExtension)}`, userExtension, {\n      observe: 'response'\n    });\n  }\n  partialUpdate(userExtension) {\n    return this.http.patch(`${this.resourceUrl}/${getUserExtensionIdentifier(userExtension)}`, userExtension, {\n      observe: 'response'\n    });\n  }\n  find(id) {\n    return this.http.get(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  query(req) {\n    const options = createRequestOption(req);\n    return this.http.get(this.resourceUrl, {\n      params: options,\n      observe: 'response'\n    });\n  }\n  delete(id) {\n    return this.http.delete(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  addUserExtensionToCollectionIfMissing(userExtensionCollection, ...userExtensionsToCheck) {\n    const userExtensions = userExtensionsToCheck.filter(isPresent);\n    if (userExtensions.length > 0) {\n      const userExtensionCollectionIdentifiers = userExtensionCollection.map(userExtensionItem => getUserExtensionIdentifier(userExtensionItem));\n      const userExtensionsToAdd = userExtensions.filter(userExtensionItem => {\n        const userExtensionIdentifier = getUserExtensionIdentifier(userExtensionItem);\n        if (userExtensionIdentifier == null || userExtensionCollectionIdentifiers.includes(userExtensionIdentifier)) {\n          return false;\n        }\n        userExtensionCollectionIdentifiers.push(userExtensionIdentifier);\n        return true;\n      });\n      return [...userExtensionsToAdd, ...userExtensionCollection];\n    }\n    return userExtensionCollection;\n  }\n}\nUserExtensionService.ɵfac = function UserExtensionService_Factory(t) {\n  return new (t || UserExtensionService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n};\nUserExtensionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserExtensionService,\n  factory: UserExtensionService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAIA,SAASA,SAAS,QAAQ,yBAAyB;AAEnD,SAASC,mBAAmB,QAAQ,+BAA+B;AACnE,SAAyBC,0BAA0B,QAAQ,yBAAyB;;;;AAMpF,OAAM,MAAOC,oBAAoB;EAG/BC,YAAsBC,IAAgB,EAAYC,wBAAkD;IAA9E,SAAI,GAAJD,IAAI;IAAwB,6BAAwB,GAAxBC,wBAAwB;IAFhE,gBAAW,GAAG,IAAI,CAACA,wBAAwB,CAACC,cAAc,CAAC,qBAAqB,CAAC;EAEY;EAEvGC,MAAM,CAACC,aAA6B;IAClC,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAiB,IAAI,CAACC,WAAW,EAAEF,aAAa,EAAE;MAAEG,OAAO,EAAE;IAAU,CAAE,CAAC;EACjG;EAEAC,MAAM,CAACJ,aAA6B;IAClC,OAAO,IAAI,CAACJ,IAAI,CAACS,GAAG,CAAiB,GAAG,IAAI,CAACH,WAAW,IAAIT,0BAA0B,CAACO,aAAa,CAAW,EAAE,EAAEA,aAAa,EAAE;MAChIG,OAAO,EAAE;KACV,CAAC;EACJ;EAEAG,aAAa,CAACN,aAA6B;IACzC,OAAO,IAAI,CAACJ,IAAI,CAACW,KAAK,CAAiB,GAAG,IAAI,CAACL,WAAW,IAAIT,0BAA0B,CAACO,aAAa,CAAW,EAAE,EAAEA,aAAa,EAAE;MAClIG,OAAO,EAAE;KACV,CAAC;EACJ;EAEAK,IAAI,CAACC,EAAU;IACb,OAAO,IAAI,CAACb,IAAI,CAACc,GAAG,CAAiB,GAAG,IAAI,CAACR,WAAW,IAAIO,EAAE,EAAE,EAAE;MAAEN,OAAO,EAAE;IAAU,CAAE,CAAC;EAC5F;EAEAQ,KAAK,CAACC,GAAS;IACb,MAAMC,OAAO,GAAGrB,mBAAmB,CAACoB,GAAG,CAAC;IACxC,OAAO,IAAI,CAAChB,IAAI,CAACc,GAAG,CAAmB,IAAI,CAACR,WAAW,EAAE;MAAEY,MAAM,EAAED,OAAO;MAAEV,OAAO,EAAE;IAAU,CAAE,CAAC;EACpG;EAEAY,MAAM,CAACN,EAAU;IACf,OAAO,IAAI,CAACb,IAAI,CAACmB,MAAM,CAAC,GAAG,IAAI,CAACb,WAAW,IAAIO,EAAE,EAAE,EAAE;MAAEN,OAAO,EAAE;IAAU,CAAE,CAAC;EAC/E;EAEAa,qCAAqC,CACnCC,uBAAyC,EACzC,GAAGC,qBAA4D;IAE/D,MAAMC,cAAc,GAAqBD,qBAAqB,CAACE,MAAM,CAAC7B,SAAS,CAAC;IAChF,IAAI4B,cAAc,CAACE,MAAM,GAAG,CAAC,EAAE;MAC7B,MAAMC,kCAAkC,GAAGL,uBAAuB,CAACM,GAAG,CACpEC,iBAAiB,IAAI/B,0BAA0B,CAAC+B,iBAAiB,CAAE,CACpE;MACD,MAAMC,mBAAmB,GAAGN,cAAc,CAACC,MAAM,CAACI,iBAAiB,IAAG;QACpE,MAAME,uBAAuB,GAAGjC,0BAA0B,CAAC+B,iBAAiB,CAAC;QAC7E,IAAIE,uBAAuB,IAAI,IAAI,IAAIJ,kCAAkC,CAACK,QAAQ,CAACD,uBAAuB,CAAC,EAAE;UAC3G,OAAO,KAAK;;QAEdJ,kCAAkC,CAACM,IAAI,CAACF,uBAAuB,CAAC;QAChE,OAAO,IAAI;MACb,CAAC,CAAC;MACF,OAAO,CAAC,GAAGD,mBAAmB,EAAE,GAAGR,uBAAuB,CAAC;;IAE7D,OAAOA,uBAAuB;EAChC;;;mBAtDWvB,oBAAoB;AAAA;;SAApBA,oBAAoB;EAAAmC,SAApBnC,oBAAoB;EAAAoC,YADP;AAAM","names":["isPresent","createRequestOption","getUserExtensionIdentifier","UserExtensionService","constructor","http","applicationConfigService","getEndpointFor","create","userExtension","post","resourceUrl","observe","update","put","partialUpdate","patch","find","id","get","query","req","options","params","delete","addUserExtensionToCollectionIfMissing","userExtensionCollection","userExtensionsToCheck","userExtensions","filter","length","userExtensionCollectionIdentifiers","map","userExtensionItem","userExtensionsToAdd","userExtensionIdentifier","includes","push","factory","providedIn"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/entities/user-extension/service/user-extension.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { isPresent } from 'app/core/util/operators';\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { IUserExtension, getUserExtensionIdentifier } from '../user-extension.model';\n\nexport type EntityResponseType = HttpResponse<IUserExtension>;\nexport type EntityArrayResponseType = HttpResponse<IUserExtension[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class UserExtensionService {\n  protected resourceUrl = this.applicationConfigService.getEndpointFor('api/user-extensions');\n\n  constructor(protected http: HttpClient, protected applicationConfigService: ApplicationConfigService) {}\n\n  create(userExtension: IUserExtension): Observable<EntityResponseType> {\n    return this.http.post<IUserExtension>(this.resourceUrl, userExtension, { observe: 'response' });\n  }\n\n  update(userExtension: IUserExtension): Observable<EntityResponseType> {\n    return this.http.put<IUserExtension>(`${this.resourceUrl}/${getUserExtensionIdentifier(userExtension) as number}`, userExtension, {\n      observe: 'response',\n    });\n  }\n\n  partialUpdate(userExtension: IUserExtension): Observable<EntityResponseType> {\n    return this.http.patch<IUserExtension>(`${this.resourceUrl}/${getUserExtensionIdentifier(userExtension) as number}`, userExtension, {\n      observe: 'response',\n    });\n  }\n\n  find(id: number): Observable<EntityResponseType> {\n    return this.http.get<IUserExtension>(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  query(req?: any): Observable<EntityArrayResponseType> {\n    const options = createRequestOption(req);\n    return this.http.get<IUserExtension[]>(this.resourceUrl, { params: options, observe: 'response' });\n  }\n\n  delete(id: number): Observable<HttpResponse<{}>> {\n    return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  addUserExtensionToCollectionIfMissing(\n    userExtensionCollection: IUserExtension[],\n    ...userExtensionsToCheck: (IUserExtension | null | undefined)[]\n  ): IUserExtension[] {\n    const userExtensions: IUserExtension[] = userExtensionsToCheck.filter(isPresent);\n    if (userExtensions.length > 0) {\n      const userExtensionCollectionIdentifiers = userExtensionCollection.map(\n        userExtensionItem => getUserExtensionIdentifier(userExtensionItem)!\n      );\n      const userExtensionsToAdd = userExtensions.filter(userExtensionItem => {\n        const userExtensionIdentifier = getUserExtensionIdentifier(userExtensionItem);\n        if (userExtensionIdentifier == null || userExtensionCollectionIdentifiers.includes(userExtensionIdentifier)) {\n          return false;\n        }\n        userExtensionCollectionIdentifiers.push(userExtensionIdentifier);\n        return true;\n      });\n      return [...userExtensionsToAdd, ...userExtensionCollection];\n    }\n    return userExtensionCollection;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}