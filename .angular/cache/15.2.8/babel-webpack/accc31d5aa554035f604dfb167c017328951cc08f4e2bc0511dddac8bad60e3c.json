{"ast":null,"code":"import { DeliveryTypes } from 'app/entities/enumerations/delivery-types.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"app/google-geocode.service\";\nexport class SharedEventService {\n  constructor(googleGeocoderService) {\n    this.googleGeocoderService = googleGeocoderService;\n    this.sharedEvent = {};\n    this.sharedFlyer = '';\n    this.sharedFlyerContentType = '';\n    this.sharedYoutube = '';\n    this.selectedEventProductOrders = [];\n    this.selectedEventServiceMapOrders = [];\n    this.select_products = [];\n    this.select_services = [];\n    this.totalProducts = 0;\n    this.totalServices = 0;\n    this.totalRideCosts = 0;\n    this.totalCart = 0;\n    this.totalShipping = 0;\n    this.totalDeliveryCosts = 0;\n    this.totalDeliveryRideCosts = 0;\n  }\n  getInvestment() {\n    this.model = this.sharedEvent;\n    return Number(this.model.investment);\n  }\n  getLocationCosts() {\n    this.model = this.sharedEvent;\n    return Number(this.model.organizationReservation.total);\n  }\n  calcRevenue() {\n    this.model = this.sharedEvent;\n    return Number(this.model.price) * Number(this.model.minPlacenumber);\n  }\n  calcProducts() {\n    let totalProducts = 0;\n    this.selectedEventProductOrders.forEach(element => {\n      totalProducts += element.total;\n    });\n    this.totalProducts = totalProducts;\n    return this.totalProducts;\n  }\n  calcServices() {\n    let totalServices = 0;\n    this.selectedEventServiceMapOrders.forEach(element => {\n      totalServices += element.total;\n    });\n    this.totalServices = totalServices;\n    return this.totalServices;\n  }\n  calcRideCosts() {\n    let totalRideCosts = 0;\n    this.selectedEventServiceMapOrders.forEach(element => {\n      totalRideCosts += element.rideCosts;\n    });\n    this.totalRideCosts = totalRideCosts;\n    return this.totalRideCosts;\n  }\n  calcTotalInCart() {\n    this.totalCart = this.getLocationCosts() + this.calcProducts() + this.calcServices() + this.calcRideCosts() + this.totalDeliveryCosts + this.totalDeliveryRideCosts + this.totalShipping;\n    return this.totalCart;\n  }\n  calcShipping() {\n    let shippingCosts = 0;\n    if (this.selectedEventProductOrders.length === 0) {\n      return -1;\n    }\n    this.selectedEventProductOrders.forEach(element => {\n      if (element.deliveryType.deliveryType === DeliveryTypes.SHIPPING) {\n        shippingCosts += element.deliveryType.price;\n      }\n    });\n    this.totalShipping = shippingCosts;\n    return this.totalShipping;\n  }\n  calcDeliveryCosts() {\n    this.totalDeliveryCosts = 0;\n    this.totalDeliveryRideCosts = 0;\n    if (this.selectedEventProductOrders.length === 0) {\n      return;\n    }\n    let tdc = 0;\n    this.selectedEventProductOrders.forEach(element => {\n      tdc += element.deliveryType.price;\n    });\n    this.totalDeliveryCosts = tdc / this.selectedEventProductOrders.length;\n    let shops = [];\n    let rideCosts = [];\n    this.selectedEventProductOrders.forEach(element => {\n      const found = shops.find(x => x.id === element.shop.id);\n      if (!found || found === undefined) {\n        shops.push(element.shop);\n        const shopOrders = this.selectedEventProductOrders.filter(x => x.shop.id === element.shop.id);\n        let trc = 0;\n        shopOrders.forEach(shopOrder => {\n          trc += shopOrder.deliveryType.pricePerKilometre;\n        });\n        rideCosts.push(trc / shopOrders.length);\n      }\n    });\n    this.model = this.sharedEvent;\n    let distances;\n    this.getDistancesFromShops(shops).then(ds => {\n      distances = ds;\n      for (let i = 0; i < shops.length; i++) {\n        const shop = shops[i];\n        const distance = distances[i];\n        const rideCost = rideCosts[i];\n        this.totalDeliveryRideCosts = distance / 1000 * rideCost;\n      }\n      this.calcTotalInCart();\n    });\n  }\n  getDistancesFromShops(shops) {\n    let p = new Promise((resolve, reject) => {\n      const addressEvent = this.model.address;\n      let distances = [];\n      let posEvent;\n      let latEvent = 0;\n      let lngEvent = 0;\n      let latShop = 0;\n      let lngShop = 0;\n      let posShop;\n      const queryParamEvent = addressEvent.replace(' ', '+');\n      this.googleGeocoderService.getFromAddress(queryParamEvent).subscribe(resShop => {\n        const geocoderShop = resShop.body['results'];\n        const geometryShop = geocoderShop[0].geometry;\n        latEvent = geometryShop.location.lat;\n        lngEvent = geometryShop.location.lng;\n        posEvent = new google.maps.LatLng(latEvent, lngEvent);\n        shops.forEach(shop => {\n          const queryParamShop = shop.address.replace(' ', '+');\n          this.googleGeocoderService.getFromAddress(queryParamShop).subscribe(resShop => {\n            const geocoderShop = resShop.body['results'];\n            const geometryShop = geocoderShop[0].geometry;\n            latShop = geometryShop.location.lat;\n            lngShop = geometryShop.location.lng;\n            posShop = new google.maps.LatLng(latShop, lngShop);\n            let d = google.maps.geometry.spherical.computeDistanceBetween(posEvent, posShop);\n            distances.push(d);\n            if (distances.length === shops.length) {\n              resolve(distances);\n            }\n          });\n        });\n      });\n    });\n    return p;\n  }\n}\nSharedEventService.ɵfac = function SharedEventService_Factory(t) {\n  return new (t || SharedEventService)(i0.ɵɵinject(i1.GoogleGeocodeService));\n};\nSharedEventService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SharedEventService,\n  factory: SharedEventService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["DeliveryTypes","SharedEventService","constructor","googleGeocoderService","getInvestment","model","sharedEvent","Number","investment","getLocationCosts","organizationReservation","total","calcRevenue","price","minPlacenumber","calcProducts","totalProducts","selectedEventProductOrders","forEach","element","calcServices","totalServices","selectedEventServiceMapOrders","calcRideCosts","totalRideCosts","rideCosts","calcTotalInCart","totalCart","totalDeliveryCosts","totalDeliveryRideCosts","totalShipping","calcShipping","shippingCosts","length","deliveryType","SHIPPING","calcDeliveryCosts","tdc","shops","found","find","x","id","shop","undefined","push","shopOrders","filter","trc","shopOrder","pricePerKilometre","distances","getDistancesFromShops","then","ds","i","distance","rideCost","p","Promise","resolve","reject","addressEvent","address","posEvent","latEvent","lngEvent","latShop","lngShop","posShop","queryParamEvent","replace","getFromAddress","subscribe","resShop","geocoderShop","body","geometryShop","geometry","location","lat","lng","google","maps","LatLng","queryParamShop","d","spherical","computeDistanceBetween","factory","providedIn"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/organisator/create-event/shared-event.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { DeliveryTypes } from 'app/entities/enumerations/delivery-types.model';\nimport { IEventProductOrder } from 'app/entities/event-product-order/event-product-order.model';\nimport { IEventServiceMapOrder } from 'app/entities/event-service-map-order/event-service-map-order.model';\nimport { IOrganizationReservation } from 'app/entities/organization-reservation/organization-reservation.model';\nimport { IOrganization } from 'app/entities/organization/organization.model';\nimport { IShop } from 'app/entities/shop/shop.model';\nimport { GoogleGeocodeService } from 'app/google-geocode.service';\n\n\n@Injectable({ providedIn: 'root' })\nexport class SharedEventService {\n  public sharedEvent: any = {};\n  public sharedFlyer = '';\n  public sharedFlyerContentType = '';\n  public sharedYoutube = '';\n  public selectedEventProductOrders: IEventProductOrder[] = [];\n  public selectedEventServiceMapOrders: IEventServiceMapOrder[] = [];\n\n  public select_products: string[] = [];\n  public select_services: string[] = [];\n\n  public totalProducts = 0;\n  public totalServices = 0;\n  public totalRideCosts = 0;\n  public totalCart = 0;\n  public totalShipping = 0;\n  public totalDeliveryCosts = 0;\n  public totalDeliveryRideCosts = 0;\n\n  model: any;\n\n  public organization: IOrganization;\n  public organizationReservation: IOrganizationReservation;\n\n  constructor(private googleGeocoderService: GoogleGeocodeService) {\n  }\n\n  getInvestment(): number {\n    this.model = this.sharedEvent;\n    return Number(this.model.investment);\n  }\n\n  getLocationCosts(): number {\n    this.model = this.sharedEvent;\n    return Number(this.model.organizationReservation.total);\n  }\n\n\n  calcRevenue(): number {\n    this.model = this.sharedEvent;\n    return Number(this.model.price) * Number(this.model.minPlacenumber);\n  }\n\n  calcProducts(): number {\n    let totalProducts = 0;\n    this.selectedEventProductOrders.forEach(element => {\n      totalProducts += element.total!;\n    });\n    this.totalProducts = totalProducts;\n    return this.totalProducts;\n  }\n\n  calcServices(): number {\n    let totalServices = 0;\n    this.selectedEventServiceMapOrders.forEach(element => {\n      totalServices += element.total!;\n    });\n    this.totalServices = totalServices;\n    return this.totalServices;\n  }\n\n  calcRideCosts(): number {\n    let totalRideCosts = 0;\n    this.selectedEventServiceMapOrders.forEach(element => {\n      totalRideCosts += element.rideCosts!;\n    });\n    this.totalRideCosts = totalRideCosts;\n    return this.totalRideCosts;\n  }\n\n  calcTotalInCart(): number {\n    this.totalCart =\n      this.getLocationCosts() +\n      this.calcProducts() +\n      this.calcServices() +\n      this.calcRideCosts() +\n      this.totalDeliveryCosts +\n      this.totalDeliveryRideCosts +\n      this.totalShipping;\n    return this.totalCart;\n  }\n\n  calcShipping(): number {\n    let shippingCosts = 0;\n    if (this.selectedEventProductOrders.length === 0) {\n      return -1;\n    }\n    this.selectedEventProductOrders.forEach(element => {\n      if (element.deliveryType!.deliveryType === DeliveryTypes.SHIPPING) {\n        shippingCosts += element.deliveryType!.price!;\n      }\n    });\n    this.totalShipping = shippingCosts;\n    return this.totalShipping;\n  }\n\n  calcDeliveryCosts(): void {\n    this.totalDeliveryCosts = 0;\n    this.totalDeliveryRideCosts = 0;\n\n    if (this.selectedEventProductOrders.length === 0) {\n      return;\n    }\n    let tdc = 0;\n    this.selectedEventProductOrders.forEach(element => {\n      tdc += element.deliveryType!.price!;\n    });\n    this.totalDeliveryCosts = tdc / this.selectedEventProductOrders.length;\n\n    let shops: IShop[] = [];\n    let rideCosts: number[] = [];\n\n    this.selectedEventProductOrders.forEach(element => {\n      const found = shops.find(x => x.id === element.shop!.id);\n      if (!found || found === undefined) {\n        shops.push(element.shop!);\n        const shopOrders = this.selectedEventProductOrders.filter(x => x.shop!.id === element.shop!.id);\n        let trc = 0;\n        shopOrders.forEach(shopOrder => {\n          trc += shopOrder.deliveryType!.pricePerKilometre!;\n        });\n        rideCosts.push(trc / shopOrders.length);\n      }\n    });\n\n    this.model = this.sharedEvent;\n    let distances: number[];\n    this.getDistancesFromShops(shops).then(ds => {\n      distances = ds;\n      for (let i = 0; i < shops.length; i++) {\n        const shop = shops[i];\n        const distance = distances[i];\n        const rideCost = rideCosts[i];\n        this.totalDeliveryRideCosts = (distance / 1000) * rideCost;\n      }\n      this.calcTotalInCart();\n    });\n  }\n\n  getDistancesFromShops(shops: IShop[]): Promise<number[]> {\n    let p = new Promise<number[]>((resolve, reject) => {\n      const addressEvent = this.model.address;\n      let distances: number[] = [];\n      let posEvent: google.maps.LatLng;\n      let latEvent = 0;\n      let lngEvent = 0;\n      let latShop = 0;\n      let lngShop = 0;\n      let posShop: google.maps.LatLng;\n\n      const queryParamEvent = addressEvent.replace(' ', '+');\n      this.googleGeocoderService.getFromAddress(queryParamEvent).subscribe((resShop: any) => {\n        const geocoderShop = resShop.body!['results'];\n        const geometryShop = geocoderShop[0].geometry;\n        latEvent = geometryShop.location.lat;\n        lngEvent = geometryShop.location.lng;\n        posEvent = new google.maps.LatLng(latEvent, lngEvent);\n\n        shops.forEach(shop => {\n          const queryParamShop = shop.address!.replace(' ', '+');\n          this.googleGeocoderService.getFromAddress(queryParamShop).subscribe((resShop: any) => {\n            const geocoderShop = resShop.body!['results'];\n            const geometryShop = geocoderShop[0].geometry;\n            latShop = geometryShop.location.lat;\n            lngShop = geometryShop.location.lng;\n            posShop = new google.maps.LatLng(latShop, lngShop);\n            let d = google.maps.geometry.spherical.computeDistanceBetween(posEvent, posShop);\n            distances.push(d);\n            if (distances.length === shops.length) {\n              resolve(distances);\n            }\n          });\n        });\n      });\n    });\n    return p;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}