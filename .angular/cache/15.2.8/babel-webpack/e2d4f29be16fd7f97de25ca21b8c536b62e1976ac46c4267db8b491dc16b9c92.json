{"ast":null,"code":"import _defineProperty from \"/home/ceo/mmmm/createyourevent/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { EventEmitter } from '@angular/core';\nimport { SERVER_API_URL } from './app.constants';\nimport { Subject } from 'rxjs';\nimport { createRequestOption } from './core/request/request-util';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class SharedChatService {\n  constructor(http) {\n    _defineProperty(this, \"http\", void 0);\n    _defineProperty(this, \"resourceUrl\", SERVER_API_URL + 'api/chatMessages');\n    _defineProperty(this, \"invokeEvent\", new Subject());\n    _defineProperty(this, \"messageSeen\", new Subject());\n    _defineProperty(this, \"invokeChatNotification\", new EventEmitter());\n    _defineProperty(this, \"subsVar\", void 0);\n    this.http = http;\n  }\n  onLoginComplete() {\n    this.invokeChatNotification.emit();\n  }\n  callClickName(user) {\n    this.invokeEvent.next(user);\n  }\n  sendMessageSeen(msgs) {\n    this.messageSeen.next(msgs);\n  }\n  create(message) {\n    return this.http.post(this.resourceUrl, message, {\n      observe: 'response'\n    });\n  }\n  update(message) {\n    return this.http.put(this.resourceUrl, message, {\n      observe: 'response'\n    });\n  }\n  find(id) {\n    return this.http.get(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  query(req) {\n    const options = createRequestOption(req);\n    return this.http.get(this.resourceUrl, {\n      params: options,\n      observe: 'response'\n    });\n  }\n  delete(id) {\n    return this.http.delete(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  findAllByMessageFrom(id) {\n    return this.http.get(`${this.resourceUrl}/${id}/messageFrom`, {\n      observe: 'response'\n    });\n  }\n  findOneByMessageToAndMessageFromAndMessageTypeAndDateSent(idTo, idFrom, messageType, dateSent) {\n    return this.http.get(`${this.resourceUrl}/${idTo}/${idFrom}/${messageType}/${dateSent}/byMessage`, {\n      observe: 'response'\n    });\n  }\n}\n_defineProperty(SharedChatService, \"\\u0275fac\", function SharedChatService_Factory(t) {\n  return new (t || SharedChatService)(i0.ɵɵinject(i1.HttpClient));\n});\n_defineProperty(SharedChatService, \"\\u0275prov\", /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SharedChatService,\n  factory: SharedChatService.ɵfac,\n  providedIn: 'root'\n}));","map":{"version":3,"mappings":";AAAA,SAAqBA,YAAY,QAAQ,eAAe;AACxD,SAASC,cAAc,QAAQ,iBAAiB;AAEhD,SAAqBC,OAAO,QAAsB,MAAM;AAGxD,SAASC,mBAAmB,QAAQ,6BAA6B;;;AAUjE,OAAM,MAAOC,iBAAiB;EAU5BC,YAAsBC,IAAgB;IAAA;IAAA,qCARjBL,cAAc,GAAG,kBAAkB;IAAA,qCAE5B,IAAIC,OAAO,EAAE;IAAA,qCACP,IAAIA,OAAO,EAAE;IAAA,gDACtB,IAAIF,YAAY,EAAE;IAAA;IAIrB,SAAI,GAAJM,IAAI;EAAe;EAEzCC,eAAe;IACb,IAAI,CAACC,sBAAsB,CAACC,IAAI,EAAE;EACpC;EAEAC,aAAa,CAACC,IAAW;IACvB,IAAI,CAACC,WAAW,CAACC,IAAI,CAACF,IAAI,CAAC;EAC7B;EAEAG,eAAe,CAACC,IAAe;IAC7B,IAAI,CAACC,WAAW,CAACH,IAAI,CAACE,IAAI,CAAC;EAC7B;EAEAE,MAAM,CAACC,OAAqB;IAC1B,OAAO,IAAI,CAACZ,IAAI,CAACa,IAAI,CAAe,IAAI,CAACC,WAAW,EAAEF,OAAO,EAAE;MAAEG,OAAO,EAAE;IAAU,CAAE,CAAC;EACzF;EAEAC,MAAM,CAACJ,OAAqB;IAC1B,OAAO,IAAI,CAACZ,IAAI,CAACiB,GAAG,CAAe,IAAI,CAACH,WAAW,EAAEF,OAAO,EAAE;MAAEG,OAAO,EAAE;IAAU,CAAE,CAAC;EACxF;EAEAG,IAAI,CAACC,EAAU;IACb,OAAO,IAAI,CAACnB,IAAI,CAACoB,GAAG,CAAe,GAAG,IAAI,CAACN,WAAW,IAAIK,EAAE,EAAE,EAAE;MAAEJ,OAAO,EAAE;IAAU,CAAE,CAAC;EAC1F;EAEAM,KAAK,CAACC,GAAS;IACb,MAAMC,OAAO,GAAG1B,mBAAmB,CAACyB,GAAG,CAAC;IACxC,OAAO,IAAI,CAACtB,IAAI,CAACoB,GAAG,CAAiB,IAAI,CAACN,WAAW,EAAE;MAAEU,MAAM,EAAED,OAAO;MAAER,OAAO,EAAE;IAAU,CAAE,CAAC;EAClG;EAEAU,MAAM,CAACN,EAAU;IACf,OAAO,IAAI,CAACnB,IAAI,CAACyB,MAAM,CAAC,GAAG,IAAI,CAACX,WAAW,IAAIK,EAAE,EAAE,EAAE;MAAEJ,OAAO,EAAE;IAAU,CAAE,CAAC;EAC/E;EAEAW,oBAAoB,CAACP,EAAU;IAC7B,OAAO,IAAI,CAACnB,IAAI,CAACoB,GAAG,CAAiB,GAAG,IAAI,CAACN,WAAW,IAAIK,EAAE,cAAc,EAAE;MAAEJ,OAAO,EAAE;IAAU,CAAE,CAAC;EACxG;EAEAY,yDAAyD,CAACC,IAAY,EAAEC,MAAc,EAAEC,WAAmB,EAAEC,QAAc;IACzH,OAAO,IAAI,CAAC/B,IAAI,CAACoB,GAAG,CAAe,GAAG,IAAI,CAACN,WAAW,IAAIc,IAAI,IAAIC,MAAM,IAAIC,WAAW,IAAIC,QAAQ,YAAY,EAAE;MAAEhB,OAAO,EAAE;IAAU,CAAE,CAAC;EAC3I;;gBAnDWjB,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAA,gBAAjBA,iBAAiB;SAAjBA,iBAAiB;EAAAkC,SAAjBlC,iBAAiB;EAAAmC,YAFhB;AAAM","names":["EventEmitter","SERVER_API_URL","Subject","createRequestOption","SharedChatService","constructor","http","onLoginComplete","invokeChatNotification","emit","callClickName","user","invokeEvent","next","sendMessageSeen","msgs","messageSeen","create","message","post","resourceUrl","observe","update","put","find","id","get","query","req","options","params","delete","findAllByMessageFrom","findOneByMessageToAndMessageFromAndMessageTypeAndDateSent","idTo","idFrom","messageType","dateSent","factory","providedIn"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/chat.service.ts"],"sourcesContent":["import { Injectable, EventEmitter } from '@angular/core';\nimport { SERVER_API_URL } from './app.constants';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable, Subject, Subscription } from 'rxjs';\nimport { Message } from 'ng-chat';\nimport { IChatMessage } from './chat/chat-message.model';\nimport { createRequestOption } from './core/request/request-util';\nimport { IUser } from './entities/user/user.model';\n\n\ntype EntityResponseType = HttpResponse<IChatMessage>;\ntype EntityArrayResponseType = HttpResponse<IChatMessage[]>;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SharedChatService {\n\n  public resourceUrl = SERVER_API_URL + 'api/chatMessages';\n\n  invokeEvent: Subject<any> = new Subject();\n  messageSeen: Subject<Message[]> = new Subject();\n  invokeChatNotification = new EventEmitter();\n  subsVar!: Subscription;\n\n\n  constructor(protected http: HttpClient) {}\n\n  onLoginComplete(): void {\n    this.invokeChatNotification.emit();\n  }\n\n  callClickName(user: IUser): void {\n    this.invokeEvent.next(user);\n  }\n\n  sendMessageSeen(msgs: Message[]): void  {\n    this.messageSeen.next(msgs);\n  }\n\n  create(message: IChatMessage): Observable<EntityResponseType> {\n    return this.http.post<IChatMessage>(this.resourceUrl, message, { observe: 'response' });\n  }\n\n  update(message: IChatMessage): Observable<EntityResponseType> {\n    return this.http.put<IChatMessage>(this.resourceUrl, message, { observe: 'response' });\n  }\n\n  find(id: number): Observable<EntityResponseType> {\n    return this.http.get<IChatMessage>(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  query(req?: any): Observable<EntityArrayResponseType> {\n    const options = createRequestOption(req);\n    return this.http.get<IChatMessage[]>(this.resourceUrl, { params: options, observe: 'response' });\n  }\n\n  delete(id: number): Observable<HttpResponse<{}>> {\n    return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  findAllByMessageFrom(id: number): Observable<EntityArrayResponseType> {\n    return this.http.get<IChatMessage[]>(`${this.resourceUrl}/${id}/messageFrom`, { observe: 'response' });\n  }\n\n  findOneByMessageToAndMessageFromAndMessageTypeAndDateSent(idTo: string, idFrom: string, messageType: number, dateSent: Date): Observable<EntityResponseType> {\n    return this.http.get<IChatMessage>(`${this.resourceUrl}/${idTo}/${idFrom}/${messageType}/${dateSent}/byMessage`, { observe: 'response' });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}