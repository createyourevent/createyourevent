{"ast":null,"code":"import _defineProperty from \"/home/ceo/mmmm/createyourevent/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { EventEmitter } from '@angular/core';\nimport { SocketIOAdapter } from './SocketIOAdapter';\n// import { Socket } from 'socket.io-client';\nimport { User } from 'ng-chat';\nimport * as dayjs from 'dayjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-socket-io\";\nimport * as i2 from \"@angular/http\";\nimport * as i3 from \"../general.service\";\nimport * as i4 from \"app/chat.service\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"../shared/auth/has-any-authority.directive\";\nimport * as i7 from \"ng-chat\";\nconst _c0 = [\"ngChatInstance\"];\nfunction ChatComponent_ng_container_0_ng_chat_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ng-chat\", 2, 3);\n    i0.ɵɵlistener(\"onMessagesSeen\", function ChatComponent_ng_container_0_ng_chat_2_Template_ng_chat_onMessagesSeen_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r3.onMessageSeen($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"adapter\", ctx_r1.adapter)(\"persistWindowsState\", false)(\"emojisEnabled\", false)(\"groupAdapter\", ctx_r1.adapter)(\"pollFriendsList\", true)(\"userId\", ctx_r1.userId)(\"historyEnabled\", true)(\"historyPageSize\", 4)(\"theme\", \"dark-theme\");\n  }\n}\nfunction ChatComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1, \"\\n    \");\n    i0.ɵɵtemplate(2, ChatComponent_ng_container_0_ng_chat_2_Template, 2, 9, \"ng-chat\", 1);\n    i0.ɵɵtext(3, \"\\n\");\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.userId);\n  }\n}\nexport class ChatComponent {\n  constructor(socket, http, generalService, sharedChatService) {\n    _defineProperty(this, \"socket\", void 0);\n    _defineProperty(this, \"http\", void 0);\n    _defineProperty(this, \"generalService\", void 0);\n    _defineProperty(this, \"sharedChatService\", void 0);\n    _defineProperty(this, \"userId\", void 0);\n    _defineProperty(this, \"user\", void 0);\n    _defineProperty(this, \"messageSeen\", new EventEmitter());\n    _defineProperty(this, \"adapter\", void 0);\n    _defineProperty(this, \"thisFirst\", void 0);\n    _defineProperty(this, \"mentionConfig\", void 0);\n    _defineProperty(this, \"ngChatInstances\", void 0);\n    _defineProperty(this, \"ngChatInstance\", void 0);\n    this.socket = socket;\n    this.http = http;\n    this.generalService = generalService;\n    this.sharedChatService = sharedChatService;\n    this.thisFirst = this;\n    this.sharedChatService.invokeEvent.subscribe(value => {\n      if (value !== null) {\n        this.clickName(value);\n      }\n    });\n  }\n  ngOnInit() {\n    this.generalService.findWidthAuthorities().subscribe(usr => {\n      const user = usr.body;\n      this.socket.emit('reloadPage', user.id);\n      setInterval(() => {\n        this.socket.emit('timestamp', user.id);\n      }, 60 * 1000);\n    });\n    const now = dayjs();\n    this.generalService.findEventsByPrivateOrPublicAndActiveTrueAndDateEndAfter(now).subscribe(res => {\n      const events = res.body;\n      this.generalService.findShopByActiveTrueAndActiveOwnerTrue().subscribe(s => {\n        const shops = s.body;\n        this.mentionConfig = {\n          mentions: [{\n            items: events,\n            triggerChar: '@',\n            labelKey: 'name',\n            maxItems: 10,\n            dropUp: true,\n            mentionSelect: this.onMentionSelectAt\n          }, {\n            items: shops,\n            labelKey: 'name',\n            triggerChar: '#',\n            maxItems: 10,\n            dropUp: true,\n            mentionSelect: this.onMentionSelectHash\n          }]\n        };\n      });\n    });\n  }\n  onMentionSelectAt(obj) {\n    return '<a href=\"/events/' + obj.id + '/view\">' + obj.name + '</a>';\n  }\n  onMentionSelectHash(obj) {\n    return '<a href=\"/supplier/shop/' + obj.id + '/overview\">' + obj.name + '</a>';\n  }\n  ngAfterViewInit() {\n    this.generalService.findWidthAuthorities().subscribe(usr => {\n      const user = usr.body;\n      this.initializeSocketListerners(user);\n      this.ngChatInstances.changes.subscribe(comps => {\n        this.ngChatInstance = comps.first;\n        this.adapter.setNgChat(this.ngChatInstance);\n      });\n    });\n  }\n  onMentionSelect(selection) {\n    return '<a href=\"#\">' + selection.label + '</a>';\n  }\n  initializeSocketListerners(user) {\n    this.adapter = new SocketIOAdapter(user.id, this.socket, this.http, this.sharedChatService);\n    this.userId = user.id;\n  }\n  clickName(user) {\n    this.generalService.findWidthAuthoritiesWidthId(user.id).subscribe(u => {\n      const newUser = u.body;\n      let stat = 3;\n      if (newUser.loggedIn === true) {\n        stat = 0;\n      }\n      const chatUser = new User();\n      chatUser.id = user.id;\n      chatUser.avatar = \"\";\n      chatUser.status = stat;\n      chatUser.displayName = newUser.firstName + \" \" + newUser.lastName;\n      this.ngChatInstance.triggerOpenChatWindow(chatUser);\n    });\n  }\n  onMessageSeen(messageSeen) {\n    this.sharedChatService.sendMessageSeen(messageSeen);\n  }\n}\n_defineProperty(ChatComponent, \"\\u0275fac\", function ChatComponent_Factory(t) {\n  return new (t || ChatComponent)(i0.ɵɵdirectiveInject(i1.Socket), i0.ɵɵdirectiveInject(i2.Http), i0.ɵɵdirectiveInject(i3.GeneralService), i0.ɵɵdirectiveInject(i4.SharedChatService));\n});\n_defineProperty(ChatComponent, \"\\u0275cmp\", /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ChatComponent,\n  selectors: [[\"jhi-chat\"]],\n  viewQuery: function ChatComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.ngChatInstances = _t);\n    }\n  },\n  outputs: {\n    messageSeen: \"messageSeen\"\n  },\n  decls: 2,\n  vars: 1,\n  consts: [[4, \"jhiHasAnyAuthority\"], [3, \"adapter\", \"persistWindowsState\", \"emojisEnabled\", \"groupAdapter\", \"pollFriendsList\", \"userId\", \"historyEnabled\", \"historyPageSize\", \"theme\", \"onMessagesSeen\", 4, \"ngIf\"], [3, \"adapter\", \"persistWindowsState\", \"emojisEnabled\", \"groupAdapter\", \"pollFriendsList\", \"userId\", \"historyEnabled\", \"historyPageSize\", \"theme\", \"onMessagesSeen\"], [\"ngChatInstance\", \"\"]],\n  template: function ChatComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, ChatComponent_ng_container_0_Template, 4, 1, \"ng-container\", 0);\n      i0.ɵɵtext(1, \"\\n\\n\");\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"jhiHasAnyAuthority\", \"ROLE_USER\");\n    }\n  },\n  dependencies: [i5.NgIf, i6.HasAnyAuthorityDirective, i7.ɵa],\n  styles: [\"h1[_ngcontent-%COMP%] {\\n  color: #fff;\\n}\\n\\n.form-box[_ngcontent-%COMP%] {\\n  background-color: #fff;\\n  width: 300px;\\n  height: 200px;\\n  position: absolute;\\n  left: 50%;\\n  top: 50%;\\n  margin-left: -150px;\\n  margin-top: -100px;\\n  border-radius: 5px;\\n  box-shadow: 5px 5px 3px rgba(68, 68, 68, 0.6);\\n  padding: 10px;\\n}\\n\\n.form-box[_ngcontent-%COMP%]   form[_ngcontent-%COMP%] {\\n  margin-top: 20px;\\n}\\n\\n.form-box[_ngcontent-%COMP%]   label[_ngcontent-%COMP%] {\\n  display: inline-block;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9tYWluL3dlYmFwcC9hcHAvY2hhdC9jaGF0LmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsV0FBQTtBQUNGOztBQUVBO0VBQ0Usc0JBQUE7RUFDQSxZQUFBO0VBQ0EsYUFBQTtFQUNBLGtCQUFBO0VBQ0EsU0FBQTtFQUNBLFFBQUE7RUFDQSxtQkFBQTtFQUNBLGtCQUFBO0VBQ0Esa0JBQUE7RUFDQSw2Q0FBQTtFQUNBLGFBQUE7QUFDRjs7QUFDQTtFQUNFLGdCQUFBO0FBRUY7O0FBQUE7RUFDRSxxQkFBQTtBQUdGIiwic291cmNlc0NvbnRlbnQiOlsiaDEge1xuICBjb2xvcjogI2ZmZjtcbn1cblxuLmZvcm0tYm94IHtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcbiAgd2lkdGg6IDMwMHB4O1xuICBoZWlnaHQ6IDIwMHB4O1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGxlZnQ6IDUwJTtcbiAgdG9wOiA1MCU7XG4gIG1hcmdpbi1sZWZ0OiAtMTUwcHg7XG4gIG1hcmdpbi10b3A6IC0xMDBweDtcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xuICBib3gtc2hhZG93OiA1cHggNXB4IDNweCByZ2JhKDY4LCA2OCwgNjgsIDAuNik7XG4gIHBhZGRpbmc6IDEwcHg7XG59XG4uZm9ybS1ib3ggZm9ybSB7XG4gIG1hcmdpbi10b3A6IDIwcHg7XG59XG4uZm9ybS1ib3ggbGFiZWwge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n}));","map":{"version":3,"mappings":";AAAA,SAAoEA,YAAY,QAAgB,eAAe;AAC/G,SAASC,eAAe,QAAQ,mBAAmB;AAInD;AACA,SAAmCC,IAAI,QAAQ,SAAS;AAExD,OAAO,KAAKC,KAAK,MAAM,OAAO;;;;;;;;;;;;;ICP1BC,qCAAuS;IAAzCA;MAAAA;MAAA;MAAA,OAAkBA,2CAAqB;IAAA,EAAC;IAACA,iBAAU;;;;IAAzQA,wCAAmB;;;;;IAD/DA,6BAAgD;IAC5CA;IAAAA,qFAAiT;IACrTA;IAAAA,0BAAe;;;;IADeA,eAAY;IAAZA,oCAAY;;;ADe1C,OAAM,MAAOC,aAAa;EAmBxBC,YAAoBC,MAAc,EACdC,IAAU,EACVC,cAA8B,EAC9BC,iBAAoC;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA,qCAjB1C,IAAIV,YAAY,EAAa;IAAA;IAAA;IAAA;IAAA;IAAA;IAcvB,WAAM,GAANO,MAAM;IACN,SAAI,GAAJC,IAAI;IACJ,mBAAc,GAAdC,cAAc;IACd,sBAAiB,GAAjBC,iBAAiB;IAEnC,IAAI,CAACC,SAAS,GAAG,IAAI;IACrB,IAAI,CAACD,iBAAiB,CAACE,WAAW,CAACC,SAAS,CAAEC,KAAY,IAAI;MAC5D,IAAGA,KAAK,KAAK,IAAI,EAAC;QACjB,IAAI,CAACC,SAAS,CAACD,KAAK,CAAC;;IAExB,CAAC,CAAC;EACJ;EAEAE,QAAQ;IACN,IAAI,CAACP,cAAc,CAACQ,oBAAoB,EAAE,CAACJ,SAAS,CAACK,GAAG,IAAG;MACzD,MAAMC,IAAI,GAAGD,GAAG,CAACE,IAAK;MACtB,IAAI,CAACb,MAAM,CAACc,IAAI,CAAC,YAAY,EAAEF,IAAI,CAACG,EAAE,CAAC;MACvCC,WAAW,CAAC,MAAK;QACf,IAAI,CAAChB,MAAM,CAACc,IAAI,CAAC,WAAW,EAAEF,IAAI,CAACG,EAAE,CAAC;MACxC,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC;IACf,CAAC,CAAC;IAEF,MAAME,GAAG,GAAGrB,KAAK,EAAE;IACnB,IAAI,CAACM,cAAc,CAACgB,uDAAuD,CAACD,GAAG,CAAC,CAACX,SAAS,CAACa,GAAG,IAAG;MAC/F,MAAMC,MAAM,GAAGD,GAAG,CAACN,IAAI;MACvB,IAAI,CAACX,cAAc,CAACmB,sCAAsC,EAAE,CAACf,SAAS,CAACgB,CAAC,IAAG;QACzE,MAAMC,KAAK,GAAGD,CAAC,CAACT,IAAI;QAEpB,IAAI,CAACW,aAAa,GAAG;UACnBC,QAAQ,EAAE,CACN;YACIC,KAAK,EAAEN,MAAM;YACbO,WAAW,EAAE,GAAG;YAChBC,QAAQ,EAAE,MAAM;YAChBC,QAAQ,EAAC,EAAE;YACXC,MAAM,EAAC,IAAI;YACXC,aAAa,EAAE,IAAI,CAACC;WACvB,EACD;YACEN,KAAK,EAAEH,KAAK;YACZK,QAAQ,EAAE,MAAM;YAChBD,WAAW,EAAE,GAAG;YAChBE,QAAQ,EAAC,EAAE;YACXC,MAAM,EAAC,IAAI;YACXC,aAAa,EAAE,IAAI,CAACE;WACvB;SACD;MACJ,CAAC,CAAC;IACJ,CAAC,CAAC;EACN;EAEAD,iBAAiB,CAACE,GAAQ;IACtB,OAAO,mBAAmB,GAAGA,GAAG,CAACnB,EAAE,GAAG,SAAS,GAAGmB,GAAG,CAACC,IAAI,GAAG,MAAM;EACvE;EAEAF,mBAAmB,CAACC,GAAQ;IACxB,OAAO,0BAA0B,GAAEA,GAAG,CAACnB,EAAE,GAAE,aAAa,GAAGmB,GAAG,CAACC,IAAI,GAAG,MAAM;EAChF;EAGAC,eAAe;IACb,IAAI,CAAClC,cAAc,CAACQ,oBAAoB,EAAE,CAACJ,SAAS,CAACK,GAAG,IAAG;MACzD,MAAMC,IAAI,GAAGD,GAAG,CAACE,IAAK;MACpB,IAAI,CAACwB,0BAA0B,CAACzB,IAAI,CAAC;MACrC,IAAI,CAAC0B,eAAe,CAACC,OAAO,CAACjC,SAAS,CAAEkC,KAAiC,IAAI;QAC3E,IAAI,CAACC,cAAc,GAAGD,KAAK,CAACE,KAAK;QACjC,IAAI,CAACC,OAAO,CAACC,SAAS,CAAC,IAAI,CAACH,cAAc,CAAC;MAC7C,CAAC,CAAC;IACN,CAAC,CAAC;EACJ;EAEAI,eAAe,CAACC,SAAc;IAC5B,OAAO,cAAc,GAAGA,SAAS,CAACC,KAAK,GAAG,MAAM;EAClD;EAEOV,0BAA0B,CAACzB,IAAW;IACzC,IAAI,CAAC+B,OAAO,GAAG,IAAIjD,eAAe,CAACkB,IAAI,CAACG,EAAG,EAAE,IAAI,CAACf,MAAM,EAAE,IAAI,CAACC,IAAI,EAAE,IAAI,CAACE,iBAAiB,CAAC;IAC5F,IAAI,CAAC6C,MAAM,GAAGpC,IAAI,CAACG,EAAG;EAC1B;EAEOP,SAAS,CAACI,IAAW;IAC1B,IAAI,CAACV,cAAc,CAAC+C,2BAA2B,CAACrC,IAAI,CAACG,EAAE,CAAC,CAACT,SAAS,CAAC4C,CAAC,IAAG;MACrE,MAAMC,OAAO,GAAGD,CAAC,CAACrC,IAAK;MACvB,IAAIuC,IAAI,GAAG,CAAC;MACZ,IAAGD,OAAO,CAACE,QAAQ,KAAK,IAAI,EAAE;QAC5BD,IAAI,GAAG,CAAC;;MAEV,MAAME,QAAQ,GAAS,IAAI3D,IAAI,EAAE;MACjC2D,QAAQ,CAACvC,EAAE,GAAGH,IAAI,CAACG,EAAE;MACrBuC,QAAQ,CAACC,MAAM,GAAG,EAAE;MACpBD,QAAQ,CAACE,MAAM,GAAGJ,IAAI;MACtBE,QAAQ,CAACG,WAAW,GAAEN,OAAO,CAACO,SAAS,GAAG,GAAG,GAAGP,OAAO,CAACQ,QAAQ;MAChE,IAAI,CAAClB,cAAc,CAACmB,qBAAqB,CAACN,QAAQ,CAAC;IACrD,CAAC,CAAC;EACJ;EAEAO,aAAa,CAACC,WAAsB;IAClC,IAAI,CAAC3D,iBAAiB,CAAC4D,eAAe,CAACD,WAAW,CAAC;EACrD;;gBArHWhE,aAAa;mBAAbA,aAAa;AAAA;AAAA,gBAAbA,aAAa;QAAbA,aAAa;EAAAkE;EAAAC;IAAA;;;;;;;;;;;;;;;;MChB1BpE,gFAEe;MAEfA;;;MAJeA,gDAA+B","names":["EventEmitter","SocketIOAdapter","User","dayjs","i0","ChatComponent","constructor","socket","http","generalService","sharedChatService","thisFirst","invokeEvent","subscribe","value","clickName","ngOnInit","findWidthAuthorities","usr","user","body","emit","id","setInterval","now","findEventsByPrivateOrPublicAndActiveTrueAndDateEndAfter","res","events","findShopByActiveTrueAndActiveOwnerTrue","s","shops","mentionConfig","mentions","items","triggerChar","labelKey","maxItems","dropUp","mentionSelect","onMentionSelectAt","onMentionSelectHash","obj","name","ngAfterViewInit","initializeSocketListerners","ngChatInstances","changes","comps","ngChatInstance","first","adapter","setNgChat","onMentionSelect","selection","label","userId","findWidthAuthoritiesWidthId","u","newUser","stat","loggedIn","chatUser","avatar","status","displayName","firstName","lastName","triggerOpenChatWindow","onMessageSeen","messageSeen","sendMessageSeen","selectors","viewQuery"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/chat/chat.component.ts","/home/ceo/mmmm/createyourevent/src/main/webapp/app/chat/chat.component.html"],"sourcesContent":["import { Component, AfterViewInit, QueryList, ViewChildren, Output, EventEmitter, OnInit } from '@angular/core';\nimport { SocketIOAdapter } from './SocketIOAdapter';\nimport { Socket } from 'ngx-socket-io';\nimport { Http } from '@angular/http';\nimport { GeneralService } from '../general.service';\n// import { Socket } from 'socket.io-client';\nimport { IChatController, Message, User } from 'ng-chat';\nimport { SharedChatService } from 'app/chat.service';\nimport * as dayjs from 'dayjs';\nimport { IUser } from 'app/entities/user/user.model';\n\n@Component({\n  selector: 'jhi-chat',\n  templateUrl: './chat.component.html',\n  styleUrls: ['./chat.component.scss']\n})\nexport class ChatComponent implements AfterViewInit, OnInit {\n  userId!: string;\n  user!: IUser;\n\n  @Output()\n  messageSeen = new EventEmitter<Message[]>();\n\n  public adapter!: SocketIOAdapter;\n\n  thisFirst!: ChatComponent;\n\n  public mentionConfig!: {};\n\n\n  @ViewChildren('ngChatInstance')\n  public ngChatInstances!: QueryList<IChatController>;\n\n  private ngChatInstance!: IChatController;\n\n  constructor(private socket: Socket,\n              private http: Http,\n              private generalService: GeneralService,\n              private sharedChatService: SharedChatService,\n             ) {\n    this.thisFirst = this;\n    this.sharedChatService.invokeEvent.subscribe((value: IUser) => {\n      if(value !== null){\n       this.clickName(value);\n     }\n    });\n  }\n\n  ngOnInit(): void {\n    this.generalService.findWidthAuthorities().subscribe(usr => {\n      const user = usr.body!;\n      this.socket.emit('reloadPage', user.id);\n      setInterval(() => {\n        this.socket.emit('timestamp', user.id);\n      }, 60 * 1000);\n    });\n\n    const now = dayjs();\n    this.generalService.findEventsByPrivateOrPublicAndActiveTrueAndDateEndAfter(now).subscribe(res => {\n      const events = res.body;\n      this.generalService.findShopByActiveTrueAndActiveOwnerTrue().subscribe(s => {\n        const shops = s.body;\n\n        this.mentionConfig = {\n          mentions: [\n              {\n                  items: events,\n                  triggerChar: '@',\n                  labelKey: 'name',\n                  maxItems:10,\n                  dropUp:true,\n                  mentionSelect: this.onMentionSelectAt\n              },\n              {\n                items: shops,\n                labelKey: 'name',\n                triggerChar: '#',\n                maxItems:10,\n                dropUp:true,\n                mentionSelect: this.onMentionSelectHash\n            }\n          ]}\n        });\n      });\n  }\n\n  onMentionSelectAt(obj: any): any {\n      return '<a href=\"/events/' + obj.id + '/view\">' + obj.name + '</a>';\n  }\n\n  onMentionSelectHash(obj: any): any {\n      return '<a href=\"/supplier/shop/'+ obj.id +'/overview\">' + obj.name + '</a>';\n  }\n\n\n  ngAfterViewInit(): void {\n    this.generalService.findWidthAuthorities().subscribe(usr => {\n      const user = usr.body!;\n        this.initializeSocketListerners(user);\n        this.ngChatInstances.changes.subscribe((comps: QueryList<IChatController>) => {\n          this.ngChatInstance = comps.first;\n          this.adapter.setNgChat(this.ngChatInstance);\n        })\n    });\n  }\n\n  onMentionSelect(selection: any): string {\n    return '<a href=\"#\">' + selection.label + '</a>';\n  }\n\n  public initializeSocketListerners(user: IUser): void {\n      this.adapter = new SocketIOAdapter(user.id!, this.socket, this.http, this.sharedChatService);\n      this.userId = user.id!;\n  }\n\n  public clickName(user: IUser): void {\n    this.generalService.findWidthAuthoritiesWidthId(user.id).subscribe(u => {\n      const newUser = u.body!;\n      let stat = 3;\n      if(newUser.loggedIn === true) {\n        stat = 0;\n      }\n      const chatUser: User = new User();\n      chatUser.id = user.id;\n      chatUser.avatar = \"\";\n      chatUser.status = stat;\n      chatUser.displayName =newUser.firstName + \" \" + newUser.lastName;\n      this.ngChatInstance.triggerOpenChatWindow(chatUser);\n    });\n  }\n\n  onMessageSeen(messageSeen: Message[]): void {\n    this.sharedChatService.sendMessageSeen(messageSeen);\n  }\n}\n","<ng-container *jhiHasAnyAuthority=\"'ROLE_USER'\">\n    <ng-chat #ngChatInstance *ngIf=\"userId\" [adapter]=\"adapter\" [persistWindowsState]=\"false\" [emojisEnabled]=\"false\" [groupAdapter]=\"adapter\" [pollFriendsList]=\"true\"  [userId]=\"userId\"  [historyEnabled]=\"true\" [historyPageSize]=\"4\"  [theme]=\"'dark-theme'\" (onMessagesSeen)=\"onMessageSeen($event)\"></ng-chat>\n</ng-container>\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}