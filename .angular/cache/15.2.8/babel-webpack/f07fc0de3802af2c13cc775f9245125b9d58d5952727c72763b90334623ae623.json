{"ast":null,"code":"import { isPlatformBrowser, isPlatformServer, CommonModule } from '@angular/common';\nimport { Directive, TemplateRef, InjectionToken, Injectable, Inject, PLATFORM_ID, EventEmitter, Component, ContentChild, ViewChild, Input, Output, Optional, NgModule } from '@angular/core';\nimport { __awaiter } from 'tslib';\nimport { filter, first, map, switchMap } from 'rxjs/operators';\nimport { BehaviorSubject, from } from 'rxjs';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nconst _c0 = [\"stripeElementRef\"];\nfunction StripeCardComponent_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0, 3);\n  }\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.loadingTemplate);\n  }\n}\nfunction StripeCardNumberComponent_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0, 3);\n  }\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.loadingTemplate);\n  }\n}\nfunction StripeCardExpiryComponent_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0, 3);\n  }\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.loadingTemplate);\n  }\n}\nfunction StripeCardCvcComponent_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0, 3);\n  }\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.loadingTemplate);\n  }\n}\nfunction StripeFpxBankComponent_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0, 3);\n  }\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.loadingTemplate);\n  }\n}\nfunction StripeIdealBankComponent_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0, 3);\n  }\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.loadingTemplate);\n  }\n}\nfunction StripeIbanComponent_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0, 3);\n  }\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.loadingTemplate);\n  }\n}\nfunction StripeAuBankAccountComponent_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0, 3);\n  }\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.loadingTemplate);\n  }\n}\nlet NgxStripeElementLoadingTemplateDirective = /*#__PURE__*/(() => {\n  class NgxStripeElementLoadingTemplateDirective {\n    constructor(templateRef) {\n      this.templateRef = templateRef;\n    }\n  }\n  NgxStripeElementLoadingTemplateDirective.ɵfac = function NgxStripeElementLoadingTemplateDirective_Factory(t) {\n    return new (t || NgxStripeElementLoadingTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n  };\n  NgxStripeElementLoadingTemplateDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: NgxStripeElementLoadingTemplateDirective,\n    selectors: [[\"\", \"ngxStripeLoadingTemplate\", \"\"]]\n  });\n  return NgxStripeElementLoadingTemplateDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst STRIPE_PUBLISHABLE_KEY = new InjectionToken('Stripe Publishable Key');\nconst STRIPE_OPTIONS = new InjectionToken('Stripe Options');\nconst NGX_STRIPE_VERSION = new InjectionToken('NGX_STRIPE_VERSION');\nlet WindowRef = /*#__PURE__*/(() => {\n  class WindowRef {\n    constructor(platformId) {\n      this.platformId = platformId;\n    }\n    getNativeWindow() {\n      if (isPlatformBrowser(this.platformId)) {\n        return window;\n      }\n      return {};\n    }\n  }\n  WindowRef.ɵfac = function WindowRef_Factory(t) {\n    return new (t || WindowRef)(ɵngcc0.ɵɵinject(PLATFORM_ID));\n  };\n  WindowRef.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: WindowRef,\n    factory: WindowRef.ɵfac\n  });\n  return WindowRef;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet DocumentRef = /*#__PURE__*/(() => {\n  class DocumentRef {\n    constructor(platformId) {\n      this.platformId = platformId;\n    }\n    getNativeDocument() {\n      if (isPlatformBrowser(this.platformId)) {\n        return document;\n      }\n      return {};\n    }\n  }\n  DocumentRef.ɵfac = function DocumentRef_Factory(t) {\n    return new (t || DocumentRef)(ɵngcc0.ɵɵinject(PLATFORM_ID));\n  };\n  DocumentRef.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: DocumentRef,\n    factory: DocumentRef.ɵfac\n  });\n  return DocumentRef;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet LazyStripeAPILoader = /*#__PURE__*/(() => {\n  class LazyStripeAPILoader {\n    constructor(platformId, window, document) {\n      this.platformId = platformId;\n      this.window = window;\n      this.document = document;\n      this.status = new BehaviorSubject({\n        error: false,\n        loaded: false,\n        loading: false\n      });\n    }\n    asStream() {\n      this.load();\n      return this.status.asObservable();\n    }\n    isReady() {\n      return this.status.getValue().loaded;\n    }\n    load() {\n      if (isPlatformServer(this.platformId)) {\n        return;\n      }\n      const status = this.status.getValue();\n      if (this.window.getNativeWindow().hasOwnProperty('Stripe')) {\n        this.status.next({\n          error: false,\n          loaded: true,\n          loading: false\n        });\n      } else if (!status.loaded && !status.loading) {\n        this.status.next(Object.assign(Object.assign({}, status), {\n          loading: true\n        }));\n        const script = this.document.getNativeDocument().createElement('script');\n        script.type = 'text/javascript';\n        script.async = true;\n        script.defer = true;\n        script.src = 'https://js.stripe.com/v3/';\n        script.onload = () => {\n          this.status.next({\n            error: false,\n            loaded: true,\n            loading: false\n          });\n        };\n        script.onerror = () => {\n          this.status.next({\n            error: true,\n            loaded: false,\n            loading: false\n          });\n        };\n        this.document.getNativeDocument().body.appendChild(script);\n      }\n    }\n  }\n  LazyStripeAPILoader.ɵfac = function LazyStripeAPILoader_Factory(t) {\n    return new (t || LazyStripeAPILoader)(ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(WindowRef), ɵngcc0.ɵɵinject(DocumentRef));\n  };\n  LazyStripeAPILoader.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: LazyStripeAPILoader,\n    factory: LazyStripeAPILoader.ɵfac\n  });\n  return LazyStripeAPILoader;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nclass StripeInstance {\n  constructor(version, loader, window, key, options) {\n    this.version = version;\n    this.loader = loader;\n    this.window = window;\n    this.key = key;\n    this.options = options;\n    this.stripe$ = new BehaviorSubject(undefined);\n    this.stripe = this.stripe$.asObservable().pipe(filter(stripe => Boolean(stripe)));\n    this.loader.asStream().pipe(filter(status => status.loaded === true), first(), map(() => this.window.getNativeWindow().Stripe)).subscribe(stripeInstance => {\n      const stripe = this.options ? stripeInstance(this.key, this.options) : stripeInstance(this.key);\n      stripe.registerAppInfo(this.getNgxStripeAppInfo(this.version));\n      this.stripe$.next(stripe);\n    });\n  }\n  getInstance() {\n    return this.stripe$.getValue();\n  }\n  elements(options) {\n    return this.stripe$.asObservable().pipe(filter(stripe => Boolean(stripe)), map(stripe => stripe.elements(options)), first());\n  }\n  redirectToCheckout(options) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.redirectToCheckout(options))), first());\n  }\n  confirmPayment(options) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.confirmPayment(options))), first());\n  }\n  confirmAcssDebitPayment(clientSecret, data, options) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.confirmAcssDebitPayment(clientSecret, data, options))), first());\n  }\n  confirmUsBankAccountPayment(clientSecret, data) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.confirmUsBankAccountPayment(clientSecret, data))), first());\n  }\n  confirmAlipayPayment(clientSecret, data, options) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.confirmAlipayPayment(clientSecret, data, options))), first());\n  }\n  confirmAuBecsDebitPayment(clientSecret, data) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.confirmAuBecsDebitPayment(clientSecret, data))), first());\n  }\n  confirmBancontactPayment(clientSecret, data, options) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.confirmBancontactPayment(clientSecret, data, options))), first());\n  }\n  confirmBoletoPayment(clientSecret, data, options) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.confirmBoletoPayment(clientSecret, data, options))), first());\n  }\n  confirmCardPayment(clientSecret, data, options) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.confirmCardPayment(clientSecret, data, options))), first());\n  }\n  confirmCustomerBalancePayment(clientSecret, data, options) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.confirmCustomerBalancePayment(clientSecret, data, options))), first());\n  }\n  confirmEpsPayment(clientSecret, data, options) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.confirmEpsPayment(clientSecret, data, options))), first());\n  }\n  confirmFpxPayment(clientSecret, data, options) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.confirmFpxPayment(clientSecret, data, options))), first());\n  }\n  confirmGiropayPayment(clientSecret, data, options) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.confirmGiropayPayment(clientSecret, data, options))), first());\n  }\n  confirmGrabPayPayment(clientSecret, data, options) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.confirmGrabPayPayment(clientSecret, data, options))), first());\n  }\n  confirmIdealPayment(clientSecret, data, options) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.confirmIdealPayment(clientSecret, data, options))), first());\n  }\n  confirmKlarnaPayment(clientSecret, data, options) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.confirmKlarnaPayment(clientSecret, data, options))), first());\n  }\n  confirmKonbiniPayment(clientSecret, data, options) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.confirmKonbiniPayment(clientSecret, data, options))), first());\n  }\n  confirmOxxoPayment(clientSecret, data, options) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.confirmOxxoPayment(clientSecret, data, options))), first());\n  }\n  confirmP24Payment(clientSecret, data, options) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.confirmP24Payment(clientSecret, data, options))), first());\n  }\n  confirmPayNowPayment(clientSecret, data, options) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.confirmPayNowPayment(clientSecret, data, options))), first());\n  }\n  confirmPayPalPayment(clientSecret, data) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.confirmPayPalPayment(clientSecret, data))), first());\n  }\n  confirmPromptPayPayment(clientSecret, data, options) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.confirmPromptPayPayment(clientSecret, data, options))), first());\n  }\n  confirmSepaDebitPayment(clientSecret, data) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.confirmSepaDebitPayment(clientSecret, data))), first());\n  }\n  confirmSofortPayment(clientSecret, data, options) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.confirmSofortPayment(clientSecret, data, options))), first());\n  }\n  confirmWechatPayPayment(clientSecret, data, options) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.confirmWechatPayPayment(clientSecret, data, options))), first());\n  }\n  handleCardAction(clientSecret) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.handleCardAction(clientSecret))), first());\n  }\n  verifyMicrodepositsForPayment(clientSecret, data) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.verifyMicrodepositsForPayment(clientSecret, data))), first());\n  }\n  collectBankAccountForPayment(options) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.collectBankAccountForPayment(options))), first());\n  }\n  createPaymentMethod(paymentMethodData) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.createPaymentMethod(paymentMethodData))), first());\n  }\n  retrievePaymentIntent(clientSecret) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.retrievePaymentIntent(clientSecret))), first());\n  }\n  confirmSetup(options) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.confirmSetup(options))), first());\n  }\n  confirmAcssDebitSetup(clientSecret, data, options) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.confirmAcssDebitSetup(clientSecret, data, options))), first());\n  }\n  confirmUsBankAccountSetup(clientSecret, data) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.confirmUsBankAccountSetup(clientSecret, data))), first());\n  }\n  confirmAuBecsDebitSetup(clientSecret, data) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.confirmAuBecsDebitSetup(clientSecret, data))), first());\n  }\n  confirmBacsDebitSetup(clientSecret, data) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.confirmBacsDebitSetup(clientSecret, data))), first());\n  }\n  confirmBancontactSetup(clientSecret, data) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.confirmBancontactSetup(clientSecret, data))), first());\n  }\n  confirmCardSetup(clientSecret, data, options) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.confirmCardSetup(clientSecret, data, options))), first());\n  }\n  confirmIdealSetup(clientSecret, data) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.confirmIdealSetup(clientSecret, data))), first());\n  }\n  confirmPayPalSetup(clientSecret, data) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.confirmPayPalSetup(clientSecret, data))), first());\n  }\n  confirmSepaDebitSetup(clientSecret, data) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.confirmSepaDebitSetup(clientSecret, data))), first());\n  }\n  confirmSofortSetup(clientSecret, data, options) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.confirmSofortSetup(clientSecret, data, options))), first());\n  }\n  confirmAffirmPayment(clientSecret, data, options) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.confirmAffirmPayment(clientSecret, data, options))), first());\n  }\n  confirmAfterpayClearpayPayment(clientSecret, data, options) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.confirmAfterpayClearpayPayment(clientSecret, data, options))), first());\n  }\n  verifyMicrodepositsForSetup(clientSecret, data) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.verifyMicrodepositsForSetup(clientSecret, data))), first());\n  }\n  collectBankAccountForSetup(options) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.collectBankAccountForSetup(options))), first());\n  }\n  retrieveSetupIntent(clientSecret) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.retrieveSetupIntent(clientSecret))), first());\n  }\n  paymentRequest(options) {\n    const stripe = this.getInstance();\n    return stripe ? stripe.paymentRequest(options) : undefined;\n  }\n  createToken(tokenType, data) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.createToken(tokenType, data))), first());\n  }\n  createSource(a, b) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.createSource(a, b))), first());\n  }\n  retrieveSource(source) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.retrieveSource(source))), first());\n  }\n  verifyIdentity(clientSecret) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.verifyIdentity(clientSecret))), first());\n  }\n  /**\n   * @deprecated\n   */\n  handleCardPayment(clientSecret, element, data) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.handleCardPayment(clientSecret, element, data))), first());\n  }\n  /**\n   * @deprecated\n   */\n  confirmPaymentIntent(clientSecret, element, data) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.confirmPaymentIntent(clientSecret, element, data))), first());\n  }\n  /**\n   * @deprecated\n   */\n  handleCardSetup(clientSecret, element, data) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.handleCardSetup(clientSecret, element, data))), first());\n  }\n  /**\n   * @deprecated\n   */\n  confirmSetupIntent(clientSecret, element, data) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.confirmSetupIntent(clientSecret, element, data))), first());\n  }\n  /**\n   * @deprecated\n   */\n  handleFpxPayment(clientSecret, element, data) {\n    return this.stripe.pipe(switchMap(stripe => from(stripe.handleFpxPayment(clientSecret, element, data))), first());\n  }\n  getNgxStripeAppInfo(version) {\n    return {\n      name: 'ngx-stripe',\n      url: 'https://ngx-stripe.dev',\n      partner_id: 'pp_partner_JR4l1rmvUoPP4V',\n      version\n    };\n  }\n}\nlet StripeService = /*#__PURE__*/(() => {\n  class StripeService {\n    constructor(version, key, options, loader, window) {\n      this.version = version;\n      this.key = key;\n      this.options = options;\n      this.loader = loader;\n      this.window = window;\n      if (key) {\n        this.stripe = new StripeInstance(this.version, this.loader, this.window, key, options);\n      }\n    }\n    getStripeReference() {\n      return this.loader.asStream().pipe(filter(status => status.loaded === true), map(() => this.window.getNativeWindow().Stripe));\n    }\n    getInstance() {\n      return this.stripe.getInstance();\n    }\n    setKey(key, options) {\n      return this.changeKey(key, options);\n    }\n    changeKey(key, options) {\n      this.stripe = new StripeInstance(this.version, this.loader, this.window, key, options);\n      return this.stripe;\n    }\n    elements(options) {\n      return this.stripe.elements(options);\n    }\n    redirectToCheckout(options) {\n      return this.stripe.redirectToCheckout(options);\n    }\n    confirmPayment(options) {\n      return this.stripe.confirmPayment(options);\n    }\n    confirmAcssDebitPayment(clientSecret, data, options) {\n      return this.stripe.confirmAcssDebitPayment(clientSecret, data, options);\n    }\n    confirmUsBankAccountPayment(clientSecret, data) {\n      return this.stripe.confirmUsBankAccountPayment(clientSecret, data);\n    }\n    confirmAlipayPayment(clientSecret, data, options) {\n      return this.stripe.confirmAlipayPayment(clientSecret, data, options);\n    }\n    confirmAuBecsDebitPayment(clientSecret, data) {\n      return this.stripe.confirmAuBecsDebitPayment(clientSecret, data);\n    }\n    confirmBancontactPayment(clientSecret, data, options) {\n      return this.stripe.confirmBancontactPayment(clientSecret, data, options);\n    }\n    confirmBoletoPayment(clientSecret, data, options) {\n      return this.stripe.confirmBoletoPayment(clientSecret, data, options);\n    }\n    confirmCardPayment(clientSecret, data, options) {\n      return this.stripe.confirmCardPayment(clientSecret, data, options);\n    }\n    confirmCustomerBalancePayment(clientSecret, data, options) {\n      return this.stripe.confirmCustomerBalancePayment(clientSecret, data, options);\n    }\n    confirmEpsPayment(clientSecret, data, options) {\n      return this.stripe.confirmEpsPayment(clientSecret, data, options);\n    }\n    confirmFpxPayment(clientSecret, data, options) {\n      return this.stripe.confirmFpxPayment(clientSecret, data, options);\n    }\n    confirmGiropayPayment(clientSecret, data, options) {\n      return this.stripe.confirmGiropayPayment(clientSecret, data, options);\n    }\n    confirmGrabPayPayment(clientSecret, data, options) {\n      return this.stripe.confirmGrabPayPayment(clientSecret, data, options);\n    }\n    confirmIdealPayment(clientSecret, data, options) {\n      return this.stripe.confirmIdealPayment(clientSecret, data, options);\n    }\n    confirmKlarnaPayment(clientSecret, data, options) {\n      return this.stripe.confirmKlarnaPayment(clientSecret, data, options);\n    }\n    confirmKonbiniPayment(clientSecret, data, options) {\n      return this.stripe.confirmKonbiniPayment(clientSecret, data, options);\n    }\n    confirmOxxoPayment(clientSecret, data, options) {\n      return this.stripe.confirmOxxoPayment(clientSecret, data, options);\n    }\n    confirmP24Payment(clientSecret, data, options) {\n      return this.stripe.confirmP24Payment(clientSecret, data, options);\n    }\n    confirmPayNowPayment(clientSecret, data, options) {\n      return this.stripe.confirmPayNowPayment(clientSecret, data, options);\n    }\n    confirmPayPalPayment(clientSecret, data) {\n      return this.stripe.confirmPayPalPayment(clientSecret, data);\n    }\n    confirmPromptPayPayment(clientSecret, data, options) {\n      return this.stripe.confirmPromptPayPayment(clientSecret, data, options);\n    }\n    confirmSepaDebitPayment(clientSecret, data) {\n      return this.stripe.confirmSepaDebitPayment(clientSecret, data);\n    }\n    confirmSofortPayment(clientSecret, data, options) {\n      return this.stripe.confirmSofortPayment(clientSecret, data, options);\n    }\n    confirmWechatPayPayment(clientSecret, data, options) {\n      return this.stripe.confirmWechatPayPayment(clientSecret, data, options);\n    }\n    handleCardAction(clientSecret) {\n      return this.stripe.handleCardAction(clientSecret);\n    }\n    verifyMicrodepositsForPayment(clientSecret, data) {\n      return this.stripe.verifyMicrodepositsForPayment(clientSecret, data);\n    }\n    collectBankAccountForPayment(options) {\n      return this.stripe.collectBankAccountForPayment(options);\n    }\n    createPaymentMethod(paymentMethodData) {\n      return this.stripe.createPaymentMethod(paymentMethodData);\n    }\n    retrievePaymentIntent(clientSecret) {\n      return this.stripe.retrievePaymentIntent(clientSecret);\n    }\n    confirmSetup(options) {\n      return this.stripe.confirmSetup(options);\n    }\n    confirmAcssDebitSetup(clientSecret, data, options) {\n      return this.stripe.confirmAcssDebitSetup(clientSecret, data, options);\n    }\n    confirmUsBankAccountSetup(clientSecret, data) {\n      return this.stripe.confirmUsBankAccountSetup(clientSecret, data);\n    }\n    confirmAuBecsDebitSetup(clientSecret, data) {\n      return this.stripe.confirmAuBecsDebitSetup(clientSecret, data);\n    }\n    confirmBacsDebitSetup(clientSecret, data) {\n      return this.stripe.confirmBacsDebitSetup(clientSecret, data);\n    }\n    confirmBancontactSetup(clientSecret, data) {\n      return this.stripe.confirmBancontactSetup(clientSecret, data);\n    }\n    confirmCardSetup(clientSecret, data, options) {\n      return this.stripe.confirmCardSetup(clientSecret, data, options);\n    }\n    confirmIdealSetup(clientSecret, data) {\n      return this.stripe.confirmIdealSetup(clientSecret, data);\n    }\n    confirmPayPalSetup(clientSecret, data) {\n      return this.stripe.confirmPayPalSetup(clientSecret, data);\n    }\n    confirmSepaDebitSetup(clientSecret, data) {\n      return this.stripe.confirmSepaDebitSetup(clientSecret, data);\n    }\n    confirmSofortSetup(clientSecret, data, options) {\n      return this.stripe.confirmSofortSetup(clientSecret, data, options);\n    }\n    confirmAffirmPayment(clientSecret, data, options) {\n      return this.stripe.confirmAffirmPayment(clientSecret, data, options);\n    }\n    confirmAfterpayClearpayPayment(clientSecret, data, options) {\n      return this.stripe.confirmAfterpayClearpayPayment(clientSecret, data, options);\n    }\n    verifyMicrodepositsForSetup(clientSecret, data) {\n      return this.stripe.verifyMicrodepositsForSetup(clientSecret, data);\n    }\n    collectBankAccountForSetup(options) {\n      return this.stripe.collectBankAccountForSetup(options);\n    }\n    retrieveSetupIntent(clientSecret) {\n      return this.stripe.retrieveSetupIntent(clientSecret);\n    }\n    paymentRequest(options) {\n      return this.stripe.paymentRequest(options);\n    }\n    createToken(tokenType, data) {\n      return this.stripe.createToken(tokenType, data);\n    }\n    createSource(a, b) {\n      return this.stripe.createSource(a, b);\n    }\n    retrieveSource(source) {\n      return this.stripe.retrieveSource(source);\n    }\n    verifyIdentity(clientSecret) {\n      return this.stripe.verifyIdentity(clientSecret);\n    }\n    /**\n     * @deprecated\n     */\n    handleCardPayment(clientSecret, element, data) {\n      return this.stripe.handleCardPayment(clientSecret, element, data);\n    }\n    /**\n     * @deprecated\n     */\n    confirmPaymentIntent(clientSecret, element, data) {\n      return this.stripe.confirmPaymentIntent(clientSecret, element, data);\n    }\n    /**\n     * @deprecated\n     */\n    handleCardSetup(clientSecret, element, data) {\n      return this.stripe.handleCardSetup(clientSecret, element, data);\n    }\n    /**\n     * @deprecated\n     */\n    confirmSetupIntent(clientSecret, element, data) {\n      return this.stripe.confirmSetupIntent(clientSecret, element, data);\n    }\n    /**\n     * @deprecated\n     */\n    handleFpxPayment(clientSecret, element, data) {\n      return this.stripe.handleFpxPayment(clientSecret, element, data);\n    }\n  }\n  StripeService.ɵfac = function StripeService_Factory(t) {\n    return new (t || StripeService)(ɵngcc0.ɵɵinject(NGX_STRIPE_VERSION), ɵngcc0.ɵɵinject(STRIPE_PUBLISHABLE_KEY), ɵngcc0.ɵɵinject(STRIPE_OPTIONS), ɵngcc0.ɵɵinject(LazyStripeAPILoader), ɵngcc0.ɵɵinject(WindowRef));\n  };\n  StripeService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: StripeService,\n    factory: StripeService.ɵfac\n  });\n  return StripeService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet StripeElementsService = /*#__PURE__*/(() => {\n  class StripeElementsService {\n    constructor(stripeService) {\n      this.stripeService = stripeService;\n    }\n    elements(stripe, options = {}) {\n      if (stripe) {\n        if (Object.keys(options).length > 0) {\n          return stripe.elements(options);\n        }\n        return stripe.elements();\n      } else {\n        if (Object.keys(options).length > 0) {\n          return this.stripeService.elements(options);\n        }\n        return this.stripeService.elements();\n      }\n    }\n    paymentRequest(stripe, options) {\n      return stripe ? stripe.paymentRequest(options) : this.stripeService.paymentRequest(options);\n    }\n    mergeOptions(options, containerClass) {\n      if (!containerClass || options && options.classes) {\n        return options || {};\n      }\n      if (!options || !options.classes) {\n        return Object.assign(Object.assign({}, options || {}), {\n          classes: {\n            base: containerClass,\n            complete: `${containerClass}--complete`,\n            empty: `${containerClass}--empty`,\n            focus: `${containerClass}--focus`,\n            invalid: `${containerClass}--invalid`,\n            webkitAutoFill: `${containerClass}--webkit-autoFill`\n          }\n        });\n      }\n      return options || {};\n    }\n  }\n  StripeElementsService.ɵfac = function StripeElementsService_Factory(t) {\n    return new (t || StripeElementsService)(ɵngcc0.ɵɵinject(StripeService));\n  };\n  StripeElementsService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: StripeElementsService,\n    factory: StripeElementsService.ɵfac\n  });\n  return StripeElementsService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet StripeCardComponent = /*#__PURE__*/(() => {\n  class StripeCardComponent {\n    constructor(stripeElementsService) {\n      this.stripeElementsService = stripeElementsService;\n      this.load = new EventEmitter();\n      this.blur = new EventEmitter();\n      this.change = new EventEmitter();\n      this.focus = new EventEmitter();\n      this.ready = new EventEmitter();\n      this.escape = new EventEmitter();\n      this.state = 'notready';\n    }\n    ngOnChanges(changes) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.state = 'starting';\n        const options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);\n        let updateElements = false;\n        if (changes.elementsOptions || changes.stripe || !this.elements) {\n          this.elements = yield this.stripeElementsService.elements(this.stripe, this.elementsOptions).toPromise();\n          updateElements = true;\n        }\n        if (changes.options || changes.containerClass || !this.element || updateElements) {\n          if (this.element && !updateElements) {\n            this.update(options);\n          } else if (this.elements && updateElements) {\n            this.createElement(options);\n          }\n        }\n        this.state = 'ready';\n      });\n    }\n    ngOnInit() {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.state === 'notready') {\n          this.state = 'starting';\n          this.elements = yield this.stripeElementsService.elements(this.stripe).toPromise();\n          this.createElement();\n          this.state = 'ready';\n        }\n      });\n    }\n    ngOnDestroy() {\n      if (this.element) {\n        this.element.destroy();\n      }\n    }\n    update(options) {\n      this.element.update(options);\n    }\n    /**\n     * @deprecated\n     */\n    getCard() {\n      return this.element;\n    }\n    createElement(options = {}) {\n      this.element = this.elements.create('card', options);\n      this.element.on('change', ev => this.change.emit(ev));\n      this.element.on('blur', () => this.blur.emit());\n      this.element.on('focus', () => this.focus.emit());\n      this.element.on('ready', () => this.ready.emit());\n      this.element.on('escape', () => this.escape.emit());\n      this.element.mount(this.stripeElementRef.nativeElement);\n      this.load.emit(this.element);\n    }\n  }\n  StripeCardComponent.ɵfac = function StripeCardComponent_Factory(t) {\n    return new (t || StripeCardComponent)(ɵngcc0.ɵɵdirectiveInject(StripeElementsService));\n  };\n  StripeCardComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: StripeCardComponent,\n    selectors: [[\"ngx-stripe-card\"]],\n    contentQueries: function StripeCardComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, NgxStripeElementLoadingTemplateDirective, 5, TemplateRef);\n      }\n      if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.loadingTemplate = _t.first);\n      }\n    },\n    viewQuery: function StripeCardComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.stripeElementRef = _t.first);\n      }\n    },\n    inputs: {\n      containerClass: \"containerClass\",\n      options: \"options\",\n      elementsOptions: \"elementsOptions\",\n      stripe: \"stripe\"\n    },\n    outputs: {\n      load: \"load\",\n      blur: \"blur\",\n      change: \"change\",\n      focus: \"focus\",\n      ready: \"ready\",\n      escape: \"escape\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 7,\n    vars: 1,\n    consts: [[1, \"field\"], [\"stripeElementRef\", \"\"], [3, \"ngTemplateOutlet\", 4, \"ngIf\"], [3, \"ngTemplateOutlet\"]],\n    template: function StripeCardComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtext(0, \"\\n    \");\n        ɵngcc0.ɵɵelementStart(1, \"div\", 0, 1);\n        ɵngcc0.ɵɵtext(3, \"\\n      \");\n        ɵngcc0.ɵɵtemplate(4, StripeCardComponent_ng_container_4_Template, 1, 1, \"ng-container\", 2);\n        ɵngcc0.ɵɵtext(5, \"\\n    \");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtext(6, \"\\n  \");\n      }\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(4);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.state !== \"ready\" && ctx.loadingTemplate);\n      }\n    },\n    dependencies: [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet],\n    encapsulation: 2\n  });\n  return StripeCardComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet StripeCardGroupDirective = /*#__PURE__*/(() => {\n  class StripeCardGroupDirective {\n    constructor(stripeElementsService) {\n      this.stripeElementsService = stripeElementsService;\n      this.elements = new EventEmitter();\n      this.state = 'notready';\n    }\n    ngOnChanges(changes) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.state = 'starting';\n        const elementsOptions = this.elementsOptions;\n        const stripe = this.stripe;\n        if (changes.elementsOptions || changes.stripe || !this._elements) {\n          this._elements = yield this.stripeElementsService.elements(stripe, elementsOptions).toPromise();\n          this.elements.emit(this._elements);\n        }\n        this.state = 'ready';\n      });\n    }\n    ngOnInit() {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.state === 'notready') {\n          this.state = 'starting';\n          this._elements = yield this.stripeElementsService.elements(this.stripe).toPromise();\n          this.elements.emit(this._elements);\n          this.state = 'ready';\n        }\n      });\n    }\n  }\n  StripeCardGroupDirective.ɵfac = function StripeCardGroupDirective_Factory(t) {\n    return new (t || StripeCardGroupDirective)(ɵngcc0.ɵɵdirectiveInject(StripeElementsService));\n  };\n  StripeCardGroupDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: StripeCardGroupDirective,\n    selectors: [[\"ngx-stripe-card-group\"], [\"\", \"ngxStripeCardGroup\", \"\"]],\n    inputs: {\n      elementsOptions: \"elementsOptions\",\n      stripe: \"stripe\"\n    },\n    outputs: {\n      elements: \"elements\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return StripeCardGroupDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet StripeCardNumberComponent = /*#__PURE__*/(() => {\n  class StripeCardNumberComponent {\n    constructor(stripeElementsService, cardGroup) {\n      this.stripeElementsService = stripeElementsService;\n      this.cardGroup = cardGroup;\n      this.load = new EventEmitter();\n      this.blur = new EventEmitter();\n      this.change = new EventEmitter();\n      this.focus = new EventEmitter();\n      this.ready = new EventEmitter();\n      this.escape = new EventEmitter();\n    }\n    ngOnChanges(changes) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (changes.options || changes.containerClass) {\n          this.setupElement('options');\n        }\n      });\n    }\n    ngOnInit() {\n      if (this.cardGroup) {\n        this.cardGroupSubscription = this.cardGroup.elements.subscribe(elements => {\n          this.elements = elements;\n          this.setupElement('elements');\n        });\n      } else {\n        throw new Error('StripeCardNumberComponent must have StripeCardGroupDirective parent');\n      }\n    }\n    ngOnDestroy() {\n      if (this.element) {\n        this.element.destroy();\n      }\n      if (this.cardGroupSubscription) {\n        this.cardGroupSubscription.unsubscribe();\n      }\n    }\n    update(options) {\n      this.element.update(options);\n    }\n    /**\n     * @deprecated\n     */\n    getCardNumber() {\n      return this.element;\n    }\n    setupElement(source) {\n      const options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);\n      if (this.element && source === 'options') {\n        this.update(options);\n      } else if (this.elements && source === 'elements') {\n        this.element = this.elements.create('cardNumber', options);\n        this.element.on('change', ev => this.change.emit(ev));\n        this.element.on('blur', () => this.blur.emit());\n        this.element.on('focus', () => this.focus.emit());\n        this.element.on('ready', () => this.ready.emit());\n        this.element.on('escape', () => this.escape.emit());\n        this.element.mount(this.stripeElementRef.nativeElement);\n        this.load.emit(this.element);\n      }\n    }\n  }\n  StripeCardNumberComponent.ɵfac = function StripeCardNumberComponent_Factory(t) {\n    return new (t || StripeCardNumberComponent)(ɵngcc0.ɵɵdirectiveInject(StripeElementsService), ɵngcc0.ɵɵdirectiveInject(StripeCardGroupDirective, 8));\n  };\n  StripeCardNumberComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: StripeCardNumberComponent,\n    selectors: [[\"ngx-stripe-card-number\"]],\n    contentQueries: function StripeCardNumberComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, NgxStripeElementLoadingTemplateDirective, 5, TemplateRef);\n      }\n      if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.loadingTemplate = _t.first);\n      }\n    },\n    viewQuery: function StripeCardNumberComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.stripeElementRef = _t.first);\n      }\n    },\n    inputs: {\n      containerClass: \"containerClass\",\n      options: \"options\"\n    },\n    outputs: {\n      load: \"load\",\n      blur: \"blur\",\n      change: \"change\",\n      focus: \"focus\",\n      ready: \"ready\",\n      escape: \"escape\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 7,\n    vars: 1,\n    consts: [[1, \"field\"], [\"stripeElementRef\", \"\"], [3, \"ngTemplateOutlet\", 4, \"ngIf\"], [3, \"ngTemplateOutlet\"]],\n    template: function StripeCardNumberComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtext(0, \"\\n    \");\n        ɵngcc0.ɵɵelementStart(1, \"div\", 0, 1);\n        ɵngcc0.ɵɵtext(3, \"\\n      \");\n        ɵngcc0.ɵɵtemplate(4, StripeCardNumberComponent_ng_container_4_Template, 1, 1, \"ng-container\", 2);\n        ɵngcc0.ɵɵtext(5, \"\\n    \");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtext(6, \"\\n  \");\n      }\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(4);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.cardGroup && ctx.cardGroup.state !== \"ready\" && ctx.loadingTemplate);\n      }\n    },\n    dependencies: [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet],\n    encapsulation: 2\n  });\n  return StripeCardNumberComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet StripeCardExpiryComponent = /*#__PURE__*/(() => {\n  class StripeCardExpiryComponent {\n    constructor(stripeElementsService, cardGroup) {\n      this.stripeElementsService = stripeElementsService;\n      this.cardGroup = cardGroup;\n      this.load = new EventEmitter();\n      this.blur = new EventEmitter();\n      this.change = new EventEmitter();\n      this.focus = new EventEmitter();\n      this.ready = new EventEmitter();\n      this.escape = new EventEmitter();\n    }\n    ngOnChanges(changes) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (changes.options || changes.containerClass) {\n          this.setupElement('options');\n        }\n      });\n    }\n    ngOnInit() {\n      if (this.cardGroup) {\n        this.cardGroupSubscription = this.cardGroup.elements.subscribe(elements => {\n          this.elements = elements;\n          this.setupElement('elements');\n        });\n      } else {\n        throw new Error('StripeCardExpiryComponent must have StripeCardGroupDirective parent');\n      }\n    }\n    ngOnDestroy() {\n      if (this.element) {\n        this.element.destroy();\n      }\n      if (this.cardGroupSubscription) {\n        this.cardGroupSubscription.unsubscribe();\n      }\n    }\n    update(options) {\n      this.element.update(options);\n    }\n    /**\n     * @deprecated\n     */\n    getCardExpiry() {\n      return this.element;\n    }\n    setupElement(source) {\n      const options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);\n      if (this.element && source === 'options') {\n        this.update(options);\n      } else if (this.elements && source === 'elements') {\n        this.element = this.elements.create('cardExpiry', options);\n        this.element.on('change', ev => this.change.emit(ev));\n        this.element.on('blur', () => this.blur.emit());\n        this.element.on('focus', () => this.focus.emit());\n        this.element.on('ready', () => this.ready.emit());\n        this.element.on('escape', () => this.escape.emit());\n        this.element.mount(this.stripeElementRef.nativeElement);\n        this.load.emit(this.element);\n      }\n    }\n  }\n  StripeCardExpiryComponent.ɵfac = function StripeCardExpiryComponent_Factory(t) {\n    return new (t || StripeCardExpiryComponent)(ɵngcc0.ɵɵdirectiveInject(StripeElementsService), ɵngcc0.ɵɵdirectiveInject(StripeCardGroupDirective, 8));\n  };\n  StripeCardExpiryComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: StripeCardExpiryComponent,\n    selectors: [[\"ngx-stripe-card-expiry\"]],\n    contentQueries: function StripeCardExpiryComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, NgxStripeElementLoadingTemplateDirective, 5, TemplateRef);\n      }\n      if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.loadingTemplate = _t.first);\n      }\n    },\n    viewQuery: function StripeCardExpiryComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.stripeElementRef = _t.first);\n      }\n    },\n    inputs: {\n      containerClass: \"containerClass\",\n      options: \"options\"\n    },\n    outputs: {\n      load: \"load\",\n      blur: \"blur\",\n      change: \"change\",\n      focus: \"focus\",\n      ready: \"ready\",\n      escape: \"escape\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 7,\n    vars: 1,\n    consts: [[1, \"field\"], [\"stripeElementRef\", \"\"], [3, \"ngTemplateOutlet\", 4, \"ngIf\"], [3, \"ngTemplateOutlet\"]],\n    template: function StripeCardExpiryComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtext(0, \"\\n    \");\n        ɵngcc0.ɵɵelementStart(1, \"div\", 0, 1);\n        ɵngcc0.ɵɵtext(3, \"\\n      \");\n        ɵngcc0.ɵɵtemplate(4, StripeCardExpiryComponent_ng_container_4_Template, 1, 1, \"ng-container\", 2);\n        ɵngcc0.ɵɵtext(5, \"\\n    \");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtext(6, \"\\n  \");\n      }\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(4);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.cardGroup && ctx.cardGroup.state !== \"ready\" && ctx.loadingTemplate);\n      }\n    },\n    dependencies: [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet],\n    encapsulation: 2\n  });\n  return StripeCardExpiryComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet StripeCardCvcComponent = /*#__PURE__*/(() => {\n  class StripeCardCvcComponent {\n    constructor(stripeElementsService, cardGroup) {\n      this.stripeElementsService = stripeElementsService;\n      this.cardGroup = cardGroup;\n      this.load = new EventEmitter();\n      this.blur = new EventEmitter();\n      this.change = new EventEmitter();\n      this.focus = new EventEmitter();\n      this.ready = new EventEmitter();\n      this.escape = new EventEmitter();\n    }\n    ngOnChanges(changes) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (changes.options || changes.containerClass) {\n          this.setupElement('options');\n        }\n      });\n    }\n    ngOnInit() {\n      if (this.cardGroup) {\n        this.cardGroupSubscription = this.cardGroup.elements.subscribe(elements => {\n          this.elements = elements;\n          this.setupElement('elements');\n        });\n      } else {\n        throw new Error('StripeCardCvcComponent must have StripeCardGroupDirective parent');\n      }\n    }\n    ngOnDestroy() {\n      if (this.element) {\n        this.element.destroy();\n      }\n      if (this.cardGroupSubscription) {\n        this.cardGroupSubscription.unsubscribe();\n      }\n    }\n    update(options) {\n      this.element.update(options);\n    }\n    /**\n     * @deprecated\n     */\n    getCardCvc() {\n      return this.element;\n    }\n    setupElement(source) {\n      const options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);\n      if (this.element && source === 'options') {\n        this.update(options);\n      } else if (this.elements && source === 'elements') {\n        this.element = this.elements.create('cardCvc', options);\n        this.element.on('change', ev => this.change.emit(ev));\n        this.element.on('blur', () => this.blur.emit());\n        this.element.on('focus', () => this.focus.emit());\n        this.element.on('ready', () => this.ready.emit());\n        this.element.on('escape', () => this.escape.emit());\n        this.element.mount(this.stripeElementRef.nativeElement);\n        this.load.emit(this.element);\n      }\n    }\n  }\n  StripeCardCvcComponent.ɵfac = function StripeCardCvcComponent_Factory(t) {\n    return new (t || StripeCardCvcComponent)(ɵngcc0.ɵɵdirectiveInject(StripeElementsService), ɵngcc0.ɵɵdirectiveInject(StripeCardGroupDirective, 8));\n  };\n  StripeCardCvcComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: StripeCardCvcComponent,\n    selectors: [[\"ngx-stripe-card-cvc\"]],\n    contentQueries: function StripeCardCvcComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, NgxStripeElementLoadingTemplateDirective, 5, TemplateRef);\n      }\n      if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.loadingTemplate = _t.first);\n      }\n    },\n    viewQuery: function StripeCardCvcComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.stripeElementRef = _t.first);\n      }\n    },\n    inputs: {\n      containerClass: \"containerClass\",\n      options: \"options\"\n    },\n    outputs: {\n      load: \"load\",\n      blur: \"blur\",\n      change: \"change\",\n      focus: \"focus\",\n      ready: \"ready\",\n      escape: \"escape\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 7,\n    vars: 1,\n    consts: [[1, \"field\"], [\"stripeElementRef\", \"\"], [3, \"ngTemplateOutlet\", 4, \"ngIf\"], [3, \"ngTemplateOutlet\"]],\n    template: function StripeCardCvcComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtext(0, \"\\n    \");\n        ɵngcc0.ɵɵelementStart(1, \"div\", 0, 1);\n        ɵngcc0.ɵɵtext(3, \"\\n      \");\n        ɵngcc0.ɵɵtemplate(4, StripeCardCvcComponent_ng_container_4_Template, 1, 1, \"ng-container\", 2);\n        ɵngcc0.ɵɵtext(5, \"\\n    \");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtext(6, \"\\n  \");\n      }\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(4);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.cardGroup && ctx.cardGroup.state !== \"ready\" && ctx.loadingTemplate);\n      }\n    },\n    dependencies: [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet],\n    encapsulation: 2\n  });\n  return StripeCardCvcComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet StripeFpxBankComponent = /*#__PURE__*/(() => {\n  class StripeFpxBankComponent {\n    constructor(stripeElementsService) {\n      this.stripeElementsService = stripeElementsService;\n      this.load = new EventEmitter();\n      this.blur = new EventEmitter();\n      this.change = new EventEmitter();\n      this.focus = new EventEmitter();\n      this.ready = new EventEmitter();\n      this.escape = new EventEmitter();\n      this.state = 'notready';\n    }\n    ngOnChanges(changes) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.state = 'starting';\n        const options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);\n        let updateElements = false;\n        if (changes.elementsOptions || changes.stripe || !this.elements) {\n          this.elements = yield this.stripeElementsService.elements(this.stripe, this.elementsOptions).toPromise();\n          updateElements = true;\n        }\n        if (changes.options || changes.containerClass || !this.element || updateElements) {\n          if (this.element && !updateElements) {\n            this.update(options);\n          } else if (this.elements && updateElements) {\n            this.createElement(options);\n          }\n        }\n        this.state = 'ready';\n      });\n    }\n    ngOnInit() {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.state === 'notready') {\n          this.state = 'starting';\n          this.elements = yield this.stripeElementsService.elements(this.stripe).toPromise();\n          this.createElement();\n          this.state = 'ready';\n        }\n      });\n    }\n    ngOnDestroy() {\n      if (this.element) {\n        this.element.destroy();\n      }\n    }\n    update(options) {\n      this.element.update(options);\n    }\n    /**\n     * @deprecated\n     */\n    getFpxBank() {\n      return this.element;\n    }\n    createElement(options = {\n      accountHolderType: 'individual'\n    }) {\n      this.element = this.elements.create('fpxBank', options);\n      this.element.on('change', ev => this.change.emit(ev));\n      this.element.on('blur', () => this.blur.emit());\n      this.element.on('focus', () => this.focus.emit());\n      this.element.on('ready', () => this.ready.emit());\n      this.element.on('escape', () => this.escape.emit());\n      this.element.mount(this.stripeElementRef.nativeElement);\n      this.load.emit(this.element);\n    }\n  }\n  StripeFpxBankComponent.ɵfac = function StripeFpxBankComponent_Factory(t) {\n    return new (t || StripeFpxBankComponent)(ɵngcc0.ɵɵdirectiveInject(StripeElementsService));\n  };\n  StripeFpxBankComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: StripeFpxBankComponent,\n    selectors: [[\"ngx-stripe-fpx-bank\"]],\n    contentQueries: function StripeFpxBankComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, NgxStripeElementLoadingTemplateDirective, 5, TemplateRef);\n      }\n      if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.loadingTemplate = _t.first);\n      }\n    },\n    viewQuery: function StripeFpxBankComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.stripeElementRef = _t.first);\n      }\n    },\n    inputs: {\n      containerClass: \"containerClass\",\n      options: \"options\",\n      elementsOptions: \"elementsOptions\",\n      stripe: \"stripe\"\n    },\n    outputs: {\n      load: \"load\",\n      blur: \"blur\",\n      change: \"change\",\n      focus: \"focus\",\n      ready: \"ready\",\n      escape: \"escape\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 7,\n    vars: 1,\n    consts: [[1, \"field\"], [\"stripeElementRef\", \"\"], [3, \"ngTemplateOutlet\", 4, \"ngIf\"], [3, \"ngTemplateOutlet\"]],\n    template: function StripeFpxBankComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtext(0, \"\\n    \");\n        ɵngcc0.ɵɵelementStart(1, \"div\", 0, 1);\n        ɵngcc0.ɵɵtext(3, \"\\n      \");\n        ɵngcc0.ɵɵtemplate(4, StripeFpxBankComponent_ng_container_4_Template, 1, 1, \"ng-container\", 2);\n        ɵngcc0.ɵɵtext(5, \"\\n    \");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtext(6, \"\\n  \");\n      }\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(4);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.state !== \"ready\" && ctx.loadingTemplate);\n      }\n    },\n    dependencies: [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet],\n    encapsulation: 2\n  });\n  return StripeFpxBankComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet StripeIdealBankComponent = /*#__PURE__*/(() => {\n  class StripeIdealBankComponent {\n    constructor(stripeElementsService) {\n      this.stripeElementsService = stripeElementsService;\n      this.load = new EventEmitter();\n      this.blur = new EventEmitter();\n      this.change = new EventEmitter();\n      this.focus = new EventEmitter();\n      this.ready = new EventEmitter();\n      this.escape = new EventEmitter();\n      this.state = 'notready';\n    }\n    ngOnChanges(changes) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.state = 'starting';\n        const options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);\n        let updateElements = false;\n        if (changes.elementsOptions || changes.stripe || !this.elements) {\n          this.elements = yield this.stripeElementsService.elements(this.stripe, this.elementsOptions).toPromise();\n          updateElements = true;\n        }\n        if (changes.options || changes.containerClass || !this.element || updateElements) {\n          if (this.element && !updateElements) {\n            this.update(options);\n          } else if (this.elements && updateElements) {\n            this.createElement(options);\n          }\n        }\n        this.state = 'ready';\n      });\n    }\n    ngOnInit() {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.state === 'notready') {\n          this.state = 'starting';\n          this.elements = yield this.stripeElementsService.elements(this.stripe).toPromise();\n          this.createElement();\n          this.state = 'ready';\n        }\n      });\n    }\n    ngOnDestroy() {\n      if (this.element) {\n        this.element.destroy();\n      }\n    }\n    update(options) {\n      this.element.update(options);\n    }\n    /**\n     * @deprecated\n     */\n    getIdealBank() {\n      return this.element;\n    }\n    createElement(options = {}) {\n      this.element = this.elements.create('idealBank', options);\n      this.element.on('change', ev => this.change.emit(ev));\n      this.element.on('blur', () => this.blur.emit());\n      this.element.on('focus', () => this.focus.emit());\n      this.element.on('ready', () => this.ready.emit());\n      this.element.on('escape', () => this.escape.emit());\n      this.element.mount(this.stripeElementRef.nativeElement);\n      this.load.emit(this.element);\n    }\n  }\n  StripeIdealBankComponent.ɵfac = function StripeIdealBankComponent_Factory(t) {\n    return new (t || StripeIdealBankComponent)(ɵngcc0.ɵɵdirectiveInject(StripeElementsService));\n  };\n  StripeIdealBankComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: StripeIdealBankComponent,\n    selectors: [[\"ngx-stripe-ideal-bank\"]],\n    contentQueries: function StripeIdealBankComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, NgxStripeElementLoadingTemplateDirective, 5, TemplateRef);\n      }\n      if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.loadingTemplate = _t.first);\n      }\n    },\n    viewQuery: function StripeIdealBankComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.stripeElementRef = _t.first);\n      }\n    },\n    inputs: {\n      containerClass: \"containerClass\",\n      options: \"options\",\n      elementsOptions: \"elementsOptions\",\n      stripe: \"stripe\"\n    },\n    outputs: {\n      load: \"load\",\n      blur: \"blur\",\n      change: \"change\",\n      focus: \"focus\",\n      ready: \"ready\",\n      escape: \"escape\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 7,\n    vars: 1,\n    consts: [[1, \"field\"], [\"stripeElementRef\", \"\"], [3, \"ngTemplateOutlet\", 4, \"ngIf\"], [3, \"ngTemplateOutlet\"]],\n    template: function StripeIdealBankComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtext(0, \"\\n    \");\n        ɵngcc0.ɵɵelementStart(1, \"div\", 0, 1);\n        ɵngcc0.ɵɵtext(3, \"\\n      \");\n        ɵngcc0.ɵɵtemplate(4, StripeIdealBankComponent_ng_container_4_Template, 1, 1, \"ng-container\", 2);\n        ɵngcc0.ɵɵtext(5, \"\\n    \");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtext(6, \"\\n  \");\n      }\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(4);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.state !== \"ready\" && ctx.loadingTemplate);\n      }\n    },\n    dependencies: [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet],\n    encapsulation: 2\n  });\n  return StripeIdealBankComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet StripeIbanComponent = /*#__PURE__*/(() => {\n  class StripeIbanComponent {\n    constructor(stripeElementsService) {\n      this.stripeElementsService = stripeElementsService;\n      this.load = new EventEmitter();\n      this.blur = new EventEmitter();\n      this.change = new EventEmitter();\n      this.focus = new EventEmitter();\n      this.ready = new EventEmitter();\n      this.escape = new EventEmitter();\n      this.state = 'notready';\n    }\n    ngOnChanges(changes) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.state = 'starting';\n        const options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);\n        let updateElements = false;\n        if (changes.elementsOptions || changes.stripe || !this.elements) {\n          this.elements = yield this.stripeElementsService.elements(this.stripe, this.elementsOptions).toPromise();\n          updateElements = true;\n        }\n        if (changes.options || changes.containerClass || !this.element || updateElements) {\n          if (this.element && !updateElements) {\n            this.update(options);\n          } else if (this.elements && updateElements) {\n            this.createElement(options);\n          }\n        }\n        this.state = 'ready';\n      });\n    }\n    ngOnInit() {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.state === 'notready') {\n          this.state = 'starting';\n          this.elements = yield this.stripeElementsService.elements(this.stripe).toPromise();\n          this.createElement();\n          this.state = 'ready';\n        }\n      });\n    }\n    ngOnDestroy() {\n      if (this.element) {\n        this.element.destroy();\n      }\n    }\n    update(options) {\n      this.element.update(options);\n    }\n    /**\n     * @deprecated\n     */\n    getIban() {\n      return this.element;\n    }\n    createElement(options = {}) {\n      this.element = this.elements.create('iban', options);\n      this.element.on('change', ev => this.change.emit(ev));\n      this.element.on('blur', () => this.blur.emit());\n      this.element.on('focus', () => this.focus.emit());\n      this.element.on('ready', () => this.ready.emit());\n      this.element.on('escape', () => this.escape.emit());\n      this.element.mount(this.stripeElementRef.nativeElement);\n      this.load.emit(this.element);\n    }\n  }\n  StripeIbanComponent.ɵfac = function StripeIbanComponent_Factory(t) {\n    return new (t || StripeIbanComponent)(ɵngcc0.ɵɵdirectiveInject(StripeElementsService));\n  };\n  StripeIbanComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: StripeIbanComponent,\n    selectors: [[\"ngx-stripe-iban\"]],\n    contentQueries: function StripeIbanComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, NgxStripeElementLoadingTemplateDirective, 5, TemplateRef);\n      }\n      if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.loadingTemplate = _t.first);\n      }\n    },\n    viewQuery: function StripeIbanComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.stripeElementRef = _t.first);\n      }\n    },\n    inputs: {\n      containerClass: \"containerClass\",\n      options: \"options\",\n      elementsOptions: \"elementsOptions\",\n      stripe: \"stripe\"\n    },\n    outputs: {\n      load: \"load\",\n      blur: \"blur\",\n      change: \"change\",\n      focus: \"focus\",\n      ready: \"ready\",\n      escape: \"escape\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 7,\n    vars: 1,\n    consts: [[1, \"field\"], [\"stripeElementRef\", \"\"], [3, \"ngTemplateOutlet\", 4, \"ngIf\"], [3, \"ngTemplateOutlet\"]],\n    template: function StripeIbanComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtext(0, \"\\n    \");\n        ɵngcc0.ɵɵelementStart(1, \"div\", 0, 1);\n        ɵngcc0.ɵɵtext(3, \"\\n      \");\n        ɵngcc0.ɵɵtemplate(4, StripeIbanComponent_ng_container_4_Template, 1, 1, \"ng-container\", 2);\n        ɵngcc0.ɵɵtext(5, \"\\n    \");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtext(6, \"\\n  \");\n      }\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(4);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.state !== \"ready\" && ctx.loadingTemplate);\n      }\n    },\n    dependencies: [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet],\n    encapsulation: 2\n  });\n  return StripeIbanComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet StripeAuBankAccountComponent = /*#__PURE__*/(() => {\n  class StripeAuBankAccountComponent {\n    constructor(stripeElementsService) {\n      this.stripeElementsService = stripeElementsService;\n      this.load = new EventEmitter();\n      this.blur = new EventEmitter();\n      this.change = new EventEmitter();\n      this.focus = new EventEmitter();\n      this.ready = new EventEmitter();\n      this.escape = new EventEmitter();\n      this.state = 'notready';\n    }\n    ngOnChanges(changes) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.state = 'starting';\n        const options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);\n        let updateElements = false;\n        if (changes.elementsOptions || changes.stripe || !this.elements) {\n          this.elements = yield this.stripeElementsService.elements(this.stripe, this.elementsOptions).toPromise();\n          updateElements = true;\n        }\n        if (changes.options || changes.containerClass || !this.element || updateElements) {\n          if (this.element && !updateElements) {\n            this.update(options);\n          } else if (this.elements && updateElements) {\n            this.createElement(options);\n          }\n        }\n        this.state = 'ready';\n      });\n    }\n    ngOnInit() {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.state === 'notready') {\n          this.state = 'starting';\n          this.elements = yield this.stripeElementsService.elements(this.stripe).toPromise();\n          this.createElement();\n          this.state = 'ready';\n        }\n      });\n    }\n    ngOnDestroy() {\n      if (this.element) {\n        this.element.destroy();\n      }\n    }\n    update(options) {\n      this.element.update(options);\n    }\n    /**\n     * @deprecated\n     */\n    getAuBankAccount() {\n      return this.element;\n    }\n    createElement(options = {}) {\n      this.element = this.elements.create('auBankAccount', options);\n      this.element.on('change', ev => this.change.emit(ev));\n      this.element.on('blur', () => this.blur.emit());\n      this.element.on('focus', () => this.focus.emit());\n      this.element.on('ready', () => this.ready.emit());\n      this.element.on('escape', () => this.escape.emit());\n      this.element.mount(this.stripeElementRef.nativeElement);\n      this.load.emit(this.element);\n    }\n  }\n  StripeAuBankAccountComponent.ɵfac = function StripeAuBankAccountComponent_Factory(t) {\n    return new (t || StripeAuBankAccountComponent)(ɵngcc0.ɵɵdirectiveInject(StripeElementsService));\n  };\n  StripeAuBankAccountComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: StripeAuBankAccountComponent,\n    selectors: [[\"ngx-stripe-au-bank-account\"]],\n    contentQueries: function StripeAuBankAccountComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, NgxStripeElementLoadingTemplateDirective, 5, TemplateRef);\n      }\n      if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.loadingTemplate = _t.first);\n      }\n    },\n    viewQuery: function StripeAuBankAccountComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.stripeElementRef = _t.first);\n      }\n    },\n    inputs: {\n      containerClass: \"containerClass\",\n      options: \"options\",\n      elementsOptions: \"elementsOptions\",\n      stripe: \"stripe\"\n    },\n    outputs: {\n      load: \"load\",\n      blur: \"blur\",\n      change: \"change\",\n      focus: \"focus\",\n      ready: \"ready\",\n      escape: \"escape\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 7,\n    vars: 1,\n    consts: [[1, \"field\"], [\"stripeElementRef\", \"\"], [3, \"ngTemplateOutlet\", 4, \"ngIf\"], [3, \"ngTemplateOutlet\"]],\n    template: function StripeAuBankAccountComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtext(0, \"\\n    \");\n        ɵngcc0.ɵɵelementStart(1, \"div\", 0, 1);\n        ɵngcc0.ɵɵtext(3, \"\\n      \");\n        ɵngcc0.ɵɵtemplate(4, StripeAuBankAccountComponent_ng_container_4_Template, 1, 1, \"ng-container\", 2);\n        ɵngcc0.ɵɵtext(5, \"\\n    \");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtext(6, \"\\n  \");\n      }\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(4);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.state !== \"ready\" && ctx.loadingTemplate);\n      }\n    },\n    dependencies: [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet],\n    encapsulation: 2\n  });\n  return StripeAuBankAccountComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet StripePaymentElementComponent = /*#__PURE__*/(() => {\n  class StripePaymentElementComponent {\n    constructor(stripeElementsService) {\n      this.stripeElementsService = stripeElementsService;\n      this.doNotCreateUntilClientSecretIsSet = false;\n      this.load = new EventEmitter();\n      this.blur = new EventEmitter();\n      this.change = new EventEmitter();\n      this.focus = new EventEmitter();\n      this.ready = new EventEmitter();\n      this.escape = new EventEmitter();\n      this.state = 'notready';\n    }\n    ngOnChanges(changes) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.state = 'starting';\n        const options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);\n        let updateElements = false;\n        if (changes.elementsOptions || changes.stripe || changes.clientSecret || changes.appearance || !this.elements) {\n          this.elements = yield this.stripeElementsService.elements(this.stripe, Object.assign(Object.assign(Object.assign({}, this.elementsOptions || {}), this.appearance ? {\n            appearance: this.appearance\n          } : {}), this.clientSecret ? {\n            clientSecret: this.clientSecret\n          } : {})).toPromise();\n          updateElements = true;\n        }\n        if (changes.options || changes.containerClass || !this.element || updateElements) {\n          if (this.element && !updateElements) {\n            this.update(options);\n          } else if (this.elements && updateElements) {\n            this.createElement(options);\n          }\n        }\n        this.state = 'ready';\n      });\n    }\n    ngOnDestroy() {\n      if (this.element) {\n        this.element.destroy();\n      }\n    }\n    update(options) {\n      return this.element.update(options);\n    }\n    collapse() {\n      return this.element.collapse();\n    }\n    createElement(options = {}) {\n      try {\n        this.element = this.elements.create('payment', options);\n      } catch (err) {\n        this.elements = null;\n        throw err;\n      }\n      this.element.on('change', ev => this.change.emit(ev));\n      this.element.on('blur', () => this.blur.emit());\n      this.element.on('focus', () => this.focus.emit());\n      this.element.on('ready', () => this.ready.emit());\n      this.element.on('escape', () => this.escape.emit());\n      this.element.mount(this.stripeElementRef.nativeElement);\n      this.load.emit(this.element);\n    }\n  }\n  StripePaymentElementComponent.ɵfac = function StripePaymentElementComponent_Factory(t) {\n    return new (t || StripePaymentElementComponent)(ɵngcc0.ɵɵdirectiveInject(StripeElementsService));\n  };\n  StripePaymentElementComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: StripePaymentElementComponent,\n    selectors: [[\"ngx-stripe-payment\"]],\n    viewQuery: function StripePaymentElementComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.stripeElementRef = _t.first);\n      }\n    },\n    inputs: {\n      doNotCreateUntilClientSecretIsSet: \"doNotCreateUntilClientSecretIsSet\",\n      containerClass: \"containerClass\",\n      options: \"options\",\n      elementsOptions: \"elementsOptions\",\n      stripe: \"stripe\",\n      appearance: \"appearance\",\n      clientSecret: \"clientSecret\"\n    },\n    outputs: {\n      load: \"load\",\n      blur: \"blur\",\n      change: \"change\",\n      focus: \"focus\",\n      ready: \"ready\",\n      escape: \"escape\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 2,\n    vars: 0,\n    consts: [[1, \"field\"], [\"stripeElementRef\", \"\"]],\n    template: function StripePaymentElementComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelement(0, \"div\", 0, 1);\n      }\n    },\n    encapsulation: 2\n  });\n  return StripePaymentElementComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet StripePaymentRequestButtonComponent = /*#__PURE__*/(() => {\n  class StripePaymentRequestButtonComponent {\n    constructor(stripeElementsService) {\n      this.stripeElementsService = stripeElementsService;\n      this.load = new EventEmitter();\n      this.change = new EventEmitter();\n      this.blur = new EventEmitter();\n      this.focus = new EventEmitter();\n      this.ready = new EventEmitter();\n      this.token = new EventEmitter();\n      this.paymentMethod = new EventEmitter();\n      this.source = new EventEmitter();\n      this.cancel = new EventEmitter();\n      this.shippingaddresschange = new EventEmitter();\n      this.shippingoptionchange = new EventEmitter();\n      this.notavailable = new EventEmitter();\n    }\n    ngOnChanges(changes) {\n      var _a, _b, _c;\n      return __awaiter(this, void 0, void 0, function* () {\n        const options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);\n        const elementsOptions = this.elementsOptions;\n        const stripe = this.stripe;\n        let updateElements = false;\n        if (changes.elementsOptions || changes.stripe || !this.elements) {\n          const elements = yield this.stripeElementsService.elements(stripe, elementsOptions).toPromise();\n          this.elements = elements;\n          updateElements = true;\n        }\n        if (changes.paymentOptions && this.paymentRequest) {\n          this.updateRequest(this.paymentOptions);\n        }\n        if (changes.options || changes.containerClass || !this.element || updateElements) {\n          if (this.element && !updateElements) {\n            this.update(options);\n          } else if (this.elements && updateElements) {\n            this.paymentRequest = this.stripeElementsService.paymentRequest(stripe, this.paymentOptions);\n            this.paymentRequest.on('token', ev => this.token.emit(ev));\n            if (((_a = this.paymentMethod.observers) === null || _a === void 0 ? void 0 : _a.length) > 0) this.paymentRequest.on('paymentmethod', ev => this.paymentMethod.emit(ev));\n            if (((_b = this.source.observers) === null || _b === void 0 ? void 0 : _b.length) > 0 && ((_c = this.paymentMethod.observers) === null || _c === void 0 ? void 0 : _c.length) == 0) this.paymentRequest.on('source', ev => this.source.emit(ev));\n            this.paymentRequest.on('cancel', () => this.cancel.emit());\n            this.paymentRequest.on('shippingaddresschange', ev => this.shippingaddresschange.emit(ev));\n            this.paymentRequest.on('shippingoptionchange', ev => this.shippingoptionchange.emit(ev));\n            this.element = this.elements.create('paymentRequestButton', Object.assign({\n              paymentRequest: this.paymentRequest\n            }, options));\n            this.canMakePayment().subscribe(result => {\n              if (result) {\n                this.element.on('click', ev => this.change.emit(ev));\n                this.element.on('blur', () => this.blur.emit());\n                this.element.on('focus', () => this.focus.emit());\n                this.element.on('ready', () => this.ready.emit());\n                this.element.mount(this.stripeElementRef.nativeElement);\n                this.load.emit({\n                  paymentRequestButton: this.element,\n                  paymentRequest: this.paymentRequest\n                });\n              } else {\n                this.notavailable.emit();\n              }\n            });\n          }\n        }\n      });\n    }\n    canMakePayment() {\n      return from(this.paymentRequest.canMakePayment());\n    }\n    update(options) {\n      this.element.update(options);\n    }\n    updateRequest(options) {\n      const {\n        currency,\n        total,\n        displayItems,\n        shippingOptions\n      } = options;\n      this.paymentRequest.update({\n        currency,\n        total,\n        displayItems,\n        shippingOptions\n      });\n    }\n    show() {\n      this.paymentRequest.show();\n    }\n    /**\n     * @deprecated\n     */\n    getButton() {\n      return this.element;\n    }\n  }\n  StripePaymentRequestButtonComponent.ɵfac = function StripePaymentRequestButtonComponent_Factory(t) {\n    return new (t || StripePaymentRequestButtonComponent)(ɵngcc0.ɵɵdirectiveInject(StripeElementsService));\n  };\n  StripePaymentRequestButtonComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: StripePaymentRequestButtonComponent,\n    selectors: [[\"ngx-stripe-payment-request-button\"]],\n    viewQuery: function StripePaymentRequestButtonComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.stripeElementRef = _t.first);\n      }\n    },\n    inputs: {\n      containerClass: \"containerClass\",\n      paymentOptions: \"paymentOptions\",\n      options: \"options\",\n      elementsOptions: \"elementsOptions\",\n      stripe: \"stripe\"\n    },\n    outputs: {\n      load: \"load\",\n      change: \"change\",\n      blur: \"blur\",\n      focus: \"focus\",\n      ready: \"ready\",\n      token: \"token\",\n      paymentMethod: \"paymentMethod\",\n      source: \"source\",\n      cancel: \"cancel\",\n      shippingaddresschange: \"shippingaddresschange\",\n      shippingoptionchange: \"shippingoptionchange\",\n      notavailable: \"notavailable\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 2,\n    vars: 0,\n    consts: [[1, \"field\"], [\"stripeElementRef\", \"\"]],\n    template: function StripePaymentRequestButtonComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelement(0, \"div\", 0, 1);\n      }\n    },\n    encapsulation: 2\n  });\n  return StripePaymentRequestButtonComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet StripeFactoryService = /*#__PURE__*/(() => {\n  class StripeFactoryService {\n    constructor(version, baseKey, baseOptions, loader, window) {\n      this.version = version;\n      this.baseKey = baseKey;\n      this.baseOptions = baseOptions;\n      this.loader = loader;\n      this.window = window;\n    }\n    create(key, options) {\n      if (!key && !this.baseKey) {\n        return null;\n      }\n      return new StripeInstance(this.version, this.loader, this.window, key || this.baseKey, options || this.baseOptions);\n    }\n  }\n  StripeFactoryService.ɵfac = function StripeFactoryService_Factory(t) {\n    return new (t || StripeFactoryService)(ɵngcc0.ɵɵinject(NGX_STRIPE_VERSION), ɵngcc0.ɵɵinject(STRIPE_PUBLISHABLE_KEY), ɵngcc0.ɵɵinject(STRIPE_OPTIONS), ɵngcc0.ɵɵinject(LazyStripeAPILoader), ɵngcc0.ɵɵinject(WindowRef));\n  };\n  StripeFactoryService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: StripeFactoryService,\n    factory: StripeFactoryService.ɵfac\n  });\n  return StripeFactoryService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst components = [StripeCardComponent, StripeCardNumberComponent, StripeCardExpiryComponent, StripeCardCvcComponent, StripeFpxBankComponent, StripeIdealBankComponent, StripeIbanComponent, StripeAuBankAccountComponent, StripePaymentElementComponent, StripePaymentRequestButtonComponent];\nconst directives = [StripeCardGroupDirective, NgxStripeElementLoadingTemplateDirective];\nconst currentVersion = '12.8.2';\nlet NgxStripeModule = /*#__PURE__*/(() => {\n  class NgxStripeModule {\n    static forRoot(publishableKey, options) {\n      return {\n        ngModule: NgxStripeModule,\n        providers: [LazyStripeAPILoader, StripeService, StripeFactoryService, StripeElementsService, WindowRef, DocumentRef, {\n          provide: STRIPE_PUBLISHABLE_KEY,\n          useValue: publishableKey\n        }, {\n          provide: STRIPE_OPTIONS,\n          useValue: options\n        }, {\n          provide: NGX_STRIPE_VERSION,\n          useValue: currentVersion\n        }]\n      };\n    }\n    static forChild(publishableKey, options) {\n      return {\n        ngModule: NgxStripeModule,\n        providers: [LazyStripeAPILoader, StripeService, StripeFactoryService, StripeElementsService, WindowRef, DocumentRef, {\n          provide: STRIPE_PUBLISHABLE_KEY,\n          useValue: publishableKey\n        }, {\n          provide: STRIPE_OPTIONS,\n          useValue: options\n        }, {\n          provide: NGX_STRIPE_VERSION,\n          useValue: currentVersion\n        }]\n      };\n    }\n  }\n  NgxStripeModule.ɵfac = function NgxStripeModule_Factory(t) {\n    return new (t || NgxStripeModule)();\n  };\n  NgxStripeModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: NgxStripeModule\n  });\n  NgxStripeModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [CommonModule]\n  });\n  return NgxStripeModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxStripeModule, {\n    declarations: function () {\n      return [StripeCardComponent, StripeCardNumberComponent, StripeCardExpiryComponent, StripeCardCvcComponent, StripeFpxBankComponent, StripeIdealBankComponent, StripeIbanComponent, StripeAuBankAccountComponent, StripePaymentElementComponent, StripePaymentRequestButtonComponent, StripeCardGroupDirective, NgxStripeElementLoadingTemplateDirective];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [StripeCardComponent, StripeCardNumberComponent, StripeCardExpiryComponent, StripeCardCvcComponent, StripeFpxBankComponent, StripeIdealBankComponent, StripeIbanComponent, StripeAuBankAccountComponent, StripePaymentElementComponent, StripePaymentRequestButtonComponent, StripeCardGroupDirective, NgxStripeElementLoadingTemplateDirective];\n    }\n  });\n})();\n\n/*\n * Public API Surface of ngx-stripe\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DocumentRef, LazyStripeAPILoader, NgxStripeElementLoadingTemplateDirective, NgxStripeModule, STRIPE_OPTIONS, STRIPE_PUBLISHABLE_KEY, StripeAuBankAccountComponent, StripeCardComponent, StripeCardCvcComponent, StripeCardExpiryComponent, StripeCardGroupDirective, StripeCardNumberComponent, StripeElementsService, StripeFactoryService, StripeFpxBankComponent, StripeIbanComponent, StripeIdealBankComponent, StripeInstance, StripePaymentElementComponent, StripePaymentRequestButtonComponent, StripeService, WindowRef, NGX_STRIPE_VERSION as ɵa };\n\n//# sourceMappingURL=ngx-stripe.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}