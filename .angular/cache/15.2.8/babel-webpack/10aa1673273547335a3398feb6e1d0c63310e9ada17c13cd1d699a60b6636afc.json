{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngx-translate/core\";\nimport * as i2 from \"../shared/language/translate.directive\";\nexport class CountdownTimerComponent {\n  constructor(el, translate) {\n    this.el = el;\n    this.translate = translate;\n    this.photo = false;\n    this.zeroTrigger = new EventEmitter(true);\n  }\n  ngOnInit() {\n    if (this.photo) {\n      if (this.start) {\n        this.displayTime = this.getTimeDiff(this.start, true);\n      } else {\n        this.displayTime = this.getTimeDiff(this.end);\n      }\n    } else {\n      this.timer = setInterval(() => {\n        if (this.start) {\n          this.displayTime = this.getTimeDiff(this.start, true);\n        } else {\n          this.displayTime = this.getTimeDiff(this.end);\n        }\n      }, 1000);\n    }\n  }\n  ngOnDestroy() {\n    if (!this.photo) {\n      this.stopTimer();\n    }\n  }\n  getTimeDiff(datetime, useAsTimer = false) {\n    datetime = new Date(datetime).getTime();\n    const now = new Date().getTime();\n    if (isNaN(datetime)) {\n      return \"\";\n    }\n    let milisecDiff = datetime - now;\n    if (useAsTimer) {\n      milisecDiff = now - datetime;\n    }\n    // Zero Time Trigger\n    if (milisecDiff <= 0) {\n      this.zeroTrigger.emit(\"reached zero\");\n      return \"00 \" + this.translate.instant('countdown.days') + \" : 00 \" + this.translate.instant('countdown.hours') + \" : 00 \" + this.translate.instant('countdown.minutes') + \" : 00 \" + this.translate.instant('countdown.seconds');\n    }\n    const days = Math.floor(milisecDiff / 1000 / 60 / (60 * 24));\n    const dateDiff = new Date(milisecDiff);\n    const dayString = days ? this.twoDigit(days) + \" \" + this.translate.instant('countdown.days') + \" : \" : \"\";\n    const dayHours = days * 24;\n    if (this.timeOnly) {\n      const hours = dateDiff.getUTCHours() + dayHours;\n      return this.twoDigit(hours) + \" \" + this.translate.instant('countdown.hours') + \" : \" + this.twoDigit(dateDiff.getUTCMinutes()) + \" \" + this.translate.instant('countdown.minutes') + \" : \" + this.twoDigit(dateDiff.getUTCSeconds()) + \" \" + this.translate.instant('countdown.seconds');\n    } else {\n      // Date() takes a UTC timestamp – getHours() gets hours in local time not in UTC. therefore we have to use getUTCHours()\n      return dayString + this.twoDigit(dateDiff.getUTCHours()) + \" \" + this.translate.instant('countdown.hours') + \" : \" + this.twoDigit(dateDiff.getUTCMinutes()) + \" \" + this.translate.instant('countdown.minutes') + \" : \" + this.twoDigit(dateDiff.getUTCSeconds()) + \" \" + this.translate.instant('countdown.seconds');\n    }\n  }\n  twoDigit(number) {\n    return number > 9 ? \"\" + number : \"0\" + number;\n  }\n  stopTimer() {\n    clearInterval(this.timer);\n    this.timer = undefined;\n  }\n}\nCountdownTimerComponent.ɵfac = function CountdownTimerComponent_Factory(t) {\n  return new (t || CountdownTimerComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.TranslateService));\n};\nCountdownTimerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CountdownTimerComponent,\n  selectors: [[\"jhi-countdown-timer\"]],\n  inputs: {\n    start: \"start\",\n    end: \"end\",\n    timeOnly: \"timeOnly\",\n    photo: \"photo\"\n  },\n  outputs: {\n    zeroTrigger: \"zeroTrigger\"\n  },\n  decls: 5,\n  vars: 1,\n  consts: [[1, \"countdown\"], [\"jhiTranslate\", \"countdown.text\", 1, \"countdown_text\"], [1, \"display\"]],\n  template: function CountdownTimerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n      i0.ɵɵtext(2, \"This event starts in:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"div\", 2);\n      i0.ɵɵtext(4);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate(ctx.displayTime);\n    }\n  },\n  dependencies: [i2.TranslateDirective],\n  styles: [\".countdown[_ngcontent-%COMP%] {\\n  background-image: url('banner_countdown.png');\\n  width: 500px;\\n  height: 149px;\\n  display: block;\\n  margin-left: auto;\\n  margin-right: auto;\\n  margin-bottom: 35px;\\n  border: 3px solid #fff;\\n  box-shadow: 2px 2px black;\\n  border-radius: 10px;\\n  box-shadow: 5px 5px 15px 5px #ff8080, -9px 5px 15px 5px #ffe488, -7px -5px 15px 5px #8cff85, 12px -5px 15px 5px #80c7ff, 12px 10px 15px 7px #e488ff, -10px 10px 15px 7px #ff616b, -10px -7px 27px 1px #8e5cff, 5px 5px 15px 5px rgba(0, 0, 0, 0);\\n  text-align: center;\\n}\\n\\n.countdown_text[_ngcontent-%COMP%] {\\n  font-size: larger;\\n  font-weight: bold;\\n  color: #fff;\\n  text-shadow: 1px 1px 7px #000000;\\n  float: both;\\n  margin-left: 0px;\\n  padding-top: 20px;\\n  padding-bottom: 10px;\\n  margin-top: 0px;\\n}\\n\\n.display[_ngcontent-%COMP%] {\\n  font-family: \\\"Vast Shadow\\\", cursive;\\n  color: #fff;\\n  text-shadow: 1px 1px 7px #000000;\\n  font-size: large;\\n  float: both;\\n  margin-left: 0px;\\n  margin-top: 0px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9tYWluL3dlYmFwcC9hcHAvY291bnRkb3duL2NvdW50ZG93bi5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLDZDQUFBO0VBQ0EsWUFBQTtFQUNBLGFBQUE7RUFDQSxjQUFBO0VBQ0EsaUJBQUE7RUFDQSxrQkFBQTtFQUNBLG1CQUFBO0VBQ0Esc0JBQUE7RUFDQSx5QkFBQTtFQUNBLG1CQUFBO0VBS0EsZ1BBQUE7RUFFQSxrQkFBQTtBQURGOztBQUlBO0VBQ0UsaUJBQUE7RUFDQSxpQkFBQTtFQUNBLFdBQUE7RUFDQSxnQ0FBQTtFQUNBLFdBQUE7RUFDQSxnQkFBQTtFQUNBLGlCQUFBO0VBQ0Esb0JBQUE7RUFDQSxlQUFBO0FBREY7O0FBSUE7RUFDRSxtQ0FBQTtFQUNBLFdBQUE7RUFDQSxnQ0FBQTtFQUNBLGdCQUFBO0VBQ0EsV0FBQTtFQUNBLGdCQUFBO0VBQ0EsZUFBQTtBQURGIiwic291cmNlc0NvbnRlbnQiOlsiLmNvdW50ZG93biB7XG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybCgnLi8uLi8uLi9jb250ZW50L2ltYWdlcy9iYW5uZXJfY291bnRkb3duLnBuZycpO1xuICB3aWR0aDogNTAwcHg7XG4gIGhlaWdodDogMTQ5cHg7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBtYXJnaW4tbGVmdDogYXV0bztcbiAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xuICBtYXJnaW4tYm90dG9tOiAzNXB4O1xuICBib3JkZXI6IDNweCBzb2xpZCAjZmZmO1xuICBib3gtc2hhZG93OiAycHggMnB4IGJsYWNrO1xuICBib3JkZXItcmFkaXVzOiAxMHB4O1xuICAtd2Via2l0LWJveC1zaGFkb3c6IDEwcHggMTBweCA1cHggMHB4IHJnYmEoMCwgMCwgMCwgMC43NSk7XG4gIC1tb3otYm94LXNoYWRvdzogMTBweCAxMHB4IDVweCAwcHggcmdiYSgwLCAwLCAwLCAwLjc1KTtcbiAgLXdlYmtpdC1ib3gtc2hhZG93OiA1cHggNXB4IDE1cHggNXB4ICNmZjgwODAsIC05cHggNXB4IDE1cHggNXB4ICNmZmU0ODgsIC03cHggLTVweCAxNXB4IDVweCAjOGNmZjg1LCAxMnB4IC01cHggMTVweCA1cHggIzgwYzdmZixcbiAgICAxMnB4IDEwcHggMTVweCA3cHggI2U0ODhmZiwgLTEwcHggMTBweCAxNXB4IDdweCAjZmY2MTZiLCAtMTBweCAtN3B4IDI3cHggMXB4ICM4ZTVjZmYsIDVweCA1cHggMTVweCA1cHggcmdiYSgwLCAwLCAwLCAwKTtcbiAgYm94LXNoYWRvdzogNXB4IDVweCAxNXB4IDVweCAjZmY4MDgwLCAtOXB4IDVweCAxNXB4IDVweCAjZmZlNDg4LCAtN3B4IC01cHggMTVweCA1cHggIzhjZmY4NSwgMTJweCAtNXB4IDE1cHggNXB4ICM4MGM3ZmYsXG4gICAgMTJweCAxMHB4IDE1cHggN3B4ICNlNDg4ZmYsIC0xMHB4IDEwcHggMTVweCA3cHggI2ZmNjE2YiwgLTEwcHggLTdweCAyN3B4IDFweCAjOGU1Y2ZmLCA1cHggNXB4IDE1cHggNXB4IHJnYmEoMCwgMCwgMCwgMCk7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cblxuLmNvdW50ZG93bl90ZXh0IHtcbiAgZm9udC1zaXplOiBsYXJnZXI7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xuICBjb2xvcjogI2ZmZjtcbiAgdGV4dC1zaGFkb3c6IDFweCAxcHggN3B4ICMwMDAwMDA7XG4gIGZsb2F0OiBib3RoO1xuICBtYXJnaW4tbGVmdDogMHB4O1xuICBwYWRkaW5nLXRvcDogMjBweDtcbiAgcGFkZGluZy1ib3R0b206IDEwcHg7XG4gIG1hcmdpbi10b3A6IDBweDtcbn1cblxuLmRpc3BsYXkge1xuICBmb250LWZhbWlseTogJ1Zhc3QgU2hhZG93JywgY3Vyc2l2ZTtcbiAgY29sb3I6ICNmZmY7XG4gIHRleHQtc2hhZG93OiAxcHggMXB4IDdweCAjMDAwMDAwO1xuICBmb250LXNpemU6IGxhcmdlO1xuICBmbG9hdDogYm90aDtcbiAgbWFyZ2luLWxlZnQ6IDBweDtcbiAgbWFyZ2luLXRvcDogMHB4O1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["EventEmitter","CountdownTimerComponent","constructor","el","translate","zeroTrigger","ngOnInit","photo","start","displayTime","getTimeDiff","end","timer","setInterval","ngOnDestroy","stopTimer","datetime","useAsTimer","Date","getTime","now","isNaN","milisecDiff","emit","instant","days","Math","floor","dateDiff","dayString","twoDigit","dayHours","timeOnly","hours","getUTCHours","getUTCMinutes","getUTCSeconds","number","clearInterval","undefined","selectors","inputs","outputs","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/countdown/countdown.component.ts"],"sourcesContent":["import { Component, Input, OnInit, OnDestroy, ElementRef, Output,  EventEmitter  } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\n\n\n@Component({\n  selector: 'jhi-countdown-timer',\n  template: `<div class=\"countdown\"><div class=\"countdown_text\" jhiTranslate=\"countdown.text\">This event starts in:</div><div class=\"display\">{{ displayTime }}</div></div>`,\n  styleUrls: ['countdown.component.scss']\n})\nexport class CountdownTimerComponent implements OnInit, OnDestroy{\n\n  @Input() start: any;\n  @Input() end: any;\n  @Output() zeroTrigger;\n  @Input() timeOnly: any;\n  @Input() photo = false;\n  timer: any;\n  displayTime: any;\n  constructor(\n    private el: ElementRef, private translate: TranslateService,\n  ) {\n    this.zeroTrigger = new EventEmitter(true);\n\n  }\n\n  ngOnInit(): void {\n    if(this.photo){\n      if (this.start) {\n        this.displayTime = this.getTimeDiff(this.start, true);\n    } else {\n        this.displayTime = this.getTimeDiff(this.end);\n    }\n    }else {\n      this.timer = setInterval(() => {\n\n        if (this.start) {\n            this.displayTime = this.getTimeDiff(this.start, true);\n        } else {\n            this.displayTime = this.getTimeDiff(this.end);\n        }\n      }, 1000);\n    }\n  }\n\n\n  ngOnDestroy(): void {\n    if(!this.photo) {\n      this.stopTimer();\n    }\n  }\n\n  private getTimeDiff( datetime: any, useAsTimer = false ): string {\n\n      datetime = new Date( datetime ).getTime();\n      const now = new Date().getTime();\n\n      if( isNaN(datetime) )\n      {\n          return \"\";\n      }\n\n      let milisecDiff = datetime - now;\n      if (useAsTimer) {\n          milisecDiff = now - datetime;\n      }\n\n      // Zero Time Trigger\n      if (milisecDiff <= 0) {\n        this.zeroTrigger.emit(\"reached zero\");\n        return \"00 \" + this.translate.instant('countdown.days') + \" : 00 \" + this.translate.instant('countdown.hours') + \" : 00 \"  +  this.translate.instant('countdown.minutes') + \" : 00 \" + this.translate.instant('countdown.seconds');\n      }\n\n      const days = Math.floor(milisecDiff / 1000 / 60 / (60 * 24));\n      const dateDiff = new Date( milisecDiff );\n      const dayString = (days) ? this.twoDigit(days) + \" \" + this.translate.instant('countdown.days') + \" : \" : \"\";\n      const dayHours = days * 24;\n\n\n      if (this.timeOnly) {\n        const hours = dateDiff.getUTCHours() + dayHours;\n        return  this.twoDigit(hours) +\n        \" \" + this.translate.instant('countdown.hours') + \" : \" + this.twoDigit(dateDiff.getUTCMinutes()) + \" \" + this.translate.instant('countdown.minutes') + \" : \"\n        + this.twoDigit(dateDiff.getUTCSeconds()) + \" \" + this.translate.instant('countdown.seconds');\n      } else {\n        // Date() takes a UTC timestamp – getHours() gets hours in local time not in UTC. therefore we have to use getUTCHours()\n        return dayString + this.twoDigit(dateDiff.getUTCHours()) + \" \" + this.translate.instant('countdown.hours') +\n           \" : \" + this.twoDigit(dateDiff.getUTCMinutes()) + \" \" + this.translate.instant('countdown.minutes') + \" : \"\n           + this.twoDigit(dateDiff.getUTCSeconds()) + \" \" + this.translate.instant('countdown.seconds');\n\n      }\n  }\n\n\n  private twoDigit(number: number): string {\n      return number > 9 ? \"\" + number: \"0\" + number;\n  }\n\n  private stopTimer(): void {\n    clearInterval(this.timer);\n    this.timer = undefined;\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}