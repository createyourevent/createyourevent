{"ast":null,"code":"import { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getAdminFeesPriceIdentifier } from '../admin-fees-price.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport let AdminFeesPriceService = /*#__PURE__*/(() => {\n  class AdminFeesPriceService {\n    constructor(http, applicationConfigService) {\n      this.http = http;\n      this.applicationConfigService = applicationConfigService;\n      this.resourceUrl = this.applicationConfigService.getEndpointFor('api/admin-fees-prices');\n    }\n    create(adminFeesPrice) {\n      return this.http.post(this.resourceUrl, adminFeesPrice, {\n        observe: 'response'\n      });\n    }\n    update(adminFeesPrice) {\n      return this.http.put(`${this.resourceUrl}/${getAdminFeesPriceIdentifier(adminFeesPrice)}`, adminFeesPrice, {\n        observe: 'response'\n      });\n    }\n    partialUpdate(adminFeesPrice) {\n      return this.http.patch(`${this.resourceUrl}/${getAdminFeesPriceIdentifier(adminFeesPrice)}`, adminFeesPrice, {\n        observe: 'response'\n      });\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    addAdminFeesPriceToCollectionIfMissing(adminFeesPriceCollection, ...adminFeesPricesToCheck) {\n      const adminFeesPrices = adminFeesPricesToCheck.filter(isPresent);\n      if (adminFeesPrices.length > 0) {\n        const adminFeesPriceCollectionIdentifiers = adminFeesPriceCollection.map(adminFeesPriceItem => getAdminFeesPriceIdentifier(adminFeesPriceItem));\n        const adminFeesPricesToAdd = adminFeesPrices.filter(adminFeesPriceItem => {\n          const adminFeesPriceIdentifier = getAdminFeesPriceIdentifier(adminFeesPriceItem);\n          if (adminFeesPriceIdentifier == null || adminFeesPriceCollectionIdentifiers.includes(adminFeesPriceIdentifier)) {\n            return false;\n          }\n          adminFeesPriceCollectionIdentifiers.push(adminFeesPriceIdentifier);\n          return true;\n        });\n        return [...adminFeesPricesToAdd, ...adminFeesPriceCollection];\n      }\n      return adminFeesPriceCollection;\n    }\n  }\n  AdminFeesPriceService.ɵfac = function AdminFeesPriceService_Factory(t) {\n    return new (t || AdminFeesPriceService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n  };\n  AdminFeesPriceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AdminFeesPriceService,\n    factory: AdminFeesPriceService.ɵfac,\n    providedIn: 'root'\n  });\n  return AdminFeesPriceService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}