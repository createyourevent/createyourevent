{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"app/core/auth/account.service\";\n/**\n * @whatItDoes Conditionally includes an HTML element if current user has any\n * of the authorities passed as the `expression`.\n *\n * @howToUse\n * ```\n *     <some-element *jhiHasAnyAuthority=\"'ROLE_ADMIN'\">...</some-element>\n *\n *     <some-element *jhiHasAnyAuthority=\"['ROLE_ADMIN', 'ROLE_USER']\">...</some-element>\n * ```\n */\nexport class HasAnyAuthorityDirective {\n  constructor(accountService, templateRef, viewContainerRef) {\n    this.accountService = accountService;\n    this.templateRef = templateRef;\n    this.viewContainerRef = viewContainerRef;\n    this.destroy$ = new Subject();\n  }\n  set jhiHasAnyAuthority(value) {\n    this.authorities = value;\n    this.updateView();\n    // Get notified each time authentication state changes.\n    this.accountService.getAuthenticationState().pipe(takeUntil(this.destroy$)).subscribe(() => {\n      this.updateView();\n    });\n  }\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n  updateView() {\n    const hasAnyAuthority = this.accountService.hasAnyAuthority(this.authorities);\n    this.viewContainerRef.clear();\n    if (hasAnyAuthority) {\n      this.viewContainerRef.createEmbeddedView(this.templateRef);\n    }\n  }\n}\nHasAnyAuthorityDirective.ɵfac = function HasAnyAuthorityDirective_Factory(t) {\n  return new (t || HasAnyAuthorityDirective)(i0.ɵɵdirectiveInject(i1.AccountService), i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.ViewContainerRef));\n};\nHasAnyAuthorityDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n  type: HasAnyAuthorityDirective,\n  selectors: [[\"\", \"jhiHasAnyAuthority\", \"\"]],\n  inputs: {\n    jhiHasAnyAuthority: \"jhiHasAnyAuthority\"\n  }\n});","map":{"version":3,"mappings":"AACA,SAASA,OAAO,QAAQ,MAAM;AAC9B,SAASC,SAAS,QAAQ,gBAAgB;;;AAI1C;;;;;;;;;;;AAcA,OAAM,MAAOC,wBAAwB;EAKnCC,YAAoBC,cAA8B,EAAUC,WAA6B,EAAUC,gBAAkC;IAAjH,mBAAc,GAAdF,cAAc;IAA0B,gBAAW,GAAXC,WAAW;IAA4B,qBAAgB,GAAhBC,gBAAgB;IAFlG,aAAQ,GAAG,IAAIN,OAAO,EAAQ;EAEyF;EAExI,IACIO,kBAAkB,CAACC,KAAwB;IAC7C,IAAI,CAACC,WAAW,GAAGD,KAAK;IACxB,IAAI,CAACE,UAAU,EAAE;IACjB;IACA,IAAI,CAACN,cAAc,CAChBO,sBAAsB,EAAE,CACxBC,IAAI,CAACX,SAAS,CAAC,IAAI,CAACY,QAAQ,CAAC,CAAC,CAC9BC,SAAS,CAAC,MAAK;MACd,IAAI,CAACJ,UAAU,EAAE;IACnB,CAAC,CAAC;EACN;EAEAK,WAAW;IACT,IAAI,CAACF,QAAQ,CAACG,IAAI,EAAE;IACpB,IAAI,CAACH,QAAQ,CAACI,QAAQ,EAAE;EAC1B;EAEQP,UAAU;IAChB,MAAMQ,eAAe,GAAG,IAAI,CAACd,cAAc,CAACc,eAAe,CAAC,IAAI,CAACT,WAAW,CAAC;IAC7E,IAAI,CAACH,gBAAgB,CAACa,KAAK,EAAE;IAC7B,IAAID,eAAe,EAAE;MACnB,IAAI,CAACZ,gBAAgB,CAACc,kBAAkB,CAAC,IAAI,CAACf,WAAW,CAAC;;EAE9D;;;mBA/BWH,wBAAwB;AAAA;;QAAxBA,wBAAwB;EAAAmB;EAAAC;IAAAf;EAAA;AAAA","names":["Subject","takeUntil","HasAnyAuthorityDirective","constructor","accountService","templateRef","viewContainerRef","jhiHasAnyAuthority","value","authorities","updateView","getAuthenticationState","pipe","destroy$","subscribe","ngOnDestroy","next","complete","hasAnyAuthority","clear","createEmbeddedView","selectors","inputs"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/shared/auth/has-any-authority.directive.ts"],"sourcesContent":["import { Directive, Input, TemplateRef, ViewContainerRef, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { AccountService } from 'app/core/auth/account.service';\n\n/**\n * @whatItDoes Conditionally includes an HTML element if current user has any\n * of the authorities passed as the `expression`.\n *\n * @howToUse\n * ```\n *     <some-element *jhiHasAnyAuthority=\"'ROLE_ADMIN'\">...</some-element>\n *\n *     <some-element *jhiHasAnyAuthority=\"['ROLE_ADMIN', 'ROLE_USER']\">...</some-element>\n * ```\n */\n@Directive({\n  selector: '[jhiHasAnyAuthority]',\n})\nexport class HasAnyAuthorityDirective implements OnDestroy {\n  private authorities!: string | string[];\n\n  private readonly destroy$ = new Subject<void>();\n\n  constructor(private accountService: AccountService, private templateRef: TemplateRef<any>, private viewContainerRef: ViewContainerRef) {}\n\n  @Input()\n  set jhiHasAnyAuthority(value: string | string[]) {\n    this.authorities = value;\n    this.updateView();\n    // Get notified each time authentication state changes.\n    this.accountService\n      .getAuthenticationState()\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(() => {\n        this.updateView();\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private updateView(): void {\n    const hasAnyAuthority = this.accountService.hasAnyAuthority(this.authorities);\n    this.viewContainerRef.clear();\n    if (hasAnyAuthority) {\n      this.viewContainerRef.createEmbeddedView(this.templateRef);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}