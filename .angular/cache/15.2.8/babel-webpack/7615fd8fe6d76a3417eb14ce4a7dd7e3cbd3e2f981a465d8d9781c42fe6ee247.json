{"ast":null,"code":"import { isDevMode } from '@angular/core';\nimport { map } from 'rxjs/operators';\nimport { Authority } from 'app/config/authority.constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"app/login/login.service\";\nimport * as i3 from \"app/core/auth/account.service\";\nimport * as i4 from \"./state-storage.service\";\nexport class UserRouteAccessService {\n  constructor(router, loginService, accountService, stateStorageService) {\n    this.router = router;\n    this.loginService = loginService;\n    this.accountService = accountService;\n    this.stateStorageService = stateStorageService;\n  }\n  canActivate(route, state) {\n    return this.accountService.identity().pipe(map(account => {\n      if (account) {\n        let authorities = route.data['authorities'];\n        if (!authorities) {\n          authorities = [Authority.ADMIN];\n        }\n        if (!authorities || authorities.length === 0 || this.accountService.hasAnyAuthority(authorities)) {\n          return true;\n        }\n        if (isDevMode()) {\n          console.error('User has not any of required authorities: ', authorities);\n        }\n        this.router.navigate(['accessdenied']);\n        return false;\n      }\n      this.stateStorageService.storeUrl(state.url);\n      this.loginService.login();\n      return false;\n    }));\n  }\n}\nUserRouteAccessService.ɵfac = function UserRouteAccessService_Factory(t) {\n  return new (t || UserRouteAccessService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.LoginService), i0.ɵɵinject(i3.AccountService), i0.ɵɵinject(i4.StateStorageService));\n};\nUserRouteAccessService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserRouteAccessService,\n  factory: UserRouteAccessService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAAqBA,SAAS,QAAQ,eAAe;AAGrD,SAASC,GAAG,QAAQ,gBAAgB;AAKpC,SAASC,SAAS,QAAQ,gCAAgC;;;;;;AAG1D,OAAM,MAAOC,sBAAsB;EACjCC,YACUC,MAAc,EACdC,YAA0B,EAC1BC,cAA8B,EAC9BC,mBAAwC;IAHxC,WAAM,GAANH,MAAM;IACN,iBAAY,GAAZC,YAAY;IACZ,mBAAc,GAAdC,cAAc;IACd,wBAAmB,GAAnBC,mBAAmB;EAC1B;EAEHC,WAAW,CAACC,KAA6B,EAAEC,KAA0B;IACnE,OAAO,IAAI,CAACJ,cAAc,CAACK,QAAQ,EAAE,CAACC,IAAI,CACxCZ,GAAG,CAACa,OAAO,IAAG;MACZ,IAAIA,OAAO,EAAE;QACX,IAAIC,WAAW,GAAGL,KAAK,CAACM,IAAI,CAAC,aAAa,CAAC;QAC3C,IAAG,CAACD,WAAW,EAAE;UACfA,WAAW,GAAG,CAACb,SAAS,CAACe,KAAK,CAAC;;QAGjC,IAAI,CAACF,WAAW,IAAIA,WAAW,CAACG,MAAM,KAAK,CAAC,IAAI,IAAI,CAACX,cAAc,CAACY,eAAe,CAACJ,WAAW,CAAC,EAAE;UAChG,OAAO,IAAI;;QAGb,IAAIf,SAAS,EAAE,EAAE;UACfoB,OAAO,CAACC,KAAK,CAAC,4CAA4C,EAAEN,WAAW,CAAC;;QAE1E,IAAI,CAACV,MAAM,CAACiB,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC;QACtC,OAAO,KAAK;;MAGd,IAAI,CAACd,mBAAmB,CAACe,QAAQ,CAACZ,KAAK,CAACa,GAAG,CAAC;MAC5C,IAAI,CAAClB,YAAY,CAACmB,KAAK,EAAE;MACzB,OAAO,KAAK;IACd,CAAC,CAAC,CACH;EACH;;;mBAjCWtB,sBAAsB;AAAA;;SAAtBA,sBAAsB;EAAAuB,SAAtBvB,sBAAsB;EAAAwB,YADT;AAAM","names":["isDevMode","map","Authority","UserRouteAccessService","constructor","router","loginService","accountService","stateStorageService","canActivate","route","state","identity","pipe","account","authorities","data","ADMIN","length","hasAnyAuthority","console","error","navigate","storeUrl","url","login","factory","providedIn"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/core/auth/user-route-access.service.ts"],"sourcesContent":["import { Injectable, isDevMode } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { AccountService } from 'app/core/auth/account.service';\nimport { LoginService } from 'app/login/login.service';\nimport { StateStorageService } from './state-storage.service';\nimport { Authority } from 'app/config/authority.constants';\n\n@Injectable({ providedIn: 'root' })\nexport class UserRouteAccessService implements CanActivate {\n  constructor(\n    private router: Router,\n    private loginService: LoginService,\n    private accountService: AccountService,\n    private stateStorageService: StateStorageService\n  ) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n    return this.accountService.identity().pipe(\n      map(account => {\n        if (account) {\n          let authorities = route.data['authorities'];\n          if(!authorities) {\n            authorities = [Authority.ADMIN];\n          }\n\n          if (!authorities || authorities.length === 0 || this.accountService.hasAnyAuthority(authorities)) {\n            return true;\n          }\n\n          if (isDevMode()) {\n            console.error('User has not any of required authorities: ', authorities);\n          }\n          this.router.navigate(['accessdenied']);\n          return false;\n        }\n\n        this.stateStorageService.storeUrl(state.url);\n        this.loginService.login();\n        return false;\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}