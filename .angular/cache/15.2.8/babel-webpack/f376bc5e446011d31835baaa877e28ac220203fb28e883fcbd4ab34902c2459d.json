{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"app/core/util/alert.service\";\nimport * as i2 from \"app/core/util/event-manager.service\";\nimport * as i3 from \"@ngx-translate/core\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@ng-bootstrap/ng-bootstrap\";\nfunction AlertErrorComponent_div_2_ngb_alert_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ngb-alert\", 4);\n    i0.ɵɵlistener(\"closed\", function AlertErrorComponent_div_2_ngb_alert_2_Template_ngb_alert_closed_0_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const alert_r1 = i0.ɵɵnextContext().$implicit;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.close(alert_r1));\n    });\n    i0.ɵɵtext(1, \"\\n      \");\n    i0.ɵɵelement(2, \"pre\", 5);\n    i0.ɵɵtext(3, \"\\n    \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const alert_r1 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"type\", alert_r1.type);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"innerHTML\", alert_r1.message, i0.ɵɵsanitizeHtml);\n  }\n}\nfunction AlertErrorComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2);\n    i0.ɵɵtext(1, \"\\n    \");\n    i0.ɵɵtemplate(2, AlertErrorComponent_div_2_ngb_alert_2_Template, 4, 2, \"ngb-alert\", 3);\n    i0.ɵɵtext(3, \"\\n  \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const alert_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.setClasses(alert_r1));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", alert_r1.message);\n  }\n}\nexport let AlertErrorComponent = /*#__PURE__*/(() => {\n  class AlertErrorComponent {\n    constructor(alertService, eventManager, translateService) {\n      this.alertService = alertService;\n      this.eventManager = eventManager;\n      this.alerts = [];\n      this.errorListener = eventManager.subscribe('createyoureventApp.error', response => {\n        const errorResponse = response.content;\n        this.addErrorAlert(errorResponse.message, errorResponse.key, errorResponse.params);\n      });\n      this.httpErrorListener = eventManager.subscribe('createyoureventApp.httpError', response => {\n        const httpErrorResponse = response.content;\n        switch (httpErrorResponse.status) {\n          // connection refused, server not reachable\n          case 0:\n            this.addErrorAlert('Server not reachable', 'error.server.not.reachable');\n            break;\n          case 400:\n            {\n              const arr = httpErrorResponse.headers.keys();\n              let errorHeader = null;\n              let entityKey = null;\n              for (const entry of arr) {\n                if (entry.toLowerCase().endsWith('app-error')) {\n                  errorHeader = httpErrorResponse.headers.get(entry);\n                } else if (entry.toLowerCase().endsWith('app-params')) {\n                  entityKey = httpErrorResponse.headers.get(entry);\n                }\n              }\n              if (errorHeader) {\n                const alertData = entityKey ? {\n                  entityName: translateService.instant(`global.menu.entities.${entityKey}`)\n                } : undefined;\n                this.addErrorAlert(errorHeader, errorHeader, alertData);\n              } else if (httpErrorResponse.error !== '' && httpErrorResponse.error.fieldErrors) {\n                const fieldErrors = httpErrorResponse.error.fieldErrors;\n                for (const fieldError of fieldErrors) {\n                  if (['Min', 'Max', 'DecimalMin', 'DecimalMax'].includes(fieldError.message)) {\n                    fieldError.message = 'Size';\n                  }\n                  // convert 'something[14].other[4].id' to 'something[].other[].id' so translations can be written to it\n                  const convertedField = fieldError.field.replace(/\\[\\d*\\]/g, '[]');\n                  const fieldName = translateService.instant(`createyoureventApp.${fieldError.objectName}.${convertedField}`);\n                  this.addErrorAlert(`Error on field \"${fieldName}\"`, `error.${fieldError.message}`, {\n                    fieldName\n                  });\n                }\n              } else if (httpErrorResponse.error !== '' && httpErrorResponse.error.message) {\n                this.addErrorAlert(httpErrorResponse.error.detail ?? httpErrorResponse.error.message, httpErrorResponse.error.message, httpErrorResponse.error.params);\n              } else {\n                this.addErrorAlert(httpErrorResponse.error, httpErrorResponse.error);\n              }\n              break;\n            }\n          case 404:\n            this.addErrorAlert('Not found', 'error.url.not.found');\n            break;\n          default:\n            if (httpErrorResponse.error !== '' && httpErrorResponse.error.message) {\n              this.addErrorAlert(httpErrorResponse.error.detail ?? httpErrorResponse.error.message, httpErrorResponse.error.message, httpErrorResponse.error.params);\n            } else {\n              this.addErrorAlert(httpErrorResponse.error, httpErrorResponse.error);\n            }\n        }\n      });\n    }\n    setClasses(alert) {\n      const classes = {\n        'jhi-toast': Boolean(alert.toast)\n      };\n      if (alert.position) {\n        return {\n          ...classes,\n          [alert.position]: true\n        };\n      }\n      return classes;\n    }\n    ngOnDestroy() {\n      this.eventManager.destroy(this.errorListener);\n      this.eventManager.destroy(this.httpErrorListener);\n    }\n    close(alert) {\n      alert.close?.(this.alerts);\n    }\n    addErrorAlert(message, translationKey, translationParams) {\n      this.alertService.addAlert({\n        type: 'danger',\n        message,\n        translationKey,\n        translationParams\n      }, this.alerts);\n    }\n  }\n  AlertErrorComponent.ɵfac = function AlertErrorComponent_Factory(t) {\n    return new (t || AlertErrorComponent)(i0.ɵɵdirectiveInject(i1.AlertService), i0.ɵɵdirectiveInject(i2.EventManager), i0.ɵɵdirectiveInject(i3.TranslateService));\n  };\n  AlertErrorComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AlertErrorComponent,\n    selectors: [[\"jhi-alert-error\"]],\n    decls: 5,\n    vars: 1,\n    consts: [[\"role\", \"alert\", 1, \"alerts\"], [3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [3, \"ngClass\"], [3, \"type\", \"closed\", 4, \"ngIf\"], [3, \"type\", \"closed\"], [3, \"innerHTML\"]],\n    template: function AlertErrorComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵtext(1, \"\\n  \");\n        i0.ɵɵtemplate(2, AlertErrorComponent_div_2_Template, 4, 2, \"div\", 1);\n        i0.ɵɵtext(3, \"\\n\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(4, \"\\n\");\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.alerts);\n      }\n    },\n    dependencies: [i4.NgClass, i4.NgForOf, i4.NgIf, i5.NgbAlert],\n    encapsulation: 2\n  });\n  return AlertErrorComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}