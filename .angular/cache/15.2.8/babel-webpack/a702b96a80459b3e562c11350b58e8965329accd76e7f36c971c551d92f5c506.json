{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\nimport { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getEventCommentIdentifier } from '../event-comment.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport class EventCommentService {\n  constructor(http, applicationConfigService) {\n    this.http = http;\n    this.applicationConfigService = applicationConfigService;\n    this.resourceUrl = this.applicationConfigService.getEndpointFor('api/event-comments');\n  }\n  create(eventComment) {\n    const copy = this.convertDateFromClient(eventComment);\n    return this.http.post(this.resourceUrl, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  update(eventComment) {\n    const copy = this.convertDateFromClient(eventComment);\n    return this.http.put(`${this.resourceUrl}/${getEventCommentIdentifier(eventComment)}`, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  partialUpdate(eventComment) {\n    const copy = this.convertDateFromClient(eventComment);\n    return this.http.patch(`${this.resourceUrl}/${getEventCommentIdentifier(eventComment)}`, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  find(id) {\n    return this.http.get(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  query(req) {\n    const options = createRequestOption(req);\n    return this.http.get(this.resourceUrl, {\n      params: options,\n      observe: 'response'\n    }).pipe(map(res => this.convertDateArrayFromServer(res)));\n  }\n  delete(id) {\n    return this.http.delete(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  addEventCommentToCollectionIfMissing(eventCommentCollection, ...eventCommentsToCheck) {\n    const eventComments = eventCommentsToCheck.filter(isPresent);\n    if (eventComments.length > 0) {\n      const eventCommentCollectionIdentifiers = eventCommentCollection.map(eventCommentItem => getEventCommentIdentifier(eventCommentItem));\n      const eventCommentsToAdd = eventComments.filter(eventCommentItem => {\n        const eventCommentIdentifier = getEventCommentIdentifier(eventCommentItem);\n        if (eventCommentIdentifier == null || eventCommentCollectionIdentifiers.includes(eventCommentIdentifier)) {\n          return false;\n        }\n        eventCommentCollectionIdentifiers.push(eventCommentIdentifier);\n        return true;\n      });\n      return [...eventCommentsToAdd, ...eventCommentCollection];\n    }\n    return eventCommentCollection;\n  }\n  convertDateFromClient(eventComment) {\n    return Object.assign({}, eventComment, {\n      date: eventComment.date?.isValid() ? eventComment.date.toJSON() : undefined\n    });\n  }\n  convertDateFromServer(res) {\n    if (res.body) {\n      res.body.date = res.body.date ? dayjs(res.body.date) : undefined;\n    }\n    return res;\n  }\n  convertDateArrayFromServer(res) {\n    if (res.body) {\n      res.body.forEach(eventComment => {\n        eventComment.date = eventComment.date ? dayjs(eventComment.date) : undefined;\n      });\n    }\n    return res;\n  }\n}\nEventCommentService.ɵfac = function EventCommentService_Factory(t) {\n  return new (t || EventCommentService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n};\nEventCommentService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: EventCommentService,\n  factory: EventCommentService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["map","dayjs","isPresent","createRequestOption","getEventCommentIdentifier","EventCommentService","constructor","http","applicationConfigService","getEndpointFor","create","eventComment","copy","convertDateFromClient","post","resourceUrl","observe","pipe","res","convertDateFromServer","update","put","partialUpdate","patch","find","id","get","query","req","options","params","convertDateArrayFromServer","delete","addEventCommentToCollectionIfMissing","eventCommentCollection","eventCommentsToCheck","eventComments","filter","length","eventCommentCollectionIdentifiers","eventCommentItem","eventCommentsToAdd","eventCommentIdentifier","includes","push","Object","assign","date","isValid","toJSON","undefined","body","forEach","factory","providedIn"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/entities/event-comment/service/event-comment.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\n\nimport { isPresent } from 'app/core/util/operators';\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { IEventComment, getEventCommentIdentifier } from '../event-comment.model';\n\nexport type EntityResponseType = HttpResponse<IEventComment>;\nexport type EntityArrayResponseType = HttpResponse<IEventComment[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class EventCommentService {\n  protected resourceUrl = this.applicationConfigService.getEndpointFor('api/event-comments');\n\n  constructor(protected http: HttpClient, protected applicationConfigService: ApplicationConfigService) {}\n\n  create(eventComment: IEventComment): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(eventComment);\n    return this.http\n      .post<IEventComment>(this.resourceUrl, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  update(eventComment: IEventComment): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(eventComment);\n    return this.http\n      .put<IEventComment>(`${this.resourceUrl}/${getEventCommentIdentifier(eventComment) as number}`, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  partialUpdate(eventComment: IEventComment): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(eventComment);\n    return this.http\n      .patch<IEventComment>(`${this.resourceUrl}/${getEventCommentIdentifier(eventComment) as number}`, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  find(id: number): Observable<EntityResponseType> {\n    return this.http\n      .get<IEventComment>(`${this.resourceUrl}/${id}`, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  query(req?: any): Observable<EntityArrayResponseType> {\n    const options = createRequestOption(req);\n    return this.http\n      .get<IEventComment[]>(this.resourceUrl, { params: options, observe: 'response' })\n      .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n  }\n\n  delete(id: number): Observable<HttpResponse<{}>> {\n    return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  addEventCommentToCollectionIfMissing(\n    eventCommentCollection: IEventComment[],\n    ...eventCommentsToCheck: (IEventComment | null | undefined)[]\n  ): IEventComment[] {\n    const eventComments: IEventComment[] = eventCommentsToCheck.filter(isPresent);\n    if (eventComments.length > 0) {\n      const eventCommentCollectionIdentifiers = eventCommentCollection.map(\n        eventCommentItem => getEventCommentIdentifier(eventCommentItem)!\n      );\n      const eventCommentsToAdd = eventComments.filter(eventCommentItem => {\n        const eventCommentIdentifier = getEventCommentIdentifier(eventCommentItem);\n        if (eventCommentIdentifier == null || eventCommentCollectionIdentifiers.includes(eventCommentIdentifier)) {\n          return false;\n        }\n        eventCommentCollectionIdentifiers.push(eventCommentIdentifier);\n        return true;\n      });\n      return [...eventCommentsToAdd, ...eventCommentCollection];\n    }\n    return eventCommentCollection;\n  }\n\n  protected convertDateFromClient(eventComment: IEventComment): IEventComment {\n    return Object.assign({}, eventComment, {\n      date: eventComment.date?.isValid() ? eventComment.date.toJSON() : undefined,\n    });\n  }\n\n  protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\n    if (res.body) {\n      res.body.date = res.body.date ? dayjs(res.body.date) : undefined;\n    }\n    return res;\n  }\n\n  protected convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\n    if (res.body) {\n      res.body.forEach((eventComment: IEventComment) => {\n        eventComment.date = eventComment.date ? dayjs(eventComment.date) : undefined;\n      });\n    }\n    return res;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}