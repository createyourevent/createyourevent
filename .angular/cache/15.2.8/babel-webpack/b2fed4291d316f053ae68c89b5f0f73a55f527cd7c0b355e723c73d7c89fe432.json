{"ast":null,"code":"import { of, EMPTY } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\nimport { ServiceOffer } from '../service-offer.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../service/service-offer.service\";\nimport * as i2 from \"@angular/router\";\nexport let ServiceOfferRoutingResolveService = /*#__PURE__*/(() => {\n  class ServiceOfferRoutingResolveService {\n    constructor(service, router) {\n      this.service = service;\n      this.router = router;\n    }\n    resolve(route) {\n      const id = route.params['id'];\n      if (id) {\n        return this.service.find(id).pipe(mergeMap(serviceOffer => {\n          if (serviceOffer.body) {\n            return of(serviceOffer.body);\n          } else {\n            this.router.navigate(['404']);\n            return EMPTY;\n          }\n        }));\n      }\n      return of(new ServiceOffer());\n    }\n  }\n  ServiceOfferRoutingResolveService.ɵfac = function ServiceOfferRoutingResolveService_Factory(t) {\n    return new (t || ServiceOfferRoutingResolveService)(i0.ɵɵinject(i1.ServiceOfferService), i0.ɵɵinject(i2.Router));\n  };\n  ServiceOfferRoutingResolveService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ServiceOfferRoutingResolveService,\n    factory: ServiceOfferRoutingResolveService.ɵfac,\n    providedIn: 'root'\n  });\n  return ServiceOfferRoutingResolveService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}