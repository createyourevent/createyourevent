{"ast":null,"code":"import { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getPropertyIdentifier } from '../property.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport let PropertyService = /*#__PURE__*/(() => {\n  class PropertyService {\n    constructor(http, applicationConfigService) {\n      this.http = http;\n      this.applicationConfigService = applicationConfigService;\n      this.resourceUrl = this.applicationConfigService.getEndpointFor('api/properties');\n    }\n    create(property) {\n      return this.http.post(this.resourceUrl, property, {\n        observe: 'response'\n      });\n    }\n    update(property) {\n      return this.http.put(`${this.resourceUrl}/${getPropertyIdentifier(property)}`, property, {\n        observe: 'response'\n      });\n    }\n    partialUpdate(property) {\n      return this.http.patch(`${this.resourceUrl}/${getPropertyIdentifier(property)}`, property, {\n        observe: 'response'\n      });\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    addPropertyToCollectionIfMissing(propertyCollection, ...propertiesToCheck) {\n      const properties = propertiesToCheck.filter(isPresent);\n      if (properties.length > 0) {\n        const propertyCollectionIdentifiers = propertyCollection.map(propertyItem => getPropertyIdentifier(propertyItem));\n        const propertiesToAdd = properties.filter(propertyItem => {\n          const propertyIdentifier = getPropertyIdentifier(propertyItem);\n          if (propertyIdentifier == null || propertyCollectionIdentifiers.includes(propertyIdentifier)) {\n            return false;\n          }\n          propertyCollectionIdentifiers.push(propertyIdentifier);\n          return true;\n        });\n        return [...propertiesToAdd, ...propertyCollection];\n      }\n      return propertyCollection;\n    }\n  }\n  PropertyService.ɵfac = function PropertyService_Factory(t) {\n    return new (t || PropertyService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n  };\n  PropertyService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PropertyService,\n    factory: PropertyService.ɵfac,\n    providedIn: 'root'\n  });\n  return PropertyService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}