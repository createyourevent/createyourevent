{"ast":null,"code":"import { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getTagsIdentifier } from '../tags.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport let TagsService = /*#__PURE__*/(() => {\n  class TagsService {\n    constructor(http, applicationConfigService) {\n      this.http = http;\n      this.applicationConfigService = applicationConfigService;\n      this.resourceUrl = this.applicationConfigService.getEndpointFor('api/tags');\n    }\n    create(tags) {\n      return this.http.post(this.resourceUrl, tags, {\n        observe: 'response'\n      });\n    }\n    update(tags) {\n      return this.http.put(`${this.resourceUrl}/${getTagsIdentifier(tags)}`, tags, {\n        observe: 'response'\n      });\n    }\n    partialUpdate(tags) {\n      return this.http.patch(`${this.resourceUrl}/${getTagsIdentifier(tags)}`, tags, {\n        observe: 'response'\n      });\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    addTagsToCollectionIfMissing(tagsCollection, ...tagsToCheck) {\n      const tags = tagsToCheck.filter(isPresent);\n      if (tags.length > 0) {\n        const tagsCollectionIdentifiers = tagsCollection.map(tagsItem => getTagsIdentifier(tagsItem));\n        const tagsToAdd = tags.filter(tagsItem => {\n          const tagsIdentifier = getTagsIdentifier(tagsItem);\n          if (tagsIdentifier == null || tagsCollectionIdentifiers.includes(tagsIdentifier)) {\n            return false;\n          }\n          tagsCollectionIdentifiers.push(tagsIdentifier);\n          return true;\n        });\n        return [...tagsToAdd, ...tagsCollection];\n      }\n      return tagsCollection;\n    }\n  }\n  TagsService.ɵfac = function TagsService_Factory(t) {\n    return new (t || TagsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n  };\n  TagsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TagsService,\n    factory: TagsService.ɵfac,\n    providedIn: 'root'\n  });\n  return TagsService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}