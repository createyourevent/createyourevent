{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { Injectable, NgZone, EventEmitter, Component, ChangeDetectionStrategy, ChangeDetectorRef, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport * as ɵngcc0 from '@angular/core';\nconst _c0 = [\"payPalButtonContainer\"];\nlet ScriptService = /*#__PURE__*/(() => {\n  class ScriptService {\n    constructor(zone) {\n      this.zone = zone;\n    }\n    registerScript(url, globalVar, onReady) {\n      const existingGlobalVar = window[globalVar];\n      if (existingGlobalVar) {\n        // global variable is present = script was already loaded\n        this.zone.run(() => {\n          onReady(existingGlobalVar);\n        });\n        return;\n      }\n      // prepare script elem\n      const scriptElem = document.createElement('script');\n      scriptElem.id = this.getElemId(globalVar);\n      scriptElem.innerHTML = '';\n      scriptElem.onload = () => {\n        this.zone.run(() => {\n          onReady(window[globalVar]);\n        });\n      };\n      scriptElem.src = url;\n      scriptElem.async = true;\n      scriptElem.defer = true;\n      // add script to header\n      document.getElementsByTagName('head')[0].appendChild(scriptElem);\n    }\n    cleanup(globalVar) {\n      // remove script from DOM\n      const scriptElem = document.getElementById(this.getElemId(globalVar));\n      if (scriptElem) {\n        scriptElem.remove();\n      }\n    }\n    getElemId(globalVar) {\n      return `ngx-paypal-script-elem-${globalVar}`;\n    }\n  }\n  ScriptService.ɵfac = function ScriptService_Factory(t) {\n    return new (t || ScriptService)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n  };\n  ScriptService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: ScriptService,\n    factory: ScriptService.ɵfac\n  });\n  /** @nocollapse */\n  return ScriptService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet PayPalScriptService = /*#__PURE__*/(() => {\n  class PayPalScriptService {\n    constructor(scriptService) {\n      this.scriptService = scriptService;\n      this.paypalWindowName = 'paypal';\n    }\n    registerPayPalScript(config, onReady) {\n      this.scriptService.registerScript(this.getUrlForConfig(config), this.paypalWindowName, onReady);\n    }\n    destroyPayPalScript() {\n      this.scriptService.cleanup(this.paypalWindowName);\n    }\n    getUrlForConfig(config) {\n      const params = [{\n        name: 'client-id',\n        value: config.clientId\n      }];\n      if (config.currency) {\n        params.push({\n          name: 'currency',\n          value: config.currency\n        });\n      }\n      if (config.commit) {\n        params.push({\n          name: 'commit',\n          value: config.commit\n        });\n      }\n      if (config.vault) {\n        params.push({\n          name: 'vault',\n          value: config.vault\n        });\n      }\n      if (config.extraParams) {\n        params.push(...config.extraParams);\n      }\n      return `https://www.paypal.com/sdk/js${this.getQueryString(params)}`;\n    }\n    getQueryString(queryParams) {\n      let queryString = '';\n      for (let i = 0; i < queryParams.length; i++) {\n        const queryParam = queryParams[i];\n        if (i === 0) {\n          queryString += '?';\n        } else {\n          queryString += '&';\n        }\n        queryString += `${queryParam.name}=${queryParam.value}`;\n      }\n      return queryString;\n    }\n  }\n  PayPalScriptService.ɵfac = function PayPalScriptService_Factory(t) {\n    return new (t || PayPalScriptService)(ɵngcc0.ɵɵinject(ScriptService));\n  };\n  PayPalScriptService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: PayPalScriptService,\n    factory: PayPalScriptService.ɵfac\n  });\n  /** @nocollapse */\n  return PayPalScriptService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet NgxPaypalComponent = /*#__PURE__*/(() => {\n  class NgxPaypalComponent {\n    constructor(paypalScriptService, cdr, ngZone) {\n      this.paypalScriptService = paypalScriptService;\n      this.cdr = cdr;\n      this.ngZone = ngZone;\n      /**\r\n       * If enabled, paypal SDK script will be loaded. Useful if you want to have multiple PayPal components on the same page\r\n       * sharing base configuration. In such a case only a single component may register script.\r\n       */\n      this.registerScript = true;\n      /**\r\n       * Emitted when paypal script is loaded\r\n       */\n      this.scriptLoaded = new EventEmitter();\n      this.ngUnsubscribe = new Subject();\n      /**\r\n       * Flag that indicates if paypal should be initialized (required for handling script load events and availability of DOM element)\r\n       */\n      this.initializePayPal = true;\n    }\n    set payPalButtonContainer(content) {\n      this.payPalButtonContainerElem = content;\n    }\n    ngOnChanges(changes) {\n      if (!this.payPalButtonContainerId) {\n        this.payPalButtonContainerId = this.generateElementId();\n      }\n      // first time config setup\n      const config = this.config;\n      if (changes.config.isFirstChange()) {\n        if (config && this.registerScript) {\n          this.initPayPalScript(config, payPal => {\n            // store reference to paypal global script\n            this.payPal = payPal;\n            this.doPayPalCheck();\n          });\n        }\n      }\n      // changes to config\n      if (!changes.config.isFirstChange()) {\n        this.reinitialize(config);\n      }\n    }\n    ngOnDestroy() {\n      this.paypalScriptService.destroyPayPalScript();\n      this.ngUnsubscribe.next();\n      this.ngUnsubscribe.complete();\n    }\n    ngAfterViewInit() {\n      this.doPayPalCheck();\n    }\n    customInit(payPal) {\n      this.payPal = payPal;\n      this.doPayPalCheck();\n    }\n    reinitialize(config) {\n      this.config = config;\n      this.payPal = undefined;\n      this.paypalScriptService.destroyPayPalScript();\n      this.payPalButtonContainerId = this.generateElementId();\n      this.initializePayPal = true;\n      if (this.payPalButtonContainerElem) {\n        while (this.payPalButtonContainerElem.nativeElement.firstChild) {\n          this.payPalButtonContainerElem.nativeElement.removeChild(this.payPalButtonContainerElem.nativeElement.firstChild);\n        }\n      }\n      this.cdr.detectChanges();\n      if (this.config) {\n        if (!this.payPal) {\n          this.initPayPalScript(this.config, payPal => {\n            // store reference to paypal global script\n            this.payPal = payPal;\n            this.doPayPalCheck();\n          });\n        } else {\n          this.doPayPalCheck();\n        }\n      }\n    }\n    doPayPalCheck() {\n      if (this.initializePayPal && this.config && this.payPal && this.payPalButtonContainerElem) {\n        // make sure that id is also set\n        if (this.payPalButtonContainerElem.nativeElement.id) {\n          this.initializePayPal = false;\n          this.initPayPal(this.config, this.payPal);\n        }\n      }\n    }\n    initPayPalScript(config, initPayPal) {\n      this.paypalScriptService.registerPayPalScript({\n        clientId: config.clientId,\n        commit: config.advanced && config.advanced.commit ? config.advanced.commit : undefined,\n        currency: config.currency,\n        vault: config.vault,\n        extraParams: config.advanced && config.advanced.extraQueryParams ? config.advanced.extraQueryParams : []\n      }, paypal => {\n        this.scriptLoaded.next(paypal);\n        initPayPal(paypal);\n      });\n    }\n    generateElementId() {\n      return `ngx-captcha-id-${new Date().valueOf()}`;\n    }\n    initPayPal(config, paypal) {\n      // Running outside angular zone prevents infinite ngDoCheck lifecycle calls\n      this.ngZone.runOutsideAngular(() => {\n        // https://developer.paypal.com/docs/checkout/integrate/#2-add-the-paypal-script-to-your-web-page\n        const createOrder = (data, actions) => {\n          return this.ngZone.run(() => {\n            if (config.createOrderOnClient && config.createOrderOnServer) {\n              throw Error(`Both 'createOrderOnClient' and 'createOrderOnServer' are defined.\n                    Please choose one or the other.`);\n            }\n            if (!config.createOrderOnClient && !config.createOrderOnServer) {\n              throw Error(`Neither 'createOrderOnClient' or 'createOrderOnServer' are defined.\n                    Please define one of these to create order.`);\n            }\n            if (config.createOrderOnClient) {\n              return actions.order.create(config.createOrderOnClient(data));\n            }\n            if (config.createOrderOnServer) {\n              return config.createOrderOnServer(data);\n            }\n            throw Error(`Invalid state for 'createOrder'.`);\n          });\n        };\n        const createSubscription = (data, actions) => {\n          return this.ngZone.run(() => {\n            if (config.createSubscription) {\n              return config.createSubscription(data, actions);\n            }\n          });\n        };\n        const onShippingChange = (data, actions) => {\n          return this.ngZone.run(() => {\n            if (config.onShippingChange) {\n              return config.onShippingChange(data, actions);\n            }\n          });\n        };\n        const buttonsConfig = Object.assign(Object.assign(Object.assign({\n          style: config.style,\n          onApprove: (data, actions) => {\n            return this.ngZone.run(() => {\n              if (config.onApprove) {\n                config.onApprove(data, actions);\n              }\n              // capture on server\n              if (config.authorizeOnServer) {\n                return config.authorizeOnServer(data, actions);\n              }\n              // capture on client\n              const onClientAuthorization = config.onClientAuthorization;\n              if (onClientAuthorization) {\n                actions.order.capture().then(details => {\n                  this.ngZone.run(() => {\n                    onClientAuthorization(details);\n                  });\n                });\n                return;\n              }\n            });\n          },\n          onError: error => {\n            this.ngZone.run(() => {\n              if (config.onError) {\n                config.onError(error);\n              }\n            });\n          },\n          onCancel: (data, actions) => {\n            this.ngZone.run(() => {\n              if (config.onCancel) {\n                config.onCancel(data, actions);\n              }\n            });\n          },\n          onClick: (data, actions) => {\n            this.ngZone.run(() => {\n              if (config.onClick) {\n                config.onClick(data, actions);\n              }\n            });\n          },\n          onInit: (data, actions) => {\n            this.ngZone.run(() => {\n              if (config.onInit) {\n                config.onInit(data, actions);\n              }\n            });\n          }\n        }, (config.createOrderOnClient || config.createOrderOnServer) && {\n          createOrder\n        }), config.createSubscription && {\n          createSubscription\n        }), config.onShippingChange && {\n          onShippingChange\n        });\n        paypal.Buttons(buttonsConfig).render(`#${this.payPalButtonContainerId}`);\n      });\n    }\n  }\n  NgxPaypalComponent.ɵfac = function NgxPaypalComponent_Factory(t) {\n    return new (t || NgxPaypalComponent)(ɵngcc0.ɵɵdirectiveInject(PayPalScriptService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n  NgxPaypalComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: NgxPaypalComponent,\n    selectors: [[\"ngx-paypal\"]],\n    viewQuery: function NgxPaypalComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.payPalButtonContainer = _t.first);\n      }\n    },\n    inputs: {\n      registerScript: \"registerScript\",\n      config: \"config\"\n    },\n    outputs: {\n      scriptLoaded: \"scriptLoaded\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 4,\n    vars: 1,\n    consts: [[3, \"id\"], [\"payPalButtonContainer\", \"\"]],\n    template: function NgxPaypalComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtext(0, \"\\n    \");\n        ɵngcc0.ɵɵelement(1, \"div\", 0, 1);\n        ɵngcc0.ɵɵtext(3, \"\\n    \");\n      }\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.payPalButtonContainerId);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  /** @nocollapse */\n  return NgxPaypalComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet NgxPayPalModule = /*#__PURE__*/(() => {\n  class NgxPayPalModule {}\n  NgxPayPalModule.ɵfac = function NgxPayPalModule_Factory(t) {\n    return new (t || NgxPayPalModule)();\n  };\n  NgxPayPalModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: NgxPayPalModule\n  });\n  NgxPayPalModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [ScriptService, PayPalScriptService],\n    imports: [CommonModule]\n  });\n  return NgxPayPalModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxPayPalModule, {\n    declarations: function () {\n      return [NgxPaypalComponent];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [NgxPaypalComponent];\n    }\n  });\n})();\n\n/** Public API */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NgxPayPalModule, NgxPaypalComponent, PayPalScriptService, ScriptService as ɵa };\n\n//# sourceMappingURL=ngx-paypal.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}