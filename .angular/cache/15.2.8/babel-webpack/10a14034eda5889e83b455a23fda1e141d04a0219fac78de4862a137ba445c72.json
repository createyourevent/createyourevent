{"ast":null,"code":"import { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getShopIdentifier } from '../shop.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport let ShopService = /*#__PURE__*/(() => {\n  class ShopService {\n    constructor(http, applicationConfigService) {\n      this.http = http;\n      this.applicationConfigService = applicationConfigService;\n      this.resourceUrl = this.applicationConfigService.getEndpointFor('api/shops');\n    }\n    create(shop) {\n      return this.http.post(this.resourceUrl, shop, {\n        observe: 'response'\n      });\n    }\n    update(shop) {\n      return this.http.put(`${this.resourceUrl}/${getShopIdentifier(shop)}`, shop, {\n        observe: 'response'\n      });\n    }\n    partialUpdate(shop) {\n      return this.http.patch(`${this.resourceUrl}/${getShopIdentifier(shop)}`, shop, {\n        observe: 'response'\n      });\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    addShopToCollectionIfMissing(shopCollection, ...shopsToCheck) {\n      const shops = shopsToCheck.filter(isPresent);\n      if (shops.length > 0) {\n        const shopCollectionIdentifiers = shopCollection.map(shopItem => getShopIdentifier(shopItem));\n        const shopsToAdd = shops.filter(shopItem => {\n          const shopIdentifier = getShopIdentifier(shopItem);\n          if (shopIdentifier == null || shopCollectionIdentifiers.includes(shopIdentifier)) {\n            return false;\n          }\n          shopCollectionIdentifiers.push(shopIdentifier);\n          return true;\n        });\n        return [...shopsToAdd, ...shopCollection];\n      }\n      return shopCollection;\n    }\n  }\n  ShopService.ɵfac = function ShopService_Factory(t) {\n    return new (t || ShopService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n  };\n  ShopService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ShopService,\n    factory: ShopService.ɵfac,\n    providedIn: 'root'\n  });\n  return ShopService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}