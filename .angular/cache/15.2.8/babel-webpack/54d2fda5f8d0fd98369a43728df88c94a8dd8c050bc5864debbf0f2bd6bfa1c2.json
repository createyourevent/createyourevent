{"ast":null,"code":"import { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getRideCostsIdentifier } from '../ride-costs.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport let RideCostsService = /*#__PURE__*/(() => {\n  class RideCostsService {\n    constructor(http, applicationConfigService) {\n      this.http = http;\n      this.applicationConfigService = applicationConfigService;\n      this.resourceUrl = this.applicationConfigService.getEndpointFor('api/ride-costs');\n    }\n    create(rideCosts) {\n      return this.http.post(this.resourceUrl, rideCosts, {\n        observe: 'response'\n      });\n    }\n    update(rideCosts) {\n      return this.http.put(`${this.resourceUrl}/${getRideCostsIdentifier(rideCosts)}`, rideCosts, {\n        observe: 'response'\n      });\n    }\n    partialUpdate(rideCosts) {\n      return this.http.patch(`${this.resourceUrl}/${getRideCostsIdentifier(rideCosts)}`, rideCosts, {\n        observe: 'response'\n      });\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    addRideCostsToCollectionIfMissing(rideCostsCollection, ...rideCostsToCheck) {\n      const rideCosts = rideCostsToCheck.filter(isPresent);\n      if (rideCosts.length > 0) {\n        const rideCostsCollectionIdentifiers = rideCostsCollection.map(rideCostsItem => getRideCostsIdentifier(rideCostsItem));\n        const rideCostsToAdd = rideCosts.filter(rideCostsItem => {\n          const rideCostsIdentifier = getRideCostsIdentifier(rideCostsItem);\n          if (rideCostsIdentifier == null || rideCostsCollectionIdentifiers.includes(rideCostsIdentifier)) {\n            return false;\n          }\n          rideCostsCollectionIdentifiers.push(rideCostsIdentifier);\n          return true;\n        });\n        return [...rideCostsToAdd, ...rideCostsCollection];\n      }\n      return rideCostsCollection;\n    }\n  }\n  RideCostsService.ɵfac = function RideCostsService_Factory(t) {\n    return new (t || RideCostsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n  };\n  RideCostsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RideCostsService,\n    factory: RideCostsService.ɵfac,\n    providedIn: 'root'\n  });\n  return RideCostsService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}