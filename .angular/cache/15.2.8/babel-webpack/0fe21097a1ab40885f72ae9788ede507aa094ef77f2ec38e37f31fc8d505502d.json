{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\nimport { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getProductCommentIdentifier } from '../product-comment.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport let ProductCommentService = /*#__PURE__*/(() => {\n  class ProductCommentService {\n    constructor(http, applicationConfigService) {\n      this.http = http;\n      this.applicationConfigService = applicationConfigService;\n      this.resourceUrl = this.applicationConfigService.getEndpointFor('api/product-comments');\n    }\n    create(productComment) {\n      const copy = this.convertDateFromClient(productComment);\n      return this.http.post(this.resourceUrl, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    update(productComment) {\n      const copy = this.convertDateFromClient(productComment);\n      return this.http.put(`${this.resourceUrl}/${getProductCommentIdentifier(productComment)}`, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    partialUpdate(productComment) {\n      const copy = this.convertDateFromClient(productComment);\n      return this.http.patch(`${this.resourceUrl}/${getProductCommentIdentifier(productComment)}`, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      }).pipe(map(res => this.convertDateArrayFromServer(res)));\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    addProductCommentToCollectionIfMissing(productCommentCollection, ...productCommentsToCheck) {\n      const productComments = productCommentsToCheck.filter(isPresent);\n      if (productComments.length > 0) {\n        const productCommentCollectionIdentifiers = productCommentCollection.map(productCommentItem => getProductCommentIdentifier(productCommentItem));\n        const productCommentsToAdd = productComments.filter(productCommentItem => {\n          const productCommentIdentifier = getProductCommentIdentifier(productCommentItem);\n          if (productCommentIdentifier == null || productCommentCollectionIdentifiers.includes(productCommentIdentifier)) {\n            return false;\n          }\n          productCommentCollectionIdentifiers.push(productCommentIdentifier);\n          return true;\n        });\n        return [...productCommentsToAdd, ...productCommentCollection];\n      }\n      return productCommentCollection;\n    }\n    convertDateFromClient(productComment) {\n      return Object.assign({}, productComment, {\n        date: productComment.date?.isValid() ? productComment.date.toJSON() : undefined\n      });\n    }\n    convertDateFromServer(res) {\n      if (res.body) {\n        res.body.date = res.body.date ? dayjs(res.body.date) : undefined;\n      }\n      return res;\n    }\n    convertDateArrayFromServer(res) {\n      if (res.body) {\n        res.body.forEach(productComment => {\n          productComment.date = productComment.date ? dayjs(productComment.date) : undefined;\n        });\n      }\n      return res;\n    }\n  }\n  ProductCommentService.ɵfac = function ProductCommentService_Factory(t) {\n    return new (t || ProductCommentService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n  };\n  ProductCommentService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductCommentService,\n    factory: ProductCommentService.ɵfac,\n    providedIn: 'root'\n  });\n  return ProductCommentService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}