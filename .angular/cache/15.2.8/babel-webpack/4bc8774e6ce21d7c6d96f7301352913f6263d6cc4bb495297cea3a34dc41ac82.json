{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { SocketIOAdapter } from './SocketIOAdapter';\n// import { Socket } from 'socket.io-client';\nimport { User } from 'ng-chat';\nimport * as dayjs from 'dayjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-socket-io\";\nimport * as i2 from \"@angular/http\";\nimport * as i3 from \"../general.service\";\nimport * as i4 from \"app/chat.service\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"../shared/auth/has-any-authority.directive\";\nimport * as i7 from \"ng-chat\";\nconst _c0 = [\"ngChatInstance\"];\nfunction ChatComponent_ng_container_0_ng_chat_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ng-chat\", 2, 3);\n    i0.ɵɵlistener(\"onMessagesSeen\", function ChatComponent_ng_container_0_ng_chat_2_Template_ng_chat_onMessagesSeen_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r3.onMessageSeen($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"adapter\", ctx_r1.adapter)(\"persistWindowsState\", false)(\"emojisEnabled\", false)(\"groupAdapter\", ctx_r1.adapter)(\"pollFriendsList\", true)(\"userId\", ctx_r1.userId)(\"historyEnabled\", true)(\"historyPageSize\", 4)(\"theme\", \"dark-theme\");\n  }\n}\nfunction ChatComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1, \"\\n    \");\n    i0.ɵɵtemplate(2, ChatComponent_ng_container_0_ng_chat_2_Template, 2, 9, \"ng-chat\", 1);\n    i0.ɵɵtext(3, \"\\n\");\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.userId);\n  }\n}\nexport let ChatComponent = /*#__PURE__*/(() => {\n  class ChatComponent {\n    constructor(socket, http, generalService, sharedChatService) {\n      this.socket = socket;\n      this.http = http;\n      this.generalService = generalService;\n      this.sharedChatService = sharedChatService;\n      this.messageSeen = new EventEmitter();\n      this.thisFirst = this;\n      this.sharedChatService.invokeEvent.subscribe(value => {\n        if (value !== null) {\n          this.clickName(value);\n        }\n      });\n    }\n    ngOnInit() {\n      this.generalService.findWidthAuthorities().subscribe(usr => {\n        const user = usr.body;\n        this.socket.emit('reloadPage', user.id);\n        setInterval(() => {\n          this.socket.emit('timestamp', user.id);\n        }, 60 * 1000);\n      });\n      const now = dayjs();\n      this.generalService.findEventsByPrivateOrPublicAndActiveTrueAndDateEndAfter(now).subscribe(res => {\n        const events = res.body;\n        this.generalService.findShopByActiveTrueAndActiveOwnerTrue().subscribe(s => {\n          const shops = s.body;\n          this.mentionConfig = {\n            mentions: [{\n              items: events,\n              triggerChar: '@',\n              labelKey: 'name',\n              maxItems: 10,\n              dropUp: true,\n              mentionSelect: this.onMentionSelectAt\n            }, {\n              items: shops,\n              labelKey: 'name',\n              triggerChar: '#',\n              maxItems: 10,\n              dropUp: true,\n              mentionSelect: this.onMentionSelectHash\n            }]\n          };\n        });\n      });\n    }\n    onMentionSelectAt(obj) {\n      return '<a href=\"/events/' + obj.id + '/view\">' + obj.name + '</a>';\n    }\n    onMentionSelectHash(obj) {\n      return '<a href=\"/supplier/shop/' + obj.id + '/overview\">' + obj.name + '</a>';\n    }\n    ngAfterViewInit() {\n      this.generalService.findWidthAuthorities().subscribe(usr => {\n        const user = usr.body;\n        this.initializeSocketListerners(user);\n        this.ngChatInstances.changes.subscribe(comps => {\n          this.ngChatInstance = comps.first;\n          this.adapter.setNgChat(this.ngChatInstance);\n        });\n      });\n    }\n    onMentionSelect(selection) {\n      return '<a href=\"#\">' + selection.label + '</a>';\n    }\n    initializeSocketListerners(user) {\n      this.adapter = new SocketIOAdapter(user.id, this.socket, this.http, this.sharedChatService);\n      this.userId = user.id;\n    }\n    clickName(user) {\n      this.generalService.findWidthAuthoritiesWidthId(user.id).subscribe(u => {\n        const newUser = u.body;\n        let stat = 3;\n        if (newUser.loggedIn === true) {\n          stat = 0;\n        }\n        const chatUser = new User();\n        chatUser.id = user.id;\n        chatUser.avatar = \"\";\n        chatUser.status = stat;\n        chatUser.displayName = newUser.firstName + \" \" + newUser.lastName;\n        this.ngChatInstance.triggerOpenChatWindow(chatUser);\n      });\n    }\n    onMessageSeen(messageSeen) {\n      this.sharedChatService.sendMessageSeen(messageSeen);\n    }\n  }\n  ChatComponent.ɵfac = function ChatComponent_Factory(t) {\n    return new (t || ChatComponent)(i0.ɵɵdirectiveInject(i1.Socket), i0.ɵɵdirectiveInject(i2.Http), i0.ɵɵdirectiveInject(i3.GeneralService), i0.ɵɵdirectiveInject(i4.SharedChatService));\n  };\n  ChatComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ChatComponent,\n    selectors: [[\"jhi-chat\"]],\n    viewQuery: function ChatComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.ngChatInstances = _t);\n      }\n    },\n    outputs: {\n      messageSeen: \"messageSeen\"\n    },\n    decls: 2,\n    vars: 1,\n    consts: [[4, \"jhiHasAnyAuthority\"], [3, \"adapter\", \"persistWindowsState\", \"emojisEnabled\", \"groupAdapter\", \"pollFriendsList\", \"userId\", \"historyEnabled\", \"historyPageSize\", \"theme\", \"onMessagesSeen\", 4, \"ngIf\"], [3, \"adapter\", \"persistWindowsState\", \"emojisEnabled\", \"groupAdapter\", \"pollFriendsList\", \"userId\", \"historyEnabled\", \"historyPageSize\", \"theme\", \"onMessagesSeen\"], [\"ngChatInstance\", \"\"]],\n    template: function ChatComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, ChatComponent_ng_container_0_Template, 4, 1, \"ng-container\", 0);\n        i0.ɵɵtext(1, \"\\n\\n\");\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"jhiHasAnyAuthority\", \"ROLE_USER\");\n      }\n    },\n    dependencies: [i5.NgIf, i6.HasAnyAuthorityDirective, i7.ɵa],\n    styles: [\"h1[_ngcontent-%COMP%]{color:#fff}.form-box[_ngcontent-%COMP%]{background-color:#fff;width:300px;height:200px;position:absolute;left:50%;top:50%;margin-left:-150px;margin-top:-100px;border-radius:5px;box-shadow:5px 5px 3px #4449;padding:10px}.form-box[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]{margin-top:20px}.form-box[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]{display:inline-block}\"]\n  });\n  return ChatComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}