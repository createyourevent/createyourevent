{"ast":null,"code":"import { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getOrganizationIdentifier } from '../organization.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport let OrganizationService = /*#__PURE__*/(() => {\n  class OrganizationService {\n    constructor(http, applicationConfigService) {\n      this.http = http;\n      this.applicationConfigService = applicationConfigService;\n      this.resourceUrl = this.applicationConfigService.getEndpointFor('api/organizations');\n    }\n    create(organization) {\n      return this.http.post(this.resourceUrl, organization, {\n        observe: 'response'\n      });\n    }\n    update(organization) {\n      return this.http.put(`${this.resourceUrl}/${getOrganizationIdentifier(organization)}`, organization, {\n        observe: 'response'\n      });\n    }\n    partialUpdate(organization) {\n      return this.http.patch(`${this.resourceUrl}/${getOrganizationIdentifier(organization)}`, organization, {\n        observe: 'response'\n      });\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    addOrganizationToCollectionIfMissing(organizationCollection, ...organizationsToCheck) {\n      const organizations = organizationsToCheck.filter(isPresent);\n      if (organizations.length > 0) {\n        const organizationCollectionIdentifiers = organizationCollection.map(organizationItem => getOrganizationIdentifier(organizationItem));\n        const organizationsToAdd = organizations.filter(organizationItem => {\n          const organizationIdentifier = getOrganizationIdentifier(organizationItem);\n          if (organizationIdentifier == null || organizationCollectionIdentifiers.includes(organizationIdentifier)) {\n            return false;\n          }\n          organizationCollectionIdentifiers.push(organizationIdentifier);\n          return true;\n        });\n        return [...organizationsToAdd, ...organizationCollection];\n      }\n      return organizationCollection;\n    }\n  }\n  OrganizationService.ɵfac = function OrganizationService_Factory(t) {\n    return new (t || OrganizationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n  };\n  OrganizationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OrganizationService,\n    factory: OrganizationService.ɵfac,\n    providedIn: 'root'\n  });\n  return OrganizationService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}