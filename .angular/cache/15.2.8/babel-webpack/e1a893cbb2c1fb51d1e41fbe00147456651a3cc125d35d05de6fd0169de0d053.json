{"ast":null,"code":"import _defineProperty from \"/home/ceo/mmmm/createyourevent/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"app/login/login.service\";\nimport * as i2 from \"app/core/auth/state-storage.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"app/core/auth/account.service\";\nexport class AuthExpiredInterceptor {\n  constructor(loginService, stateStorageService, router, accountService) {\n    _defineProperty(this, \"loginService\", void 0);\n    _defineProperty(this, \"stateStorageService\", void 0);\n    _defineProperty(this, \"router\", void 0);\n    _defineProperty(this, \"accountService\", void 0);\n    this.loginService = loginService;\n    this.stateStorageService = stateStorageService;\n    this.router = router;\n    this.accountService = accountService;\n  }\n  intercept(request, next) {\n    return next.handle(request).pipe(tap({\n      error: err => {\n        if (err.status === 401 && err.url && !err.url.includes('api/account') && this.accountService.isAuthenticated()) {\n          this.stateStorageService.storeUrl(this.router.routerState.snapshot.url);\n          this.loginService.login();\n        }\n      }\n    }));\n  }\n}\n_defineProperty(AuthExpiredInterceptor, \"\\u0275fac\", function AuthExpiredInterceptor_Factory(t) {\n  return new (t || AuthExpiredInterceptor)(i0.ɵɵinject(i1.LoginService), i0.ɵɵinject(i2.StateStorageService), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.AccountService));\n});\n_defineProperty(AuthExpiredInterceptor, \"\\u0275prov\", /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthExpiredInterceptor,\n  factory: AuthExpiredInterceptor.ɵfac\n}));","map":{"version":3,"mappings":";AAGA,SAASA,GAAG,QAAQ,gBAAgB;;;;;;AAQpC,OAAM,MAAOC,sBAAsB;EACjCC,YACUC,YAA0B,EAC1BC,mBAAwC,EACxCC,MAAc,EACdC,cAA8B;IAAA;IAAA;IAAA;IAAA;IAH9B,iBAAY,GAAZH,YAAY;IACZ,wBAAmB,GAAnBC,mBAAmB;IACnB,WAAM,GAANC,MAAM;IACN,mBAAc,GAAdC,cAAc;EACrB;EAEHC,SAAS,CAACC,OAAyB,EAAEC,IAAiB;IACpD,OAAOA,IAAI,CAACC,MAAM,CAACF,OAAO,CAAC,CAACG,IAAI,CAC9BX,GAAG,CAAC;MACFY,KAAK,EAAGC,GAAsB,IAAI;QAChC,IAAIA,GAAG,CAACC,MAAM,KAAK,GAAG,IAAID,GAAG,CAACE,GAAG,IAAI,CAACF,GAAG,CAACE,GAAG,CAACC,QAAQ,CAAC,aAAa,CAAC,IAAI,IAAI,CAACV,cAAc,CAACW,eAAe,EAAE,EAAE;UAC9G,IAAI,CAACb,mBAAmB,CAACc,QAAQ,CAAC,IAAI,CAACb,MAAM,CAACc,WAAW,CAACC,QAAQ,CAACL,GAAG,CAAC;UACvE,IAAI,CAACZ,YAAY,CAACkB,KAAK,EAAE;;MAE7B;KACD,CAAC,CACH;EACH;;gBAnBWpB,sBAAsB;mBAAtBA,sBAAsB;AAAA;AAAA,gBAAtBA,sBAAsB;SAAtBA,sBAAsB;EAAAqB,SAAtBrB,sBAAsB;AAAA","names":["tap","AuthExpiredInterceptor","constructor","loginService","stateStorageService","router","accountService","intercept","request","next","handle","pipe","error","err","status","url","includes","isAuthenticated","storeUrl","routerState","snapshot","login","factory"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/core/interceptor/auth-expired.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { Router } from '@angular/router';\n\nimport { LoginService } from 'app/login/login.service';\nimport { StateStorageService } from 'app/core/auth/state-storage.service';\nimport { AccountService } from 'app/core/auth/account.service';\n\n@Injectable()\nexport class AuthExpiredInterceptor implements HttpInterceptor {\n  constructor(\n    private loginService: LoginService,\n    private stateStorageService: StateStorageService,\n    private router: Router,\n    private accountService: AccountService\n  ) {}\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next.handle(request).pipe(\n      tap({\n        error: (err: HttpErrorResponse) => {\n          if (err.status === 401 && err.url && !err.url.includes('api/account') && this.accountService.isAuthenticated()) {\n            this.stateStorageService.storeUrl(this.router.routerState.snapshot.url);\n            this.loginService.login();\n          }\n        },\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}