{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\nimport { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getPointIdentifier } from '../point.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport let PointService = /*#__PURE__*/(() => {\n  class PointService {\n    constructor(http, applicationConfigService) {\n      this.http = http;\n      this.applicationConfigService = applicationConfigService;\n      this.resourceUrl = this.applicationConfigService.getEndpointFor('api/points');\n    }\n    create(point) {\n      const copy = this.convertDateFromClient(point);\n      return this.http.post(this.resourceUrl, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    update(point) {\n      const copy = this.convertDateFromClient(point);\n      return this.http.put(`${this.resourceUrl}/${getPointIdentifier(point)}`, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    partialUpdate(point) {\n      const copy = this.convertDateFromClient(point);\n      return this.http.patch(`${this.resourceUrl}/${getPointIdentifier(point)}`, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      }).pipe(map(res => this.convertDateArrayFromServer(res)));\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    addPointToCollectionIfMissing(pointCollection, ...pointsToCheck) {\n      const points = pointsToCheck.filter(isPresent);\n      if (points.length > 0) {\n        const pointCollectionIdentifiers = pointCollection.map(pointItem => getPointIdentifier(pointItem));\n        const pointsToAdd = points.filter(pointItem => {\n          const pointIdentifier = getPointIdentifier(pointItem);\n          if (pointIdentifier == null || pointCollectionIdentifiers.includes(pointIdentifier)) {\n            return false;\n          }\n          pointCollectionIdentifiers.push(pointIdentifier);\n          return true;\n        });\n        return [...pointsToAdd, ...pointCollection];\n      }\n      return pointCollection;\n    }\n    convertDateFromClient(point) {\n      return Object.assign({}, point, {\n        creationDate: point.creationDate?.isValid() ? point.creationDate.toJSON() : undefined\n      });\n    }\n    convertDateFromServer(res) {\n      if (res.body) {\n        res.body.creationDate = res.body.creationDate ? dayjs(res.body.creationDate) : undefined;\n      }\n      return res;\n    }\n    convertDateArrayFromServer(res) {\n      if (res.body) {\n        res.body.forEach(point => {\n          point.creationDate = point.creationDate ? dayjs(point.creationDate) : undefined;\n        });\n      }\n      return res;\n    }\n  }\n  PointService.ɵfac = function PointService_Factory(t) {\n    return new (t || PointService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n  };\n  PointService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PointService,\n    factory: PointService.ɵfac,\n    providedIn: 'root'\n  });\n  return PointService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}