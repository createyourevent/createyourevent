{"ast":null,"code":"import { Injectable, Component, EventEmitter, Input, Output, ChangeDetectionStrategy, ElementRef, Renderer2, ViewEncapsulation, ViewChild, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs/internal/Subject';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @enum {number} */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nfunction BoardComponent_tile_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"tile\", 1);\n    ɵngcc0.ɵɵtext(1, \"\\n\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const tileData_r1 = ctx.$implicit;\n    ɵngcc0.ɵɵproperty(\"data\", tileData_r1);\n  }\n}\nconst PieceRotation = {\n  DEG_0: 0,\n  DEG_90: 1,\n  DEG_180: 2,\n  DEG_270: 3\n};\nPieceRotation[PieceRotation.DEG_0] = 'DEG_0';\nPieceRotation[PieceRotation.DEG_90] = 'DEG_90';\nPieceRotation[PieceRotation.DEG_180] = 'DEG_180';\nPieceRotation[PieceRotation.DEG_270] = 'DEG_270';\n/** @enum {number} */\nconst PieceTypes = {\n  Dot: 1,\n  Box: 2,\n  Line: 3,\n  T: 4,\n  L: 5,\n  Lr: 6,\n  Z: 7,\n  S: 8\n};\nPieceTypes[PieceTypes.Dot] = 'Dot';\nPieceTypes[PieceTypes.Box] = 'Box';\nPieceTypes[PieceTypes.Line] = 'Line';\nPieceTypes[PieceTypes.T] = 'T';\nPieceTypes[PieceTypes.L] = 'L';\nPieceTypes[PieceTypes.Lr] = 'Lr';\nPieceTypes[PieceTypes.Z] = 'Z';\nPieceTypes[PieceTypes.S] = 'S';\n/** @enum {string} */\nconst PieceColors = {\n  Box: 'color-box',\n  Dot: 'color-dot',\n  Line: 'color-line',\n  T: 'color-t',\n  L: 'color-l',\n  Lr: 'color-lr',\n  Z: 'color-z',\n  S: 'color-s'\n};\nclass Piece {\n  /**\n   * @param {?} x\n   * @param {?} y\n   * @param {?} gridSize\n   * @param {?} maps\n   */\n  constructor(x, y, gridSize, maps) {\n    this.color = 'red';\n    this.rotation = PieceRotation.DEG_0;\n    this.map = [[], []];\n    this._lastConfig = null;\n    this._gridSize = gridSize;\n    this.x = x;\n    this.y = y;\n    this._maps = maps;\n    this.map = this._maps[this.rotation];\n  }\n  /**\n   * @return {?}\n   */\n  get positionsOnGrid() {\n    /** @type {?} */\n    const acc = [];\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.map[row][col]) {\n          /** @type {?} */\n          const pos = (this.y + row) * this._gridSize.width + this.x + col;\n          if (pos > 0) {\n            acc.push(pos);\n          }\n        }\n      }\n    }\n    return acc;\n  }\n  /**\n   * @return {?}\n   */\n  store() {\n    this._lastConfig = {\n      x: this.x,\n      y: this.y,\n      rotation: this.rotation,\n      map: this.map\n    };\n  }\n  /**\n   * @return {?}\n   */\n  clearStore() {\n    this._lastConfig = null;\n  }\n  /**\n   * @return {?}\n   */\n  revert() {\n    if (this._lastConfig) {\n      for (const x in this._lastConfig) {\n        if (this._lastConfig.hasOwnProperty(x)) {\n          this[x] = this._lastConfig[x];\n        }\n      }\n      this._lastConfig = null;\n    }\n  }\n  /**\n   * @return {?}\n   */\n  rotate() {\n    /** @type {?} */\n    const keys = Object.keys(this._maps);\n    /** @type {?} */\n    let idx = keys.indexOf(this.rotation.toString());\n    if (idx >= keys.length - 1) {\n      this.rotation = /** @type {?} */keys[0];\n    } else {\n      this.rotation = /** @type {?} */keys[++idx];\n    }\n    this.map = this._maps[this.rotation];\n  }\n  /**\n   * @return {?}\n   */\n  moveDown() {\n    this.y++;\n  }\n  /**\n   * @return {?}\n   */\n  moveRight() {\n    this.x++;\n  }\n  /**\n   * @return {?}\n   */\n  moveLeft() {\n    this.x--;\n  }\n  /**\n   * @return {?}\n   */\n  get bottomRow() {\n    return this.y + 3;\n  }\n  /**\n   * @return {?}\n   */\n  get rightCol() {\n    /** @type {?} */\n    let col = 3;\n    while (col >= 0) {\n      for (let row = 0; row <= 3; row++) {\n        if (this.map[row][col]) {\n          return this.x + col;\n        }\n      }\n      col--;\n    }\n  }\n  /**\n   * @return {?}\n   */\n  get leftCol() {\n    return this.x;\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MAPS = [];\nMAPS[PieceRotation.DEG_0] = [[undefined, undefined, undefined, undefined], [undefined, undefined, undefined, undefined], [undefined, undefined, undefined, undefined], [PieceTypes.Box, undefined, undefined, undefined]];\nclass Dot extends Piece {\n  /**\n   * @param {?} x\n   * @param {?} y\n   * @param {?} gridSize\n   */\n  constructor(x, y, gridSize) {\n    super(x, y, gridSize, MAPS);\n    this.color = PieceColors['Dot'];\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MAPS$1 = [];\nMAPS$1[PieceRotation.DEG_0] = [[undefined, undefined, undefined, undefined], [undefined, undefined, undefined, undefined], [PieceTypes.Box, PieceTypes.Box, undefined, undefined], [PieceTypes.Box, PieceTypes.Box, undefined, undefined]];\nclass Box extends Piece {\n  /**\n   * @param {?} x\n   * @param {?} y\n   * @param {?} gridSize\n   */\n  constructor(x, y, gridSize) {\n    super(x, y, gridSize, MAPS$1);\n    this.color = PieceColors['Box'];\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MAPS$2 = [];\nMAPS$2[PieceRotation.DEG_0] = [[undefined, undefined, undefined, undefined], [undefined, undefined, undefined, undefined], [undefined, undefined, undefined, undefined], [PieceTypes.Line, PieceTypes.Line, PieceTypes.Line, PieceTypes.Line]];\nMAPS$2[PieceRotation.DEG_90] = [[PieceTypes.Line, undefined, undefined, undefined], [PieceTypes.Line, undefined, undefined, undefined], [PieceTypes.Line, undefined, undefined, undefined], [PieceTypes.Line, undefined, undefined, undefined]];\nclass Line extends Piece {\n  /**\n   * @param {?} x\n   * @param {?} y\n   * @param {?} gridSize\n   */\n  constructor(x, y, gridSize) {\n    super(x, y, gridSize, MAPS$2);\n    this.color = PieceColors['Line'];\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MAPS$3 = {};\nMAPS$3[PieceRotation.DEG_0] = [[undefined, undefined, undefined, undefined], [undefined, undefined, undefined, undefined], [undefined, PieceTypes.T, undefined, undefined], [PieceTypes.T, PieceTypes.T, PieceTypes.T, undefined]];\nMAPS$3[PieceRotation.DEG_90] = [[undefined, undefined, undefined, undefined], [PieceTypes.T, undefined, undefined, undefined], [PieceTypes.T, PieceTypes.T, undefined, undefined], [PieceTypes.T, undefined, undefined, undefined]];\nMAPS$3[PieceRotation.DEG_180] = [[undefined, undefined, undefined, undefined], [undefined, undefined, undefined, undefined], [PieceTypes.T, PieceTypes.T, PieceTypes.T, undefined], [undefined, PieceTypes.T, undefined, undefined]];\nMAPS$3[PieceRotation.DEG_270] = [[undefined, undefined, undefined, undefined], [undefined, PieceTypes.T, undefined, undefined], [PieceTypes.T, PieceTypes.T, undefined, undefined], [undefined, PieceTypes.T, undefined, undefined]];\nclass T extends Piece {\n  /**\n   * @param {?} x\n   * @param {?} y\n   * @param {?} gridSize\n   */\n  constructor(x, y, gridSize) {\n    super(x, y, gridSize, MAPS$3);\n    this.color = PieceColors['T'];\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MAPS$4 = {};\nMAPS$4[PieceRotation.DEG_0] = [[undefined, undefined, undefined, undefined], [undefined, PieceTypes.Z, undefined, undefined], [PieceTypes.Z, PieceTypes.Z, undefined, undefined], [PieceTypes.Z, undefined, undefined, undefined]];\nMAPS$4[PieceRotation.DEG_90] = [[undefined, undefined, undefined, undefined], [undefined, undefined, undefined, undefined], [PieceTypes.Z, PieceTypes.Z, undefined, undefined], [undefined, PieceTypes.Z, PieceTypes.Z, undefined]];\nclass Z extends Piece {\n  /**\n   * @param {?} x\n   * @param {?} y\n   * @param {?} gridSize\n   */\n  constructor(x, y, gridSize) {\n    super(x, y, gridSize, MAPS$4);\n    this.color = PieceColors['Z'];\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MAPS$5 = {};\nMAPS$5[PieceRotation.DEG_0] = [[undefined, undefined, undefined, undefined], [PieceTypes.S, undefined, undefined, undefined], [PieceTypes.S, PieceTypes.S, undefined, undefined], [undefined, PieceTypes.S, undefined, undefined]];\nMAPS$5[PieceRotation.DEG_90] = [[undefined, undefined, undefined, undefined], [undefined, undefined, undefined, undefined], [undefined, PieceTypes.S, PieceTypes.S, undefined], [PieceTypes.S, PieceTypes.S, undefined, undefined]];\nclass S extends Piece {\n  /**\n   * @param {?} x\n   * @param {?} y\n   * @param {?} gridSize\n   */\n  constructor(x, y, gridSize) {\n    super(x, y, gridSize, MAPS$5);\n    this.color = PieceColors['S'];\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MAPS$6 = {};\nMAPS$6[PieceRotation.DEG_0] = [[undefined, undefined, undefined, undefined], [PieceTypes.L, undefined, undefined, undefined], [PieceTypes.L, undefined, undefined, undefined], [PieceTypes.L, PieceTypes.L, undefined, undefined]];\nMAPS$6[PieceRotation.DEG_90] = [[undefined, undefined, undefined, undefined], [undefined, undefined, undefined, undefined], [PieceTypes.L, PieceTypes.L, PieceTypes.L, undefined], [PieceTypes.L, undefined, undefined, undefined]];\nMAPS$6[PieceRotation.DEG_180] = [[undefined, undefined, undefined, undefined], [PieceTypes.L, PieceTypes.L, undefined, undefined], [undefined, PieceTypes.L, undefined, undefined], [undefined, PieceTypes.L, undefined, undefined]];\nMAPS$6[PieceRotation.DEG_270] = [[undefined, undefined, undefined, undefined], [undefined, undefined, undefined, undefined], [undefined, undefined, PieceTypes.L, undefined], [PieceTypes.L, PieceTypes.L, PieceTypes.L, undefined]];\nclass L extends Piece {\n  /**\n   * @param {?} x\n   * @param {?} y\n   * @param {?} gridSize\n   */\n  constructor(x, y, gridSize) {\n    super(x, y, gridSize, MAPS$6);\n    this.color = PieceColors['L'];\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MAPS$7 = {};\nMAPS$7[PieceRotation.DEG_0] = [[undefined, undefined, undefined, undefined], [PieceTypes.Lr, PieceTypes.Lr, undefined, undefined], [undefined, PieceTypes.Lr, undefined, undefined], [undefined, PieceTypes.Lr, undefined, undefined]];\nMAPS$7[PieceRotation.DEG_90] = [[undefined, undefined, undefined, undefined], [undefined, undefined, undefined, undefined], [undefined, undefined, PieceTypes.Lr, undefined], [PieceTypes.Lr, PieceTypes.Lr, PieceTypes.Lr, undefined]];\nMAPS$7[PieceRotation.DEG_180] = [[undefined, undefined, undefined, undefined], [PieceTypes.Lr, undefined, undefined, undefined], [PieceTypes.Lr, undefined, undefined, undefined], [PieceTypes.Lr, PieceTypes.Lr, undefined, undefined]];\nMAPS$7[PieceRotation.DEG_270] = [[undefined, undefined, undefined, undefined], [undefined, undefined, undefined, undefined], [PieceTypes.Lr, PieceTypes.Lr, PieceTypes.Lr, undefined], [PieceTypes.Lr, undefined, undefined, undefined]];\nclass Lr extends Piece {\n  /**\n   * @param {?} x\n   * @param {?} y\n   * @param {?} gridSize\n   */\n  constructor(x, y, gridSize) {\n    super(x, y, gridSize, MAPS$7);\n    this.color = PieceColors['Lr'];\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass PiecesFactory {\n  /**\n   * @param {?} gridSize\n   */\n  constructor(gridSize) {\n    this._available = [];\n    this._gridSize = gridSize;\n    this._available.push(Dot);\n    this._available.push(Box);\n    this._available.push(Line);\n    this._available.push(T);\n    this._available.push(Z);\n    this._available.push(S);\n    this._available.push(L);\n    this._available.push(Lr);\n  }\n  /**\n   * @param {?} x\n   * @param {?} y\n   * @return {?}\n   */\n  getRandomPiecePiece(x, y) {\n    /** @type {?} */\n    const idx = Math.floor(Math.random() * this._available.length);\n    return new this._available[idx](x, y, this._gridSize);\n    // return new this._available[2](x, y, this._gridSize);\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst SPAWN_POSITION_X = 4;\n/** @type {?} */\nconst SPAWN_POSITION_Y = -4;\nclass Tile {\n  constructor() {\n    this.solid = false;\n    this.color = null;\n  }\n}\nlet GameManagerService = /*#__PURE__*/(() => {\n  class GameManagerService {\n    constructor() {\n      this.settings = {\n        tileSize: null\n      };\n      this._gridSize = {\n        width: 0,\n        height: 0\n      };\n      this._locked = true;\n      this._lineCleared = new Subject();\n      this._gameOver = new Subject();\n      this.lineCleared$ = this._lineCleared.asObservable();\n      this.gameOver$ = this._gameOver.asObservable();\n    }\n    /**\n     * @return {?}\n     */\n    get elementsInRow() {\n      return this._gridSize.width;\n    }\n    /**\n     * @param {?} width\n     * @param {?} height\n     * @param {?} gameSpeed\n     * @param {?=} tileSize\n     * @return {?}\n     */\n    initialize(width, height, gameSpeed, tileSize) {\n      this._gridSize.width = width;\n      this._gridSize.height = height;\n      this._gameSpeed = gameSpeed;\n      this._piecesFactory = new PiecesFactory(this._gridSize);\n      if (tileSize) {\n        this.settings.tileSize = tileSize;\n      }\n      this._initializeEmptyBoard();\n      this._spawnNewPiece();\n      this._drawPiece();\n    }\n    /**\n     * @return {?}\n     */\n    start() {\n      clearInterval(this._gameInterval);\n      this._gameInterval = setInterval(() => {\n        this._update();\n      }, this._gameSpeed);\n      this._locked = false;\n    }\n    /**\n     * @return {?}\n     */\n    stop() {\n      this._locked = true;\n      clearInterval(this._gameInterval);\n    }\n    /**\n     * @return {?}\n     */\n    reset() {\n      /** @type {?} */\n      const emptyTile = new Tile();\n      for (let pos = 0; pos < this.grid.length; pos++) {\n        if (this.grid[pos].color || this.grid[pos].solid) {\n          this.__changeCell(pos, emptyTile);\n        }\n      }\n      this._spawnNewPiece();\n      this._drawPiece();\n    }\n    /**\n     * @return {?}\n     */\n    moveLeft() {\n      if (this._locked) {\n        return;\n      }\n      this._clearPiece();\n      this._piece.store();\n      this._piece.moveLeft();\n      if (this._collidesLeft()) {\n        this._piece.revert();\n      }\n      this._drawPiece();\n    }\n    /**\n     * @return {?}\n     */\n    moveRight() {\n      if (this._locked) {\n        return;\n      }\n      this._clearPiece();\n      this._piece.store();\n      this._piece.moveRight();\n      if (this._collidesRight()) {\n        this._piece.revert();\n      }\n      this._drawPiece();\n    }\n    /**\n     * @return {?}\n     */\n    rotate() {\n      if (this._locked) {\n        return;\n      }\n      this._clearPiece();\n      this._piece.store();\n      this._piece.rotate();\n      while (this._collidesRight()) {\n        this._piece.moveLeft();\n        if (this._collidesLeft()) {\n          this._piece.revert();\n          break;\n        }\n      }\n      this._drawPiece();\n    }\n    /**\n     * @return {?}\n     */\n    moveDown() {\n      this._update();\n    }\n    /**\n     * @return {?}\n     */\n    _clearFullLines() {\n      for (let row = this._gridSize.height - 1; row >= 0; row--) {\n        /** @type {?} */\n        let isFull = true;\n        for (let col = 0; col < this._gridSize.width; col++) {\n          /** @type {?} */\n          const pos = row * this._gridSize.width + col;\n          if (this.grid[pos].solid === false) {\n            isFull = false;\n            break;\n          }\n        }\n        if (isFull) {\n          /** @type {?} */\n          const emptyRow = Array.apply(null, Array(this._gridSize.width)).map(idx => new Tile());\n          /** @type {?} */\n          const topPortion = this.grid.slice(0, row * this._gridSize.width);\n          this.grid.splice(0, ++row * this._gridSize.width, ...emptyRow.concat(topPortion));\n          this._lineCleared.next();\n        }\n      }\n    }\n    /**\n     * @return {?}\n     */\n    _update() {\n      if (this._locked) {\n        return;\n      }\n      this._locked = true;\n      this._piece.revert();\n      this._clearPiece();\n      this._piece.store();\n      this._piece.moveDown();\n      if (this._collidesBottom()) {\n        this._piece.revert();\n        this._markSolid();\n        this._drawPiece();\n        this._clearFullLines();\n        this._spawnNewPiece();\n        if (this._isGameOver()) {\n          this._onGameOver();\n          return;\n        }\n      }\n      this._drawPiece();\n      this._locked = false;\n    }\n    /**\n     * @return {?}\n     */\n    _isGameOver() {\n      this._piece.store();\n      this._piece.moveDown();\n      if (this._collidesBottom()) {\n        return true;\n      }\n      this._piece.revert();\n      return false;\n    }\n    /**\n     * @return {?}\n     */\n    _onGameOver() {\n      this.stop();\n      this._gameOver.next();\n    }\n    /**\n     * @return {?}\n     */\n    _spawnNewPiece() {\n      this._piece = this._piecesFactory.getRandomPiecePiece(SPAWN_POSITION_X, SPAWN_POSITION_Y);\n    }\n    /**\n     * @return {?}\n     */\n    _initializeEmptyBoard() {\n      /** @type {?} */\n      const cellsCount = this._gridSize.width * this._gridSize.height;\n      this.grid = Array.apply(null, Array(cellsCount)).map(idx => new Tile());\n    }\n    /**\n     * @return {?}\n     */\n    _clearPiece() {\n      this._piece.positionsOnGrid.forEach(pos => {\n        this.__changeCell(pos, {\n          color: undefined\n        });\n      });\n    }\n    /**\n     * @return {?}\n     */\n    _drawPiece() {\n      this._piece.clearStore();\n      this._piece.positionsOnGrid.forEach(pos => {\n        this.__changeCell(pos, {\n          color: this._piece.color\n        });\n      });\n    }\n    /**\n     * @return {?}\n     */\n    _markSolid() {\n      this._piece.positionsOnGrid.forEach(pos => {\n        this.__changeCell(pos, {\n          solid: true\n        });\n      });\n    }\n    /**\n     * @param {?} pos\n     * @param {?=} data\n     * @return {?}\n     */\n    __changeCell(pos, data = {}) {\n      this.grid[pos] = Object.assign({}, this.grid[pos], data);\n    }\n    /**\n     * @return {?}\n     */\n    _collidesBottom() {\n      if (this._piece.bottomRow >= this._gridSize.height) {\n        return true;\n      }\n      return this.__collides();\n    }\n    /**\n     * @return {?}\n     */\n    _collidesLeft() {\n      if (this._piece.leftCol < 0) {\n        return true;\n      }\n      return this.__collides();\n    }\n    /**\n     * @return {?}\n     */\n    _collidesRight() {\n      if (this._piece.rightCol >= this._gridSize.width) {\n        return true;\n      }\n      return this.__collides();\n    }\n    /**\n     * @return {?}\n     */\n    __collides() {\n      return this._piece.positionsOnGrid.some(pos => {\n        if (pos > 0 && this.grid[pos] && this.grid[pos].solid) {\n          return true;\n        }\n        return false;\n      });\n    }\n  }\n  GameManagerService.ɵfac = function GameManagerService_Factory(t) {\n    return new (t || GameManagerService)();\n  };\n  GameManagerService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: GameManagerService,\n    factory: GameManagerService.ɵfac\n  });\n  /** @nocollapse */\n  return GameManagerService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst GAME_SPEED = 500;\n/** @type {?} */\nconst MOVE_DOWN_SPEED = 0.2; // fraction of initial game speed\n/** @enum {number} */\nconst GameState = {\n  Paused: 0,\n  Started: 1,\n  Over: 2\n};\nGameState[GameState.Paused] = 'Paused';\nGameState[GameState.Started] = 'Started';\nGameState[GameState.Over] = 'Over';\nlet TetrisCoreComponent = /*#__PURE__*/(() => {\n  class TetrisCoreComponent {\n    /**\n     * @param {?} _manager\n     */\n    constructor(_manager) {\n      this._manager = _manager;\n      this.rotate = false;\n      this.moveLeft = false;\n      this.moveRight = false;\n      this.moveDown = false;\n      this.start = false;\n      this.stop = false;\n      this.reset = false;\n      this.lineCleared = new EventEmitter();\n      this.gameOver = new EventEmitter();\n      this.state = GameState.Paused;\n      this.gridWidth = 10;\n      this.gridHeight = 20;\n      this._manager.lineCleared$.subscribe(data => this._onLineCleared(data));\n      this._manager.gameOver$.subscribe(data => this._onGameOver(data));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n      this.initialSpeed = this.initialSpeed || GAME_SPEED;\n      this._moveDownSpeed = this.initialSpeed * MOVE_DOWN_SPEED;\n      this._manager.initialize(this.gridWidth, this.gridHeight, this.initialSpeed, this.tileSize);\n      this.grid = this._manager.grid;\n      setInterval(() => {\n        if (this.moveDown) {\n          this._manager.moveDown();\n        }\n      }, this._moveDownSpeed);\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n      if (this._keyPressed(changes.moveLeft)) {\n        this._manager.moveLeft();\n      } else if (this._keyPressed(changes.moveRight)) {\n        this._manager.moveRight();\n      }\n      if (this._keyPressed(changes.rotate)) {\n        this._manager.rotate();\n      }\n      if (this._keyPressed(changes.start)) {\n        this._manager.start();\n      }\n      if (this._keyPressed(changes.stop)) {\n        this._manager.stop();\n      }\n      if (this._keyPressed(changes.reset)) {\n        this._manager.reset();\n      }\n    }\n    /**\n     * @return {?}\n     */\n    actionLeft() {\n      this._manager.moveLeft();\n    }\n    /**\n     * @return {?}\n     */\n    actionRight() {\n      this._manager.moveRight();\n    }\n    /**\n     * @return {?}\n     */\n    actionRotate() {\n      this._manager.rotate();\n    }\n    /**\n     * @return {?}\n     */\n    actionDown() {\n      this._manager.moveDown();\n    }\n    /**\n     * @return {?}\n     */\n    actionReset() {\n      this._manager.reset();\n    }\n    /**\n     * @return {?}\n     */\n    actionStart() {\n      this._manager.start();\n      this.state = GameState.Started;\n    }\n    /**\n     * @return {?}\n     */\n    actionStop() {\n      this._manager.stop();\n      this.state = GameState.Paused;\n    }\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    _keyPressed(key) {\n      return key && key.currentValue && !key.previousValue;\n    }\n    /**\n     * @param {?} data\n     * @return {?}\n     */\n    _onLineCleared(data) {\n      this.lineCleared.emit(data);\n    }\n    /**\n     * @param {?} data\n     * @return {?}\n     */\n    _onGameOver(data) {\n      this.state = GameState.Over;\n      this.gameOver.emit();\n    }\n  }\n  TetrisCoreComponent.ɵfac = function TetrisCoreComponent_Factory(t) {\n    return new (t || TetrisCoreComponent)(ɵngcc0.ɵɵdirectiveInject(GameManagerService));\n  };\n  TetrisCoreComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: TetrisCoreComponent,\n    selectors: [[\"tetris-core\"]],\n    inputs: {\n      rotate: \"rotate\",\n      moveLeft: \"moveLeft\",\n      moveRight: \"moveRight\",\n      moveDown: \"moveDown\",\n      start: \"start\",\n      stop: \"stop\",\n      reset: \"reset\",\n      initialSpeed: \"initialSpeed\",\n      tileSize: \"tileSize\"\n    },\n    outputs: {\n      lineCleared: \"lineCleared\",\n      gameOver: \"gameOver\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 2,\n    vars: 1,\n    consts: [[3, \"grid\"]],\n    template: function TetrisCoreComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelement(0, \"board\", 0);\n        ɵngcc0.ɵɵtext(1, \"\\n\");\n      }\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"grid\", ctx.grid);\n      }\n    },\n    dependencies: function () {\n      return [BoardComponent];\n    },\n    encapsulation: 2\n  });\n  /** @nocollapse */\n  return TetrisCoreComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nlet TileComponent = /*#__PURE__*/(() => {\n  class TileComponent {\n    /**\n     * @param {?} el\n     * @param {?} _renderer\n     * @param {?} _manager\n     */\n    constructor(el, _renderer, _manager) {\n      this.el = el;\n      this._renderer = _renderer;\n      this._manager = _manager;\n      this.tileSize = null;\n      if (this._manager.settings.tileSize) {\n        this.tileSize = this._manager.settings.tileSize;\n      }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n      if (this.data.color) {\n        this._renderer.addClass(this.el.nativeElement, this.data.color);\n      }\n    }\n  }\n  TileComponent.ɵfac = function TileComponent_Factory(t) {\n    return new (t || TileComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(GameManagerService));\n  };\n  TileComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: TileComponent,\n    selectors: [[\"tile\"]],\n    hostVars: 4,\n    hostBindings: function TileComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.tileSize)(\"height\", ctx.tileSize);\n      }\n    },\n    inputs: {\n      data: \"data\"\n    },\n    decls: 0,\n    vars: 0,\n    template: function TileComponent_Template(rf, ctx) {},\n    styles: [\"tile{display:block;background:rgba(176,230,225,.35);width:25px;height:25px;float:left;border:1px solid #4e4645;margin:1px}tile.color-box{background:#fca}tile.color-dot{background:#ff77a8}tile.color-line{background:#83769c}tile.color-t{background:#29adff}tile.color-l{background:#00e436}tile.color-lr{background:#ffec27}tile.color-z{background:#ffa300}tile.color-s{background:#c2c3c7}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  /** @nocollapse */\n  return TileComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nlet BoardComponent = /*#__PURE__*/(() => {\n  class BoardComponent {\n    /**\n     * @param {?} _manager\n     */\n    constructor(_manager) {\n      this._manager = _manager;\n      this.boardWidth = null;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n      if (this._manager.settings.tileSize) {\n        /** @type {?} */\n        const bb = this.tile.el.nativeElement.getBoundingClientRect();\n        /** @type {?} */\n        const TILE_MARGIN = 1;\n        /** @type {?} */\n        const oneTileSpace = bb.width + 2 * TILE_MARGIN;\n        this.boardWidth = oneTileSpace * this._manager.elementsInRow;\n      }\n    }\n  }\n  BoardComponent.ɵfac = function BoardComponent_Factory(t) {\n    return new (t || BoardComponent)(ɵngcc0.ɵɵdirectiveInject(GameManagerService));\n  };\n  BoardComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: BoardComponent,\n    selectors: [[\"board\"]],\n    viewQuery: function BoardComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(TileComponent, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tile = _t.first);\n      }\n    },\n    hostVars: 2,\n    hostBindings: function BoardComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.boardWidth + \"px\");\n      }\n    },\n    inputs: {\n      grid: \"grid\"\n    },\n    decls: 2,\n    vars: 1,\n    consts: [[3, \"data\", 4, \"ngFor\", \"ngForOf\"], [3, \"data\"]],\n    template: function BoardComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, BoardComponent_tile_0_Template, 2, 1, \"tile\", 0);\n        ɵngcc0.ɵɵtext(1, \"\\n\");\n      }\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.grid);\n      }\n    },\n    dependencies: [ɵngcc1.NgForOf, TileComponent],\n    styles: [\"[_nghost-%COMP%]{width:290px;display:block}\"]\n  });\n  /** @nocollapse */\n  return BoardComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nlet TetrisCoreModule = /*#__PURE__*/(() => {\n  class TetrisCoreModule {\n    /**\n     * @return {?}\n     */\n    static forRoot() {\n      return {\n        ngModule: TetrisCoreModule\n      };\n    }\n  }\n  TetrisCoreModule.ɵfac = function TetrisCoreModule_Factory(t) {\n    return new (t || TetrisCoreModule)();\n  };\n  TetrisCoreModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: TetrisCoreModule\n  });\n  TetrisCoreModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [GameManagerService],\n    imports: [CommonModule]\n  });\n  return TetrisCoreModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TetrisCoreModule, {\n    declarations: function () {\n      return [TetrisCoreComponent, BoardComponent, TileComponent];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [TetrisCoreComponent];\n    }\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { TetrisCoreModule, GameState, TetrisCoreComponent, BoardComponent as ɵb, GameManagerService as ɵa, TileComponent as ɵc };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}