{"ast":null,"code":"import { isDevMode } from '@angular/core';\nimport { map } from 'rxjs/operators';\nimport { Authority } from 'app/config/authority.constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"app/login/login.service\";\nimport * as i3 from \"app/core/auth/account.service\";\nimport * as i4 from \"./state-storage.service\";\nexport let UserRouteAccessService = /*#__PURE__*/(() => {\n  class UserRouteAccessService {\n    constructor(router, loginService, accountService, stateStorageService) {\n      this.router = router;\n      this.loginService = loginService;\n      this.accountService = accountService;\n      this.stateStorageService = stateStorageService;\n    }\n    canActivate(route, state) {\n      return this.accountService.identity().pipe(map(account => {\n        if (account) {\n          let authorities = route.data['authorities'];\n          if (!authorities) {\n            authorities = [Authority.ADMIN];\n          }\n          if (!authorities || authorities.length === 0 || this.accountService.hasAnyAuthority(authorities)) {\n            return true;\n          }\n          if (isDevMode()) {\n            console.error('User has not any of required authorities: ', authorities);\n          }\n          this.router.navigate(['accessdenied']);\n          return false;\n        }\n        this.stateStorageService.storeUrl(state.url);\n        this.loginService.login();\n        return false;\n      }));\n    }\n  }\n  UserRouteAccessService.ɵfac = function UserRouteAccessService_Factory(t) {\n    return new (t || UserRouteAccessService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.LoginService), i0.ɵɵinject(i3.AccountService), i0.ɵɵinject(i4.StateStorageService));\n  };\n  UserRouteAccessService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserRouteAccessService,\n    factory: UserRouteAccessService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserRouteAccessService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}