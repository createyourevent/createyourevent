{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\nimport { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getEventIdentifier } from '../event.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport let EventService = /*#__PURE__*/(() => {\n  class EventService {\n    constructor(http, applicationConfigService) {\n      this.http = http;\n      this.applicationConfigService = applicationConfigService;\n      this.resourceUrl = this.applicationConfigService.getEndpointFor('api/events');\n    }\n    create(event) {\n      const copy = this.convertDateFromClient(event);\n      return this.http.post(this.resourceUrl, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    update(event) {\n      const copy = this.convertDateFromClient(event);\n      return this.http.put(`${this.resourceUrl}/${getEventIdentifier(event)}`, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    partialUpdate(event) {\n      const copy = this.convertDateFromClient(event);\n      return this.http.patch(`${this.resourceUrl}/${getEventIdentifier(event)}`, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      }).pipe(map(res => this.convertDateArrayFromServer(res)));\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    addEventToCollectionIfMissing(eventCollection, ...eventsToCheck) {\n      const events = eventsToCheck.filter(isPresent);\n      if (events.length > 0) {\n        const eventCollectionIdentifiers = eventCollection.map(eventItem => getEventIdentifier(eventItem));\n        const eventsToAdd = events.filter(eventItem => {\n          const eventIdentifier = getEventIdentifier(eventItem);\n          if (eventIdentifier == null || eventCollectionIdentifiers.includes(eventIdentifier)) {\n            return false;\n          }\n          eventCollectionIdentifiers.push(eventIdentifier);\n          return true;\n        });\n        return [...eventsToAdd, ...eventCollection];\n      }\n      return eventCollection;\n    }\n    convertDateFromClient(event) {\n      return Object.assign({}, event, {\n        dateStart: event.dateStart?.isValid() ? event.dateStart.toJSON() : undefined,\n        dateEnd: event.dateEnd?.isValid() ? event.dateEnd.toJSON() : undefined\n      });\n    }\n    convertDateFromServer(res) {\n      if (res.body) {\n        res.body.dateStart = res.body.dateStart ? dayjs(res.body.dateStart) : undefined;\n        res.body.dateEnd = res.body.dateEnd ? dayjs(res.body.dateEnd) : undefined;\n      }\n      return res;\n    }\n    convertDateArrayFromServer(res) {\n      if (res.body) {\n        res.body.forEach(event => {\n          event.dateStart = event.dateStart ? dayjs(event.dateStart) : undefined;\n          event.dateEnd = event.dateEnd ? dayjs(event.dateEnd) : undefined;\n        });\n      }\n      return res;\n    }\n  }\n  EventService.ɵfac = function EventService_Factory(t) {\n    return new (t || EventService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n  };\n  EventService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EventService,\n    factory: EventService.ɵfac,\n    providedIn: 'root'\n  });\n  return EventService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}