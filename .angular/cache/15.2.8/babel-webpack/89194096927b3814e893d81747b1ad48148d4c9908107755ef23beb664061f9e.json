{"ast":null,"code":"import { Overlay, CdkConnectedOverlay, OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, EventEmitter, ChangeDetectorRef, NgZone, ElementRef, Optional, Inject, Self, Attribute, ViewChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport { mixinDisableRipple, mixinTabIndex, mixinDisabled, mixinErrorState, ErrorStateMatcher, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { MatFormField, MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { ActiveDescendantKeyManager, LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, A } from '@angular/cdk/keycodes';\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, take, filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/forms';\nimport * as ɵngcc5 from '@angular/cdk/a11y';\nimport * as ɵngcc6 from '@angular/material/form-field';\nimport * as ɵngcc7 from '@angular/common';\nimport * as ɵngcc8 from '@angular/cdk/overlay';\nconst _c0 = [\"trigger\"];\nconst _c1 = [\"panel\"];\nfunction MatSelect_span_7_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 8);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.placeholder);\n  }\n}\nfunction MatSelect_span_9_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 12);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r5.triggerValue);\n  }\n}\nfunction MatSelect_span_9_ng_content_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 0, [\"*ngSwitchCase\", \"true\"]);\n  }\n}\nfunction MatSelect_span_9_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 9);\n    ɵngcc0.ɵɵtext(1, \"\\n      \");\n    ɵngcc0.ɵɵtemplate(2, MatSelect_span_9_span_2_Template, 2, 1, \"span\", 10);\n    ɵngcc0.ɵɵtext(3, \"\\n      \");\n    ɵngcc0.ɵɵtemplate(4, MatSelect_span_9_ng_content_4_Template, 1, 0, \"ng-content\", 11);\n    ɵngcc0.ɵɵtext(5, \"\\n    \");\n    ɵngcc0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngSwitch\", !!ctx_r3.customTrigger);\n    ɵngcc0.ɵɵadvance(4);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n  }\n}\nfunction MatSelect_ng_template_16_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵtext(0, \"\\n  \");\n    ɵngcc0.ɵɵelementStart(1, \"div\", 13);\n    ɵngcc0.ɵɵtext(2, \"\\n    \");\n    ɵngcc0.ɵɵelementStart(3, \"div\", 14, 15);\n    ɵngcc0.ɵɵlistener(\"@transformPanel.done\", function MatSelect_ng_template_16_Template_div_animation_transformPanel_done_3_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      const ctx_r8 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r8._panelDoneAnimatingStream.next($event.toState));\n    })(\"keydown\", function MatSelect_ng_template_16_Template_div_keydown_3_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      const ctx_r10 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r10._handleKeydown($event));\n    });\n    ɵngcc0.ɵɵtext(5, \"\\n      \");\n    ɵngcc0.ɵɵprojection(6, 1);\n    ɵngcc0.ɵɵtext(7, \"\\n    \");\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtext(8, \"\\n  \");\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtext(9, \"\\n\");\n  }\n  if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"@transformPanelWrap\", undefined);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵclassMapInterpolate1(\"mat-select-panel \", ctx_r4._getPanelTheme(), \"\");\n    ɵngcc0.ɵɵstyleProp(\"transform-origin\", ctx_r4._transformOrigin)(\"font-size\", ctx_r4._triggerFontSize, \"px\");\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r4.panelClass)(\"@transformPanel\", ctx_r4.multiple ? \"showing-multiple\" : \"showing\");\n    ɵngcc0.ɵɵattribute(\"id\", ctx_r4.id + \"-panel\")(\"aria-multiselectable\", ctx_r4.multiple)(\"aria-label\", ctx_r4.ariaLabel || null)(\"aria-labelledby\", ctx_r4._getPanelAriaLabelledby());\n  }\n}\nconst _c2 = [[[\"mat-select-trigger\"]], \"*\"];\nconst _c3 = [\"mat-select-trigger\", \"*\"];\nconst matSelectAnimations = {\n  /**\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\n   * closing the select.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  transformPanelWrap: trigger('transformPanelWrap', [transition('* => void', query('@transformPanel', [animateChild()], {\n    optional: true\n  }))]),\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [state('void', style({\n    transform: 'scaleY(0.8)',\n    minWidth: '100%',\n    opacity: 0\n  })), state('showing', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 32px)',\n    transform: 'scaleY(1)'\n  })), state('showing-multiple', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 64px)',\n    transform: 'scaleY(1)'\n  })), transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')), transition('* => void', animate('100ms 25ms linear', style({\n    opacity: 0\n  })))])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nfunction getMatSelectDynamicMultipleError() {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nfunction getMatSelectNonArrayValueError() {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nfunction getMatSelectNonFunctionValueError() {\n  return Error('`compareWith` must be a function.');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextUniqueId = 0;\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n/** The max height of the select's overlay panel. */\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n/** The panel's padding on the x-axis. */\nconst SELECT_PANEL_PADDING_X = 16;\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nconst SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/** The height of the select items in `em` units. */\nconst SELECT_ITEM_HEIGHT_EM = 3;\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nconst SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nconst SELECT_PANEL_VIEWPORT_PADDING = 8;\n/** Injection token that determines the scroll handling while a select is open. */\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/** @docs-private */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition();\n}\n/** Injection token that can be used to provide the default options the select module. */\nconst MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/** Change event object that is emitted when the select value has changed. */\nclass MatSelectChange {\n  constructor( /** Reference to the select that emitted the change event. */\n  source, /** Current value of the select that emitted the event. */\n  value) {\n    this.source = source;\n    this.value = value;\n  }\n}\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nconst _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(class {\n  constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n    this._elementRef = _elementRef;\n    this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n    this._parentForm = _parentForm;\n    this._parentFormGroup = _parentFormGroup;\n    this.ngControl = ngControl;\n  }\n}))));\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SELECT_TRIGGER = new InjectionToken('MatSelectTrigger');\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {}\nMatSelectTrigger.ɵfac = function MatSelectTrigger_Factory(t) {\n  return new (t || MatSelectTrigger)();\n};\nMatSelectTrigger.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatSelectTrigger,\n  selectors: [[\"mat-select-trigger\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MAT_SELECT_TRIGGER,\n    useExisting: MatSelectTrigger\n  }])]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectTrigger, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-select-trigger',\n      providers: [{\n        provide: MAT_SELECT_TRIGGER,\n        useExisting: MatSelectTrigger\n      }]\n    }]\n  }], null, null);\n})();\n/** Base class with all of the `MatSelect` functionality. */\nclass _MatSelectBase extends _MatSelectMixinBase {\n  constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, _defaultOptions) {\n    var _a, _b, _c;\n    super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    this._viewportRuler = _viewportRuler;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._ngZone = _ngZone;\n    this._dir = _dir;\n    this._parentFormField = _parentFormField;\n    this._liveAnnouncer = _liveAnnouncer;\n    this._defaultOptions = _defaultOptions;\n    /** Whether or not the overlay panel is open. */\n    this._panelOpen = false;\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n    this._compareWith = (o1, o2) => o1 === o2;\n    /** Unique id for this input. */\n    this._uid = `mat-select-${nextUniqueId++}`;\n    /** Current `ariar-labelledby` value for the select trigger. */\n    this._triggerAriaLabelledBy = null;\n    /** Emits whenever the component is destroyed. */\n    this._destroy = new Subject();\n    /** `View -> model callback called when value changes` */\n    this._onChange = () => {};\n    /** `View -> model callback called when select has been touched` */\n    this._onTouched = () => {};\n    /** ID for the DOM node containing the select's value. */\n    this._valueId = `mat-select-value-${nextUniqueId++}`;\n    /** Emits when the panel element is finished transforming in. */\n    this._panelDoneAnimatingStream = new Subject();\n    this._overlayPanelClass = ((_a = this._defaultOptions) === null || _a === void 0 ? void 0 : _a.overlayPanelClass) || '';\n    this._focused = false;\n    /** A name for this control that can be used by `mat-form-field`. */\n    this.controlType = 'mat-select';\n    this._required = false;\n    this._multiple = false;\n    this._disableOptionCentering = (_c = (_b = this._defaultOptions) === null || _b === void 0 ? void 0 : _b.disableOptionCentering) !== null && _c !== void 0 ? _c : false;\n    /** Aria label of the select. */\n    this.ariaLabel = '';\n    /** Combined stream of all of the child options' change events. */\n    this.optionSelectionChanges = defer(() => {\n      const options = this.options;\n      if (options) {\n        return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n      }\n      return this._ngZone.onStable.pipe(take(1), switchMap(() => this.optionSelectionChanges));\n    });\n    /** Event emitted when the select panel has been toggled. */\n    this.openedChange = new EventEmitter();\n    /** Event emitted when the select has been opened. */\n    this._openedStream = this.openedChange.pipe(filter(o => o), map(() => {}));\n    /** Event emitted when the select has been closed. */\n    this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => {}));\n    /** Event emitted when the selected value has been changed by the user. */\n    this.selectionChange = new EventEmitter();\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    this.valueChange = new EventEmitter();\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n    // Note that we only want to set this when the defaults pass it in, otherwise it should\n    // stay as `undefined` so that it falls back to the default in the key manager.\n    if ((_defaultOptions === null || _defaultOptions === void 0 ? void 0 : _defaultOptions.typeaheadDebounceInterval) != null) {\n      this._typeaheadDebounceInterval = _defaultOptions.typeaheadDebounceInterval;\n    }\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n  /** Whether the select is focused. */\n  get focused() {\n    return this._focused || this._panelOpen;\n  }\n  /** Placeholder to be shown if no value has been selected. */\n  get placeholder() {\n    return this._placeholder;\n  }\n  set placeholder(value) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  /** Whether the component is required. */\n  get required() {\n    return this._required;\n  }\n  set required(value) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  /** Whether the user should be allowed to select multiple options. */\n  get multiple() {\n    return this._multiple;\n  }\n  set multiple(value) {\n    if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatSelectDynamicMultipleError();\n    }\n    this._multiple = coerceBooleanProperty(value);\n  }\n  /** Whether to center the active option over the trigger. */\n  get disableOptionCentering() {\n    return this._disableOptionCentering;\n  }\n  set disableOptionCentering(value) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  get compareWith() {\n    return this._compareWith;\n  }\n  set compareWith(fn) {\n    if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  /** Value of the select control. */\n  get value() {\n    return this._value;\n  }\n  set value(newValue) {\n    // Always re-assign an array, because it might have been mutated.\n    if (newValue !== this._value || this._multiple && Array.isArray(newValue)) {\n      if (this.options) {\n        this._setSelectionByValue(newValue);\n      }\n      this._value = newValue;\n    }\n  }\n  /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n  get typeaheadDebounceInterval() {\n    return this._typeaheadDebounceInterval;\n  }\n  set typeaheadDebounceInterval(value) {\n    this._typeaheadDebounceInterval = coerceNumberProperty(value);\n  }\n  /** Unique id of the element. */\n  get id() {\n    return this._id;\n  }\n  set id(value) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  ngOnInit() {\n    this._selectionModel = new SelectionModel(this.multiple);\n    this.stateChanges.next();\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream.pipe(distinctUntilChanged(), takeUntil(this._destroy)).subscribe(() => this._panelDoneAnimating(this.panelOpen));\n  }\n  ngAfterContentInit() {\n    this._initKeyManager();\n    this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n  ngDoCheck() {\n    const newAriaLabelledby = this._getTriggerAriaLabelledby();\n    // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n    // is computed as a result of a content query which can cause this binding to trigger a\n    // \"changed after checked\" error.\n    if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n      const element = this._elementRef.nativeElement;\n      this._triggerAriaLabelledBy = newAriaLabelledby;\n      if (newAriaLabelledby) {\n        element.setAttribute('aria-labelledby', newAriaLabelledby);\n      } else {\n        element.removeAttribute('aria-labelledby');\n      }\n    }\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n  ngOnChanges(changes) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes['disabled']) {\n      this.stateChanges.next();\n    }\n    if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n      this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\n    }\n  }\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n  /** Toggles the overlay panel open or closed. */\n  toggle() {\n    this.panelOpen ? this.close() : this.open();\n  }\n  /** Opens the overlay panel. */\n  open() {\n    if (this._canOpen()) {\n      this._panelOpen = true;\n      this._keyManager.withHorizontalOrientation(null);\n      this._highlightCorrectOption();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /** Closes the overlay panel and focuses the host element. */\n  close() {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value) {\n    this.value = value;\n  }\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn) {\n    this._onChange = fn;\n  }\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  }\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n  /** Whether or not the overlay panel is open. */\n  get panelOpen() {\n    return this._panelOpen;\n  }\n  /** The currently selected option. */\n  get selected() {\n    var _a, _b;\n    return this.multiple ? ((_a = this._selectionModel) === null || _a === void 0 ? void 0 : _a.selected) || [] : (_b = this._selectionModel) === null || _b === void 0 ? void 0 : _b.selected[0];\n  }\n  /** The value displayed in the trigger. */\n  get triggerValue() {\n    if (this.empty) {\n      return '';\n    }\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n    return this._selectionModel.selected[0].viewValue;\n  }\n  /** Whether the element is in RTL mode. */\n  _isRtl() {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event) {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n  /** Handles keyboard events while the select is closed. */\n  _handleClosedKeydown(event) {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW || keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n    // Open the select on ALT + arrow key to match the native <select>\n    if (!manager.isTyping() && isOpenKey && !hasModifierKey(event) || (this.multiple || event.altKey) && isArrowKey) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      const previouslySelectedOption = this.selected;\n      manager.onKeydown(event);\n      const selectedOption = this.selected;\n      // Since the value has changed, we need to announce it ourselves.\n      if (selectedOption && previouslySelectedOption !== selectedOption) {\n        // We set a duration on the live announcement, because we want the live element to be\n        // cleared after a while so that users can't navigate to it using the arrow keys.\n        this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n      }\n    }\n  }\n  /** Handles keyboard events when the selected is open. */\n  _handleOpenKeydown(event) {\n    const manager = this._keyManager;\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const isTyping = manager.isTyping();\n    if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n      // Don't do anything in this case if the user is typing,\n      // because the typing sequence can include the space key.\n    } else if (!isTyping && (keyCode === ENTER || keyCode === SPACE) && manager.activeItem && !hasModifierKey(event)) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n      manager.onKeydown(event);\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem && manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached() {\n    this._overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._positioningSettled();\n    });\n  }\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme() {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n  /** Whether the select has a value. */\n  get empty() {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n  _initializeSelection() {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n      this.stateChanges.next();\n    });\n  }\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  _setSelectionByValue(value) {\n    this._selectionModel.selected.forEach(option => option.setInactiveStyles());\n    this._selectionModel.clear();\n    if (this.multiple && value) {\n      if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getMatSelectNonArrayValueError();\n      }\n      value.forEach(currentValue => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      const correspondingOption = this._selectValue(value);\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.updateActiveItem(correspondingOption);\n      } else if (!this.panelOpen) {\n        // Otherwise reset the highlighted option. Note that we only want to do this while\n        // closed, because doing it while open can shift the user's focus unnecessarily.\n        this._keyManager.updateActiveItem(-1);\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  _selectValue(value) {\n    const correspondingOption = this.options.find(option => {\n      // Skip options that are already in the model. This allows us to handle cases\n      // where the same primitive value is selected multiple times.\n      if (this._selectionModel.isSelected(option)) {\n        return false;\n      }\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value, value);\n      } catch (error) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n    return correspondingOption;\n  }\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager(this.options).withTypeAhead(this._typeaheadDebounceInterval).withVerticalOrientation().withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr').withHomeAndEnd().withAllowedModifierKeys(['shiftKey']);\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this.panelOpen) {\n        // Select the active item when tabbing away. This is consistent with how the native\n        // select behaves. Note that we only want to do this in single selection mode.\n        if (!this.multiple && this._keyManager.activeItem) {\n          this._keyManager.activeItem._selectViaInteraction();\n        }\n        // Restore focus to the trigger before closing. Ensures that the focus\n        // position won't be lost if the user got focus into the overlay.\n        this.focus();\n        this.close();\n      }\n    });\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  _resetOptions() {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges)).pipe(takeUntil(changedOrDestroyed)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n  /** Invoked when an option is clicked. */\n  _onSelect(option, isUserInput) {\n    const wasSelected = this._selectionModel.isSelected(option);\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      if (this.value != null) {\n        this._propagateChanges(option.value);\n      }\n    } else {\n      if (wasSelected !== option.selected) {\n        option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n      }\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n      if (this.multiple) {\n        this._sortValues();\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n    this.stateChanges.next();\n  }\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) : options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n  /** Emits change event to set the model value. */\n  _propagateChanges(fallbackValue) {\n    let valueToEmit = null;\n    if (this.multiple) {\n      valueToEmit = this.selected.map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  _highlightCorrectOption() {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n  /** Whether the panel is allowed to open. */\n  _canOpen() {\n    var _a;\n    return !this._panelOpen && !this.disabled && ((_a = this.options) === null || _a === void 0 ? void 0 : _a.length) > 0;\n  }\n  /** Focuses the select element. */\n  focus(options) {\n    this._elementRef.nativeElement.focus(options);\n  }\n  /** Gets the aria-labelledby for the select panel. */\n  _getPanelAriaLabelledby() {\n    var _a;\n    if (this.ariaLabel) {\n      return null;\n    }\n    const labelId = (_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId();\n    const labelExpression = labelId ? labelId + ' ' : '';\n    return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n  }\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant() {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n    return null;\n  }\n  /** Gets the aria-labelledby of the select component trigger. */\n  _getTriggerAriaLabelledby() {\n    var _a;\n    if (this.ariaLabel) {\n      return null;\n    }\n    const labelId = (_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId();\n    let value = (labelId ? labelId + ' ' : '') + this._valueId;\n    if (this.ariaLabelledby) {\n      value += ' ' + this.ariaLabelledby;\n    }\n    return value;\n  }\n  /** Called when the overlay panel is done animating. */\n  _panelDoneAnimating(isOpen) {\n    this.openedChange.emit(isOpen);\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat() {\n    return this._panelOpen || !this.empty || this._focused && !!this._placeholder;\n  }\n}\n_MatSelectBase.ɵfac = function _MatSelectBase_Factory(t) {\n  return new (t || _MatSelectBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgControl, 10), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.LiveAnnouncer), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_CONFIG, 8));\n};\n_MatSelectBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: _MatSelectBase,\n  viewQuery: function _MatSelectBase_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, 5);\n      ɵngcc0.ɵɵviewQuery(_c1, 5);\n      ɵngcc0.ɵɵviewQuery(CdkConnectedOverlay, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trigger = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._overlayDir = _t.first);\n    }\n  },\n  inputs: {\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    id: \"id\",\n    placeholder: \"placeholder\",\n    required: \"required\",\n    multiple: \"multiple\",\n    disableOptionCentering: \"disableOptionCentering\",\n    compareWith: \"compareWith\",\n    value: \"value\",\n    typeaheadDebounceInterval: \"typeaheadDebounceInterval\",\n    panelClass: \"panelClass\",\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    errorStateMatcher: \"errorStateMatcher\",\n    sortComparator: \"sortComparator\"\n  },\n  outputs: {\n    openedChange: \"openedChange\",\n    _openedStream: \"opened\",\n    _closedStream: \"closed\",\n    selectionChange: \"selectionChange\",\n    valueChange: \"valueChange\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature]\n});\n_MatSelectBase.ctorParameters = () => [{\n  type: ViewportRuler\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: NgZone\n}, {\n  type: ErrorStateMatcher\n}, {\n  type: ElementRef\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: NgForm,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: FormGroupDirective,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: MatFormField,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_FORM_FIELD]\n  }]\n}, {\n  type: NgControl,\n  decorators: [{\n    type: Self\n  }, {\n    type: Optional\n  }]\n}, {\n  type: String,\n  decorators: [{\n    type: Attribute,\n    args: ['tabindex']\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_SELECT_SCROLL_STRATEGY]\n  }]\n}, {\n  type: LiveAnnouncer\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_SELECT_CONFIG]\n  }]\n}];\n_MatSelectBase.propDecorators = {\n  trigger: [{\n    type: ViewChild,\n    args: ['trigger']\n  }],\n  panel: [{\n    type: ViewChild,\n    args: ['panel']\n  }],\n  _overlayDir: [{\n    type: ViewChild,\n    args: [CdkConnectedOverlay]\n  }],\n  panelClass: [{\n    type: Input\n  }],\n  placeholder: [{\n    type: Input\n  }],\n  required: [{\n    type: Input\n  }],\n  multiple: [{\n    type: Input\n  }],\n  disableOptionCentering: [{\n    type: Input\n  }],\n  compareWith: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  ariaLabelledby: [{\n    type: Input,\n    args: ['aria-labelledby']\n  }],\n  errorStateMatcher: [{\n    type: Input\n  }],\n  typeaheadDebounceInterval: [{\n    type: Input\n  }],\n  sortComparator: [{\n    type: Input\n  }],\n  id: [{\n    type: Input\n  }],\n  openedChange: [{\n    type: Output\n  }],\n  _openedStream: [{\n    type: Output,\n    args: ['opened']\n  }],\n  _closedStream: [{\n    type: Output,\n    args: ['closed']\n  }],\n  selectionChange: [{\n    type: Output\n  }],\n  valueChange: [{\n    type: Output\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatSelectBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: ɵngcc1.ViewportRuler\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc2.ErrorStateMatcher\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc3.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc4.NgForm,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc4.FormGroupDirective,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc6.MatFormField,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_FORM_FIELD]\n      }]\n    }, {\n      type: ɵngcc4.NgControl,\n      decorators: [{\n        type: Self\n      }, {\n        type: Optional\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_SELECT_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: ɵngcc5.LiveAnnouncer\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_SELECT_CONFIG]\n      }]\n    }];\n  }, {\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    openedChange: [{\n      type: Output\n    }],\n    _openedStream: [{\n      type: Output,\n      args: ['opened']\n    }],\n    _closedStream: [{\n      type: Output,\n      args: ['closed']\n    }],\n    selectionChange: [{\n      type: Output\n    }],\n    valueChange: [{\n      type: Output\n    }],\n    id: [{\n      type: Input\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    multiple: [{\n      type: Input\n    }],\n    disableOptionCentering: [{\n      type: Input\n    }],\n    compareWith: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    typeaheadDebounceInterval: [{\n      type: Input\n    }],\n    trigger: [{\n      type: ViewChild,\n      args: ['trigger']\n    }],\n    panel: [{\n      type: ViewChild,\n      args: ['panel']\n    }],\n    _overlayDir: [{\n      type: ViewChild,\n      args: [CdkConnectedOverlay]\n    }],\n    panelClass: [{\n      type: Input\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    errorStateMatcher: [{\n      type: Input\n    }],\n    sortComparator: [{\n      type: Input\n    }]\n  });\n})();\nclass MatSelect extends _MatSelectBase {\n  constructor() {\n    super(...arguments);\n    /** The scroll position of the overlay panel, calculated to center the selected option. */\n    this._scrollTop = 0;\n    /** The cached font-size of the trigger element. */\n    this._triggerFontSize = 0;\n    /** The value of the select panel's transform-origin property. */\n    this._transformOrigin = 'top';\n    /**\n     * The y-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text.\n     * when the panel opens. Will change based on the y-position of the selected option.\n     */\n    this._offsetY = 0;\n    this._positions = [{\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top'\n    }, {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom'\n    }];\n  }\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n  ngOnInit() {\n    super.ngOnInit();\n    this._viewportRuler.change().pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this.panelOpen) {\n        this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        this._changeDetectorRef.markForCheck();\n      }\n    });\n  }\n  open() {\n    if (super._canOpen()) {\n      super.open();\n      this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n      // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n      // `parseInt` ignores the trailing 'px' and converts this to a number.\n      this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n      this._calculateOverlayPosition();\n      // Set the font size on the panel element once it exists.\n      this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n        if (this._triggerFontSize && this._overlayDir.overlayRef && this._overlayDir.overlayRef.overlayElement) {\n          this._overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n        }\n      });\n    }\n  }\n  /** Scrolls the active option into view. */\n  _scrollOptionIntoView(index) {\n    const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n    const itemHeight = this._getItemHeight();\n    if (index === 0 && labelCount === 1) {\n      // If we've got one group label before the option and we're at the top option,\n      // scroll the list to the top. This is better UX than scrolling the list to the\n      // top of the option, because it allows the user to read the top group's label.\n      this.panel.nativeElement.scrollTop = 0;\n    } else {\n      this.panel.nativeElement.scrollTop = _getOptionScrollPosition((index + labelCount) * itemHeight, itemHeight, this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n    }\n  }\n  _positioningSettled() {\n    this._calculateOverlayOffsetX();\n    this.panel.nativeElement.scrollTop = this._scrollTop;\n  }\n  _panelDoneAnimating(isOpen) {\n    if (this.panelOpen) {\n      this._scrollTop = 0;\n    } else {\n      this._overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n    super._panelDoneAnimating(isOpen);\n  }\n  _getChangeEvent(value) {\n    return new MatSelectChange(this, value);\n  }\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  _calculateOverlayOffsetX() {\n    const overlayRect = this._overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X : SELECT_PANEL_PADDING_X * 2;\n    let offsetX;\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else if (this.disableOptionCentering) {\n      offsetX = SELECT_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width + (isRtl ? 0 : paddingWidth);\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this._overlayDir.offsetX = Math.round(offsetX);\n    this._overlayDir.overlayRef.updatePosition();\n  }\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop;\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this.disableOptionCentering) {\n      return 0;\n    }\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight = itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  _checkOverlayWithinViewport(maxScroll) {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n      this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  _calculateOverlayPosition() {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset;\n    if (this.empty) {\n      selectedOptionOffset = 0;\n    } else {\n      selectedOptionOffset = Math.max(this.options.toArray().indexOf(this._selectionModel.selected[0]), 0);\n    }\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n  /** Sets the transform origin point based on the selected option. */\n  _getOriginBasedOnOption() {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n  /** Calculates the height of the select's options. */\n  _getItemHeight() {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  _getItemCount() {\n    return this.options.length + this.optionGroups.length;\n  }\n}\nMatSelect.ɵfac = /*@__PURE__*/function () {\n  let ɵMatSelect_BaseFactory;\n  return function MatSelect_Factory(t) {\n    return (ɵMatSelect_BaseFactory || (ɵMatSelect_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatSelect)))(t || MatSelect);\n  };\n}();\nMatSelect.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatSelect,\n  selectors: [[\"mat-select\"]],\n  contentQueries: function MatSelect_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_SELECT_TRIGGER, 5);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, 5);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customTrigger = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n    }\n  },\n  hostAttrs: [\"role\", \"combobox\", \"aria-autocomplete\", \"none\", \"aria-haspopup\", \"true\", 1, \"mat-select\"],\n  hostVars: 20,\n  hostBindings: function MatSelect_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"keydown\", function MatSelect_keydown_HostBindingHandler($event) {\n        return ctx._handleKeydown($event);\n      })(\"focus\", function MatSelect_focus_HostBindingHandler() {\n        return ctx._onFocus();\n      })(\"blur\", function MatSelect_blur_HostBindingHandler() {\n        return ctx._onBlur();\n      });\n    }\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"tabindex\", ctx.tabIndex)(\"aria-controls\", ctx.panelOpen ? ctx.id + \"-panel\" : null)(\"aria-expanded\", ctx.panelOpen)(\"aria-label\", ctx.ariaLabel || null)(\"aria-required\", ctx.required.toString())(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-activedescendant\", ctx._getAriaActiveDescendant());\n      ɵngcc0.ɵɵclassProp(\"mat-select-disabled\", ctx.disabled)(\"mat-select-invalid\", ctx.errorState)(\"mat-select-required\", ctx.required)(\"mat-select-empty\", ctx.empty)(\"mat-select-multiple\", ctx.multiple);\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    disableRipple: \"disableRipple\",\n    tabIndex: \"tabIndex\"\n  },\n  exportAs: [\"matSelect\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MatFormFieldControl,\n    useExisting: MatSelect\n  }, {\n    provide: MAT_OPTION_PARENT_COMPONENT,\n    useExisting: MatSelect\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c3,\n  decls: 18,\n  vars: 12,\n  consts: [[\"cdk-overlay-origin\", \"\", 1, \"mat-select-trigger\", 3, \"click\"], [\"origin\", \"cdkOverlayOrigin\", \"trigger\", \"\"], [1, \"mat-select-value\", 3, \"ngSwitch\"], [\"class\", \"mat-select-placeholder mat-select-min-line\", 4, \"ngSwitchCase\"], [\"class\", \"mat-select-value-text\", 3, \"ngSwitch\", 4, \"ngSwitchCase\"], [1, \"mat-select-arrow-wrapper\"], [1, \"mat-select-arrow\"], [\"cdk-connected-overlay\", \"\", \"cdkConnectedOverlayLockPosition\", \"\", \"cdkConnectedOverlayHasBackdrop\", \"\", \"cdkConnectedOverlayBackdropClass\", \"cdk-overlay-transparent-backdrop\", 3, \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayOffsetY\", \"backdropClick\", \"attach\", \"detach\"], [1, \"mat-select-placeholder\", \"mat-select-min-line\"], [1, \"mat-select-value-text\", 3, \"ngSwitch\"], [\"class\", \"mat-select-min-line\", 4, \"ngSwitchDefault\"], [4, \"ngSwitchCase\"], [1, \"mat-select-min-line\"], [1, \"mat-select-panel-wrap\"], [\"role\", \"listbox\", \"tabindex\", \"-1\", 3, \"ngClass\", \"keydown\"], [\"panel\", \"\"]],\n  template: function MatSelect_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef(_c2);\n      ɵngcc0.ɵɵtext(0, \"\\n\");\n      ɵngcc0.ɵɵelementStart(1, \"div\", 0, 1);\n      ɵngcc0.ɵɵlistener(\"click\", function MatSelect_Template_div_click_1_listener() {\n        return ctx.toggle();\n      });\n      ɵngcc0.ɵɵtext(4, \"\\n  \");\n      ɵngcc0.ɵɵelementStart(5, \"div\", 2);\n      ɵngcc0.ɵɵtext(6, \"\\n    \");\n      ɵngcc0.ɵɵtemplate(7, MatSelect_span_7_Template, 2, 1, \"span\", 3);\n      ɵngcc0.ɵɵtext(8, \"\\n    \");\n      ɵngcc0.ɵɵtemplate(9, MatSelect_span_9_Template, 6, 2, \"span\", 4);\n      ɵngcc0.ɵɵtext(10, \"\\n  \");\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtext(11, \"\\n\\n  \");\n      ɵngcc0.ɵɵelementStart(12, \"div\", 5);\n      ɵngcc0.ɵɵelement(13, \"div\", 6);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtext(14, \"\\n\");\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtext(15, \"\\n\\n\");\n      ɵngcc0.ɵɵtemplate(16, MatSelect_ng_template_16_Template, 10, 14, \"ng-template\", 7);\n      ɵngcc0.ɵɵlistener(\"backdropClick\", function MatSelect_Template_ng_template_backdropClick_16_listener() {\n        return ctx.close();\n      })(\"attach\", function MatSelect_Template_ng_template_attach_16_listener() {\n        return ctx._onAttached();\n      })(\"detach\", function MatSelect_Template_ng_template_detach_16_listener() {\n        return ctx.close();\n      });\n      ɵngcc0.ɵɵtext(17, \"\\n\");\n    }\n    if (rf & 2) {\n      const _r0 = ɵngcc0.ɵɵreference(2);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵattribute(\"aria-owns\", ctx.panelOpen ? ctx.id + \"-panel\" : null);\n      ɵngcc0.ɵɵadvance(4);\n      ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.empty);\n      ɵngcc0.ɵɵattribute(\"id\", ctx._valueId);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n      ɵngcc0.ɵɵadvance(7);\n      ɵngcc0.ɵɵproperty(\"cdkConnectedOverlayPanelClass\", ctx._overlayPanelClass)(\"cdkConnectedOverlayScrollStrategy\", ctx._scrollStrategy)(\"cdkConnectedOverlayOrigin\", _r0)(\"cdkConnectedOverlayOpen\", ctx.panelOpen)(\"cdkConnectedOverlayPositions\", ctx._positions)(\"cdkConnectedOverlayMinWidth\", ctx._triggerRect == null ? null : ctx._triggerRect.width)(\"cdkConnectedOverlayOffsetY\", ctx._offsetY);\n    }\n  },\n  dependencies: [ɵngcc7.NgClass, ɵngcc7.NgSwitch, ɵngcc7.NgSwitchCase, ɵngcc7.NgSwitchDefault, ɵngcc8.CdkConnectedOverlay, ɵngcc8.CdkOverlayOrigin],\n  styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;opacity:0}\\n\"],\n  encapsulation: 2,\n  data: {\n    animation: [matSelectAnimations.transformPanelWrap, matSelectAnimations.transformPanel]\n  },\n  changeDetection: 0\n});\nMatSelect.propDecorators = {\n  options: [{\n    type: ContentChildren,\n    args: [MatOption, {\n      descendants: true\n    }]\n  }],\n  optionGroups: [{\n    type: ContentChildren,\n    args: [MAT_OPTGROUP, {\n      descendants: true\n    }]\n  }],\n  customTrigger: [{\n    type: ContentChild,\n    args: [MAT_SELECT_TRIGGER]\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelect, [{\n    type: Component,\n    args: [{\n      selector: 'mat-select',\n      exportAs: 'matSelect',\n      template: \"<!--\\n Note that the select trigger element specifies `aria-owns` pointing to the listbox overlay.\\n While aria-owns is not required for the ARIA 1.2 `role=\\\"combobox\\\"` interaction pattern,\\n it fixes an issue with VoiceOver when the select appears inside of an `aria-model=\\\"true\\\"`\\n element (e.g. a dialog). Without this `aria-owns`, the `aria-modal` on a dialog prevents\\n VoiceOver from \\\"seeing\\\" the select's listbox overlay for aria-activedescendant.\\n Using `aria-owns` re-parents the select overlay so that it works again.\\n See https://github.com/angular/components/issues/20694\\n-->\\n<div cdk-overlay-origin\\n     [attr.aria-owns]=\\\"panelOpen ? id + '-panel' : null\\\"\\n     class=\\\"mat-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #origin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-select-placeholder mat-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"origin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width!\\\"\\n  [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]>\\n    <div\\n      #panel\\n      role=\\\"listbox\\\"\\n      tabindex=\\\"-1\\\"\\n      class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\"\\n      [attr.id]=\\\"id + '-panel'\\\"\\n      [attr.aria-multiselectable]=\\\"multiple\\\"\\n      [attr.aria-label]=\\\"ariaLabel || null\\\"\\n      [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n      [ngClass]=\\\"panelClass\\\"\\n      [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\"\\n      (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n      [style.transformOrigin]=\\\"_transformOrigin\\\"\\n      [style.font-size.px]=\\\"_triggerFontSize\\\"\\n      (keydown)=\\\"_handleKeydown($event)\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\",\n      inputs: ['disabled', 'disableRipple', 'tabIndex'],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        'role': 'combobox',\n        'aria-autocomplete': 'none',\n        // TODO(crisbeto): the value for aria-haspopup should be `listbox`, but currently it's difficult\n        // to sync into Google, because of an outdated automated a11y check which flags it as an invalid\n        // value. At some point we should try to switch it back to being `listbox`.\n        'aria-haspopup': 'true',\n        'class': 'mat-select',\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'tabIndex',\n        '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n        '[attr.aria-expanded]': 'panelOpen',\n        '[attr.aria-label]': 'ariaLabel || null',\n        '[attr.aria-required]': 'required.toString()',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-invalid]': 'errorState',\n        '[attr.aria-describedby]': '_ariaDescribedby || null',\n        '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n        '[class.mat-select-disabled]': 'disabled',\n        '[class.mat-select-invalid]': 'errorState',\n        '[class.mat-select-required]': 'required',\n        '[class.mat-select-empty]': 'empty',\n        '[class.mat-select-multiple]': 'multiple',\n        '(keydown)': '_handleKeydown($event)',\n        '(focus)': '_onFocus()',\n        '(blur)': '_onBlur()'\n      },\n      animations: [matSelectAnimations.transformPanelWrap, matSelectAnimations.transformPanel],\n      providers: [{\n        provide: MatFormFieldControl,\n        useExisting: MatSelect\n      }, {\n        provide: MAT_OPTION_PARENT_COMPONENT,\n        useExisting: MatSelect\n      }],\n      styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;opacity:0}\\n\"]\n    }]\n  }], null, {\n    options: [{\n      type: ContentChildren,\n      args: [MatOption, {\n        descendants: true\n      }]\n    }],\n    optionGroups: [{\n      type: ContentChildren,\n      args: [MAT_OPTGROUP, {\n        descendants: true\n      }]\n    }],\n    customTrigger: [{\n      type: ContentChild,\n      args: [MAT_SELECT_TRIGGER]\n    }]\n  });\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSelectModule {}\nMatSelectModule.ɵfac = function MatSelectModule_Factory(t) {\n  return new (t || MatSelectModule)();\n};\nMatSelectModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatSelectModule\n});\nMatSelectModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER],\n  imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule, CdkScrollableModule, MatFormFieldModule, MatOptionModule, MatCommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule],\n      exports: [CdkScrollableModule, MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n      declarations: [MatSelect, MatSelectTrigger],\n      providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSelectModule, {\n    declarations: function () {\n      return [MatSelect, MatSelectTrigger];\n    },\n    imports: function () {\n      return [CommonModule, OverlayModule, MatOptionModule, MatCommonModule];\n    },\n    exports: function () {\n      return [CdkScrollableModule, MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule];\n    }\n  });\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, _MatSelectBase, matSelectAnimations };","map":{"version":3,"names":["Overlay","CdkConnectedOverlay","OverlayModule","CommonModule","InjectionToken","Directive","EventEmitter","ChangeDetectorRef","NgZone","ElementRef","Optional","Inject","Self","Attribute","ViewChild","Input","Output","Component","ViewEncapsulation","ChangeDetectionStrategy","ContentChildren","ContentChild","NgModule","mixinDisableRipple","mixinTabIndex","mixinDisabled","mixinErrorState","ErrorStateMatcher","_countGroupLabelsBeforeOption","_getOptionScrollPosition","MAT_OPTION_PARENT_COMPONENT","MatOption","MAT_OPTGROUP","MatOptionModule","MatCommonModule","MatFormField","MAT_FORM_FIELD","MatFormFieldControl","MatFormFieldModule","ViewportRuler","CdkScrollableModule","ActiveDescendantKeyManager","LiveAnnouncer","Directionality","coerceBooleanProperty","coerceNumberProperty","SelectionModel","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","ENTER","SPACE","hasModifierKey","A","NgForm","FormGroupDirective","NgControl","Subject","defer","merge","startWith","switchMap","take","filter","map","distinctUntilChanged","takeUntil","trigger","transition","query","animateChild","state","style","animate","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","ɵngcc5","ɵngcc6","ɵngcc7","ɵngcc8","_c0","_c1","MatSelect_span_7_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ctx_r2","ɵɵnextContext","ɵɵadvance","ɵɵtextInterpolate","placeholder","MatSelect_span_9_span_2_Template","ctx_r5","triggerValue","MatSelect_span_9_ng_content_4_Template","ɵɵprojection","MatSelect_span_9_Template","ɵɵtemplate","ctx_r3","ɵɵproperty","customTrigger","MatSelect_ng_template_16_Template","_r9","ɵɵgetCurrentView","ɵɵlistener","MatSelect_ng_template_16_Template_div_animation_transformPanel_done_3_listener","$event","ɵɵrestoreView","ctx_r8","ɵɵresetView","_panelDoneAnimatingStream","next","toState","MatSelect_ng_template_16_Template_div_keydown_3_listener","ctx_r10","_handleKeydown","ctx_r4","undefined","ɵɵclassMapInterpolate1","_getPanelTheme","ɵɵstyleProp","_transformOrigin","_triggerFontSize","panelClass","multiple","ɵɵattribute","id","ariaLabel","_getPanelAriaLabelledby","_c2","_c3","matSelectAnimations","transformPanelWrap","optional","transformPanel","transform","minWidth","opacity","getMatSelectDynamicMultipleError","Error","getMatSelectNonArrayValueError","getMatSelectNonFunctionValueError","nextUniqueId","SELECT_PANEL_MAX_HEIGHT","SELECT_PANEL_PADDING_X","SELECT_PANEL_INDENT_PADDING_X","SELECT_ITEM_HEIGHT_EM","SELECT_MULTIPLE_PANEL_PADDING_X","SELECT_PANEL_VIEWPORT_PADDING","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","reposition","MAT_SELECT_CONFIG","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","MatSelectChange","constructor","source","value","_MatSelectMixinBase","_elementRef","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","MAT_SELECT_TRIGGER","MatSelectTrigger","ɵfac","MatSelectTrigger_Factory","t","ɵdir","ɵɵdefineDirective","type","selectors","features","ɵɵProvidersFeature","useExisting","ngDevMode","ɵsetClassMetadata","args","selector","providers","_MatSelectBase","_viewportRuler","_changeDetectorRef","_ngZone","elementRef","_dir","_parentFormField","tabIndex","scrollStrategyFactory","_liveAnnouncer","_defaultOptions","_a","_b","_c","_panelOpen","_compareWith","o1","o2","_uid","_triggerAriaLabelledBy","_destroy","_onChange","_onTouched","_valueId","_overlayPanelClass","overlayPanelClass","_focused","controlType","_required","_multiple","_disableOptionCentering","disableOptionCentering","optionSelectionChanges","options","changes","pipe","option","onSelectionChange","onStable","openedChange","_openedStream","o","_closedStream","selectionChange","valueChange","valueAccessor","typeaheadDebounceInterval","_typeaheadDebounceInterval","_scrollStrategyFactory","_scrollStrategy","parseInt","focused","_placeholder","stateChanges","required","_selectionModel","compareWith","fn","_initializeSelection","_value","newValue","Array","isArray","_setSelectionByValue","_id","ngOnInit","subscribe","_panelDoneAnimating","panelOpen","ngAfterContentInit","_initKeyManager","changed","event","added","forEach","select","removed","deselect","_resetOptions","ngDoCheck","newAriaLabelledby","_getTriggerAriaLabelledby","element","nativeElement","setAttribute","removeAttribute","updateErrorState","ngOnChanges","_keyManager","withTypeAhead","ngOnDestroy","complete","toggle","close","open","_canOpen","withHorizontalOrientation","_highlightCorrectOption","markForCheck","_isRtl","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","disabled","selected","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","isOpenKey","manager","isTyping","altKey","preventDefault","previouslySelectedOption","onKeydown","selectedOption","announce","activeItem","_selectViaInteraction","ctrlKey","hasDeselectedOptions","some","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_onFocus","_onBlur","_onAttached","_overlayDir","positionChange","detectChanges","_positioningSettled","color","isEmpty","Promise","resolve","then","setInactiveStyles","clear","currentValue","_selectValue","_sortValues","correspondingOption","updateActiveItem","find","isSelected","error","console","warn","withVerticalOrientation","withHomeAndEnd","withAllowedModifierKeys","tabOut","focus","change","panel","_scrollOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_stateChanges","wasSelected","_propagateChanges","setActiveItem","toArray","sort","a","b","sortComparator","indexOf","fallbackValue","valueToEmit","emit","_getChangeEvent","setFirstItemActive","length","labelId","getLabelId","labelExpression","ariaLabelledby","_getAriaActiveDescendant","isOpen","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","shouldLabelFloat","_MatSelectBase_Factory","ɵɵdirectiveInject","ɵɵinjectAttribute","viewQuery","_MatSelectBase_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","inputs","errorStateMatcher","outputs","ɵɵInheritDefinitionFeature","ɵɵNgOnChangesFeature","ctorParameters","decorators","String","propDecorators","MatSelect","arguments","_scrollTop","_offsetY","_positions","originX","originY","overlayX","overlayY","_calculateOverlayScroll","selectedIndex","scrollBuffer","maxScroll","itemHeight","_getItemHeight","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","Math","min","max","_triggerRect","getBoundingClientRect","getComputedStyle","fontSize","_calculateOverlayPosition","overlayRef","overlayElement","index","labelCount","optionGroups","scrollTop","_calculateOverlayOffsetX","offsetX","overlayRect","viewportSize","getViewportSize","isRtl","paddingWidth","group","leftOverflow","left","rightOverflow","right","width","round","updatePosition","_calculateOverlayOffsetY","optionHeightAdjustment","height","maxOptionsDisplayed","floor","optionOffsetFromPanelTop","firstDisplayedIndex","_getItemCount","selectedDisplayIndex","partialItemHeight","_checkOverlayWithinViewport","topSpaceAvailable","top","bottomSpaceAvailable","bottom","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","items","panelHeight","scrollContainerHeight","selectedOptionOffset","ɵMatSelect_BaseFactory","MatSelect_Factory","ɵɵgetInheritedFactory","ɵcmp","ɵɵdefineComponent","contentQueries","MatSelect_ContentQueries","dirIndex","ɵɵcontentQuery","hostAttrs","hostVars","hostBindings","MatSelect_HostBindings","MatSelect_keydown_HostBindingHandler","MatSelect_focus_HostBindingHandler","MatSelect_blur_HostBindingHandler","toString","errorState","ɵɵclassProp","disableRipple","exportAs","ngContentSelectors","decls","vars","consts","template","MatSelect_Template","ɵɵprojectionDef","MatSelect_Template_div_click_1_listener","ɵɵelement","MatSelect_Template_ng_template_backdropClick_16_listener","MatSelect_Template_ng_template_attach_16_listener","MatSelect_Template_ng_template_detach_16_listener","_r0","ɵɵreference","dependencies","NgClass","NgSwitch","NgSwitchCase","NgSwitchDefault","CdkOverlayOrigin","styles","encapsulation","data","animation","changeDetection","descendants","None","OnPush","host","animations","MatSelectModule","MatSelectModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope"],"sources":["/home/ceo/mmmm/createyourevent/node_modules/@angular/material/__ivy_ngcc__/fesm2015/select.js"],"sourcesContent":["import { Overlay, CdkConnectedOverlay, OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, EventEmitter, ChangeDetectorRef, NgZone, ElementRef, Optional, Inject, Self, Attribute, ViewChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport { mixinDisableRipple, mixinTabIndex, mixinDisabled, mixinErrorState, ErrorStateMatcher, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { MatFormField, MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { ActiveDescendantKeyManager, LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, A } from '@angular/cdk/keycodes';\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, take, filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/forms';\nimport * as ɵngcc5 from '@angular/cdk/a11y';\nimport * as ɵngcc6 from '@angular/material/form-field';\nimport * as ɵngcc7 from '@angular/common';\nimport * as ɵngcc8 from '@angular/cdk/overlay';\n\nconst _c0 = [\"trigger\"];\nconst _c1 = [\"panel\"];\nfunction MatSelect_span_7_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 8);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.placeholder);\n} }\nfunction MatSelect_span_9_span_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 12);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r5.triggerValue);\n} }\nfunction MatSelect_span_9_ng_content_4_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 0, [\"*ngSwitchCase\", \"true\"]);\n} }\nfunction MatSelect_span_9_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 9);\n    ɵngcc0.ɵɵtext(1, \"\\n      \");\n    ɵngcc0.ɵɵtemplate(2, MatSelect_span_9_span_2_Template, 2, 1, \"span\", 10);\n    ɵngcc0.ɵɵtext(3, \"\\n      \");\n    ɵngcc0.ɵɵtemplate(4, MatSelect_span_9_ng_content_4_Template, 1, 0, \"ng-content\", 11);\n    ɵngcc0.ɵɵtext(5, \"\\n    \");\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngSwitch\", !!ctx_r3.customTrigger);\n    ɵngcc0.ɵɵadvance(4);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n} }\nfunction MatSelect_ng_template_16_Template(rf, ctx) { if (rf & 1) {\n    const _r9 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵtext(0, \"\\n  \");\n    ɵngcc0.ɵɵelementStart(1, \"div\", 13);\n    ɵngcc0.ɵɵtext(2, \"\\n    \");\n    ɵngcc0.ɵɵelementStart(3, \"div\", 14, 15);\n    ɵngcc0.ɵɵlistener(\"@transformPanel.done\", function MatSelect_ng_template_16_Template_div_animation_transformPanel_done_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r8._panelDoneAnimatingStream.next($event.toState)); })(\"keydown\", function MatSelect_ng_template_16_Template_div_keydown_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r10._handleKeydown($event)); });\n    ɵngcc0.ɵɵtext(5, \"\\n      \");\n    ɵngcc0.ɵɵprojection(6, 1);\n    ɵngcc0.ɵɵtext(7, \"\\n    \");\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtext(8, \"\\n  \");\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtext(9, \"\\n\");\n} if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"@transformPanelWrap\", undefined);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵclassMapInterpolate1(\"mat-select-panel \", ctx_r4._getPanelTheme(), \"\");\n    ɵngcc0.ɵɵstyleProp(\"transform-origin\", ctx_r4._transformOrigin)(\"font-size\", ctx_r4._triggerFontSize, \"px\");\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r4.panelClass)(\"@transformPanel\", ctx_r4.multiple ? \"showing-multiple\" : \"showing\");\n    ɵngcc0.ɵɵattribute(\"id\", ctx_r4.id + \"-panel\")(\"aria-multiselectable\", ctx_r4.multiple)(\"aria-label\", ctx_r4.ariaLabel || null)(\"aria-labelledby\", ctx_r4._getPanelAriaLabelledby());\n} }\nconst _c2 = [[[\"mat-select-trigger\"]], \"*\"];\nconst _c3 = [\"mat-select-trigger\", \"*\"];\nconst matSelectAnimations = {\n    /**\n     * This animation ensures the select's overlay panel animation (transformPanel) is called when\n     * closing the select.\n     * This is needed due to https://github.com/angular/angular/issues/23302\n     */\n    transformPanelWrap: trigger('transformPanelWrap', [\n        transition('* => void', query('@transformPanel', [animateChild()], { optional: true }))\n    ]),\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0.8)',\n            minWidth: '100%',\n            opacity: 0\n        })),\n        state('showing', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 32px)',\n            transform: 'scaleY(1)'\n        })),\n        state('showing-multiple', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 64px)',\n            transform: 'scaleY(1)'\n        })),\n        transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 })))\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextUniqueId = 0;\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n/** The max height of the select's overlay panel. */\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n/** The panel's padding on the x-axis. */\nconst SELECT_PANEL_PADDING_X = 16;\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nconst SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/** The height of the select items in `em` units. */\nconst SELECT_ITEM_HEIGHT_EM = 3;\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nconst SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nconst SELECT_PANEL_VIEWPORT_PADDING = 8;\n/** Injection token that determines the scroll handling while a select is open. */\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/** @docs-private */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** Injection token that can be used to provide the default options the select module. */\nconst MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/** Change event object that is emitted when the select value has changed. */\nclass MatSelectChange {\n    constructor(\n    /** Reference to the select that emitted the change event. */\n    source, \n    /** Current value of the select that emitted the event. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nconst _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(class {\n    constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._elementRef = _elementRef;\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}))));\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SELECT_TRIGGER = new InjectionToken('MatSelectTrigger');\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {\n}\nMatSelectTrigger.ɵfac = function MatSelectTrigger_Factory(t) { return new (t || MatSelectTrigger)(); };\nMatSelectTrigger.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatSelectTrigger, selectors: [[\"mat-select-trigger\"]], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }])] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectTrigger, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-select-trigger',\n                providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }]\n            }]\n    }], null, null); })();\n/** Base class with all of the `MatSelect` functionality. */\nclass _MatSelectBase extends _MatSelectMixinBase {\n    constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, _defaultOptions) {\n        var _a, _b, _c;\n        super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._viewportRuler = _viewportRuler;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._ngZone = _ngZone;\n        this._dir = _dir;\n        this._parentFormField = _parentFormField;\n        this._liveAnnouncer = _liveAnnouncer;\n        this._defaultOptions = _defaultOptions;\n        /** Whether or not the overlay panel is open. */\n        this._panelOpen = false;\n        /** Comparison function to specify which option is displayed. Defaults to object equality. */\n        this._compareWith = (o1, o2) => o1 === o2;\n        /** Unique id for this input. */\n        this._uid = `mat-select-${nextUniqueId++}`;\n        /** Current `ariar-labelledby` value for the select trigger. */\n        this._triggerAriaLabelledBy = null;\n        /** Emits whenever the component is destroyed. */\n        this._destroy = new Subject();\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when select has been touched` */\n        this._onTouched = () => { };\n        /** ID for the DOM node containing the select's value. */\n        this._valueId = `mat-select-value-${nextUniqueId++}`;\n        /** Emits when the panel element is finished transforming in. */\n        this._panelDoneAnimatingStream = new Subject();\n        this._overlayPanelClass = ((_a = this._defaultOptions) === null || _a === void 0 ? void 0 : _a.overlayPanelClass) || '';\n        this._focused = false;\n        /** A name for this control that can be used by `mat-form-field`. */\n        this.controlType = 'mat-select';\n        this._required = false;\n        this._multiple = false;\n        this._disableOptionCentering = (_c = (_b = this._defaultOptions) === null || _b === void 0 ? void 0 : _b.disableOptionCentering) !== null && _c !== void 0 ? _c : false;\n        /** Aria label of the select. */\n        this.ariaLabel = '';\n        /** Combined stream of all of the child options' change events. */\n        this.optionSelectionChanges = defer(() => {\n            const options = this.options;\n            if (options) {\n                return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n            }\n            return this._ngZone.onStable\n                .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n        });\n        /** Event emitted when the select panel has been toggled. */\n        this.openedChange = new EventEmitter();\n        /** Event emitted when the select has been opened. */\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n        /** Event emitted when the select has been closed. */\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n        /** Event emitted when the selected value has been changed by the user. */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the select changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n        // Note that we only want to set this when the defaults pass it in, otherwise it should\n        // stay as `undefined` so that it falls back to the default in the key manager.\n        if ((_defaultOptions === null || _defaultOptions === void 0 ? void 0 : _defaultOptions.typeaheadDebounceInterval) != null) {\n            this._typeaheadDebounceInterval = _defaultOptions.typeaheadDebounceInterval;\n        }\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this._scrollStrategy = this._scrollStrategyFactory();\n        this.tabIndex = parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n    /** Whether the select is focused. */\n    get focused() {\n        return this._focused || this._panelOpen;\n    }\n    /** Placeholder to be shown if no value has been selected. */\n    get placeholder() { return this._placeholder; }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /** Whether the component is required. */\n    get required() { return this._required; }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /** Whether the user should be allowed to select multiple options. */\n    get multiple() { return this._multiple; }\n    set multiple(value) {\n        if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectDynamicMultipleError();\n        }\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether to center the active option over the trigger. */\n    get disableOptionCentering() { return this._disableOptionCentering; }\n    set disableOptionCentering(value) {\n        this._disableOptionCentering = coerceBooleanProperty(value);\n    }\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() { return this._compareWith; }\n    set compareWith(fn) {\n        if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectNonFunctionValueError();\n        }\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /** Value of the select control. */\n    get value() { return this._value; }\n    set value(newValue) {\n        // Always re-assign an array, because it might have been mutated.\n        if (newValue !== this._value || (this._multiple && Array.isArray(newValue))) {\n            if (this.options) {\n                this._setSelectionByValue(newValue);\n            }\n            this._value = newValue;\n        }\n    }\n    /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n    get typeaheadDebounceInterval() { return this._typeaheadDebounceInterval; }\n    set typeaheadDebounceInterval(value) {\n        this._typeaheadDebounceInterval = coerceNumberProperty(value);\n    }\n    /** Unique id of the element. */\n    get id() { return this._id; }\n    set id(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next();\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe(() => this._panelDoneAnimating(this.panelOpen));\n    }\n    ngAfterContentInit() {\n        this._initKeyManager();\n        this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n            event.added.forEach(option => option.select());\n            event.removed.forEach(option => option.deselect());\n        });\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n            this._resetOptions();\n            this._initializeSelection();\n        });\n    }\n    ngDoCheck() {\n        const newAriaLabelledby = this._getTriggerAriaLabelledby();\n        // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n        // is computed as a result of a content query which can cause this binding to trigger a\n        // \"changed after checked\" error.\n        if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n            const element = this._elementRef.nativeElement;\n            this._triggerAriaLabelledBy = newAriaLabelledby;\n            if (newAriaLabelledby) {\n                element.setAttribute('aria-labelledby', newAriaLabelledby);\n            }\n            else {\n                element.removeAttribute('aria-labelledby');\n            }\n        }\n        if (this.ngControl) {\n            this.updateErrorState();\n        }\n    }\n    ngOnChanges(changes) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes['disabled']) {\n            this.stateChanges.next();\n        }\n        if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n            this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\n        }\n    }\n    ngOnDestroy() {\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n    }\n    /** Toggles the overlay panel open or closed. */\n    toggle() {\n        this.panelOpen ? this.close() : this.open();\n    }\n    /** Opens the overlay panel. */\n    open() {\n        if (this._canOpen()) {\n            this._panelOpen = true;\n            this._keyManager.withHorizontalOrientation(null);\n            this._highlightCorrectOption();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value) {\n        this.value = value;\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /** Whether or not the overlay panel is open. */\n    get panelOpen() {\n        return this._panelOpen;\n    }\n    /** The currently selected option. */\n    get selected() {\n        var _a, _b;\n        return this.multiple ? (((_a = this._selectionModel) === null || _a === void 0 ? void 0 : _a.selected) || []) :\n            (_b = this._selectionModel) === null || _b === void 0 ? void 0 : _b.selected[0];\n    }\n    /** The value displayed in the trigger. */\n    get triggerValue() {\n        if (this.empty) {\n            return '';\n        }\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n            if (this._isRtl()) {\n                selectedOptions.reverse();\n            }\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\n            return selectedOptions.join(', ');\n        }\n        return this._selectionModel.selected[0].viewValue;\n    }\n    /** Whether the element is in RTL mode. */\n    _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /** Handles all keydown events on the select. */\n    _handleKeydown(event) {\n        if (!this.disabled) {\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n    }\n    /** Handles keyboard events while the select is closed. */\n    _handleClosedKeydown(event) {\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        const manager = this._keyManager;\n        // Open the select on ALT + arrow key to match the native <select>\n        if (!manager.isTyping() && (isOpenKey && !hasModifierKey(event)) ||\n            ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        }\n        else if (!this.multiple) {\n            const previouslySelectedOption = this.selected;\n            manager.onKeydown(event);\n            const selectedOption = this.selected;\n            // Since the value has changed, we need to announce it ourselves.\n            if (selectedOption && previouslySelectedOption !== selectedOption) {\n                // We set a duration on the live announcement, because we want the live element to be\n                // cleared after a while so that users can't navigate to it using the arrow keys.\n                this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n            }\n        }\n    }\n    /** Handles keyboard events when the selected is open. */\n    _handleOpenKeydown(event) {\n        const manager = this._keyManager;\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const isTyping = manager.isTyping();\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n            // Don't do anything in this case if the user is typing,\n            // because the typing sequence can include the space key.\n        }\n        else if (!isTyping && (keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n            !hasModifierKey(event)) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        }\n        else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n            this.options.forEach(option => {\n                if (!option.disabled) {\n                    hasDeselectedOptions ? option.select() : option.deselect();\n                }\n            });\n        }\n        else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n        this._focused = false;\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached() {\n        this._overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n            this._changeDetectorRef.detectChanges();\n            this._positioningSettled();\n        });\n    }\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme() {\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    /** Whether the select has a value. */\n    get empty() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n            this.stateChanges.next();\n        });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    _setSelectionByValue(value) {\n        this._selectionModel.selected.forEach(option => option.setInactiveStyles());\n        this._selectionModel.clear();\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getMatSelectNonArrayValueError();\n            }\n            value.forEach((currentValue) => this._selectValue(currentValue));\n            this._sortValues();\n        }\n        else {\n            const correspondingOption = this._selectValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.updateActiveItem(correspondingOption);\n            }\n            else if (!this.panelOpen) {\n                // Otherwise reset the highlighted option. Note that we only want to do this while\n                // closed, because doing it while open can shift the user's focus unnecessarily.\n                this._keyManager.updateActiveItem(-1);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    _selectValue(value) {\n        const correspondingOption = this.options.find((option) => {\n            // Skip options that are already in the model. This allows us to handle cases\n            // where the same primitive value is selected multiple times.\n            if (this._selectionModel.isSelected(option)) {\n                return false;\n            }\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            }\n            catch (error) {\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        });\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    }\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead(this._typeaheadDebounceInterval)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n            .withHomeAndEnd()\n            .withAllowedModifierKeys(['shiftKey']);\n        this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this.panelOpen) {\n                // Select the active item when tabbing away. This is consistent with how the native\n                // select behaves. Note that we only want to do this in single selection mode.\n                if (!this.multiple && this._keyManager.activeItem) {\n                    this._keyManager.activeItem._selectViaInteraction();\n                }\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            }\n        });\n        this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this._panelOpen && this.panel) {\n                this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n            }\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                this._keyManager.activeItem._selectViaInteraction();\n            }\n        });\n    }\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    _resetOptions() {\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n            this._onSelect(event.source, event.isUserInput);\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\n                this.close();\n                this.focus();\n            }\n        });\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map(option => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        });\n    }\n    /** Invoked when an option is clicked. */\n    _onSelect(option, isUserInput) {\n        const wasSelected = this._selectionModel.isSelected(option);\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            if (this.value != null) {\n                this._propagateChanges(option.value);\n            }\n        }\n        else {\n            if (wasSelected !== option.selected) {\n                option.selected ? this._selectionModel.select(option) :\n                    this._selectionModel.deselect(option);\n            }\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n            if (this.multiple) {\n                this._sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mat-option`.\n                    this.focus();\n                }\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n        this.stateChanges.next();\n    }\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    _sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n            this._selectionModel.sort((a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit = null;\n        if (this.multiple) {\n            valueToEmit = this.selected.map(option => option.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    _highlightCorrectOption() {\n        if (this._keyManager) {\n            if (this.empty) {\n                this._keyManager.setFirstItemActive();\n            }\n            else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n    /** Whether the panel is allowed to open. */\n    _canOpen() {\n        var _a;\n        return !this._panelOpen && !this.disabled && ((_a = this.options) === null || _a === void 0 ? void 0 : _a.length) > 0;\n    }\n    /** Focuses the select element. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Gets the aria-labelledby for the select panel. */\n    _getPanelAriaLabelledby() {\n        var _a;\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = (_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId();\n        const labelExpression = (labelId ? labelId + ' ' : '');\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Determines the `aria-activedescendant` to be set on the host. */\n    _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n        return null;\n    }\n    /** Gets the aria-labelledby of the select component trigger. */\n    _getTriggerAriaLabelledby() {\n        var _a;\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = (_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId();\n        let value = (labelId ? labelId + ' ' : '') + this._valueId;\n        if (this.ariaLabelledby) {\n            value += ' ' + this.ariaLabelledby;\n        }\n        return value;\n    }\n    /** Called when the overlay panel is done animating. */\n    _panelDoneAnimating(isOpen) {\n        this.openedChange.emit(isOpen);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        this._ariaDescribedby = ids.join(' ');\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        return this._panelOpen || !this.empty || (this._focused && !!this._placeholder);\n    }\n}\n_MatSelectBase.ɵfac = function _MatSelectBase_Factory(t) { return new (t || _MatSelectBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgControl, 10), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.LiveAnnouncer), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_CONFIG, 8)); };\n_MatSelectBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatSelectBase, viewQuery: function _MatSelectBase_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n        ɵngcc0.ɵɵviewQuery(_c1, 5);\n        ɵngcc0.ɵɵviewQuery(CdkConnectedOverlay, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trigger = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._overlayDir = _t.first);\n    } }, inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], id: \"id\", placeholder: \"placeholder\", required: \"required\", multiple: \"multiple\", disableOptionCentering: \"disableOptionCentering\", compareWith: \"compareWith\", value: \"value\", typeaheadDebounceInterval: \"typeaheadDebounceInterval\", panelClass: \"panelClass\", ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], errorStateMatcher: \"errorStateMatcher\", sortComparator: \"sortComparator\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", _closedStream: \"closed\", selectionChange: \"selectionChange\", valueChange: \"valueChange\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\n_MatSelectBase.ctorParameters = () => [\n    { type: ViewportRuler },\n    { type: ChangeDetectorRef },\n    { type: NgZone },\n    { type: ErrorStateMatcher },\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD,] }] },\n    { type: NgControl, decorators: [{ type: Self }, { type: Optional }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SELECT_SCROLL_STRATEGY,] }] },\n    { type: LiveAnnouncer },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_SELECT_CONFIG,] }] }\n];\n_MatSelectBase.propDecorators = {\n    trigger: [{ type: ViewChild, args: ['trigger',] }],\n    panel: [{ type: ViewChild, args: ['panel',] }],\n    _overlayDir: [{ type: ViewChild, args: [CdkConnectedOverlay,] }],\n    panelClass: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    required: [{ type: Input }],\n    multiple: [{ type: Input }],\n    disableOptionCentering: [{ type: Input }],\n    compareWith: [{ type: Input }],\n    value: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    errorStateMatcher: [{ type: Input }],\n    typeaheadDebounceInterval: [{ type: Input }],\n    sortComparator: [{ type: Input }],\n    id: [{ type: Input }],\n    openedChange: [{ type: Output }],\n    _openedStream: [{ type: Output, args: ['opened',] }],\n    _closedStream: [{ type: Output, args: ['closed',] }],\n    selectionChange: [{ type: Output }],\n    valueChange: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatSelectBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc1.ViewportRuler }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc2.ErrorStateMatcher }, { type: ɵngcc0.ElementRef }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc6.MatFormField, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_FORM_FIELD]\n            }] }, { type: ɵngcc4.NgControl, decorators: [{\n                type: Self\n            }, {\n                type: Optional\n            }] }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SELECT_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc5.LiveAnnouncer }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_SELECT_CONFIG]\n            }] }]; }, { ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], openedChange: [{\n            type: Output\n        }], _openedStream: [{\n            type: Output,\n            args: ['opened']\n        }], _closedStream: [{\n            type: Output,\n            args: ['closed']\n        }], selectionChange: [{\n            type: Output\n        }], valueChange: [{\n            type: Output\n        }], id: [{\n            type: Input\n        }], placeholder: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], multiple: [{\n            type: Input\n        }], disableOptionCentering: [{\n            type: Input\n        }], compareWith: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], typeaheadDebounceInterval: [{\n            type: Input\n        }], trigger: [{\n            type: ViewChild,\n            args: ['trigger']\n        }], panel: [{\n            type: ViewChild,\n            args: ['panel']\n        }], _overlayDir: [{\n            type: ViewChild,\n            args: [CdkConnectedOverlay]\n        }], panelClass: [{\n            type: Input\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], errorStateMatcher: [{\n            type: Input\n        }], sortComparator: [{\n            type: Input\n        }] }); })();\nclass MatSelect extends _MatSelectBase {\n    constructor() {\n        super(...arguments);\n        /** The scroll position of the overlay panel, calculated to center the selected option. */\n        this._scrollTop = 0;\n        /** The cached font-size of the trigger element. */\n        this._triggerFontSize = 0;\n        /** The value of the select panel's transform-origin property. */\n        this._transformOrigin = 'top';\n        /**\n         * The y-offset of the overlay panel in relation to the trigger's top start corner.\n         * This must be adjusted to align the selected option text over the trigger text.\n         * when the panel opens. Will change based on the y-position of the selected option.\n         */\n        this._offsetY = 0;\n        this._positions = [\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'bottom',\n            },\n        ];\n    }\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n        const halfOptionHeight = itemHeight / 2;\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        this._viewportRuler.change().pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this.panelOpen) {\n                this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n                this._changeDetectorRef.markForCheck();\n            }\n        });\n    }\n    open() {\n        if (super._canOpen()) {\n            super.open();\n            this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n            // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n            // `parseInt` ignores the trailing 'px' and converts this to a number.\n            this._triggerFontSize =\n                parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n            this._calculateOverlayPosition();\n            // Set the font size on the panel element once it exists.\n            this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n                if (this._triggerFontSize && this._overlayDir.overlayRef &&\n                    this._overlayDir.overlayRef.overlayElement) {\n                    this._overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n                }\n            });\n        }\n    }\n    /** Scrolls the active option into view. */\n    _scrollOptionIntoView(index) {\n        const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n        const itemHeight = this._getItemHeight();\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            this.panel.nativeElement.scrollTop = 0;\n        }\n        else {\n            this.panel.nativeElement.scrollTop = _getOptionScrollPosition((index + labelCount) * itemHeight, itemHeight, this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n        }\n    }\n    _positioningSettled() {\n        this._calculateOverlayOffsetX();\n        this.panel.nativeElement.scrollTop = this._scrollTop;\n    }\n    _panelDoneAnimating(isOpen) {\n        if (this.panelOpen) {\n            this._scrollTop = 0;\n        }\n        else {\n            this._overlayDir.offsetX = 0;\n            this._changeDetectorRef.markForCheck();\n        }\n        super._panelDoneAnimating(isOpen);\n    }\n    _getChangeEvent(value) {\n        return new MatSelectChange(this, value);\n    }\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    _calculateOverlayOffsetX() {\n        const overlayRect = this._overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const isRtl = this._isRtl();\n        const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n            SELECT_PANEL_PADDING_X * 2;\n        let offsetX;\n        // Adjust the offset, depending on the option padding.\n        if (this.multiple) {\n            offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n        }\n        else if (this.disableOptionCentering) {\n            offsetX = SELECT_PANEL_PADDING_X;\n        }\n        else {\n            let selected = this._selectionModel.selected[0] || this.options.first;\n            offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n        }\n        // Invert the offset in LTR.\n        if (!isRtl) {\n            offsetX *= -1;\n        }\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this._overlayDir.offsetX = Math.round(offsetX);\n        this._overlayDir.overlayRef.updatePosition();\n    }\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n        let optionOffsetFromPanelTop;\n        // Disable offset if requested by user by returning 0 as value to offset\n        if (this.disableOptionCentering) {\n            return 0;\n        }\n        if (this._scrollTop === 0) {\n            optionOffsetFromPanelTop = selectedIndex * itemHeight;\n        }\n        else if (this._scrollTop === maxScroll) {\n            const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n            const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n            // The first item is partially out of the viewport. Therefore we need to calculate what\n            // portion of it is shown in the viewport and account for it in our offset.\n            let partialItemHeight = itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n            // Because the panel height is longer than the height of the options alone,\n            // there is always extra padding at the top or bottom of the panel. When\n            // scrolled to the very bottom, this padding is at the top of the panel and\n            // must be added to the offset.\n            optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n        }\n        else {\n            // If the option was scrolled to the middle of the panel using a scroll buffer,\n            // its offset will be the scroll buffer minus the half height that was added to\n            // center it.\n            optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n        }\n        // The final offset is the option's offset from the top, adjusted for the height difference,\n        // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n        // The value is rounded to prevent some browsers from blurring the content.\n        return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n    }\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    _checkOverlayWithinViewport(maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n        const panelHeightTop = Math.abs(this._offsetY);\n        const totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        }\n        else if (panelHeightTop > topSpaceAvailable) {\n            this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        }\n        else {\n            this._transformOrigin = this._getOriginBasedOnOption();\n        }\n    }\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this._scrollTop -= distanceBelowViewport;\n        this._offsetY -= distanceBelowViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this._scrollTop <= 0) {\n            this._scrollTop = 0;\n            this._offsetY = 0;\n            this._transformOrigin = `50% bottom 0px`;\n        }\n    }\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this._scrollTop += distanceAboveViewport;\n        this._offsetY += distanceAboveViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this._scrollTop >= maxScroll) {\n            this._scrollTop = maxScroll;\n            this._offsetY = 0;\n            this._transformOrigin = `50% top 0px`;\n            return;\n        }\n    }\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    _calculateOverlayPosition() {\n        const itemHeight = this._getItemHeight();\n        const items = this._getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n        // If no value is selected we open the popup to the first item.\n        let selectedOptionOffset;\n        if (this.empty) {\n            selectedOptionOffset = 0;\n        }\n        else {\n            selectedOptionOffset =\n                Math.max(this.options.toArray().indexOf(this._selectionModel.selected[0]), 0);\n        }\n        selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        const scrollBuffer = panelHeight / 2;\n        this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._checkOverlayWithinViewport(maxScroll);\n    }\n    /** Sets the transform origin point based on the selected option. */\n    _getOriginBasedOnOption() {\n        const itemHeight = this._getItemHeight();\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n        return `50% ${originY}px 0px`;\n    }\n    /** Calculates the height of the select's options. */\n    _getItemHeight() {\n        return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    _getItemCount() {\n        return this.options.length + this.optionGroups.length;\n    }\n}\nMatSelect.ɵfac = /*@__PURE__*/ function () { let ɵMatSelect_BaseFactory; return function MatSelect_Factory(t) { return (ɵMatSelect_BaseFactory || (ɵMatSelect_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatSelect)))(t || MatSelect); }; }();\nMatSelect.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatSelect, selectors: [[\"mat-select\"]], contentQueries: function MatSelect_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_SELECT_TRIGGER, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customTrigger = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n    } }, hostAttrs: [\"role\", \"combobox\", \"aria-autocomplete\", \"none\", \"aria-haspopup\", \"true\", 1, \"mat-select\"], hostVars: 20, hostBindings: function MatSelect_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function MatSelect_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); })(\"focus\", function MatSelect_focus_HostBindingHandler() { return ctx._onFocus(); })(\"blur\", function MatSelect_blur_HostBindingHandler() { return ctx._onBlur(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"tabindex\", ctx.tabIndex)(\"aria-controls\", ctx.panelOpen ? ctx.id + \"-panel\" : null)(\"aria-expanded\", ctx.panelOpen)(\"aria-label\", ctx.ariaLabel || null)(\"aria-required\", ctx.required.toString())(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-activedescendant\", ctx._getAriaActiveDescendant());\n        ɵngcc0.ɵɵclassProp(\"mat-select-disabled\", ctx.disabled)(\"mat-select-invalid\", ctx.errorState)(\"mat-select-required\", ctx.required)(\"mat-select-empty\", ctx.empty)(\"mat-select-multiple\", ctx.multiple);\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\" }, exportAs: [\"matSelect\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MatFormFieldControl, useExisting: MatSelect },\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c3, decls: 18, vars: 12, consts: [[\"cdk-overlay-origin\", \"\", 1, \"mat-select-trigger\", 3, \"click\"], [\"origin\", \"cdkOverlayOrigin\", \"trigger\", \"\"], [1, \"mat-select-value\", 3, \"ngSwitch\"], [\"class\", \"mat-select-placeholder mat-select-min-line\", 4, \"ngSwitchCase\"], [\"class\", \"mat-select-value-text\", 3, \"ngSwitch\", 4, \"ngSwitchCase\"], [1, \"mat-select-arrow-wrapper\"], [1, \"mat-select-arrow\"], [\"cdk-connected-overlay\", \"\", \"cdkConnectedOverlayLockPosition\", \"\", \"cdkConnectedOverlayHasBackdrop\", \"\", \"cdkConnectedOverlayBackdropClass\", \"cdk-overlay-transparent-backdrop\", 3, \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayOffsetY\", \"backdropClick\", \"attach\", \"detach\"], [1, \"mat-select-placeholder\", \"mat-select-min-line\"], [1, \"mat-select-value-text\", 3, \"ngSwitch\"], [\"class\", \"mat-select-min-line\", 4, \"ngSwitchDefault\"], [4, \"ngSwitchCase\"], [1, \"mat-select-min-line\"], [1, \"mat-select-panel-wrap\"], [\"role\", \"listbox\", \"tabindex\", \"-1\", 3, \"ngClass\", \"keydown\"], [\"panel\", \"\"]], template: function MatSelect_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c2);\n        ɵngcc0.ɵɵtext(0, \"\\n\");\n        ɵngcc0.ɵɵelementStart(1, \"div\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"click\", function MatSelect_Template_div_click_1_listener() { return ctx.toggle(); });\n        ɵngcc0.ɵɵtext(4, \"\\n  \");\n        ɵngcc0.ɵɵelementStart(5, \"div\", 2);\n        ɵngcc0.ɵɵtext(6, \"\\n    \");\n        ɵngcc0.ɵɵtemplate(7, MatSelect_span_7_Template, 2, 1, \"span\", 3);\n        ɵngcc0.ɵɵtext(8, \"\\n    \");\n        ɵngcc0.ɵɵtemplate(9, MatSelect_span_9_Template, 6, 2, \"span\", 4);\n        ɵngcc0.ɵɵtext(10, \"\\n  \");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtext(11, \"\\n\\n  \");\n        ɵngcc0.ɵɵelementStart(12, \"div\", 5);\n        ɵngcc0.ɵɵelement(13, \"div\", 6);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtext(14, \"\\n\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtext(15, \"\\n\\n\");\n        ɵngcc0.ɵɵtemplate(16, MatSelect_ng_template_16_Template, 10, 14, \"ng-template\", 7);\n        ɵngcc0.ɵɵlistener(\"backdropClick\", function MatSelect_Template_ng_template_backdropClick_16_listener() { return ctx.close(); })(\"attach\", function MatSelect_Template_ng_template_attach_16_listener() { return ctx._onAttached(); })(\"detach\", function MatSelect_Template_ng_template_detach_16_listener() { return ctx.close(); });\n        ɵngcc0.ɵɵtext(17, \"\\n\");\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(2);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"aria-owns\", ctx.panelOpen ? ctx.id + \"-panel\" : null);\n        ɵngcc0.ɵɵadvance(4);\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.empty);\n        ɵngcc0.ɵɵattribute(\"id\", ctx._valueId);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n        ɵngcc0.ɵɵadvance(7);\n        ɵngcc0.ɵɵproperty(\"cdkConnectedOverlayPanelClass\", ctx._overlayPanelClass)(\"cdkConnectedOverlayScrollStrategy\", ctx._scrollStrategy)(\"cdkConnectedOverlayOrigin\", _r0)(\"cdkConnectedOverlayOpen\", ctx.panelOpen)(\"cdkConnectedOverlayPositions\", ctx._positions)(\"cdkConnectedOverlayMinWidth\", ctx._triggerRect == null ? null : ctx._triggerRect.width)(\"cdkConnectedOverlayOffsetY\", ctx._offsetY);\n    } }, dependencies: [ɵngcc7.NgClass, ɵngcc7.NgSwitch, ɵngcc7.NgSwitchCase, ɵngcc7.NgSwitchDefault, ɵngcc8.CdkConnectedOverlay, ɵngcc8.CdkOverlayOrigin], styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;opacity:0}\\n\"], encapsulation: 2, data: { animation: [\n            matSelectAnimations.transformPanelWrap,\n            matSelectAnimations.transformPanel\n        ] }, changeDetection: 0 });\nMatSelect.propDecorators = {\n    options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }],\n    optionGroups: [{ type: ContentChildren, args: [MAT_OPTGROUP, { descendants: true },] }],\n    customTrigger: [{ type: ContentChild, args: [MAT_SELECT_TRIGGER,] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelect, [{\n        type: Component,\n        args: [{ selector: 'mat-select', exportAs: 'matSelect', template: \"<!--\\n Note that the select trigger element specifies `aria-owns` pointing to the listbox overlay.\\n While aria-owns is not required for the ARIA 1.2 `role=\\\"combobox\\\"` interaction pattern,\\n it fixes an issue with VoiceOver when the select appears inside of an `aria-model=\\\"true\\\"`\\n element (e.g. a dialog). Without this `aria-owns`, the `aria-modal` on a dialog prevents\\n VoiceOver from \\\"seeing\\\" the select's listbox overlay for aria-activedescendant.\\n Using `aria-owns` re-parents the select overlay so that it works again.\\n See https://github.com/angular/components/issues/20694\\n-->\\n<div cdk-overlay-origin\\n     [attr.aria-owns]=\\\"panelOpen ? id + '-panel' : null\\\"\\n     class=\\\"mat-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #origin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-select-placeholder mat-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"origin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width!\\\"\\n  [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]>\\n    <div\\n      #panel\\n      role=\\\"listbox\\\"\\n      tabindex=\\\"-1\\\"\\n      class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\"\\n      [attr.id]=\\\"id + '-panel'\\\"\\n      [attr.aria-multiselectable]=\\\"multiple\\\"\\n      [attr.aria-label]=\\\"ariaLabel || null\\\"\\n      [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n      [ngClass]=\\\"panelClass\\\"\\n      [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\"\\n      (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n      [style.transformOrigin]=\\\"_transformOrigin\\\"\\n      [style.font-size.px]=\\\"_triggerFontSize\\\"\\n      (keydown)=\\\"_handleKeydown($event)\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", inputs: ['disabled', 'disableRipple', 'tabIndex'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                    'role': 'combobox',\n                    'aria-autocomplete': 'none',\n                    // TODO(crisbeto): the value for aria-haspopup should be `listbox`, but currently it's difficult\n                    // to sync into Google, because of an outdated automated a11y check which flags it as an invalid\n                    // value. At some point we should try to switch it back to being `listbox`.\n                    'aria-haspopup': 'true',\n                    'class': 'mat-select',\n                    '[attr.id]': 'id',\n                    '[attr.tabindex]': 'tabIndex',\n                    '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n                    '[attr.aria-expanded]': 'panelOpen',\n                    '[attr.aria-label]': 'ariaLabel || null',\n                    '[attr.aria-required]': 'required.toString()',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                    '[class.mat-select-disabled]': 'disabled',\n                    '[class.mat-select-invalid]': 'errorState',\n                    '[class.mat-select-required]': 'required',\n                    '[class.mat-select-empty]': 'empty',\n                    '[class.mat-select-multiple]': 'multiple',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(focus)': '_onFocus()',\n                    '(blur)': '_onBlur()'\n                }, animations: [\n                    matSelectAnimations.transformPanelWrap,\n                    matSelectAnimations.transformPanel\n                ], providers: [\n                    { provide: MatFormFieldControl, useExisting: MatSelect },\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect }\n                ], styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;opacity:0}\\n\"] }]\n    }], null, { options: [{\n            type: ContentChildren,\n            args: [MatOption, { descendants: true }]\n        }], optionGroups: [{\n            type: ContentChildren,\n            args: [MAT_OPTGROUP, { descendants: true }]\n        }], customTrigger: [{\n            type: ContentChild,\n            args: [MAT_SELECT_TRIGGER]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSelectModule {\n}\nMatSelectModule.ɵfac = function MatSelectModule_Factory(t) { return new (t || MatSelectModule)(); };\nMatSelectModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatSelectModule });\nMatSelectModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER], imports: [CommonModule,\n        OverlayModule,\n        MatOptionModule,\n        MatCommonModule, CdkScrollableModule,\n        MatFormFieldModule,\n        MatOptionModule,\n        MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    OverlayModule,\n                    MatOptionModule,\n                    MatCommonModule,\n                ],\n                exports: [\n                    CdkScrollableModule,\n                    MatFormFieldModule,\n                    MatSelect,\n                    MatSelectTrigger,\n                    MatOptionModule,\n                    MatCommonModule\n                ],\n                declarations: [MatSelect, MatSelectTrigger],\n                providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSelectModule, { declarations: function () { return [MatSelect, MatSelectTrigger]; }, imports: function () { return [CommonModule,\n        OverlayModule,\n        MatOptionModule,\n        MatCommonModule]; }, exports: function () { return [CdkScrollableModule,\n        MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule,\n        MatCommonModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, _MatSelectBase, matSelectAnimations };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}