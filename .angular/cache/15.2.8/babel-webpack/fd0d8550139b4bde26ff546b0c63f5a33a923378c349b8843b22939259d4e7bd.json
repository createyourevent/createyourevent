{"ast":null,"code":"import { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy, isDataSource, _DisposeViewRepeaterStrategy } from '@angular/cdk/collections';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\nimport * as ɵngcc2 from '@angular/cdk/platform';\nimport * as ɵngcc3 from '@angular/cdk/scrolling';\nconst _c0 = [[[\"caption\"]], [[\"colgroup\"], [\"col\"]]];\nconst _c1 = [\"caption\", \"colgroup, col\"];\nfunction CdkTextColumn_th_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"th\", 3);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"text-align\", ctx_r0.justify);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\"\\n        \", ctx_r0.headerText, \"\\n      \");\n  }\n}\nfunction CdkTextColumn_td_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"td\", 4);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const data_r2 = ctx.$implicit;\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"text-align\", ctx_r1.justify);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\"\\n        \", ctx_r1.dataAccessor(data_r2, ctx_r1.name), \"\\n      \");\n  }\n}\nexport { DataSource } from '@angular/cdk/collections';\nimport { Platform } from '@angular/cdk/platform';\nimport { ViewportRuler, ScrollingModule } from '@angular/cdk/scrolling';\nimport { DOCUMENT } from '@angular/common';\nimport { InjectionToken, Directive, TemplateRef, Inject, Optional, Input, ContentChild, ElementRef, Injectable, NgZone, IterableDiffers, ViewContainerRef, Component, ChangeDetectionStrategy, ViewEncapsulation, EmbeddedViewRef, EventEmitter, ChangeDetectorRef, Attribute, SkipSelf, Output, ViewChild, ContentChildren, NgModule } from '@angular/core';\nimport { Subject, from, BehaviorSubject, isObservable, of } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Mixin to provide a directive with a function that checks if the sticky input has been\n * changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * @docs-private\n */\nfunction mixinHasStickyInput(base) {\n  return class extends base {\n    constructor(...args) {\n      super(...args);\n      this._sticky = false;\n      /** Whether the sticky input has changed since it was last checked. */\n      this._hasStickyChanged = false;\n    }\n    /** Whether sticky positioning should be applied. */\n    get sticky() {\n      return this._sticky;\n    }\n    set sticky(v) {\n      const prevValue = this._sticky;\n      this._sticky = coerceBooleanProperty(v);\n      this._hasStickyChanged = prevValue !== this._sticky;\n    }\n    /** Whether the sticky value has changed since this was last called. */\n    hasStickyChanged() {\n      const hasStickyChanged = this._hasStickyChanged;\n      this._hasStickyChanged = false;\n      return hasStickyChanged;\n    }\n    /** Resets the dirty check for cases where the sticky state has been used without checking. */\n    resetStickyChanged() {\n      this._hasStickyChanged = false;\n    }\n  };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Used to provide a table to some of the sub-components without causing a circular dependency.\n * @docs-private\n */\nconst CDK_TABLE = new InjectionToken('CDK_TABLE');\n/** Injection token that can be used to specify the text column options. */\nconst TEXT_COLUMN_OPTIONS = new InjectionToken('text-column-options');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass CdkCellDef {\n  constructor( /** @docs-private */template) {\n    this.template = template;\n  }\n}\nCdkCellDef.ɵfac = function CdkCellDef_Factory(t) {\n  return new (t || CdkCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n};\nCdkCellDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkCellDef,\n  selectors: [[\"\", \"cdkCellDef\", \"\"]]\n});\nCdkCellDef.ctorParameters = () => [{\n  type: TemplateRef\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkCellDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkCellDef]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }];\n  }, null);\n})();\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass CdkHeaderCellDef {\n  constructor( /** @docs-private */template) {\n    this.template = template;\n  }\n}\nCdkHeaderCellDef.ɵfac = function CdkHeaderCellDef_Factory(t) {\n  return new (t || CdkHeaderCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n};\nCdkHeaderCellDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkHeaderCellDef,\n  selectors: [[\"\", \"cdkHeaderCellDef\", \"\"]]\n});\nCdkHeaderCellDef.ctorParameters = () => [{\n  type: TemplateRef\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderCellDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkHeaderCellDef]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }];\n  }, null);\n})();\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass CdkFooterCellDef {\n  constructor( /** @docs-private */template) {\n    this.template = template;\n  }\n}\nCdkFooterCellDef.ɵfac = function CdkFooterCellDef_Factory(t) {\n  return new (t || CdkFooterCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n};\nCdkFooterCellDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkFooterCellDef,\n  selectors: [[\"\", \"cdkFooterCellDef\", \"\"]]\n});\nCdkFooterCellDef.ctorParameters = () => [{\n  type: TemplateRef\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterCellDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkFooterCellDef]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }];\n  }, null);\n})();\n// Boilerplate for applying mixins to CdkColumnDef.\n/** @docs-private */\nclass CdkColumnDefBase {}\nconst _CdkColumnDefBase = mixinHasStickyInput(CdkColumnDefBase);\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\nclass CdkColumnDef extends _CdkColumnDefBase {\n  constructor(_table) {\n    super();\n    this._table = _table;\n    this._stickyEnd = false;\n  }\n  /** Unique name for this column. */\n  get name() {\n    return this._name;\n  }\n  set name(name) {\n    this._setNameInput(name);\n  }\n  /**\n   * Whether this column should be sticky positioned on the end of the row. Should make sure\n   * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n   * has been changed.\n   */\n  get stickyEnd() {\n    return this._stickyEnd;\n  }\n  set stickyEnd(v) {\n    const prevValue = this._stickyEnd;\n    this._stickyEnd = coerceBooleanProperty(v);\n    this._hasStickyChanged = prevValue !== this._stickyEnd;\n  }\n  /**\n   * Overridable method that sets the css classes that will be added to every cell in this\n   * column.\n   * In the future, columnCssClassName will change from type string[] to string and this\n   * will set a single string value.\n   * @docs-private\n   */\n  _updateColumnCssClassName() {\n    this._columnCssClassName = [`cdk-column-${this.cssClassFriendlyName}`];\n  }\n  /**\n   * This has been extracted to a util because of TS 4 and VE.\n   * View Engine doesn't support property rename inheritance.\n   * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n   * @docs-private\n   */\n  _setNameInput(value) {\n    // If the directive is set without a name (updated programmatically), then this setter will\n    // trigger with an empty string and should not overwrite the programmatically set value.\n    if (value) {\n      this._name = value;\n      this.cssClassFriendlyName = value.replace(/[^a-z0-9_-]/ig, '-');\n      this._updateColumnCssClassName();\n    }\n  }\n}\nCdkColumnDef.ɵfac = function CdkColumnDef_Factory(t) {\n  return new (t || CdkColumnDef)(ɵngcc0.ɵɵdirectiveInject(CDK_TABLE, 8));\n};\nCdkColumnDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkColumnDef,\n  selectors: [[\"\", \"cdkColumnDef\", \"\"]],\n  contentQueries: function CdkColumnDef_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkCellDef, 5);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkHeaderCellDef, 5);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkFooterCellDef, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cell = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerCell = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.footerCell = _t.first);\n    }\n  },\n  inputs: {\n    sticky: \"sticky\",\n    name: [\"cdkColumnDef\", \"name\"],\n    stickyEnd: \"stickyEnd\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: 'MAT_SORT_HEADER_COLUMN_DEF',\n    useExisting: CdkColumnDef\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nCdkColumnDef.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [CDK_TABLE]\n  }, {\n    type: Optional\n  }]\n}];\nCdkColumnDef.propDecorators = {\n  name: [{\n    type: Input,\n    args: ['cdkColumnDef']\n  }],\n  stickyEnd: [{\n    type: Input,\n    args: ['stickyEnd']\n  }],\n  cell: [{\n    type: ContentChild,\n    args: [CdkCellDef]\n  }],\n  headerCell: [{\n    type: ContentChild,\n    args: [CdkHeaderCellDef]\n  }],\n  footerCell: [{\n    type: ContentChild,\n    args: [CdkFooterCellDef]\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkColumnDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkColumnDef]',\n      inputs: ['sticky'],\n      providers: [{\n        provide: 'MAT_SORT_HEADER_COLUMN_DEF',\n        useExisting: CdkColumnDef\n      }]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_TABLE]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, {\n    name: [{\n      type: Input,\n      args: ['cdkColumnDef']\n    }],\n    stickyEnd: [{\n      type: Input,\n      args: ['stickyEnd']\n    }],\n    cell: [{\n      type: ContentChild,\n      args: [CdkCellDef]\n    }],\n    headerCell: [{\n      type: ContentChild,\n      args: [CdkHeaderCellDef]\n    }],\n    footerCell: [{\n      type: ContentChild,\n      args: [CdkFooterCellDef]\n    }]\n  });\n})();\n/** Base class for the cells. Adds a CSS classname that identifies the column it renders in. */\nclass BaseCdkCell {\n  constructor(columnDef, elementRef) {\n    // If IE 11 is dropped before we switch to setting a single class name, change to multi param\n    // with destructuring.\n    const classList = elementRef.nativeElement.classList;\n    for (const className of columnDef._columnCssClassName) {\n      classList.add(className);\n    }\n  }\n}\n/** Header cell template container that adds the right classes and role. */\nclass CdkHeaderCell extends BaseCdkCell {\n  constructor(columnDef, elementRef) {\n    super(columnDef, elementRef);\n  }\n}\nCdkHeaderCell.ɵfac = function CdkHeaderCell_Factory(t) {\n  return new (t || CdkHeaderCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\nCdkHeaderCell.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkHeaderCell,\n  selectors: [[\"cdk-header-cell\"], [\"th\", \"cdk-header-cell\", \"\"]],\n  hostAttrs: [\"role\", \"columnheader\", 1, \"cdk-header-cell\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nCdkHeaderCell.ctorParameters = () => [{\n  type: CdkColumnDef\n}, {\n  type: ElementRef\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderCell, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-header-cell, th[cdk-header-cell]',\n      host: {\n        'class': 'cdk-header-cell',\n        'role': 'columnheader'\n      }\n    }]\n  }], function () {\n    return [{\n      type: CdkColumnDef\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/** Footer cell template container that adds the right classes and role. */\nclass CdkFooterCell extends BaseCdkCell {\n  constructor(columnDef, elementRef) {\n    var _a;\n    super(columnDef, elementRef);\n    if (((_a = columnDef._table) === null || _a === void 0 ? void 0 : _a._elementRef.nativeElement.nodeType) === 1) {\n      const tableRole = columnDef._table._elementRef.nativeElement.getAttribute('role');\n      const role = tableRole === 'grid' || tableRole === 'treegrid' ? 'gridcell' : 'cell';\n      elementRef.nativeElement.setAttribute('role', role);\n    }\n  }\n}\nCdkFooterCell.ɵfac = function CdkFooterCell_Factory(t) {\n  return new (t || CdkFooterCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\nCdkFooterCell.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkFooterCell,\n  selectors: [[\"cdk-footer-cell\"], [\"td\", \"cdk-footer-cell\", \"\"]],\n  hostAttrs: [1, \"cdk-footer-cell\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nCdkFooterCell.ctorParameters = () => [{\n  type: CdkColumnDef\n}, {\n  type: ElementRef\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterCell, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-footer-cell, td[cdk-footer-cell]',\n      host: {\n        'class': 'cdk-footer-cell'\n      }\n    }]\n  }], function () {\n    return [{\n      type: CdkColumnDef\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/** Cell template container that adds the right classes and role. */\nclass CdkCell extends BaseCdkCell {\n  constructor(columnDef, elementRef) {\n    var _a;\n    super(columnDef, elementRef);\n    if (((_a = columnDef._table) === null || _a === void 0 ? void 0 : _a._elementRef.nativeElement.nodeType) === 1) {\n      const tableRole = columnDef._table._elementRef.nativeElement.getAttribute('role');\n      const role = tableRole === 'grid' || tableRole === 'treegrid' ? 'gridcell' : 'cell';\n      elementRef.nativeElement.setAttribute('role', role);\n    }\n  }\n}\nCdkCell.ɵfac = function CdkCell_Factory(t) {\n  return new (t || CdkCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\nCdkCell.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkCell,\n  selectors: [[\"cdk-cell\"], [\"td\", \"cdk-cell\", \"\"]],\n  hostAttrs: [1, \"cdk-cell\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nCdkCell.ctorParameters = () => [{\n  type: CdkColumnDef\n}, {\n  type: ElementRef\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkCell, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-cell, td[cdk-cell]',\n      host: {\n        'class': 'cdk-cell'\n      }\n    }]\n  }], function () {\n    return [{\n      type: CdkColumnDef\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @docs-private\n */\nclass _Schedule {\n  constructor() {\n    this.tasks = [];\n    this.endTasks = [];\n  }\n}\n/** Injection token used to provide a coalesced style scheduler. */\nconst _COALESCED_STYLE_SCHEDULER = new InjectionToken('_COALESCED_STYLE_SCHEDULER');\n/**\n * Allows grouping up CSSDom mutations after the current execution context.\n * This can significantly improve performance when separate consecutive functions are\n * reading from the CSSDom and then mutating it.\n *\n * @docs-private\n */\nclass _CoalescedStyleScheduler {\n  constructor(_ngZone) {\n    this._ngZone = _ngZone;\n    this._currentSchedule = null;\n    this._destroyed = new Subject();\n  }\n  /**\n   * Schedules the specified task to run at the end of the current VM turn.\n   */\n  schedule(task) {\n    this._createScheduleIfNeeded();\n    this._currentSchedule.tasks.push(task);\n  }\n  /**\n   * Schedules the specified task to run after other scheduled tasks at the end of the current\n   * VM turn.\n   */\n  scheduleEnd(task) {\n    this._createScheduleIfNeeded();\n    this._currentSchedule.endTasks.push(task);\n  }\n  /** Prevent any further tasks from running. */\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n  _createScheduleIfNeeded() {\n    if (this._currentSchedule) {\n      return;\n    }\n    this._currentSchedule = new _Schedule();\n    this._getScheduleObservable().pipe(takeUntil(this._destroyed)).subscribe(() => {\n      while (this._currentSchedule.tasks.length || this._currentSchedule.endTasks.length) {\n        const schedule = this._currentSchedule;\n        // Capture new tasks scheduled by the current set of tasks.\n        this._currentSchedule = new _Schedule();\n        for (const task of schedule.tasks) {\n          task();\n        }\n        for (const task of schedule.endTasks) {\n          task();\n        }\n      }\n      this._currentSchedule = null;\n    });\n  }\n  _getScheduleObservable() {\n    // Use onStable when in the context of an ongoing change detection cycle so that we\n    // do not accidentally trigger additional cycles.\n    return this._ngZone.isStable ? from(Promise.resolve(undefined)) : this._ngZone.onStable.pipe(take(1));\n  }\n}\n_CoalescedStyleScheduler.ɵfac = function _CoalescedStyleScheduler_Factory(t) {\n  return new (t || _CoalescedStyleScheduler)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n};\n_CoalescedStyleScheduler.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: _CoalescedStyleScheduler,\n  factory: _CoalescedStyleScheduler.ɵfac\n});\n_CoalescedStyleScheduler.ctorParameters = () => [{\n  type: NgZone\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_CoalescedStyleScheduler, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ɵngcc0.NgZone\n    }];\n  }, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n */\nconst CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n */\nclass BaseRowDef {\n  constructor( /** @docs-private */template, _differs) {\n    this.template = template;\n    this._differs = _differs;\n  }\n  ngOnChanges(changes) {\n    // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n    // of the columns property or an empty array if none is provided.\n    if (!this._columnsDiffer) {\n      const columns = changes['columns'] && changes['columns'].currentValue || [];\n      this._columnsDiffer = this._differs.find(columns).create();\n      this._columnsDiffer.diff(columns);\n    }\n  }\n  /**\n   * Returns the difference between the current columns and the columns from the last diff, or null\n   * if there is no difference.\n   */\n  getColumnsDiff() {\n    return this._columnsDiffer.diff(this.columns);\n  }\n  /** Gets this row def's relevant cell template from the provided column def. */\n  extractCellTemplate(column) {\n    if (this instanceof CdkHeaderRowDef) {\n      return column.headerCell.template;\n    }\n    if (this instanceof CdkFooterRowDef) {\n      return column.footerCell.template;\n    } else {\n      return column.cell.template;\n    }\n  }\n}\nBaseRowDef.ɵfac = function BaseRowDef_Factory(t) {\n  return new (t || BaseRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers));\n};\nBaseRowDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: BaseRowDef,\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\nBaseRowDef.ctorParameters = () => [{\n  type: TemplateRef\n}, {\n  type: IterableDiffers\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BaseRowDef, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }, {\n      type: ɵngcc0.IterableDiffers\n    }];\n  }, null);\n})();\n// Boilerplate for applying mixins to CdkHeaderRowDef.\n/** @docs-private */\nclass CdkHeaderRowDefBase extends BaseRowDef {}\nconst _CdkHeaderRowDefBase = mixinHasStickyInput(CdkHeaderRowDefBase);\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass CdkHeaderRowDef extends _CdkHeaderRowDefBase {\n  constructor(template, _differs, _table) {\n    super(template, _differs);\n    this._table = _table;\n  }\n  // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n  // Explicitly define it so that the method is called as part of the Angular lifecycle.\n  ngOnChanges(changes) {\n    super.ngOnChanges(changes);\n  }\n}\nCdkHeaderRowDef.ɵfac = function CdkHeaderRowDef_Factory(t) {\n  return new (t || CdkHeaderRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(CDK_TABLE, 8));\n};\nCdkHeaderRowDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkHeaderRowDef,\n  selectors: [[\"\", \"cdkHeaderRowDef\", \"\"]],\n  inputs: {\n    columns: [\"cdkHeaderRowDef\", \"columns\"],\n    sticky: [\"cdkHeaderRowDefSticky\", \"sticky\"]\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature]\n});\nCdkHeaderRowDef.ctorParameters = () => [{\n  type: TemplateRef\n}, {\n  type: IterableDiffers\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [CDK_TABLE]\n  }, {\n    type: Optional\n  }]\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderRowDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkHeaderRowDef]',\n      inputs: ['columns: cdkHeaderRowDef', 'sticky: cdkHeaderRowDefSticky']\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }, {\n      type: ɵngcc0.IterableDiffers\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_TABLE]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n// Boilerplate for applying mixins to CdkFooterRowDef.\n/** @docs-private */\nclass CdkFooterRowDefBase extends BaseRowDef {}\nconst _CdkFooterRowDefBase = mixinHasStickyInput(CdkFooterRowDefBase);\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass CdkFooterRowDef extends _CdkFooterRowDefBase {\n  constructor(template, _differs, _table) {\n    super(template, _differs);\n    this._table = _table;\n  }\n  // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n  // Explicitly define it so that the method is called as part of the Angular lifecycle.\n  ngOnChanges(changes) {\n    super.ngOnChanges(changes);\n  }\n}\nCdkFooterRowDef.ɵfac = function CdkFooterRowDef_Factory(t) {\n  return new (t || CdkFooterRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(CDK_TABLE, 8));\n};\nCdkFooterRowDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkFooterRowDef,\n  selectors: [[\"\", \"cdkFooterRowDef\", \"\"]],\n  inputs: {\n    columns: [\"cdkFooterRowDef\", \"columns\"],\n    sticky: [\"cdkFooterRowDefSticky\", \"sticky\"]\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature]\n});\nCdkFooterRowDef.ctorParameters = () => [{\n  type: TemplateRef\n}, {\n  type: IterableDiffers\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [CDK_TABLE]\n  }, {\n    type: Optional\n  }]\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterRowDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkFooterRowDef]',\n      inputs: ['columns: cdkFooterRowDef', 'sticky: cdkFooterRowDefSticky']\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }, {\n      type: ɵngcc0.IterableDiffers\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_TABLE]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nclass CdkRowDef extends BaseRowDef {\n  // TODO(andrewseguin): Add an input for providing a switch function to determine\n  //   if this template should be used.\n  constructor(template, _differs, _table) {\n    super(template, _differs);\n    this._table = _table;\n  }\n}\nCdkRowDef.ɵfac = function CdkRowDef_Factory(t) {\n  return new (t || CdkRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(CDK_TABLE, 8));\n};\nCdkRowDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkRowDef,\n  selectors: [[\"\", \"cdkRowDef\", \"\"]],\n  inputs: {\n    columns: [\"cdkRowDefColumns\", \"columns\"],\n    when: [\"cdkRowDefWhen\", \"when\"]\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nCdkRowDef.ctorParameters = () => [{\n  type: TemplateRef\n}, {\n  type: IterableDiffers\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [CDK_TABLE]\n  }, {\n    type: Optional\n  }]\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkRowDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkRowDef]',\n      inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen']\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }, {\n      type: ɵngcc0.IterableDiffers\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_TABLE]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * Outlet for rendering cells inside of a row or header row.\n * @docs-private\n */\nclass CdkCellOutlet {\n  constructor(_viewContainer) {\n    this._viewContainer = _viewContainer;\n    CdkCellOutlet.mostRecentCellOutlet = this;\n  }\n  ngOnDestroy() {\n    // If this was the last outlet being rendered in the view, remove the reference\n    // from the static property after it has been destroyed to avoid leaking memory.\n    if (CdkCellOutlet.mostRecentCellOutlet === this) {\n      CdkCellOutlet.mostRecentCellOutlet = null;\n    }\n  }\n}\nCdkCellOutlet.ɵfac = function CdkCellOutlet_Factory(t) {\n  return new (t || CdkCellOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n};\nCdkCellOutlet.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkCellOutlet,\n  selectors: [[\"\", \"cdkCellOutlet\", \"\"]]\n});\n/**\n * Static property containing the latest constructed instance of this class.\n * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n * createEmbeddedView. After one of these components are created, this property will provide\n * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n * construct the cells with the provided context.\n */\nCdkCellOutlet.mostRecentCellOutlet = null;\nCdkCellOutlet.ctorParameters = () => [{\n  type: ViewContainerRef\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkCellOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkCellOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }];\n  }, null);\n})();\n/** Header template container that contains the cell outlet. Adds the right class and role. */\nclass CdkHeaderRow {}\nCdkHeaderRow.ɵfac = function CdkHeaderRow_Factory(t) {\n  return new (t || CdkHeaderRow)();\n};\nCdkHeaderRow.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: CdkHeaderRow,\n  selectors: [[\"cdk-header-row\"], [\"tr\", \"cdk-header-row\", \"\"]],\n  hostAttrs: [\"role\", \"row\", 1, \"cdk-header-row\"],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkCellOutlet\", \"\"]],\n  template: function CdkHeaderRow_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementContainer(0, 0);\n    }\n  },\n  dependencies: [CdkCellOutlet],\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderRow, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-header-row, tr[cdk-header-row]',\n      template: CDK_ROW_TEMPLATE,\n      host: {\n        'class': 'cdk-header-row',\n        'role': 'row'\n      },\n      // See note on CdkTable for explanation on why this uses the default change detection strategy.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], null, null);\n})();\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\nclass CdkFooterRow {}\nCdkFooterRow.ɵfac = function CdkFooterRow_Factory(t) {\n  return new (t || CdkFooterRow)();\n};\nCdkFooterRow.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: CdkFooterRow,\n  selectors: [[\"cdk-footer-row\"], [\"tr\", \"cdk-footer-row\", \"\"]],\n  hostAttrs: [\"role\", \"row\", 1, \"cdk-footer-row\"],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkCellOutlet\", \"\"]],\n  template: function CdkFooterRow_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementContainer(0, 0);\n    }\n  },\n  dependencies: [CdkCellOutlet],\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterRow, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-footer-row, tr[cdk-footer-row]',\n      template: CDK_ROW_TEMPLATE,\n      host: {\n        'class': 'cdk-footer-row',\n        'role': 'row'\n      },\n      // See note on CdkTable for explanation on why this uses the default change detection strategy.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], null, null);\n})();\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\nclass CdkRow {}\nCdkRow.ɵfac = function CdkRow_Factory(t) {\n  return new (t || CdkRow)();\n};\nCdkRow.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: CdkRow,\n  selectors: [[\"cdk-row\"], [\"tr\", \"cdk-row\", \"\"]],\n  hostAttrs: [\"role\", \"row\", 1, \"cdk-row\"],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkCellOutlet\", \"\"]],\n  template: function CdkRow_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementContainer(0, 0);\n    }\n  },\n  dependencies: [CdkCellOutlet],\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkRow, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-row, tr[cdk-row]',\n      template: CDK_ROW_TEMPLATE,\n      host: {\n        'class': 'cdk-row',\n        'role': 'row'\n      },\n      // See note on CdkTable for explanation on why this uses the default change detection strategy.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], null, null);\n})();\n/** Row that can be used to display a message when no data is shown in the table. */\nclass CdkNoDataRow {\n  constructor(templateRef) {\n    this.templateRef = templateRef;\n  }\n}\nCdkNoDataRow.ɵfac = function CdkNoDataRow_Factory(t) {\n  return new (t || CdkNoDataRow)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n};\nCdkNoDataRow.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkNoDataRow,\n  selectors: [[\"ng-template\", \"cdkNoDataRow\", \"\"]]\n});\nCdkNoDataRow.ctorParameters = () => [{\n  type: TemplateRef\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkNoDataRow, [{\n    type: Directive,\n    args: [{\n      selector: 'ng-template[cdkNoDataRow]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }];\n  }, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * List of all possible directions that can be used for sticky positioning.\n * @docs-private\n */\nconst STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\n/**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * @docs-private\n */\nclass StickyStyler {\n  /**\n   * @param _isNativeHtmlTable Whether the sticky logic should be based on a table\n   *     that uses the native `<table>` element.\n   * @param _stickCellCss The CSS class that will be applied to every row/cell that has\n   *     sticky positioning applied.\n   * @param direction The directionality context of the table (ltr/rtl); affects column positioning\n   *     by reversing left/right positions.\n   * @param _isBrowser Whether the table is currently being rendered on the server or the client.\n   * @param _needsPositionStickyOnElement Whether we need to specify position: sticky on cells\n   *     using inline styles. If false, it is assumed that position: sticky is included in\n   *     the component stylesheet for _stickCellCss.\n   * @param _positionListener A listener that is notified of changes to sticky rows/columns\n   *     and their dimensions.\n   */\n  constructor(_isNativeHtmlTable, _stickCellCss, direction, _coalescedStyleScheduler, _isBrowser = true, _needsPositionStickyOnElement = true, _positionListener) {\n    this._isNativeHtmlTable = _isNativeHtmlTable;\n    this._stickCellCss = _stickCellCss;\n    this.direction = direction;\n    this._coalescedStyleScheduler = _coalescedStyleScheduler;\n    this._isBrowser = _isBrowser;\n    this._needsPositionStickyOnElement = _needsPositionStickyOnElement;\n    this._positionListener = _positionListener;\n    this._cachedCellWidths = [];\n    this._borderCellCss = {\n      'top': `${_stickCellCss}-border-elem-top`,\n      'bottom': `${_stickCellCss}-border-elem-bottom`,\n      'left': `${_stickCellCss}-border-elem-left`,\n      'right': `${_stickCellCss}-border-elem-right`\n    };\n  }\n  /**\n   * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n   * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n   * @param rows The list of rows that should be cleared from sticking in the provided directions\n   * @param stickyDirections The directions that should no longer be set as sticky on the rows.\n   */\n  clearStickyPositioning(rows, stickyDirections) {\n    const elementsToClear = [];\n    for (const row of rows) {\n      // If the row isn't an element (e.g. if it's an `ng-container`),\n      // it won't have inline styles or `children` so we skip it.\n      if (row.nodeType !== row.ELEMENT_NODE) {\n        continue;\n      }\n      elementsToClear.push(row);\n      for (let i = 0; i < row.children.length; i++) {\n        elementsToClear.push(row.children[i]);\n      }\n    }\n    // Coalesce with sticky row/column updates (and potentially other changes like column resize).\n    this._coalescedStyleScheduler.schedule(() => {\n      for (const element of elementsToClear) {\n        this._removeStickyStyle(element, stickyDirections);\n      }\n    });\n  }\n  /**\n   * Applies sticky left and right positions to the cells of each row according to the sticky\n   * states of the rendered column definitions.\n   * @param rows The rows that should have its set of cells stuck according to the sticky states.\n   * @param stickyStartStates A list of boolean states where each state represents whether the cell\n   *     in this index position should be stuck to the start of the row.\n   * @param stickyEndStates A list of boolean states where each state represents whether the cell\n   *     in this index position should be stuck to the end of the row.\n   * @param recalculateCellWidths Whether the sticky styler should recalculate the width of each\n   *     column cell. If `false` cached widths will be used instead.\n   */\n  updateStickyColumns(rows, stickyStartStates, stickyEndStates, recalculateCellWidths = true) {\n    if (!rows.length || !this._isBrowser || !(stickyStartStates.some(state => state) || stickyEndStates.some(state => state))) {\n      if (this._positionListener) {\n        this._positionListener.stickyColumnsUpdated({\n          sizes: []\n        });\n        this._positionListener.stickyEndColumnsUpdated({\n          sizes: []\n        });\n      }\n      return;\n    }\n    const firstRow = rows[0];\n    const numCells = firstRow.children.length;\n    const cellWidths = this._getCellWidths(firstRow, recalculateCellWidths);\n    const startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n    const endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n    const lastStickyStart = stickyStartStates.lastIndexOf(true);\n    const firstStickyEnd = stickyEndStates.indexOf(true);\n    // Coalesce with sticky row updates (and potentially other changes like column resize).\n    this._coalescedStyleScheduler.schedule(() => {\n      const isRtl = this.direction === 'rtl';\n      const start = isRtl ? 'right' : 'left';\n      const end = isRtl ? 'left' : 'right';\n      for (const row of rows) {\n        for (let i = 0; i < numCells; i++) {\n          const cell = row.children[i];\n          if (stickyStartStates[i]) {\n            this._addStickyStyle(cell, start, startPositions[i], i === lastStickyStart);\n          }\n          if (stickyEndStates[i]) {\n            this._addStickyStyle(cell, end, endPositions[i], i === firstStickyEnd);\n          }\n        }\n      }\n      if (this._positionListener) {\n        this._positionListener.stickyColumnsUpdated({\n          sizes: lastStickyStart === -1 ? [] : cellWidths.slice(0, lastStickyStart + 1).map((width, index) => stickyStartStates[index] ? width : null)\n        });\n        this._positionListener.stickyEndColumnsUpdated({\n          sizes: firstStickyEnd === -1 ? [] : cellWidths.slice(firstStickyEnd).map((width, index) => stickyEndStates[index + firstStickyEnd] ? width : null).reverse()\n        });\n      }\n    });\n  }\n  /**\n   * Applies sticky positioning to the row's cells if using the native table layout, and to the\n   * row itself otherwise.\n   * @param rowsToStick The list of rows that should be stuck according to their corresponding\n   *     sticky state and to the provided top or bottom position.\n   * @param stickyStates A list of boolean states where each state represents whether the row\n   *     should be stuck in the particular top or bottom position.\n   * @param position The position direction in which the row should be stuck if that row should be\n   *     sticky.\n   *\n   */\n  stickRows(rowsToStick, stickyStates, position) {\n    // Since we can't measure the rows on the server, we can't stick the rows properly.\n    if (!this._isBrowser) {\n      return;\n    }\n    // If positioning the rows to the bottom, reverse their order when evaluating the sticky\n    // position such that the last row stuck will be \"bottom: 0px\" and so on. Note that the\n    // sticky states need to be reversed as well.\n    const rows = position === 'bottom' ? rowsToStick.slice().reverse() : rowsToStick;\n    const states = position === 'bottom' ? stickyStates.slice().reverse() : stickyStates;\n    // Measure row heights all at once before adding sticky styles to reduce layout thrashing.\n    const stickyOffsets = [];\n    const stickyCellHeights = [];\n    const elementsToStick = [];\n    for (let rowIndex = 0, stickyOffset = 0; rowIndex < rows.length; rowIndex++) {\n      if (!states[rowIndex]) {\n        continue;\n      }\n      stickyOffsets[rowIndex] = stickyOffset;\n      const row = rows[rowIndex];\n      elementsToStick[rowIndex] = this._isNativeHtmlTable ? Array.from(row.children) : [row];\n      const height = row.getBoundingClientRect().height;\n      stickyOffset += height;\n      stickyCellHeights[rowIndex] = height;\n    }\n    const borderedRowIndex = states.lastIndexOf(true);\n    // Coalesce with other sticky row updates (top/bottom), sticky columns updates\n    // (and potentially other changes like column resize).\n    this._coalescedStyleScheduler.schedule(() => {\n      var _a, _b;\n      for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n        if (!states[rowIndex]) {\n          continue;\n        }\n        const offset = stickyOffsets[rowIndex];\n        const isBorderedRowIndex = rowIndex === borderedRowIndex;\n        for (const element of elementsToStick[rowIndex]) {\n          this._addStickyStyle(element, position, offset, isBorderedRowIndex);\n        }\n      }\n      if (position === 'top') {\n        (_a = this._positionListener) === null || _a === void 0 ? void 0 : _a.stickyHeaderRowsUpdated({\n          sizes: stickyCellHeights,\n          offsets: stickyOffsets,\n          elements: elementsToStick\n        });\n      } else {\n        (_b = this._positionListener) === null || _b === void 0 ? void 0 : _b.stickyFooterRowsUpdated({\n          sizes: stickyCellHeights,\n          offsets: stickyOffsets,\n          elements: elementsToStick\n        });\n      }\n    });\n  }\n  /**\n   * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n   * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n   * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n   * the tfoot element.\n   */\n  updateStickyFooterContainer(tableElement, stickyStates) {\n    if (!this._isNativeHtmlTable) {\n      return;\n    }\n    const tfoot = tableElement.querySelector('tfoot');\n    // Coalesce with other sticky updates (and potentially other changes like column resize).\n    this._coalescedStyleScheduler.schedule(() => {\n      if (stickyStates.some(state => !state)) {\n        this._removeStickyStyle(tfoot, ['bottom']);\n      } else {\n        this._addStickyStyle(tfoot, 'bottom', 0, false);\n      }\n    });\n  }\n  /**\n   * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n   * the zIndex, removing each of the provided sticky directions, and removing the\n   * sticky position if there are no more directions.\n   */\n  _removeStickyStyle(element, stickyDirections) {\n    for (const dir of stickyDirections) {\n      element.style[dir] = '';\n      element.classList.remove(this._borderCellCss[dir]);\n    }\n    // If the element no longer has any more sticky directions, remove sticky positioning and\n    // the sticky CSS class.\n    // Short-circuit checking element.style[dir] for stickyDirections as they\n    // were already removed above.\n    const hasDirection = STICKY_DIRECTIONS.some(dir => stickyDirections.indexOf(dir) === -1 && element.style[dir]);\n    if (hasDirection) {\n      element.style.zIndex = this._getCalculatedZIndex(element);\n    } else {\n      // When not hasDirection, _getCalculatedZIndex will always return ''.\n      element.style.zIndex = '';\n      if (this._needsPositionStickyOnElement) {\n        element.style.position = '';\n      }\n      element.classList.remove(this._stickCellCss);\n    }\n  }\n  /**\n   * Adds the sticky styling to the element by adding the sticky style class, changing position\n   * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n   * direction and value.\n   */\n  _addStickyStyle(element, dir, dirValue, isBorderElement) {\n    element.classList.add(this._stickCellCss);\n    if (isBorderElement) {\n      element.classList.add(this._borderCellCss[dir]);\n    }\n    element.style[dir] = `${dirValue}px`;\n    element.style.zIndex = this._getCalculatedZIndex(element);\n    if (this._needsPositionStickyOnElement) {\n      element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n    }\n  }\n  /**\n   * Calculate what the z-index should be for the element, depending on what directions (top,\n   * bottom, left, right) have been set. It should be true that elements with a top direction\n   * should have the highest index since these are elements like a table header. If any of those\n   * elements are also sticky in another direction, then they should appear above other elements\n   * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n   * (e.g. footer rows) should then be next in the ordering such that they are below the header\n   * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n   * should minimally increment so that they are above non-sticky elements but below top and bottom\n   * elements.\n   */\n  _getCalculatedZIndex(element) {\n    const zIndexIncrements = {\n      top: 100,\n      bottom: 10,\n      left: 1,\n      right: 1\n    };\n    let zIndex = 0;\n    // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n    // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n    // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n    for (const dir of STICKY_DIRECTIONS) {\n      if (element.style[dir]) {\n        zIndex += zIndexIncrements[dir];\n      }\n    }\n    return zIndex ? `${zIndex}` : '';\n  }\n  /** Gets the widths for each cell in the provided row. */\n  _getCellWidths(row, recalculateCellWidths = true) {\n    if (!recalculateCellWidths && this._cachedCellWidths.length) {\n      return this._cachedCellWidths;\n    }\n    const cellWidths = [];\n    const firstRowCells = row.children;\n    for (let i = 0; i < firstRowCells.length; i++) {\n      let cell = firstRowCells[i];\n      cellWidths.push(cell.getBoundingClientRect().width);\n    }\n    this._cachedCellWidths = cellWidths;\n    return cellWidths;\n  }\n  /**\n   * Determines the left and right positions of each sticky column cell, which will be the\n   * accumulation of all sticky column cell widths to the left and right, respectively.\n   * Non-sticky cells do not need to have a value set since their positions will not be applied.\n   */\n  _getStickyStartColumnPositions(widths, stickyStates) {\n    const positions = [];\n    let nextPosition = 0;\n    for (let i = 0; i < widths.length; i++) {\n      if (stickyStates[i]) {\n        positions[i] = nextPosition;\n        nextPosition += widths[i];\n      }\n    }\n    return positions;\n  }\n  /**\n   * Determines the left and right positions of each sticky column cell, which will be the\n   * accumulation of all sticky column cell widths to the left and right, respectively.\n   * Non-sticky cells do not need to have a value set since their positions will not be applied.\n   */\n  _getStickyEndColumnPositions(widths, stickyStates) {\n    const positions = [];\n    let nextPosition = 0;\n    for (let i = widths.length; i > 0; i--) {\n      if (stickyStates[i]) {\n        positions[i] = nextPosition;\n        nextPosition += widths[i];\n      }\n    }\n    return positions;\n  }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when attempting to find an unexisting column.\n * @param id Id whose lookup failed.\n * @docs-private\n */\nfunction getTableUnknownColumnError(id) {\n  return Error(`Could not find column with id \"${id}\".`);\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * @docs-private\n */\nfunction getTableDuplicateColumnNameError(name) {\n  return Error(`Duplicate column definition name provided: \"${name}\".`);\n}\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * @docs-private\n */\nfunction getTableMultipleDefaultRowDefsError() {\n  return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * @docs-private\n */\nfunction getTableMissingMatchingRowDefError(data) {\n  return Error(`Could not find a matching row definition for the` + `provided row data: ${JSON.stringify(data)}`);\n}\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * @docs-private\n */\nfunction getTableMissingRowDefsError() {\n  return Error('Missing definitions for header, footer, and row; ' + 'cannot determine which columns should be rendered.');\n}\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * @docs-private\n */\nfunction getTableUnknownDataSourceError() {\n  return Error(`Provided data source did not match an array, Observable, or DataSource`);\n}\n/**\n * Returns an error to be thrown when the text column cannot find a parent table to inject.\n * @docs-private\n */\nfunction getTableTextColumnMissingParentTableError() {\n  return Error(`Text column could not find a parent table for registration.`);\n}\n/**\n * Returns an error to be thrown when a table text column doesn't have a name.\n * @docs-private\n */\nfunction getTableTextColumnMissingNameError() {\n  return Error(`Table text column must have a name.`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The injection token used to specify the StickyPositioningListener. */\nconst STICKY_POSITIONING_LISTENER = new InjectionToken('CDK_SPL');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\n * tables that animate rows.\n */\nclass CdkRecycleRows {}\nCdkRecycleRows.ɵfac = function CdkRecycleRows_Factory(t) {\n  return new (t || CdkRecycleRows)();\n};\nCdkRecycleRows.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkRecycleRows,\n  selectors: [[\"cdk-table\", \"recycleRows\", \"\"], [\"table\", \"cdk-table\", \"\", \"recycleRows\", \"\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: _VIEW_REPEATER_STRATEGY,\n    useClass: _RecycleViewRepeaterStrategy\n  }])]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkRecycleRows, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-table[recycleRows], table[cdk-table][recycleRows]',\n      providers: [{\n        provide: _VIEW_REPEATER_STRATEGY,\n        useClass: _RecycleViewRepeaterStrategy\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * @docs-private\n */\nclass DataRowOutlet {\n  constructor(viewContainer, elementRef) {\n    this.viewContainer = viewContainer;\n    this.elementRef = elementRef;\n  }\n}\nDataRowOutlet.ɵfac = function DataRowOutlet_Factory(t) {\n  return new (t || DataRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\nDataRowOutlet.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: DataRowOutlet,\n  selectors: [[\"\", \"rowOutlet\", \"\"]]\n});\nDataRowOutlet.ctorParameters = () => [{\n  type: ViewContainerRef\n}, {\n  type: ElementRef\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DataRowOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[rowOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * @docs-private\n */\nclass HeaderRowOutlet {\n  constructor(viewContainer, elementRef) {\n    this.viewContainer = viewContainer;\n    this.elementRef = elementRef;\n  }\n}\nHeaderRowOutlet.ɵfac = function HeaderRowOutlet_Factory(t) {\n  return new (t || HeaderRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\nHeaderRowOutlet.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: HeaderRowOutlet,\n  selectors: [[\"\", \"headerRowOutlet\", \"\"]]\n});\nHeaderRowOutlet.ctorParameters = () => [{\n  type: ViewContainerRef\n}, {\n  type: ElementRef\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HeaderRowOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[headerRowOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * @docs-private\n */\nclass FooterRowOutlet {\n  constructor(viewContainer, elementRef) {\n    this.viewContainer = viewContainer;\n    this.elementRef = elementRef;\n  }\n}\nFooterRowOutlet.ɵfac = function FooterRowOutlet_Factory(t) {\n  return new (t || FooterRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\nFooterRowOutlet.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: FooterRowOutlet,\n  selectors: [[\"\", \"footerRowOutlet\", \"\"]]\n});\nFooterRowOutlet.ctorParameters = () => [{\n  type: ViewContainerRef\n}, {\n  type: ElementRef\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FooterRowOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[footerRowOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * Provides a handle for the table to grab the view\n * container's ng-container to insert the no data row.\n * @docs-private\n */\nclass NoDataRowOutlet {\n  constructor(viewContainer, elementRef) {\n    this.viewContainer = viewContainer;\n    this.elementRef = elementRef;\n  }\n}\nNoDataRowOutlet.ɵfac = function NoDataRowOutlet_Factory(t) {\n  return new (t || NoDataRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\nNoDataRowOutlet.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: NoDataRowOutlet,\n  selectors: [[\"\", \"noDataRowOutlet\", \"\"]]\n});\nNoDataRowOutlet.ctorParameters = () => [{\n  type: ViewContainerRef\n}, {\n  type: ElementRef\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NoDataRowOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[noDataRowOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * @docs-private\n */\nconst CDK_TABLE_TEMPLATE =\n// Note that according to MDN, the `caption` element has to be projected as the **first**\n// element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n`\n  <ng-content select=\"caption\"></ng-content>\n  <ng-content select=\"colgroup, col\"></ng-content>\n  <ng-container headerRowOutlet></ng-container>\n  <ng-container rowOutlet></ng-container>\n  <ng-container noDataRowOutlet></ng-container>\n  <ng-container footerRowOutlet></ng-container>\n`;\n/**\n * Class used to conveniently type the embedded view ref for rows with a context.\n * @docs-private\n */\nclass RowViewRef extends EmbeddedViewRef {}\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n */\nclass CdkTable {\n  constructor(_differs, _changeDetectorRef, _elementRef, role, _dir, _document, _platform, _viewRepeater, _coalescedStyleScheduler, _viewportRuler,\n  /**\n   * @deprecated `_stickyPositioningListener` parameter to become required.\n   * @breaking-change 13.0.0\n   */\n  _stickyPositioningListener) {\n    this._differs = _differs;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._elementRef = _elementRef;\n    this._dir = _dir;\n    this._platform = _platform;\n    this._viewRepeater = _viewRepeater;\n    this._coalescedStyleScheduler = _coalescedStyleScheduler;\n    this._viewportRuler = _viewportRuler;\n    this._stickyPositioningListener = _stickyPositioningListener;\n    /** Subject that emits when the component has been destroyed. */\n    this._onDestroy = new Subject();\n    /**\n     * Map of all the user's defined columns (header, data, and footer cell template) identified by\n     * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n     * any custom column definitions added to `_customColumnDefs`.\n     */\n    this._columnDefsByName = new Map();\n    /**\n     * Column definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * column definitions as *its* content child.\n     */\n    this._customColumnDefs = new Set();\n    /**\n     * Data row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * built-in data rows as *its* content child.\n     */\n    this._customRowDefs = new Set();\n    /**\n     * Header row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * built-in header rows as *its* content child.\n     */\n    this._customHeaderRowDefs = new Set();\n    /**\n     * Footer row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n     * built-in footer row as *its* content child.\n     */\n    this._customFooterRowDefs = new Set();\n    /**\n     * Whether the header row definition has been changed. Triggers an update to the header row after\n     * content is checked. Initialized as true so that the table renders the initial set of rows.\n     */\n    this._headerRowDefChanged = true;\n    /**\n     * Whether the footer row definition has been changed. Triggers an update to the footer row after\n     * content is checked. Initialized as true so that the table renders the initial set of rows.\n     */\n    this._footerRowDefChanged = true;\n    /**\n     * Whether the sticky column styles need to be updated. Set to `true` when the visible columns\n     * change.\n     */\n    this._stickyColumnStylesNeedReset = true;\n    /**\n     * Whether the sticky styler should recalculate cell widths when applying sticky styles. If\n     * `false`, cached values will be used instead. This is only applicable to tables with\n     * {@link fixedLayout} enabled. For other tables, cell widths will always be recalculated.\n     */\n    this._forceRecalculateCellWidths = true;\n    /**\n     * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n     * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n     * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n     * and row template matches, which allows the `IterableDiffer` to check rows by reference\n     * and understand which rows are added/moved/removed.\n     *\n     * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n     * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n     * contains an array of created pairs. The array is necessary to handle cases where the data\n     * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n     * stored.\n     */\n    this._cachedRenderRowsMap = new Map();\n    /**\n     * CSS class added to any row or cell that has sticky positioning applied. May be overriden by\n     * table subclasses.\n     */\n    this.stickyCssClass = 'cdk-table-sticky';\n    /**\n     * Whether to manually add positon: sticky to all sticky cell elements. Not needed if\n     * the position is set in a selector associated with the value of stickyCssClass. May be\n     * overridden by table subclasses\n     */\n    this.needsPositionStickyOnElement = true;\n    /** Whether the no data row is currently showing anything. */\n    this._isShowingNoDataRow = false;\n    this._multiTemplateDataRows = false;\n    this._fixedLayout = false;\n    /**\n     * Emits when the table completes rendering a set of data rows based on the latest data from the\n     * data source, even if the set of rows is empty.\n     */\n    this.contentChanged = new EventEmitter();\n    // TODO(andrewseguin): Remove max value as the end index\n    //   and instead calculate the view on init and scroll.\n    /**\n     * Stream containing the latest information on what rows are being displayed on screen.\n     * Can be used by the data source to as a heuristic of what data should be provided.\n     *\n     * @docs-private\n     */\n    this.viewChange = new BehaviorSubject({\n      start: 0,\n      end: Number.MAX_VALUE\n    });\n    if (!role) {\n      this._elementRef.nativeElement.setAttribute('role', 'table');\n    }\n    this._document = _document;\n    this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\n  }\n  /**\n   * Tracking function that will be used to check the differences in data changes. Used similarly\n   * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n   * relative to the function to know if a row should be added/removed/moved.\n   * Accepts a function that takes two parameters, `index` and `item`.\n   */\n  get trackBy() {\n    return this._trackByFn;\n  }\n  set trackBy(fn) {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && fn != null && typeof fn !== 'function') {\n      console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\n    }\n    this._trackByFn = fn;\n  }\n  /**\n   * The table's source of data, which can be provided in three ways (in order of complexity):\n   *   - Simple data array (each object represents one table row)\n   *   - Stream that emits a data array each time the array changes\n   *   - `DataSource` object that implements the connect/disconnect interface.\n   *\n   * If a data array is provided, the table must be notified when the array's objects are\n   * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n   * render the diff since the last table render. If the data array reference is changed, the table\n   * will automatically trigger an update to the rows.\n   *\n   * When providing an Observable stream, the table will trigger an update automatically when the\n   * stream emits a new array of data.\n   *\n   * Finally, when providing a `DataSource` object, the table will use the Observable stream\n   * provided by the connect function and trigger updates when that stream emits new data array\n   * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n   * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n   * subscriptions registered during the connect process).\n   */\n  get dataSource() {\n    return this._dataSource;\n  }\n  set dataSource(dataSource) {\n    if (this._dataSource !== dataSource) {\n      this._switchDataSource(dataSource);\n    }\n  }\n  /**\n   * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n   * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n   * dataobject will render the first row that evaluates its when predicate to true, in the order\n   * defined in the table, or otherwise the default row which does not have a when predicate.\n   */\n  get multiTemplateDataRows() {\n    return this._multiTemplateDataRows;\n  }\n  set multiTemplateDataRows(v) {\n    this._multiTemplateDataRows = coerceBooleanProperty(v);\n    // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),\n    // this setter will be invoked before the row outlet has been defined hence the null check.\n    if (this._rowOutlet && this._rowOutlet.viewContainer.length) {\n      this._forceRenderDataRows();\n      this.updateStickyColumnStyles();\n    }\n  }\n  /**\n   * Whether to use a fixed table layout. Enabling this option will enforce consistent column widths\n   * and optimize rendering sticky styles for native tables. No-op for flex tables.\n   */\n  get fixedLayout() {\n    return this._fixedLayout;\n  }\n  set fixedLayout(v) {\n    this._fixedLayout = coerceBooleanProperty(v);\n    // Toggling `fixedLayout` may change column widths. Sticky column styles should be recalculated.\n    this._forceRecalculateCellWidths = true;\n    this._stickyColumnStylesNeedReset = true;\n  }\n  ngOnInit() {\n    this._setupStickyStyler();\n    if (this._isNativeHtmlTable) {\n      this._applyNativeTableSections();\n    }\n    // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n    // the user has provided a custom trackBy, return the result of that function as evaluated\n    // with the values of the `RenderRow`'s data and index.\n    this._dataDiffer = this._differs.find([]).create((_i, dataRow) => {\n      return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n    });\n    this._viewportRuler.change().pipe(takeUntil(this._onDestroy)).subscribe(() => {\n      this._forceRecalculateCellWidths = true;\n    });\n  }\n  ngAfterContentChecked() {\n    // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n    this._cacheRowDefs();\n    this._cacheColumnDefs();\n    // Make sure that the user has at least added header, footer, or data row def.\n    if (!this._headerRowDefs.length && !this._footerRowDefs.length && !this._rowDefs.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTableMissingRowDefsError();\n    }\n    // Render updates if the list of columns have been changed for the header, row, or footer defs.\n    const columnsChanged = this._renderUpdatedColumns();\n    const rowDefsChanged = columnsChanged || this._headerRowDefChanged || this._footerRowDefChanged;\n    // Ensure sticky column styles are reset if set to `true` elsewhere.\n    this._stickyColumnStylesNeedReset = this._stickyColumnStylesNeedReset || rowDefsChanged;\n    this._forceRecalculateCellWidths = rowDefsChanged;\n    // If the header row definition has been changed, trigger a render to the header row.\n    if (this._headerRowDefChanged) {\n      this._forceRenderHeaderRows();\n      this._headerRowDefChanged = false;\n    }\n    // If the footer row definition has been changed, trigger a render to the footer row.\n    if (this._footerRowDefChanged) {\n      this._forceRenderFooterRows();\n      this._footerRowDefChanged = false;\n    }\n    // If there is a data source and row definitions, connect to the data source unless a\n    // connection has already been made.\n    if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n      this._observeRenderChanges();\n    } else if (this._stickyColumnStylesNeedReset) {\n      // In the above case, _observeRenderChanges will result in updateStickyColumnStyles being\n      // called when it row data arrives. Otherwise, we need to call it proactively.\n      this.updateStickyColumnStyles();\n    }\n    this._checkStickyStates();\n  }\n  ngOnDestroy() {\n    this._rowOutlet.viewContainer.clear();\n    this._noDataRowOutlet.viewContainer.clear();\n    this._headerRowOutlet.viewContainer.clear();\n    this._footerRowOutlet.viewContainer.clear();\n    this._cachedRenderRowsMap.clear();\n    this._onDestroy.next();\n    this._onDestroy.complete();\n    if (isDataSource(this.dataSource)) {\n      this.dataSource.disconnect(this);\n    }\n  }\n  /**\n   * Renders rows based on the table's latest set of data, which was either provided directly as an\n   * input or retrieved through an Observable stream (directly or from a DataSource).\n   * Checks for differences in the data since the last diff to perform only the necessary\n   * changes (add/remove/move rows).\n   *\n   * If the table's data source is a DataSource or Observable, this will be invoked automatically\n   * each time the provided Observable stream emits a new data array. Otherwise if your data is\n   * an array, this function will need to be called to render any changes.\n   */\n  renderRows() {\n    this._renderRows = this._getAllRenderRows();\n    const changes = this._dataDiffer.diff(this._renderRows);\n    if (!changes) {\n      this._updateNoDataRow();\n      this.contentChanged.next();\n      return;\n    }\n    const viewContainer = this._rowOutlet.viewContainer;\n    this._viewRepeater.applyChanges(changes, viewContainer, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record.item, currentIndex), record => record.item.data, change => {\n      if (change.operation === 1 /* INSERTED */ && change.context) {\n        this._renderCellTemplateForItem(change.record.item.rowDef, change.context);\n      }\n    });\n    // Update the meta context of a row's context data (index, count, first, last, ...)\n    this._updateRowIndexContext();\n    // Update rows that did not get added/removed/moved but may have had their identity changed,\n    // e.g. if trackBy matched data on some property but the actual data reference changed.\n    changes.forEachIdentityChange(record => {\n      const rowView = viewContainer.get(record.currentIndex);\n      rowView.context.$implicit = record.item.data;\n    });\n    this._updateNoDataRow();\n    this.updateStickyColumnStyles();\n    this.contentChanged.next();\n  }\n  /** Adds a column definition that was not included as part of the content children. */\n  addColumnDef(columnDef) {\n    this._customColumnDefs.add(columnDef);\n  }\n  /** Removes a column definition that was not included as part of the content children. */\n  removeColumnDef(columnDef) {\n    this._customColumnDefs.delete(columnDef);\n  }\n  /** Adds a row definition that was not included as part of the content children. */\n  addRowDef(rowDef) {\n    this._customRowDefs.add(rowDef);\n  }\n  /** Removes a row definition that was not included as part of the content children. */\n  removeRowDef(rowDef) {\n    this._customRowDefs.delete(rowDef);\n  }\n  /** Adds a header row definition that was not included as part of the content children. */\n  addHeaderRowDef(headerRowDef) {\n    this._customHeaderRowDefs.add(headerRowDef);\n    this._headerRowDefChanged = true;\n  }\n  /** Removes a header row definition that was not included as part of the content children. */\n  removeHeaderRowDef(headerRowDef) {\n    this._customHeaderRowDefs.delete(headerRowDef);\n    this._headerRowDefChanged = true;\n  }\n  /** Adds a footer row definition that was not included as part of the content children. */\n  addFooterRowDef(footerRowDef) {\n    this._customFooterRowDefs.add(footerRowDef);\n    this._footerRowDefChanged = true;\n  }\n  /** Removes a footer row definition that was not included as part of the content children. */\n  removeFooterRowDef(footerRowDef) {\n    this._customFooterRowDefs.delete(footerRowDef);\n    this._footerRowDefChanged = true;\n  }\n  /** Sets a no data row definition that was not included as a part of the content children. */\n  setNoDataRow(noDataRow) {\n    this._customNoDataRow = noDataRow;\n  }\n  /**\n   * Updates the header sticky styles. First resets all applied styles with respect to the cells\n   * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n   * automatically called when the header row changes its displayed set of columns, or if its\n   * sticky input changes. May be called manually for cases where the cell content changes outside\n   * of these events.\n   */\n  updateStickyHeaderRowStyles() {\n    const headerRows = this._getRenderedRows(this._headerRowOutlet);\n    const tableElement = this._elementRef.nativeElement;\n    // Hide the thead element if there are no header rows. This is necessary to satisfy\n    // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n    // required child `row`.\n    const thead = tableElement.querySelector('thead');\n    if (thead) {\n      thead.style.display = headerRows.length ? '' : 'none';\n    }\n    const stickyStates = this._headerRowDefs.map(def => def.sticky);\n    this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n    this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\n    // Reset the dirty state of the sticky input change since it has been used.\n    this._headerRowDefs.forEach(def => def.resetStickyChanged());\n  }\n  /**\n   * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n   * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n   * automatically called when the footer row changes its displayed set of columns, or if its\n   * sticky input changes. May be called manually for cases where the cell content changes outside\n   * of these events.\n   */\n  updateStickyFooterRowStyles() {\n    const footerRows = this._getRenderedRows(this._footerRowOutlet);\n    const tableElement = this._elementRef.nativeElement;\n    // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\n    // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n    // required child `row`.\n    const tfoot = tableElement.querySelector('tfoot');\n    if (tfoot) {\n      tfoot.style.display = footerRows.length ? '' : 'none';\n    }\n    const stickyStates = this._footerRowDefs.map(def => def.sticky);\n    this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n    this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n    this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\n    // Reset the dirty state of the sticky input change since it has been used.\n    this._footerRowDefs.forEach(def => def.resetStickyChanged());\n  }\n  /**\n   * Updates the column sticky styles. First resets all applied styles with respect to the cells\n   * sticking to the left and right. Then sticky styles are added for the left and right according\n   * to the column definitions for each cell in each row. This is automatically called when\n   * the data source provides a new set of data or when a column definition changes its sticky\n   * input. May be called manually for cases where the cell content changes outside of these events.\n   */\n  updateStickyColumnStyles() {\n    const headerRows = this._getRenderedRows(this._headerRowOutlet);\n    const dataRows = this._getRenderedRows(this._rowOutlet);\n    const footerRows = this._getRenderedRows(this._footerRowOutlet);\n    // For tables not using a fixed layout, the column widths may change when new rows are rendered.\n    // In a table using a fixed layout, row content won't affect column width, so sticky styles\n    // don't need to be cleared unless either the sticky column config changes or one of the row\n    // defs change.\n    if (this._isNativeHtmlTable && !this._fixedLayout || this._stickyColumnStylesNeedReset) {\n      // Clear the left and right positioning from all columns in the table across all rows since\n      // sticky columns span across all table sections (header, data, footer)\n      this._stickyStyler.clearStickyPositioning([...headerRows, ...dataRows, ...footerRows], ['left', 'right']);\n      this._stickyColumnStylesNeedReset = false;\n    }\n    // Update the sticky styles for each header row depending on the def's sticky state\n    headerRows.forEach((headerRow, i) => {\n      this._addStickyColumnStyles([headerRow], this._headerRowDefs[i]);\n    });\n    // Update the sticky styles for each data row depending on its def's sticky state\n    this._rowDefs.forEach(rowDef => {\n      // Collect all the rows rendered with this row definition.\n      const rows = [];\n      for (let i = 0; i < dataRows.length; i++) {\n        if (this._renderRows[i].rowDef === rowDef) {\n          rows.push(dataRows[i]);\n        }\n      }\n      this._addStickyColumnStyles(rows, rowDef);\n    });\n    // Update the sticky styles for each footer row depending on the def's sticky state\n    footerRows.forEach((footerRow, i) => {\n      this._addStickyColumnStyles([footerRow], this._footerRowDefs[i]);\n    });\n    // Reset the dirty state of the sticky input change since it has been used.\n    Array.from(this._columnDefsByName.values()).forEach(def => def.resetStickyChanged());\n  }\n  /**\n   * Get the list of RenderRow objects to render according to the current list of data and defined\n   * row definitions. If the previous list already contained a particular pair, it should be reused\n   * so that the differ equates their references.\n   */\n  _getAllRenderRows() {\n    const renderRows = [];\n    // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\n    // new cache while unused ones can be picked up by garbage collection.\n    const prevCachedRenderRows = this._cachedRenderRowsMap;\n    this._cachedRenderRowsMap = new Map();\n    // For each data object, get the list of rows that should be rendered, represented by the\n    // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n    for (let i = 0; i < this._data.length; i++) {\n      let data = this._data[i];\n      const renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n      if (!this._cachedRenderRowsMap.has(data)) {\n        this._cachedRenderRowsMap.set(data, new WeakMap());\n      }\n      for (let j = 0; j < renderRowsForData.length; j++) {\n        let renderRow = renderRowsForData[j];\n        const cache = this._cachedRenderRowsMap.get(renderRow.data);\n        if (cache.has(renderRow.rowDef)) {\n          cache.get(renderRow.rowDef).push(renderRow);\n        } else {\n          cache.set(renderRow.rowDef, [renderRow]);\n        }\n        renderRows.push(renderRow);\n      }\n    }\n    return renderRows;\n  }\n  /**\n   * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n   * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n   * `(T, CdkRowDef)` pair.\n   */\n  _getRenderRowsForData(data, dataIndex, cache) {\n    const rowDefs = this._getRowDefs(data, dataIndex);\n    return rowDefs.map(rowDef => {\n      const cachedRenderRows = cache && cache.has(rowDef) ? cache.get(rowDef) : [];\n      if (cachedRenderRows.length) {\n        const dataRow = cachedRenderRows.shift();\n        dataRow.dataIndex = dataIndex;\n        return dataRow;\n      } else {\n        return {\n          data,\n          rowDef,\n          dataIndex\n        };\n      }\n    });\n  }\n  /** Update the map containing the content's column definitions. */\n  _cacheColumnDefs() {\n    this._columnDefsByName.clear();\n    const columnDefs = mergeArrayAndSet(this._getOwnDefs(this._contentColumnDefs), this._customColumnDefs);\n    columnDefs.forEach(columnDef => {\n      if (this._columnDefsByName.has(columnDef.name) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTableDuplicateColumnNameError(columnDef.name);\n      }\n      this._columnDefsByName.set(columnDef.name, columnDef);\n    });\n  }\n  /** Update the list of all available row definitions that can be used. */\n  _cacheRowDefs() {\n    this._headerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentHeaderRowDefs), this._customHeaderRowDefs);\n    this._footerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentFooterRowDefs), this._customFooterRowDefs);\n    this._rowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentRowDefs), this._customRowDefs);\n    // After all row definitions are determined, find the row definition to be considered default.\n    const defaultRowDefs = this._rowDefs.filter(def => !def.when);\n    if (!this.multiTemplateDataRows && defaultRowDefs.length > 1 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTableMultipleDefaultRowDefsError();\n    }\n    this._defaultRowDef = defaultRowDefs[0];\n  }\n  /**\n   * Check if the header, data, or footer rows have changed what columns they want to display or\n   * whether the sticky states have changed for the header or footer. If there is a diff, then\n   * re-render that section.\n   */\n  _renderUpdatedColumns() {\n    const columnsDiffReducer = (acc, def) => acc || !!def.getColumnsDiff();\n    // Force re-render data rows if the list of column definitions have changed.\n    const dataColumnsChanged = this._rowDefs.reduce(columnsDiffReducer, false);\n    if (dataColumnsChanged) {\n      this._forceRenderDataRows();\n    }\n    // Force re-render header/footer rows if the list of column definitions have changed.\n    const headerColumnsChanged = this._headerRowDefs.reduce(columnsDiffReducer, false);\n    if (headerColumnsChanged) {\n      this._forceRenderHeaderRows();\n    }\n    const footerColumnsChanged = this._footerRowDefs.reduce(columnsDiffReducer, false);\n    if (footerColumnsChanged) {\n      this._forceRenderFooterRows();\n    }\n    return dataColumnsChanged || headerColumnsChanged || footerColumnsChanged;\n  }\n  /**\n   * Switch to the provided data source by resetting the data and unsubscribing from the current\n   * render change subscription if one exists. If the data source is null, interpret this by\n   * clearing the row outlet. Otherwise start listening for new data.\n   */\n  _switchDataSource(dataSource) {\n    this._data = [];\n    if (isDataSource(this.dataSource)) {\n      this.dataSource.disconnect(this);\n    }\n    // Stop listening for data from the previous data source.\n    if (this._renderChangeSubscription) {\n      this._renderChangeSubscription.unsubscribe();\n      this._renderChangeSubscription = null;\n    }\n    if (!dataSource) {\n      if (this._dataDiffer) {\n        this._dataDiffer.diff([]);\n      }\n      this._rowOutlet.viewContainer.clear();\n    }\n    this._dataSource = dataSource;\n  }\n  /** Set up a subscription for the data provided by the data source. */\n  _observeRenderChanges() {\n    // If no data source has been set, there is nothing to observe for changes.\n    if (!this.dataSource) {\n      return;\n    }\n    let dataStream;\n    if (isDataSource(this.dataSource)) {\n      dataStream = this.dataSource.connect(this);\n    } else if (isObservable(this.dataSource)) {\n      dataStream = this.dataSource;\n    } else if (Array.isArray(this.dataSource)) {\n      dataStream = of(this.dataSource);\n    }\n    if (dataStream === undefined && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTableUnknownDataSourceError();\n    }\n    this._renderChangeSubscription = dataStream.pipe(takeUntil(this._onDestroy)).subscribe(data => {\n      this._data = data || [];\n      this.renderRows();\n    });\n  }\n  /**\n   * Clears any existing content in the header row outlet and creates a new embedded view\n   * in the outlet using the header row definition.\n   */\n  _forceRenderHeaderRows() {\n    // Clear the header row outlet if any content exists.\n    if (this._headerRowOutlet.viewContainer.length > 0) {\n      this._headerRowOutlet.viewContainer.clear();\n    }\n    this._headerRowDefs.forEach((def, i) => this._renderRow(this._headerRowOutlet, def, i));\n    this.updateStickyHeaderRowStyles();\n  }\n  /**\n   * Clears any existing content in the footer row outlet and creates a new embedded view\n   * in the outlet using the footer row definition.\n   */\n  _forceRenderFooterRows() {\n    // Clear the footer row outlet if any content exists.\n    if (this._footerRowOutlet.viewContainer.length > 0) {\n      this._footerRowOutlet.viewContainer.clear();\n    }\n    this._footerRowDefs.forEach((def, i) => this._renderRow(this._footerRowOutlet, def, i));\n    this.updateStickyFooterRowStyles();\n  }\n  /** Adds the sticky column styles for the rows according to the columns' stick states. */\n  _addStickyColumnStyles(rows, rowDef) {\n    const columnDefs = Array.from(rowDef.columns || []).map(columnName => {\n      const columnDef = this._columnDefsByName.get(columnName);\n      if (!columnDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTableUnknownColumnError(columnName);\n      }\n      return columnDef;\n    });\n    const stickyStartStates = columnDefs.map(columnDef => columnDef.sticky);\n    const stickyEndStates = columnDefs.map(columnDef => columnDef.stickyEnd);\n    this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates, !this._fixedLayout || this._forceRecalculateCellWidths);\n  }\n  /** Gets the list of rows that have been rendered in the row outlet. */\n  _getRenderedRows(rowOutlet) {\n    const renderedRows = [];\n    for (let i = 0; i < rowOutlet.viewContainer.length; i++) {\n      const viewRef = rowOutlet.viewContainer.get(i);\n      renderedRows.push(viewRef.rootNodes[0]);\n    }\n    return renderedRows;\n  }\n  /**\n   * Get the matching row definitions that should be used for this row data. If there is only\n   * one row definition, it is returned. Otherwise, find the row definitions that has a when\n   * predicate that returns true with the data. If none return true, return the default row\n   * definition.\n   */\n  _getRowDefs(data, dataIndex) {\n    if (this._rowDefs.length == 1) {\n      return [this._rowDefs[0]];\n    }\n    let rowDefs = [];\n    if (this.multiTemplateDataRows) {\n      rowDefs = this._rowDefs.filter(def => !def.when || def.when(dataIndex, data));\n    } else {\n      let rowDef = this._rowDefs.find(def => def.when && def.when(dataIndex, data)) || this._defaultRowDef;\n      if (rowDef) {\n        rowDefs.push(rowDef);\n      }\n    }\n    if (!rowDefs.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTableMissingMatchingRowDefError(data);\n    }\n    return rowDefs;\n  }\n  _getEmbeddedViewArgs(renderRow, index) {\n    const rowDef = renderRow.rowDef;\n    const context = {\n      $implicit: renderRow.data\n    };\n    return {\n      templateRef: rowDef.template,\n      context,\n      index\n    };\n  }\n  /**\n   * Creates a new row template in the outlet and fills it with the set of cell templates.\n   * Optionally takes a context to provide to the row and cells, as well as an optional index\n   * of where to place the new row template in the outlet.\n   */\n  _renderRow(outlet, rowDef, index, context = {}) {\n    // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n    const view = outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n    this._renderCellTemplateForItem(rowDef, context);\n    return view;\n  }\n  _renderCellTemplateForItem(rowDef, context) {\n    for (let cellTemplate of this._getCellTemplates(rowDef)) {\n      if (CdkCellOutlet.mostRecentCellOutlet) {\n        CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * Updates the index-related context for each row to reflect any changes in the index of the rows,\n   * e.g. first/last/even/odd.\n   */\n  _updateRowIndexContext() {\n    const viewContainer = this._rowOutlet.viewContainer;\n    for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n      const viewRef = viewContainer.get(renderIndex);\n      const context = viewRef.context;\n      context.count = count;\n      context.first = renderIndex === 0;\n      context.last = renderIndex === count - 1;\n      context.even = renderIndex % 2 === 0;\n      context.odd = !context.even;\n      if (this.multiTemplateDataRows) {\n        context.dataIndex = this._renderRows[renderIndex].dataIndex;\n        context.renderIndex = renderIndex;\n      } else {\n        context.index = this._renderRows[renderIndex].dataIndex;\n      }\n    }\n  }\n  /** Gets the column definitions for the provided row def. */\n  _getCellTemplates(rowDef) {\n    if (!rowDef || !rowDef.columns) {\n      return [];\n    }\n    return Array.from(rowDef.columns, columnId => {\n      const column = this._columnDefsByName.get(columnId);\n      if (!column && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTableUnknownColumnError(columnId);\n      }\n      return rowDef.extractCellTemplate(column);\n    });\n  }\n  /** Adds native table sections (e.g. tbody) and moves the row outlets into them. */\n  _applyNativeTableSections() {\n    const documentFragment = this._document.createDocumentFragment();\n    const sections = [{\n      tag: 'thead',\n      outlets: [this._headerRowOutlet]\n    }, {\n      tag: 'tbody',\n      outlets: [this._rowOutlet, this._noDataRowOutlet]\n    }, {\n      tag: 'tfoot',\n      outlets: [this._footerRowOutlet]\n    }];\n    for (const section of sections) {\n      const element = this._document.createElement(section.tag);\n      element.setAttribute('role', 'rowgroup');\n      for (const outlet of section.outlets) {\n        element.appendChild(outlet.elementRef.nativeElement);\n      }\n      documentFragment.appendChild(element);\n    }\n    // Use a DocumentFragment so we don't hit the DOM on each iteration.\n    this._elementRef.nativeElement.appendChild(documentFragment);\n  }\n  /**\n   * Forces a re-render of the data rows. Should be called in cases where there has been an input\n   * change that affects the evaluation of which rows should be rendered, e.g. toggling\n   * `multiTemplateDataRows` or adding/removing row definitions.\n   */\n  _forceRenderDataRows() {\n    this._dataDiffer.diff([]);\n    this._rowOutlet.viewContainer.clear();\n    this.renderRows();\n  }\n  /**\n   * Checks if there has been a change in sticky states since last check and applies the correct\n   * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n   * during a change detection and after the inputs are settled (after content check).\n   */\n  _checkStickyStates() {\n    const stickyCheckReducer = (acc, d) => {\n      return acc || d.hasStickyChanged();\n    };\n    // Note that the check needs to occur for every definition since it notifies the definition\n    // that it can reset its dirty state. Using another operator like `some` may short-circuit\n    // remaining definitions and leave them in an unchecked state.\n    if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n      this.updateStickyHeaderRowStyles();\n    }\n    if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n      this.updateStickyFooterRowStyles();\n    }\n    if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n      this._stickyColumnStylesNeedReset = true;\n      this.updateStickyColumnStyles();\n    }\n  }\n  /**\n   * Creates the sticky styler that will be used for sticky rows and columns. Listens\n   * for directionality changes and provides the latest direction to the styler. Re-applies column\n   * stickiness when directionality changes.\n   */\n  _setupStickyStyler() {\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, direction, this._coalescedStyleScheduler, this._platform.isBrowser, this.needsPositionStickyOnElement, this._stickyPositioningListener);\n    (this._dir ? this._dir.change : of()).pipe(takeUntil(this._onDestroy)).subscribe(value => {\n      this._stickyStyler.direction = value;\n      this.updateStickyColumnStyles();\n    });\n  }\n  /** Filters definitions that belong to this table from a QueryList. */\n  _getOwnDefs(items) {\n    return items.filter(item => !item._table || item._table === this);\n  }\n  /** Creates or removes the no data row, depending on whether any data is being shown. */\n  _updateNoDataRow() {\n    const noDataRow = this._customNoDataRow || this._noDataRow;\n    if (noDataRow) {\n      const shouldShow = this._rowOutlet.viewContainer.length === 0;\n      if (shouldShow !== this._isShowingNoDataRow) {\n        const container = this._noDataRowOutlet.viewContainer;\n        shouldShow ? container.createEmbeddedView(noDataRow.templateRef) : container.clear();\n        this._isShowingNoDataRow = shouldShow;\n      }\n    }\n  }\n}\nCdkTable.ɵfac = function CdkTable_Factory(t) {\n  return new (t || CdkTable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵinjectAttribute('role'), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Platform), ɵngcc0.ɵɵdirectiveInject(_VIEW_REPEATER_STRATEGY), ɵngcc0.ɵɵdirectiveInject(_COALESCED_STYLE_SCHEDULER), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(STICKY_POSITIONING_LISTENER, 12));\n};\nCdkTable.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: CdkTable,\n  selectors: [[\"cdk-table\"], [\"table\", \"cdk-table\", \"\"]],\n  contentQueries: function CdkTable_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkNoDataRow, 5);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkColumnDef, 5);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkRowDef, 5);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkHeaderRowDef, 5);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkFooterRowDef, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._noDataRow = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentColumnDefs = _t);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentRowDefs = _t);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentHeaderRowDefs = _t);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentFooterRowDefs = _t);\n    }\n  },\n  viewQuery: function CdkTable_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(DataRowOutlet, 7);\n      ɵngcc0.ɵɵviewQuery(HeaderRowOutlet, 7);\n      ɵngcc0.ɵɵviewQuery(FooterRowOutlet, 7);\n      ɵngcc0.ɵɵviewQuery(NoDataRowOutlet, 7);\n    }\n    if (rf & 2) {\n      let _t;\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._rowOutlet = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._headerRowOutlet = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._footerRowOutlet = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._noDataRowOutlet = _t.first);\n    }\n  },\n  hostAttrs: [1, \"cdk-table\"],\n  hostVars: 2,\n  hostBindings: function CdkTable_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"cdk-table-fixed-layout\", ctx.fixedLayout);\n    }\n  },\n  inputs: {\n    trackBy: \"trackBy\",\n    dataSource: \"dataSource\",\n    multiTemplateDataRows: \"multiTemplateDataRows\",\n    fixedLayout: \"fixedLayout\"\n  },\n  outputs: {\n    contentChanged: \"contentChanged\"\n  },\n  exportAs: [\"cdkTable\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CDK_TABLE,\n    useExisting: CdkTable\n  }, {\n    provide: _VIEW_REPEATER_STRATEGY,\n    useClass: _DisposeViewRepeaterStrategy\n  }, {\n    provide: _COALESCED_STYLE_SCHEDULER,\n    useClass: _CoalescedStyleScheduler\n  },\n  // Prevent nested tables from seeing this table's StickyPositioningListener.\n  {\n    provide: STICKY_POSITIONING_LISTENER,\n    useValue: null\n  }])],\n  ngContentSelectors: _c1,\n  decls: 13,\n  vars: 0,\n  consts: [[\"headerRowOutlet\", \"\"], [\"rowOutlet\", \"\"], [\"noDataRowOutlet\", \"\"], [\"footerRowOutlet\", \"\"]],\n  template: function CdkTable_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef(_c0);\n      ɵngcc0.ɵɵtext(0, \"\\n  \");\n      ɵngcc0.ɵɵprojection(1);\n      ɵngcc0.ɵɵtext(2, \"\\n  \");\n      ɵngcc0.ɵɵprojection(3, 1);\n      ɵngcc0.ɵɵtext(4, \"\\n  \");\n      ɵngcc0.ɵɵelementContainer(5, 0);\n      ɵngcc0.ɵɵtext(6, \"\\n  \");\n      ɵngcc0.ɵɵelementContainer(7, 1);\n      ɵngcc0.ɵɵtext(8, \"\\n  \");\n      ɵngcc0.ɵɵelementContainer(9, 2);\n      ɵngcc0.ɵɵtext(10, \"\\n  \");\n      ɵngcc0.ɵɵelementContainer(11, 3);\n      ɵngcc0.ɵɵtext(12, \"\\n\");\n    }\n  },\n  dependencies: [DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, NoDataRowOutlet],\n  styles: [\".cdk-table-fixed-layout{table-layout:fixed}\\n\"],\n  encapsulation: 2\n});\nCdkTable.ctorParameters = () => [{\n  type: IterableDiffers\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: ElementRef\n}, {\n  type: String,\n  decorators: [{\n    type: Attribute,\n    args: ['role']\n  }]\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: Platform\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [_VIEW_REPEATER_STRATEGY]\n  }]\n}, {\n  type: _CoalescedStyleScheduler,\n  decorators: [{\n    type: Inject,\n    args: [_COALESCED_STYLE_SCHEDULER]\n  }]\n}, {\n  type: ViewportRuler\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: SkipSelf\n  }, {\n    type: Inject,\n    args: [STICKY_POSITIONING_LISTENER]\n  }]\n}];\nCdkTable.propDecorators = {\n  trackBy: [{\n    type: Input\n  }],\n  dataSource: [{\n    type: Input\n  }],\n  multiTemplateDataRows: [{\n    type: Input\n  }],\n  fixedLayout: [{\n    type: Input\n  }],\n  contentChanged: [{\n    type: Output\n  }],\n  _rowOutlet: [{\n    type: ViewChild,\n    args: [DataRowOutlet, {\n      static: true\n    }]\n  }],\n  _headerRowOutlet: [{\n    type: ViewChild,\n    args: [HeaderRowOutlet, {\n      static: true\n    }]\n  }],\n  _footerRowOutlet: [{\n    type: ViewChild,\n    args: [FooterRowOutlet, {\n      static: true\n    }]\n  }],\n  _noDataRowOutlet: [{\n    type: ViewChild,\n    args: [NoDataRowOutlet, {\n      static: true\n    }]\n  }],\n  _contentColumnDefs: [{\n    type: ContentChildren,\n    args: [CdkColumnDef, {\n      descendants: true\n    }]\n  }],\n  _contentRowDefs: [{\n    type: ContentChildren,\n    args: [CdkRowDef, {\n      descendants: true\n    }]\n  }],\n  _contentHeaderRowDefs: [{\n    type: ContentChildren,\n    args: [CdkHeaderRowDef, {\n      descendants: true\n    }]\n  }],\n  _contentFooterRowDefs: [{\n    type: ContentChildren,\n    args: [CdkFooterRowDef, {\n      descendants: true\n    }]\n  }],\n  _noDataRow: [{\n    type: ContentChild,\n    args: [CdkNoDataRow]\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTable, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-table, table[cdk-table]',\n      exportAs: 'cdkTable',\n      template: CDK_TABLE_TEMPLATE,\n      host: {\n        'class': 'cdk-table',\n        '[class.cdk-table-fixed-layout]': 'fixedLayout'\n      },\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.Default,\n      providers: [{\n        provide: CDK_TABLE,\n        useExisting: CdkTable\n      }, {\n        provide: _VIEW_REPEATER_STRATEGY,\n        useClass: _DisposeViewRepeaterStrategy\n      }, {\n        provide: _COALESCED_STYLE_SCHEDULER,\n        useClass: _CoalescedStyleScheduler\n      },\n      // Prevent nested tables from seeing this table's StickyPositioningListener.\n      {\n        provide: STICKY_POSITIONING_LISTENER,\n        useValue: null\n      }],\n      styles: [\".cdk-table-fixed-layout{table-layout:fixed}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.IterableDiffers\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['role']\n      }]\n    }, {\n      type: ɵngcc1.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc2.Platform\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [_VIEW_REPEATER_STRATEGY]\n      }]\n    }, {\n      type: _CoalescedStyleScheduler,\n      decorators: [{\n        type: Inject,\n        args: [_COALESCED_STYLE_SCHEDULER]\n      }]\n    }, {\n      type: ɵngcc3.ViewportRuler\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }, {\n        type: Inject,\n        args: [STICKY_POSITIONING_LISTENER]\n      }]\n    }];\n  }, {\n    contentChanged: [{\n      type: Output\n    }],\n    trackBy: [{\n      type: Input\n    }],\n    dataSource: [{\n      type: Input\n    }],\n    multiTemplateDataRows: [{\n      type: Input\n    }],\n    fixedLayout: [{\n      type: Input\n    }],\n    _rowOutlet: [{\n      type: ViewChild,\n      args: [DataRowOutlet, {\n        static: true\n      }]\n    }],\n    _headerRowOutlet: [{\n      type: ViewChild,\n      args: [HeaderRowOutlet, {\n        static: true\n      }]\n    }],\n    _footerRowOutlet: [{\n      type: ViewChild,\n      args: [FooterRowOutlet, {\n        static: true\n      }]\n    }],\n    _noDataRowOutlet: [{\n      type: ViewChild,\n      args: [NoDataRowOutlet, {\n        static: true\n      }]\n    }],\n    _contentColumnDefs: [{\n      type: ContentChildren,\n      args: [CdkColumnDef, {\n        descendants: true\n      }]\n    }],\n    _contentRowDefs: [{\n      type: ContentChildren,\n      args: [CdkRowDef, {\n        descendants: true\n      }]\n    }],\n    _contentHeaderRowDefs: [{\n      type: ContentChildren,\n      args: [CdkHeaderRowDef, {\n        descendants: true\n      }]\n    }],\n    _contentFooterRowDefs: [{\n      type: ContentChildren,\n      args: [CdkFooterRowDef, {\n        descendants: true\n      }]\n    }],\n    _noDataRow: [{\n      type: ContentChild,\n      args: [CdkNoDataRow]\n    }]\n  });\n})();\n/** Utility function that gets a merged list of the entries in an array and values of a Set. */\nfunction mergeArrayAndSet(array, set) {\n  return array.concat(Array.from(set));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\nclass CdkTextColumn {\n  constructor(\n  // `CdkTextColumn` is always requiring a table, but we just assert it manually\n  // for better error reporting.\n  // tslint:disable-next-line: lightweight-tokens\n  _table, _options) {\n    this._table = _table;\n    this._options = _options;\n    /** Alignment of the cell values. */\n    this.justify = 'start';\n    this._options = _options || {};\n  }\n  /** Column name that should be used to reference this column. */\n  get name() {\n    return this._name;\n  }\n  set name(name) {\n    this._name = name;\n    // With Ivy, inputs can be initialized before static query results are\n    // available. In that case, we defer the synchronization until \"ngOnInit\" fires.\n    this._syncColumnDefName();\n  }\n  ngOnInit() {\n    this._syncColumnDefName();\n    if (this.headerText === undefined) {\n      this.headerText = this._createDefaultHeaderText();\n    }\n    if (!this.dataAccessor) {\n      this.dataAccessor = this._options.defaultDataAccessor || ((data, name) => data[name]);\n    }\n    if (this._table) {\n      // Provide the cell and headerCell directly to the table with the static `ViewChild` query,\n      // since the columnDef will not pick up its content by the time the table finishes checking\n      // its content and initializing the rows.\n      this.columnDef.cell = this.cell;\n      this.columnDef.headerCell = this.headerCell;\n      this._table.addColumnDef(this.columnDef);\n    } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throw getTableTextColumnMissingParentTableError();\n    }\n  }\n  ngOnDestroy() {\n    if (this._table) {\n      this._table.removeColumnDef(this.columnDef);\n    }\n  }\n  /**\n   * Creates a default header text. Use the options' header text transformation function if one\n   * has been provided. Otherwise simply capitalize the column name.\n   */\n  _createDefaultHeaderText() {\n    const name = this.name;\n    if (!name && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTableTextColumnMissingNameError();\n    }\n    if (this._options && this._options.defaultHeaderTextTransform) {\n      return this._options.defaultHeaderTextTransform(name);\n    }\n    return name[0].toUpperCase() + name.slice(1);\n  }\n  /** Synchronizes the column definition name with the text column name. */\n  _syncColumnDefName() {\n    if (this.columnDef) {\n      this.columnDef.name = this.name;\n    }\n  }\n}\nCdkTextColumn.ɵfac = function CdkTextColumn_Factory(t) {\n  return new (t || CdkTextColumn)(ɵngcc0.ɵɵdirectiveInject(CdkTable, 8), ɵngcc0.ɵɵdirectiveInject(TEXT_COLUMN_OPTIONS, 8));\n};\nCdkTextColumn.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: CdkTextColumn,\n  selectors: [[\"cdk-text-column\"]],\n  viewQuery: function CdkTextColumn_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(CdkColumnDef, 7);\n      ɵngcc0.ɵɵviewQuery(CdkCellDef, 7);\n      ɵngcc0.ɵɵviewQuery(CdkHeaderCellDef, 7);\n    }\n    if (rf & 2) {\n      let _t;\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.columnDef = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cell = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerCell = _t.first);\n    }\n  },\n  inputs: {\n    justify: \"justify\",\n    name: \"name\",\n    headerText: \"headerText\",\n    dataAccessor: \"dataAccessor\"\n  },\n  decls: 8,\n  vars: 0,\n  consts: [[\"cdkColumnDef\", \"\"], [\"cdk-header-cell\", \"\", 3, \"text-align\", 4, \"cdkHeaderCellDef\"], [\"cdk-cell\", \"\", 3, \"text-align\", 4, \"cdkCellDef\"], [\"cdk-header-cell\", \"\"], [\"cdk-cell\", \"\"]],\n  template: function CdkTextColumn_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtext(0, \"\\n    \");\n      ɵngcc0.ɵɵelementContainerStart(1, 0);\n      ɵngcc0.ɵɵtext(2, \"\\n      \");\n      ɵngcc0.ɵɵtemplate(3, CdkTextColumn_th_3_Template, 2, 3, \"th\", 1);\n      ɵngcc0.ɵɵtext(4, \"\\n      \");\n      ɵngcc0.ɵɵtemplate(5, CdkTextColumn_td_5_Template, 2, 3, \"td\", 2);\n      ɵngcc0.ɵɵtext(6, \"\\n    \");\n      ɵngcc0.ɵɵelementContainerEnd();\n      ɵngcc0.ɵɵtext(7, \"\\n  \");\n    }\n  },\n  dependencies: [CdkCellDef, CdkHeaderCellDef, CdkColumnDef, CdkCell, CdkHeaderCell],\n  encapsulation: 2\n});\nCdkTextColumn.ctorParameters = () => [{\n  type: CdkTable,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [TEXT_COLUMN_OPTIONS]\n  }]\n}];\nCdkTextColumn.propDecorators = {\n  name: [{\n    type: Input\n  }],\n  headerText: [{\n    type: Input\n  }],\n  dataAccessor: [{\n    type: Input\n  }],\n  justify: [{\n    type: Input\n  }],\n  columnDef: [{\n    type: ViewChild,\n    args: [CdkColumnDef, {\n      static: true\n    }]\n  }],\n  cell: [{\n    type: ViewChild,\n    args: [CdkCellDef, {\n      static: true\n    }]\n  }],\n  headerCell: [{\n    type: ViewChild,\n    args: [CdkHeaderCellDef, {\n      static: true\n    }]\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTextColumn, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-text-column',\n      template: `\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      // Change detection is intentionally not set to OnPush. This component's template will be provided\n      // to the table to be inserted into its view. This is problematic when change detection runs since\n      // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n      // mean's the template in the table's view will not have the updated value (and in fact will cause\n      // an ExpressionChangedAfterItHasBeenCheckedError).\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default\n    }]\n  }], function () {\n    return [{\n      type: CdkTable,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [TEXT_COLUMN_OPTIONS]\n      }]\n    }];\n  }, {\n    justify: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    headerText: [{\n      type: Input\n    }],\n    dataAccessor: [{\n      type: Input\n    }],\n    columnDef: [{\n      type: ViewChild,\n      args: [CdkColumnDef, {\n        static: true\n      }]\n    }],\n    cell: [{\n      type: ViewChild,\n      args: [CdkCellDef, {\n        static: true\n      }]\n    }],\n    headerCell: [{\n      type: ViewChild,\n      args: [CdkHeaderCellDef, {\n        static: true\n      }]\n    }]\n  });\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst EXPORTED_DECLARATIONS = [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CdkTextColumn, CdkNoDataRow, CdkRecycleRows, NoDataRowOutlet];\nclass CdkTableModule {}\nCdkTableModule.ɵfac = function CdkTableModule_Factory(t) {\n  return new (t || CdkTableModule)();\n};\nCdkTableModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: CdkTableModule\n});\nCdkTableModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [ScrollingModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTableModule, [{\n    type: NgModule,\n    args: [{\n      exports: EXPORTED_DECLARATIONS,\n      declarations: EXPORTED_DECLARATIONS,\n      imports: [ScrollingModule]\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkTableModule, {\n    declarations: function () {\n      return [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CdkTextColumn, CdkNoDataRow, CdkRecycleRows, NoDataRowOutlet];\n    },\n    imports: function () {\n      return [ScrollingModule];\n    },\n    exports: function () {\n      return [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CdkTextColumn, CdkNoDataRow, CdkRecycleRows, NoDataRowOutlet];\n    }\n  });\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseCdkCell, BaseRowDef, CDK_ROW_TEMPLATE, CDK_TABLE, CDK_TABLE_TEMPLATE, CdkCell, CdkCellDef, CdkCellOutlet, CdkColumnDef, CdkFooterCell, CdkFooterCellDef, CdkFooterRow, CdkFooterRowDef, CdkHeaderCell, CdkHeaderCellDef, CdkHeaderRow, CdkHeaderRowDef, CdkNoDataRow, CdkRecycleRows, CdkRow, CdkRowDef, CdkTable, CdkTableModule, CdkTextColumn, DataRowOutlet, FooterRowOutlet, HeaderRowOutlet, NoDataRowOutlet, STICKY_DIRECTIONS, STICKY_POSITIONING_LISTENER, StickyStyler, TEXT_COLUMN_OPTIONS, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, _Schedule, mixinHasStickyInput };","map":{"version":3,"names":["Directionality","coerceBooleanProperty","_VIEW_REPEATER_STRATEGY","_RecycleViewRepeaterStrategy","isDataSource","_DisposeViewRepeaterStrategy","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","_c0","_c1","CdkTextColumn_th_3_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ctx_r0","ɵɵnextContext","ɵɵstyleProp","justify","ɵɵadvance","ɵɵtextInterpolate1","headerText","CdkTextColumn_td_5_Template","data_r2","$implicit","ctx_r1","dataAccessor","name","DataSource","Platform","ViewportRuler","ScrollingModule","DOCUMENT","InjectionToken","Directive","TemplateRef","Inject","Optional","Input","ContentChild","ElementRef","Injectable","NgZone","IterableDiffers","ViewContainerRef","Component","ChangeDetectionStrategy","ViewEncapsulation","EmbeddedViewRef","EventEmitter","ChangeDetectorRef","Attribute","SkipSelf","Output","ViewChild","ContentChildren","NgModule","Subject","from","BehaviorSubject","isObservable","of","takeUntil","take","mixinHasStickyInput","base","constructor","args","_sticky","_hasStickyChanged","sticky","v","prevValue","hasStickyChanged","resetStickyChanged","CDK_TABLE","TEXT_COLUMN_OPTIONS","CdkCellDef","template","ɵfac","CdkCellDef_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","selectors","ctorParameters","ngDevMode","ɵsetClassMetadata","selector","CdkHeaderCellDef","CdkHeaderCellDef_Factory","CdkFooterCellDef","CdkFooterCellDef_Factory","CdkColumnDefBase","_CdkColumnDefBase","CdkColumnDef","_table","_stickyEnd","_name","_setNameInput","stickyEnd","_updateColumnCssClassName","_columnCssClassName","cssClassFriendlyName","value","replace","CdkColumnDef_Factory","contentQueries","CdkColumnDef_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","cell","first","headerCell","footerCell","inputs","features","ɵɵProvidersFeature","provide","useExisting","ɵɵInheritDefinitionFeature","undefined","decorators","propDecorators","providers","BaseCdkCell","columnDef","elementRef","classList","nativeElement","className","add","CdkHeaderCell","CdkHeaderCell_Factory","hostAttrs","host","CdkFooterCell","_a","_elementRef","nodeType","tableRole","getAttribute","role","setAttribute","CdkFooterCell_Factory","CdkCell","CdkCell_Factory","_Schedule","tasks","endTasks","_COALESCED_STYLE_SCHEDULER","_CoalescedStyleScheduler","_ngZone","_currentSchedule","_destroyed","schedule","task","_createScheduleIfNeeded","push","scheduleEnd","ngOnDestroy","next","complete","_getScheduleObservable","pipe","subscribe","length","isStable","Promise","resolve","onStable","_CoalescedStyleScheduler_Factory","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","CDK_ROW_TEMPLATE","BaseRowDef","_differs","ngOnChanges","changes","_columnsDiffer","columns","currentValue","find","create","diff","getColumnsDiff","extractCellTemplate","column","CdkHeaderRowDef","CdkFooterRowDef","BaseRowDef_Factory","ɵɵNgOnChangesFeature","CdkHeaderRowDefBase","_CdkHeaderRowDefBase","CdkHeaderRowDef_Factory","CdkFooterRowDefBase","_CdkFooterRowDefBase","CdkFooterRowDef_Factory","CdkRowDef","CdkRowDef_Factory","when","CdkCellOutlet","_viewContainer","mostRecentCellOutlet","CdkCellOutlet_Factory","CdkHeaderRow","CdkHeaderRow_Factory","ɵcmp","ɵɵdefineComponent","decls","vars","consts","CdkHeaderRow_Template","ɵɵelementContainer","dependencies","encapsulation","changeDetection","Default","None","CdkFooterRow","CdkFooterRow_Factory","CdkFooterRow_Template","CdkRow","CdkRow_Factory","CdkRow_Template","CdkNoDataRow","templateRef","CdkNoDataRow_Factory","STICKY_DIRECTIONS","StickyStyler","_isNativeHtmlTable","_stickCellCss","direction","_coalescedStyleScheduler","_isBrowser","_needsPositionStickyOnElement","_positionListener","_cachedCellWidths","_borderCellCss","clearStickyPositioning","rows","stickyDirections","elementsToClear","row","ELEMENT_NODE","i","children","element","_removeStickyStyle","updateStickyColumns","stickyStartStates","stickyEndStates","recalculateCellWidths","some","state","stickyColumnsUpdated","sizes","stickyEndColumnsUpdated","firstRow","numCells","cellWidths","_getCellWidths","startPositions","_getStickyStartColumnPositions","endPositions","_getStickyEndColumnPositions","lastStickyStart","lastIndexOf","firstStickyEnd","indexOf","isRtl","start","end","_addStickyStyle","slice","map","width","index","reverse","stickRows","rowsToStick","stickyStates","position","states","stickyOffsets","stickyCellHeights","elementsToStick","rowIndex","stickyOffset","Array","height","getBoundingClientRect","borderedRowIndex","_b","offset","isBorderedRowIndex","stickyHeaderRowsUpdated","offsets","elements","stickyFooterRowsUpdated","updateStickyFooterContainer","tableElement","tfoot","querySelector","dir","style","remove","hasDirection","zIndex","_getCalculatedZIndex","dirValue","isBorderElement","cssText","zIndexIncrements","top","bottom","left","right","firstRowCells","widths","positions","nextPosition","getTableUnknownColumnError","id","Error","getTableDuplicateColumnNameError","getTableMultipleDefaultRowDefsError","getTableMissingMatchingRowDefError","data","JSON","stringify","getTableMissingRowDefsError","getTableUnknownDataSourceError","getTableTextColumnMissingParentTableError","getTableTextColumnMissingNameError","STICKY_POSITIONING_LISTENER","CdkRecycleRows","CdkRecycleRows_Factory","useClass","DataRowOutlet","viewContainer","DataRowOutlet_Factory","HeaderRowOutlet","HeaderRowOutlet_Factory","FooterRowOutlet","FooterRowOutlet_Factory","NoDataRowOutlet","NoDataRowOutlet_Factory","CDK_TABLE_TEMPLATE","RowViewRef","CdkTable","_changeDetectorRef","_dir","_document","_platform","_viewRepeater","_viewportRuler","_stickyPositioningListener","_onDestroy","_columnDefsByName","Map","_customColumnDefs","Set","_customRowDefs","_customHeaderRowDefs","_customFooterRowDefs","_headerRowDefChanged","_footerRowDefChanged","_stickyColumnStylesNeedReset","_forceRecalculateCellWidths","_cachedRenderRowsMap","stickyCssClass","needsPositionStickyOnElement","_isShowingNoDataRow","_multiTemplateDataRows","_fixedLayout","contentChanged","viewChange","Number","MAX_VALUE","nodeName","trackBy","_trackByFn","fn","console","warn","dataSource","_dataSource","_switchDataSource","multiTemplateDataRows","_rowOutlet","_forceRenderDataRows","updateStickyColumnStyles","fixedLayout","ngOnInit","_setupStickyStyler","_applyNativeTableSections","_dataDiffer","_i","dataRow","dataIndex","change","ngAfterContentChecked","_cacheRowDefs","_cacheColumnDefs","_headerRowDefs","_footerRowDefs","_rowDefs","columnsChanged","_renderUpdatedColumns","rowDefsChanged","_forceRenderHeaderRows","_forceRenderFooterRows","_renderChangeSubscription","_observeRenderChanges","_checkStickyStates","clear","_noDataRowOutlet","_headerRowOutlet","_footerRowOutlet","disconnect","renderRows","_renderRows","_getAllRenderRows","_updateNoDataRow","applyChanges","record","_adjustedPreviousIndex","currentIndex","_getEmbeddedViewArgs","item","operation","context","_renderCellTemplateForItem","rowDef","_updateRowIndexContext","forEachIdentityChange","rowView","get","addColumnDef","removeColumnDef","delete","addRowDef","removeRowDef","addHeaderRowDef","headerRowDef","removeHeaderRowDef","addFooterRowDef","footerRowDef","removeFooterRowDef","setNoDataRow","noDataRow","_customNoDataRow","updateStickyHeaderRowStyles","headerRows","_getRenderedRows","thead","display","def","_stickyStyler","forEach","updateStickyFooterRowStyles","footerRows","dataRows","headerRow","_addStickyColumnStyles","footerRow","values","prevCachedRenderRows","_data","renderRowsForData","_getRenderRowsForData","has","set","WeakMap","j","renderRow","cache","rowDefs","_getRowDefs","cachedRenderRows","shift","columnDefs","mergeArrayAndSet","_getOwnDefs","_contentColumnDefs","_contentHeaderRowDefs","_contentFooterRowDefs","_contentRowDefs","defaultRowDefs","filter","_defaultRowDef","columnsDiffReducer","acc","dataColumnsChanged","reduce","headerColumnsChanged","footerColumnsChanged","unsubscribe","dataStream","connect","isArray","_renderRow","columnName","rowOutlet","renderedRows","viewRef","rootNodes","outlet","view","createEmbeddedView","cellTemplate","_getCellTemplates","markForCheck","renderIndex","count","last","even","odd","columnId","documentFragment","createDocumentFragment","sections","tag","outlets","section","createElement","appendChild","stickyCheckReducer","d","isBrowser","items","_noDataRow","shouldShow","container","CdkTable_Factory","ɵɵinjectAttribute","CdkTable_ContentQueries","viewQuery","CdkTable_Query","ɵɵviewQuery","hostVars","hostBindings","CdkTable_HostBindings","ɵɵclassProp","outputs","exportAs","useValue","ngContentSelectors","CdkTable_Template","ɵɵprojectionDef","ɵɵprojection","styles","String","static","descendants","array","concat","CdkTextColumn","_options","_syncColumnDefName","_createDefaultHeaderText","defaultDataAccessor","defaultHeaderTextTransform","toUpperCase","CdkTextColumn_Factory","CdkTextColumn_Query","CdkTextColumn_Template","ɵɵelementContainerStart","ɵɵtemplate","ɵɵelementContainerEnd","EXPORTED_DECLARATIONS","CdkTableModule","CdkTableModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope"],"sources":["/home/ceo/mmmm/createyourevent/node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/table.js"],"sourcesContent":["import { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy, isDataSource, _DisposeViewRepeaterStrategy } from '@angular/cdk/collections';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\nimport * as ɵngcc2 from '@angular/cdk/platform';\nimport * as ɵngcc3 from '@angular/cdk/scrolling';\n\nconst _c0 = [[[\"caption\"]], [[\"colgroup\"], [\"col\"]]];\nconst _c1 = [\"caption\", \"colgroup, col\"];\nfunction CdkTextColumn_th_3_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"th\", 3);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"text-align\", ctx_r0.justify);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\"\\n        \", ctx_r0.headerText, \"\\n      \");\n} }\nfunction CdkTextColumn_td_5_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"td\", 4);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const data_r2 = ctx.$implicit;\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"text-align\", ctx_r1.justify);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\"\\n        \", ctx_r1.dataAccessor(data_r2, ctx_r1.name), \"\\n      \");\n} }\nexport { DataSource } from '@angular/cdk/collections';\nimport { Platform } from '@angular/cdk/platform';\nimport { ViewportRuler, ScrollingModule } from '@angular/cdk/scrolling';\nimport { DOCUMENT } from '@angular/common';\nimport { InjectionToken, Directive, TemplateRef, Inject, Optional, Input, ContentChild, ElementRef, Injectable, NgZone, IterableDiffers, ViewContainerRef, Component, ChangeDetectionStrategy, ViewEncapsulation, EmbeddedViewRef, EventEmitter, ChangeDetectorRef, Attribute, SkipSelf, Output, ViewChild, ContentChildren, NgModule } from '@angular/core';\nimport { Subject, from, BehaviorSubject, isObservable, of } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Mixin to provide a directive with a function that checks if the sticky input has been\n * changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * @docs-private\n */\nfunction mixinHasStickyInput(base) {\n    return class extends base {\n        constructor(...args) {\n            super(...args);\n            this._sticky = false;\n            /** Whether the sticky input has changed since it was last checked. */\n            this._hasStickyChanged = false;\n        }\n        /** Whether sticky positioning should be applied. */\n        get sticky() { return this._sticky; }\n        set sticky(v) {\n            const prevValue = this._sticky;\n            this._sticky = coerceBooleanProperty(v);\n            this._hasStickyChanged = prevValue !== this._sticky;\n        }\n        /** Whether the sticky value has changed since this was last called. */\n        hasStickyChanged() {\n            const hasStickyChanged = this._hasStickyChanged;\n            this._hasStickyChanged = false;\n            return hasStickyChanged;\n        }\n        /** Resets the dirty check for cases where the sticky state has been used without checking. */\n        resetStickyChanged() {\n            this._hasStickyChanged = false;\n        }\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Used to provide a table to some of the sub-components without causing a circular dependency.\n * @docs-private\n */\nconst CDK_TABLE = new InjectionToken('CDK_TABLE');\n/** Injection token that can be used to specify the text column options. */\nconst TEXT_COLUMN_OPTIONS = new InjectionToken('text-column-options');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass CdkCellDef {\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkCellDef.ɵfac = function CdkCellDef_Factory(t) { return new (t || CdkCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkCellDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkCellDef, selectors: [[\"\", \"cdkCellDef\", \"\"]] });\nCdkCellDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkCellDef, [{\n        type: Directive,\n        args: [{ selector: '[cdkCellDef]' }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass CdkHeaderCellDef {\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkHeaderCellDef.ɵfac = function CdkHeaderCellDef_Factory(t) { return new (t || CdkHeaderCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkHeaderCellDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkHeaderCellDef, selectors: [[\"\", \"cdkHeaderCellDef\", \"\"]] });\nCdkHeaderCellDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderCellDef, [{\n        type: Directive,\n        args: [{ selector: '[cdkHeaderCellDef]' }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass CdkFooterCellDef {\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkFooterCellDef.ɵfac = function CdkFooterCellDef_Factory(t) { return new (t || CdkFooterCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkFooterCellDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkFooterCellDef, selectors: [[\"\", \"cdkFooterCellDef\", \"\"]] });\nCdkFooterCellDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterCellDef, [{\n        type: Directive,\n        args: [{ selector: '[cdkFooterCellDef]' }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n// Boilerplate for applying mixins to CdkColumnDef.\n/** @docs-private */\nclass CdkColumnDefBase {\n}\nconst _CdkColumnDefBase = mixinHasStickyInput(CdkColumnDefBase);\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\nclass CdkColumnDef extends _CdkColumnDefBase {\n    constructor(_table) {\n        super();\n        this._table = _table;\n        this._stickyEnd = false;\n    }\n    /** Unique name for this column. */\n    get name() { return this._name; }\n    set name(name) { this._setNameInput(name); }\n    /**\n     * Whether this column should be sticky positioned on the end of the row. Should make sure\n     * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n     * has been changed.\n     */\n    get stickyEnd() {\n        return this._stickyEnd;\n    }\n    set stickyEnd(v) {\n        const prevValue = this._stickyEnd;\n        this._stickyEnd = coerceBooleanProperty(v);\n        this._hasStickyChanged = prevValue !== this._stickyEnd;\n    }\n    /**\n     * Overridable method that sets the css classes that will be added to every cell in this\n     * column.\n     * In the future, columnCssClassName will change from type string[] to string and this\n     * will set a single string value.\n     * @docs-private\n     */\n    _updateColumnCssClassName() {\n        this._columnCssClassName = [`cdk-column-${this.cssClassFriendlyName}`];\n    }\n    /**\n     * This has been extracted to a util because of TS 4 and VE.\n     * View Engine doesn't support property rename inheritance.\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n     * @docs-private\n     */\n    _setNameInput(value) {\n        // If the directive is set without a name (updated programmatically), then this setter will\n        // trigger with an empty string and should not overwrite the programmatically set value.\n        if (value) {\n            this._name = value;\n            this.cssClassFriendlyName = value.replace(/[^a-z0-9_-]/ig, '-');\n            this._updateColumnCssClassName();\n        }\n    }\n}\nCdkColumnDef.ɵfac = function CdkColumnDef_Factory(t) { return new (t || CdkColumnDef)(ɵngcc0.ɵɵdirectiveInject(CDK_TABLE, 8)); };\nCdkColumnDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkColumnDef, selectors: [[\"\", \"cdkColumnDef\", \"\"]], contentQueries: function CdkColumnDef_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkCellDef, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkHeaderCellDef, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkFooterCellDef, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cell = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerCell = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.footerCell = _t.first);\n    } }, inputs: { sticky: \"sticky\", name: [\"cdkColumnDef\", \"name\"], stickyEnd: \"stickyEnd\" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nCdkColumnDef.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TABLE,] }, { type: Optional }] }\n];\nCdkColumnDef.propDecorators = {\n    name: [{ type: Input, args: ['cdkColumnDef',] }],\n    stickyEnd: [{ type: Input, args: ['stickyEnd',] }],\n    cell: [{ type: ContentChild, args: [CdkCellDef,] }],\n    headerCell: [{ type: ContentChild, args: [CdkHeaderCellDef,] }],\n    footerCell: [{ type: ContentChild, args: [CdkFooterCellDef,] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkColumnDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkColumnDef]',\n                inputs: ['sticky'],\n                providers: [{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }]\n            }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_TABLE]\n            }, {\n                type: Optional\n            }] }]; }, { name: [{\n            type: Input,\n            args: ['cdkColumnDef']\n        }], stickyEnd: [{\n            type: Input,\n            args: ['stickyEnd']\n        }], cell: [{\n            type: ContentChild,\n            args: [CdkCellDef]\n        }], headerCell: [{\n            type: ContentChild,\n            args: [CdkHeaderCellDef]\n        }], footerCell: [{\n            type: ContentChild,\n            args: [CdkFooterCellDef]\n        }] }); })();\n/** Base class for the cells. Adds a CSS classname that identifies the column it renders in. */\nclass BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        // If IE 11 is dropped before we switch to setting a single class name, change to multi param\n        // with destructuring.\n        const classList = elementRef.nativeElement.classList;\n        for (const className of columnDef._columnCssClassName) {\n            classList.add(className);\n        }\n    }\n}\n/** Header cell template container that adds the right classes and role. */\nclass CdkHeaderCell extends BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n}\nCdkHeaderCell.ɵfac = function CdkHeaderCell_Factory(t) { return new (t || CdkHeaderCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCdkHeaderCell.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkHeaderCell, selectors: [[\"cdk-header-cell\"], [\"th\", \"cdk-header-cell\", \"\"]], hostAttrs: [\"role\", \"columnheader\", 1, \"cdk-header-cell\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nCdkHeaderCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderCell, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-header-cell, th[cdk-header-cell]',\n                host: {\n                    'class': 'cdk-header-cell',\n                    'role': 'columnheader'\n                }\n            }]\n    }], function () { return [{ type: CdkColumnDef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n/** Footer cell template container that adds the right classes and role. */\nclass CdkFooterCell extends BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        var _a;\n        super(columnDef, elementRef);\n        if (((_a = columnDef._table) === null || _a === void 0 ? void 0 : _a._elementRef.nativeElement.nodeType) === 1) {\n            const tableRole = columnDef._table._elementRef.nativeElement\n                .getAttribute('role');\n            const role = (tableRole === 'grid' || tableRole === 'treegrid') ? 'gridcell' : 'cell';\n            elementRef.nativeElement.setAttribute('role', role);\n        }\n    }\n}\nCdkFooterCell.ɵfac = function CdkFooterCell_Factory(t) { return new (t || CdkFooterCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCdkFooterCell.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkFooterCell, selectors: [[\"cdk-footer-cell\"], [\"td\", \"cdk-footer-cell\", \"\"]], hostAttrs: [1, \"cdk-footer-cell\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nCdkFooterCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterCell, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-footer-cell, td[cdk-footer-cell]',\n                host: {\n                    'class': 'cdk-footer-cell'\n                }\n            }]\n    }], function () { return [{ type: CdkColumnDef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n/** Cell template container that adds the right classes and role. */\nclass CdkCell extends BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        var _a;\n        super(columnDef, elementRef);\n        if (((_a = columnDef._table) === null || _a === void 0 ? void 0 : _a._elementRef.nativeElement.nodeType) === 1) {\n            const tableRole = columnDef._table._elementRef.nativeElement\n                .getAttribute('role');\n            const role = (tableRole === 'grid' || tableRole === 'treegrid') ? 'gridcell' : 'cell';\n            elementRef.nativeElement.setAttribute('role', role);\n        }\n    }\n}\nCdkCell.ɵfac = function CdkCell_Factory(t) { return new (t || CdkCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCdkCell.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkCell, selectors: [[\"cdk-cell\"], [\"td\", \"cdk-cell\", \"\"]], hostAttrs: [1, \"cdk-cell\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nCdkCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkCell, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-cell, td[cdk-cell]',\n                host: {\n                    'class': 'cdk-cell'\n                }\n            }]\n    }], function () { return [{ type: CdkColumnDef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @docs-private\n */\nclass _Schedule {\n    constructor() {\n        this.tasks = [];\n        this.endTasks = [];\n    }\n}\n/** Injection token used to provide a coalesced style scheduler. */\nconst _COALESCED_STYLE_SCHEDULER = new InjectionToken('_COALESCED_STYLE_SCHEDULER');\n/**\n * Allows grouping up CSSDom mutations after the current execution context.\n * This can significantly improve performance when separate consecutive functions are\n * reading from the CSSDom and then mutating it.\n *\n * @docs-private\n */\nclass _CoalescedStyleScheduler {\n    constructor(_ngZone) {\n        this._ngZone = _ngZone;\n        this._currentSchedule = null;\n        this._destroyed = new Subject();\n    }\n    /**\n     * Schedules the specified task to run at the end of the current VM turn.\n     */\n    schedule(task) {\n        this._createScheduleIfNeeded();\n        this._currentSchedule.tasks.push(task);\n    }\n    /**\n     * Schedules the specified task to run after other scheduled tasks at the end of the current\n     * VM turn.\n     */\n    scheduleEnd(task) {\n        this._createScheduleIfNeeded();\n        this._currentSchedule.endTasks.push(task);\n    }\n    /** Prevent any further tasks from running. */\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    _createScheduleIfNeeded() {\n        if (this._currentSchedule) {\n            return;\n        }\n        this._currentSchedule = new _Schedule();\n        this._getScheduleObservable().pipe(takeUntil(this._destroyed)).subscribe(() => {\n            while (this._currentSchedule.tasks.length || this._currentSchedule.endTasks.length) {\n                const schedule = this._currentSchedule;\n                // Capture new tasks scheduled by the current set of tasks.\n                this._currentSchedule = new _Schedule();\n                for (const task of schedule.tasks) {\n                    task();\n                }\n                for (const task of schedule.endTasks) {\n                    task();\n                }\n            }\n            this._currentSchedule = null;\n        });\n    }\n    _getScheduleObservable() {\n        // Use onStable when in the context of an ongoing change detection cycle so that we\n        // do not accidentally trigger additional cycles.\n        return this._ngZone.isStable ?\n            from(Promise.resolve(undefined)) :\n            this._ngZone.onStable.pipe(take(1));\n    }\n}\n_CoalescedStyleScheduler.ɵfac = function _CoalescedStyleScheduler_Factory(t) { return new (t || _CoalescedStyleScheduler)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\n_CoalescedStyleScheduler.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: _CoalescedStyleScheduler, factory: _CoalescedStyleScheduler.ɵfac });\n_CoalescedStyleScheduler.ctorParameters = () => [\n    { type: NgZone }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_CoalescedStyleScheduler, [{\n        type: Injectable\n    }], function () { return [{ type: ɵngcc0.NgZone }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n */\nconst CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n */\nclass BaseRowDef {\n    constructor(\n    /** @docs-private */ template, _differs) {\n        this.template = template;\n        this._differs = _differs;\n    }\n    ngOnChanges(changes) {\n        // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n        // of the columns property or an empty array if none is provided.\n        if (!this._columnsDiffer) {\n            const columns = (changes['columns'] && changes['columns'].currentValue) || [];\n            this._columnsDiffer = this._differs.find(columns).create();\n            this._columnsDiffer.diff(columns);\n        }\n    }\n    /**\n     * Returns the difference between the current columns and the columns from the last diff, or null\n     * if there is no difference.\n     */\n    getColumnsDiff() {\n        return this._columnsDiffer.diff(this.columns);\n    }\n    /** Gets this row def's relevant cell template from the provided column def. */\n    extractCellTemplate(column) {\n        if (this instanceof CdkHeaderRowDef) {\n            return column.headerCell.template;\n        }\n        if (this instanceof CdkFooterRowDef) {\n            return column.footerCell.template;\n        }\n        else {\n            return column.cell.template;\n        }\n    }\n}\nBaseRowDef.ɵfac = function BaseRowDef_Factory(t) { return new (t || BaseRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers)); };\nBaseRowDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: BaseRowDef, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nBaseRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BaseRowDef, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }]; }, null); })();\n// Boilerplate for applying mixins to CdkHeaderRowDef.\n/** @docs-private */\nclass CdkHeaderRowDefBase extends BaseRowDef {\n}\nconst _CdkHeaderRowDefBase = mixinHasStickyInput(CdkHeaderRowDefBase);\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass CdkHeaderRowDef extends _CdkHeaderRowDefBase {\n    constructor(template, _differs, _table) {\n        super(template, _differs);\n        this._table = _table;\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n}\nCdkHeaderRowDef.ɵfac = function CdkHeaderRowDef_Factory(t) { return new (t || CdkHeaderRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(CDK_TABLE, 8)); };\nCdkHeaderRowDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkHeaderRowDef, selectors: [[\"\", \"cdkHeaderRowDef\", \"\"]], inputs: { columns: [\"cdkHeaderRowDef\", \"columns\"], sticky: [\"cdkHeaderRowDefSticky\", \"sticky\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkHeaderRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TABLE,] }, { type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderRowDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkHeaderRowDef]',\n                inputs: ['columns: cdkHeaderRowDef', 'sticky: cdkHeaderRowDefSticky']\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_TABLE]\n            }, {\n                type: Optional\n            }] }]; }, null); })();\n// Boilerplate for applying mixins to CdkFooterRowDef.\n/** @docs-private */\nclass CdkFooterRowDefBase extends BaseRowDef {\n}\nconst _CdkFooterRowDefBase = mixinHasStickyInput(CdkFooterRowDefBase);\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass CdkFooterRowDef extends _CdkFooterRowDefBase {\n    constructor(template, _differs, _table) {\n        super(template, _differs);\n        this._table = _table;\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n}\nCdkFooterRowDef.ɵfac = function CdkFooterRowDef_Factory(t) { return new (t || CdkFooterRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(CDK_TABLE, 8)); };\nCdkFooterRowDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkFooterRowDef, selectors: [[\"\", \"cdkFooterRowDef\", \"\"]], inputs: { columns: [\"cdkFooterRowDef\", \"columns\"], sticky: [\"cdkFooterRowDefSticky\", \"sticky\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkFooterRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TABLE,] }, { type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterRowDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkFooterRowDef]',\n                inputs: ['columns: cdkFooterRowDef', 'sticky: cdkFooterRowDefSticky']\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_TABLE]\n            }, {\n                type: Optional\n            }] }]; }, null); })();\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nclass CdkRowDef extends BaseRowDef {\n    // TODO(andrewseguin): Add an input for providing a switch function to determine\n    //   if this template should be used.\n    constructor(template, _differs, _table) {\n        super(template, _differs);\n        this._table = _table;\n    }\n}\nCdkRowDef.ɵfac = function CdkRowDef_Factory(t) { return new (t || CdkRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(CDK_TABLE, 8)); };\nCdkRowDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkRowDef, selectors: [[\"\", \"cdkRowDef\", \"\"]], inputs: { columns: [\"cdkRowDefColumns\", \"columns\"], when: [\"cdkRowDefWhen\", \"when\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nCdkRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TABLE,] }, { type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkRowDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkRowDef]',\n                inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen']\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_TABLE]\n            }, {\n                type: Optional\n            }] }]; }, null); })();\n/**\n * Outlet for rendering cells inside of a row or header row.\n * @docs-private\n */\nclass CdkCellOutlet {\n    constructor(_viewContainer) {\n        this._viewContainer = _viewContainer;\n        CdkCellOutlet.mostRecentCellOutlet = this;\n    }\n    ngOnDestroy() {\n        // If this was the last outlet being rendered in the view, remove the reference\n        // from the static property after it has been destroyed to avoid leaking memory.\n        if (CdkCellOutlet.mostRecentCellOutlet === this) {\n            CdkCellOutlet.mostRecentCellOutlet = null;\n        }\n    }\n}\nCdkCellOutlet.ɵfac = function CdkCellOutlet_Factory(t) { return new (t || CdkCellOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };\nCdkCellOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkCellOutlet, selectors: [[\"\", \"cdkCellOutlet\", \"\"]] });\n/**\n * Static property containing the latest constructed instance of this class.\n * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n * createEmbeddedView. After one of these components are created, this property will provide\n * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n * construct the cells with the provided context.\n */\nCdkCellOutlet.mostRecentCellOutlet = null;\nCdkCellOutlet.ctorParameters = () => [\n    { type: ViewContainerRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkCellOutlet, [{\n        type: Directive,\n        args: [{ selector: '[cdkCellOutlet]' }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }]; }, null); })();\n/** Header template container that contains the cell outlet. Adds the right class and role. */\nclass CdkHeaderRow {\n}\nCdkHeaderRow.ɵfac = function CdkHeaderRow_Factory(t) { return new (t || CdkHeaderRow)(); };\nCdkHeaderRow.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CdkHeaderRow, selectors: [[\"cdk-header-row\"], [\"tr\", \"cdk-header-row\", \"\"]], hostAttrs: [\"role\", \"row\", 1, \"cdk-header-row\"], decls: 1, vars: 0, consts: [[\"cdkCellOutlet\", \"\"]], template: function CdkHeaderRow_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, dependencies: [CdkCellOutlet], encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderRow, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-header-row, tr[cdk-header-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-header-row',\n                    'role': 'row'\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], null, null); })();\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\nclass CdkFooterRow {\n}\nCdkFooterRow.ɵfac = function CdkFooterRow_Factory(t) { return new (t || CdkFooterRow)(); };\nCdkFooterRow.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CdkFooterRow, selectors: [[\"cdk-footer-row\"], [\"tr\", \"cdk-footer-row\", \"\"]], hostAttrs: [\"role\", \"row\", 1, \"cdk-footer-row\"], decls: 1, vars: 0, consts: [[\"cdkCellOutlet\", \"\"]], template: function CdkFooterRow_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, dependencies: [CdkCellOutlet], encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterRow, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-footer-row, tr[cdk-footer-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-footer-row',\n                    'role': 'row'\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], null, null); })();\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\nclass CdkRow {\n}\nCdkRow.ɵfac = function CdkRow_Factory(t) { return new (t || CdkRow)(); };\nCdkRow.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CdkRow, selectors: [[\"cdk-row\"], [\"tr\", \"cdk-row\", \"\"]], hostAttrs: [\"role\", \"row\", 1, \"cdk-row\"], decls: 1, vars: 0, consts: [[\"cdkCellOutlet\", \"\"]], template: function CdkRow_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, dependencies: [CdkCellOutlet], encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkRow, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-row, tr[cdk-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-row',\n                    'role': 'row'\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], null, null); })();\n/** Row that can be used to display a message when no data is shown in the table. */\nclass CdkNoDataRow {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nCdkNoDataRow.ɵfac = function CdkNoDataRow_Factory(t) { return new (t || CdkNoDataRow)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkNoDataRow.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkNoDataRow, selectors: [[\"ng-template\", \"cdkNoDataRow\", \"\"]] });\nCdkNoDataRow.ctorParameters = () => [\n    { type: TemplateRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkNoDataRow, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkNoDataRow]'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * List of all possible directions that can be used for sticky positioning.\n * @docs-private\n */\nconst STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\n/**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * @docs-private\n */\nclass StickyStyler {\n    /**\n     * @param _isNativeHtmlTable Whether the sticky logic should be based on a table\n     *     that uses the native `<table>` element.\n     * @param _stickCellCss The CSS class that will be applied to every row/cell that has\n     *     sticky positioning applied.\n     * @param direction The directionality context of the table (ltr/rtl); affects column positioning\n     *     by reversing left/right positions.\n     * @param _isBrowser Whether the table is currently being rendered on the server or the client.\n     * @param _needsPositionStickyOnElement Whether we need to specify position: sticky on cells\n     *     using inline styles. If false, it is assumed that position: sticky is included in\n     *     the component stylesheet for _stickCellCss.\n     * @param _positionListener A listener that is notified of changes to sticky rows/columns\n     *     and their dimensions.\n     */\n    constructor(_isNativeHtmlTable, _stickCellCss, direction, _coalescedStyleScheduler, _isBrowser = true, _needsPositionStickyOnElement = true, _positionListener) {\n        this._isNativeHtmlTable = _isNativeHtmlTable;\n        this._stickCellCss = _stickCellCss;\n        this.direction = direction;\n        this._coalescedStyleScheduler = _coalescedStyleScheduler;\n        this._isBrowser = _isBrowser;\n        this._needsPositionStickyOnElement = _needsPositionStickyOnElement;\n        this._positionListener = _positionListener;\n        this._cachedCellWidths = [];\n        this._borderCellCss = {\n            'top': `${_stickCellCss}-border-elem-top`,\n            'bottom': `${_stickCellCss}-border-elem-bottom`,\n            'left': `${_stickCellCss}-border-elem-left`,\n            'right': `${_stickCellCss}-border-elem-right`,\n        };\n    }\n    /**\n     * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n     * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n     * @param rows The list of rows that should be cleared from sticking in the provided directions\n     * @param stickyDirections The directions that should no longer be set as sticky on the rows.\n     */\n    clearStickyPositioning(rows, stickyDirections) {\n        const elementsToClear = [];\n        for (const row of rows) {\n            // If the row isn't an element (e.g. if it's an `ng-container`),\n            // it won't have inline styles or `children` so we skip it.\n            if (row.nodeType !== row.ELEMENT_NODE) {\n                continue;\n            }\n            elementsToClear.push(row);\n            for (let i = 0; i < row.children.length; i++) {\n                elementsToClear.push(row.children[i]);\n            }\n        }\n        // Coalesce with sticky row/column updates (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            for (const element of elementsToClear) {\n                this._removeStickyStyle(element, stickyDirections);\n            }\n        });\n    }\n    /**\n     * Applies sticky left and right positions to the cells of each row according to the sticky\n     * states of the rendered column definitions.\n     * @param rows The rows that should have its set of cells stuck according to the sticky states.\n     * @param stickyStartStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the start of the row.\n     * @param stickyEndStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the end of the row.\n     * @param recalculateCellWidths Whether the sticky styler should recalculate the width of each\n     *     column cell. If `false` cached widths will be used instead.\n     */\n    updateStickyColumns(rows, stickyStartStates, stickyEndStates, recalculateCellWidths = true) {\n        if (!rows.length || !this._isBrowser || !(stickyStartStates.some(state => state) ||\n            stickyEndStates.some(state => state))) {\n            if (this._positionListener) {\n                this._positionListener.stickyColumnsUpdated({ sizes: [] });\n                this._positionListener.stickyEndColumnsUpdated({ sizes: [] });\n            }\n            return;\n        }\n        const firstRow = rows[0];\n        const numCells = firstRow.children.length;\n        const cellWidths = this._getCellWidths(firstRow, recalculateCellWidths);\n        const startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n        const endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n        const lastStickyStart = stickyStartStates.lastIndexOf(true);\n        const firstStickyEnd = stickyEndStates.indexOf(true);\n        // Coalesce with sticky row updates (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            const isRtl = this.direction === 'rtl';\n            const start = isRtl ? 'right' : 'left';\n            const end = isRtl ? 'left' : 'right';\n            for (const row of rows) {\n                for (let i = 0; i < numCells; i++) {\n                    const cell = row.children[i];\n                    if (stickyStartStates[i]) {\n                        this._addStickyStyle(cell, start, startPositions[i], i === lastStickyStart);\n                    }\n                    if (stickyEndStates[i]) {\n                        this._addStickyStyle(cell, end, endPositions[i], i === firstStickyEnd);\n                    }\n                }\n            }\n            if (this._positionListener) {\n                this._positionListener.stickyColumnsUpdated({\n                    sizes: lastStickyStart === -1 ?\n                        [] :\n                        cellWidths\n                            .slice(0, lastStickyStart + 1)\n                            .map((width, index) => stickyStartStates[index] ? width : null)\n                });\n                this._positionListener.stickyEndColumnsUpdated({\n                    sizes: firstStickyEnd === -1 ?\n                        [] :\n                        cellWidths\n                            .slice(firstStickyEnd)\n                            .map((width, index) => stickyEndStates[index + firstStickyEnd] ? width : null)\n                            .reverse()\n                });\n            }\n        });\n    }\n    /**\n     * Applies sticky positioning to the row's cells if using the native table layout, and to the\n     * row itself otherwise.\n     * @param rowsToStick The list of rows that should be stuck according to their corresponding\n     *     sticky state and to the provided top or bottom position.\n     * @param stickyStates A list of boolean states where each state represents whether the row\n     *     should be stuck in the particular top or bottom position.\n     * @param position The position direction in which the row should be stuck if that row should be\n     *     sticky.\n     *\n     */\n    stickRows(rowsToStick, stickyStates, position) {\n        // Since we can't measure the rows on the server, we can't stick the rows properly.\n        if (!this._isBrowser) {\n            return;\n        }\n        // If positioning the rows to the bottom, reverse their order when evaluating the sticky\n        // position such that the last row stuck will be \"bottom: 0px\" and so on. Note that the\n        // sticky states need to be reversed as well.\n        const rows = position === 'bottom' ? rowsToStick.slice().reverse() : rowsToStick;\n        const states = position === 'bottom' ? stickyStates.slice().reverse() : stickyStates;\n        // Measure row heights all at once before adding sticky styles to reduce layout thrashing.\n        const stickyOffsets = [];\n        const stickyCellHeights = [];\n        const elementsToStick = [];\n        for (let rowIndex = 0, stickyOffset = 0; rowIndex < rows.length; rowIndex++) {\n            if (!states[rowIndex]) {\n                continue;\n            }\n            stickyOffsets[rowIndex] = stickyOffset;\n            const row = rows[rowIndex];\n            elementsToStick[rowIndex] = this._isNativeHtmlTable ?\n                Array.from(row.children) : [row];\n            const height = row.getBoundingClientRect().height;\n            stickyOffset += height;\n            stickyCellHeights[rowIndex] = height;\n        }\n        const borderedRowIndex = states.lastIndexOf(true);\n        // Coalesce with other sticky row updates (top/bottom), sticky columns updates\n        // (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            var _a, _b;\n            for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n                if (!states[rowIndex]) {\n                    continue;\n                }\n                const offset = stickyOffsets[rowIndex];\n                const isBorderedRowIndex = rowIndex === borderedRowIndex;\n                for (const element of elementsToStick[rowIndex]) {\n                    this._addStickyStyle(element, position, offset, isBorderedRowIndex);\n                }\n            }\n            if (position === 'top') {\n                (_a = this._positionListener) === null || _a === void 0 ? void 0 : _a.stickyHeaderRowsUpdated({ sizes: stickyCellHeights, offsets: stickyOffsets, elements: elementsToStick });\n            }\n            else {\n                (_b = this._positionListener) === null || _b === void 0 ? void 0 : _b.stickyFooterRowsUpdated({ sizes: stickyCellHeights, offsets: stickyOffsets, elements: elementsToStick });\n            }\n        });\n    }\n    /**\n     * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n     * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n     * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n     * the tfoot element.\n     */\n    updateStickyFooterContainer(tableElement, stickyStates) {\n        if (!this._isNativeHtmlTable) {\n            return;\n        }\n        const tfoot = tableElement.querySelector('tfoot');\n        // Coalesce with other sticky updates (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            if (stickyStates.some(state => !state)) {\n                this._removeStickyStyle(tfoot, ['bottom']);\n            }\n            else {\n                this._addStickyStyle(tfoot, 'bottom', 0, false);\n            }\n        });\n    }\n    /**\n     * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n     * the zIndex, removing each of the provided sticky directions, and removing the\n     * sticky position if there are no more directions.\n     */\n    _removeStickyStyle(element, stickyDirections) {\n        for (const dir of stickyDirections) {\n            element.style[dir] = '';\n            element.classList.remove(this._borderCellCss[dir]);\n        }\n        // If the element no longer has any more sticky directions, remove sticky positioning and\n        // the sticky CSS class.\n        // Short-circuit checking element.style[dir] for stickyDirections as they\n        // were already removed above.\n        const hasDirection = STICKY_DIRECTIONS.some(dir => stickyDirections.indexOf(dir) === -1 && element.style[dir]);\n        if (hasDirection) {\n            element.style.zIndex = this._getCalculatedZIndex(element);\n        }\n        else {\n            // When not hasDirection, _getCalculatedZIndex will always return ''.\n            element.style.zIndex = '';\n            if (this._needsPositionStickyOnElement) {\n                element.style.position = '';\n            }\n            element.classList.remove(this._stickCellCss);\n        }\n    }\n    /**\n     * Adds the sticky styling to the element by adding the sticky style class, changing position\n     * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n     * direction and value.\n     */\n    _addStickyStyle(element, dir, dirValue, isBorderElement) {\n        element.classList.add(this._stickCellCss);\n        if (isBorderElement) {\n            element.classList.add(this._borderCellCss[dir]);\n        }\n        element.style[dir] = `${dirValue}px`;\n        element.style.zIndex = this._getCalculatedZIndex(element);\n        if (this._needsPositionStickyOnElement) {\n            element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n        }\n    }\n    /**\n     * Calculate what the z-index should be for the element, depending on what directions (top,\n     * bottom, left, right) have been set. It should be true that elements with a top direction\n     * should have the highest index since these are elements like a table header. If any of those\n     * elements are also sticky in another direction, then they should appear above other elements\n     * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n     * (e.g. footer rows) should then be next in the ordering such that they are below the header\n     * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n     * should minimally increment so that they are above non-sticky elements but below top and bottom\n     * elements.\n     */\n    _getCalculatedZIndex(element) {\n        const zIndexIncrements = {\n            top: 100,\n            bottom: 10,\n            left: 1,\n            right: 1,\n        };\n        let zIndex = 0;\n        // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n        // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n        // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n        for (const dir of STICKY_DIRECTIONS) {\n            if (element.style[dir]) {\n                zIndex += zIndexIncrements[dir];\n            }\n        }\n        return zIndex ? `${zIndex}` : '';\n    }\n    /** Gets the widths for each cell in the provided row. */\n    _getCellWidths(row, recalculateCellWidths = true) {\n        if (!recalculateCellWidths && this._cachedCellWidths.length) {\n            return this._cachedCellWidths;\n        }\n        const cellWidths = [];\n        const firstRowCells = row.children;\n        for (let i = 0; i < firstRowCells.length; i++) {\n            let cell = firstRowCells[i];\n            cellWidths.push(cell.getBoundingClientRect().width);\n        }\n        this._cachedCellWidths = cellWidths;\n        return cellWidths;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n    _getStickyStartColumnPositions(widths, stickyStates) {\n        const positions = [];\n        let nextPosition = 0;\n        for (let i = 0; i < widths.length; i++) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n    _getStickyEndColumnPositions(widths, stickyStates) {\n        const positions = [];\n        let nextPosition = 0;\n        for (let i = widths.length; i > 0; i--) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when attempting to find an unexisting column.\n * @param id Id whose lookup failed.\n * @docs-private\n */\nfunction getTableUnknownColumnError(id) {\n    return Error(`Could not find column with id \"${id}\".`);\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * @docs-private\n */\nfunction getTableDuplicateColumnNameError(name) {\n    return Error(`Duplicate column definition name provided: \"${name}\".`);\n}\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * @docs-private\n */\nfunction getTableMultipleDefaultRowDefsError() {\n    return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * @docs-private\n */\nfunction getTableMissingMatchingRowDefError(data) {\n    return Error(`Could not find a matching row definition for the` +\n        `provided row data: ${JSON.stringify(data)}`);\n}\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * @docs-private\n */\nfunction getTableMissingRowDefsError() {\n    return Error('Missing definitions for header, footer, and row; ' +\n        'cannot determine which columns should be rendered.');\n}\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * @docs-private\n */\nfunction getTableUnknownDataSourceError() {\n    return Error(`Provided data source did not match an array, Observable, or DataSource`);\n}\n/**\n * Returns an error to be thrown when the text column cannot find a parent table to inject.\n * @docs-private\n */\nfunction getTableTextColumnMissingParentTableError() {\n    return Error(`Text column could not find a parent table for registration.`);\n}\n/**\n * Returns an error to be thrown when a table text column doesn't have a name.\n * @docs-private\n */\nfunction getTableTextColumnMissingNameError() {\n    return Error(`Table text column must have a name.`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The injection token used to specify the StickyPositioningListener. */\nconst STICKY_POSITIONING_LISTENER = new InjectionToken('CDK_SPL');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\n * tables that animate rows.\n */\nclass CdkRecycleRows {\n}\nCdkRecycleRows.ɵfac = function CdkRecycleRows_Factory(t) { return new (t || CdkRecycleRows)(); };\nCdkRecycleRows.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkRecycleRows, selectors: [[\"cdk-table\", \"recycleRows\", \"\"], [\"table\", \"cdk-table\", \"\", \"recycleRows\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy },\n        ])] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkRecycleRows, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-table[recycleRows], table[cdk-table][recycleRows]',\n                providers: [\n                    { provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy },\n                ]\n            }]\n    }], null, null); })();\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * @docs-private\n */\nclass DataRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nDataRowOutlet.ɵfac = function DataRowOutlet_Factory(t) { return new (t || DataRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nDataRowOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: DataRowOutlet, selectors: [[\"\", \"rowOutlet\", \"\"]] });\nDataRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DataRowOutlet, [{\n        type: Directive,\n        args: [{ selector: '[rowOutlet]' }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * @docs-private\n */\nclass HeaderRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nHeaderRowOutlet.ɵfac = function HeaderRowOutlet_Factory(t) { return new (t || HeaderRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nHeaderRowOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: HeaderRowOutlet, selectors: [[\"\", \"headerRowOutlet\", \"\"]] });\nHeaderRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HeaderRowOutlet, [{\n        type: Directive,\n        args: [{ selector: '[headerRowOutlet]' }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * @docs-private\n */\nclass FooterRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nFooterRowOutlet.ɵfac = function FooterRowOutlet_Factory(t) { return new (t || FooterRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nFooterRowOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: FooterRowOutlet, selectors: [[\"\", \"footerRowOutlet\", \"\"]] });\nFooterRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FooterRowOutlet, [{\n        type: Directive,\n        args: [{ selector: '[footerRowOutlet]' }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Provides a handle for the table to grab the view\n * container's ng-container to insert the no data row.\n * @docs-private\n */\nclass NoDataRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nNoDataRowOutlet.ɵfac = function NoDataRowOutlet_Factory(t) { return new (t || NoDataRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nNoDataRowOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: NoDataRowOutlet, selectors: [[\"\", \"noDataRowOutlet\", \"\"]] });\nNoDataRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NoDataRowOutlet, [{\n        type: Directive,\n        args: [{ selector: '[noDataRowOutlet]' }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * @docs-private\n */\nconst CDK_TABLE_TEMPLATE = \n// Note that according to MDN, the `caption` element has to be projected as the **first**\n// element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n`\n  <ng-content select=\"caption\"></ng-content>\n  <ng-content select=\"colgroup, col\"></ng-content>\n  <ng-container headerRowOutlet></ng-container>\n  <ng-container rowOutlet></ng-container>\n  <ng-container noDataRowOutlet></ng-container>\n  <ng-container footerRowOutlet></ng-container>\n`;\n/**\n * Class used to conveniently type the embedded view ref for rows with a context.\n * @docs-private\n */\nclass RowViewRef extends EmbeddedViewRef {\n}\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n */\nclass CdkTable {\n    constructor(_differs, _changeDetectorRef, _elementRef, role, _dir, _document, _platform, _viewRepeater, _coalescedStyleScheduler, _viewportRuler, \n    /**\n     * @deprecated `_stickyPositioningListener` parameter to become required.\n     * @breaking-change 13.0.0\n     */\n    _stickyPositioningListener) {\n        this._differs = _differs;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._dir = _dir;\n        this._platform = _platform;\n        this._viewRepeater = _viewRepeater;\n        this._coalescedStyleScheduler = _coalescedStyleScheduler;\n        this._viewportRuler = _viewportRuler;\n        this._stickyPositioningListener = _stickyPositioningListener;\n        /** Subject that emits when the component has been destroyed. */\n        this._onDestroy = new Subject();\n        /**\n         * Map of all the user's defined columns (header, data, and footer cell template) identified by\n         * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n         * any custom column definitions added to `_customColumnDefs`.\n         */\n        this._columnDefsByName = new Map();\n        /**\n         * Column definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * column definitions as *its* content child.\n         */\n        this._customColumnDefs = new Set();\n        /**\n         * Data row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in data rows as *its* content child.\n         */\n        this._customRowDefs = new Set();\n        /**\n         * Header row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in header rows as *its* content child.\n         */\n        this._customHeaderRowDefs = new Set();\n        /**\n         * Footer row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n         * built-in footer row as *its* content child.\n         */\n        this._customFooterRowDefs = new Set();\n        /**\n         * Whether the header row definition has been changed. Triggers an update to the header row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._headerRowDefChanged = true;\n        /**\n         * Whether the footer row definition has been changed. Triggers an update to the footer row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._footerRowDefChanged = true;\n        /**\n         * Whether the sticky column styles need to be updated. Set to `true` when the visible columns\n         * change.\n         */\n        this._stickyColumnStylesNeedReset = true;\n        /**\n         * Whether the sticky styler should recalculate cell widths when applying sticky styles. If\n         * `false`, cached values will be used instead. This is only applicable to tables with\n         * {@link fixedLayout} enabled. For other tables, cell widths will always be recalculated.\n         */\n        this._forceRecalculateCellWidths = true;\n        /**\n         * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n         * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n         * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n         * and row template matches, which allows the `IterableDiffer` to check rows by reference\n         * and understand which rows are added/moved/removed.\n         *\n         * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n         * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n         * contains an array of created pairs. The array is necessary to handle cases where the data\n         * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n         * stored.\n         */\n        this._cachedRenderRowsMap = new Map();\n        /**\n         * CSS class added to any row or cell that has sticky positioning applied. May be overriden by\n         * table subclasses.\n         */\n        this.stickyCssClass = 'cdk-table-sticky';\n        /**\n         * Whether to manually add positon: sticky to all sticky cell elements. Not needed if\n         * the position is set in a selector associated with the value of stickyCssClass. May be\n         * overridden by table subclasses\n         */\n        this.needsPositionStickyOnElement = true;\n        /** Whether the no data row is currently showing anything. */\n        this._isShowingNoDataRow = false;\n        this._multiTemplateDataRows = false;\n        this._fixedLayout = false;\n        /**\n         * Emits when the table completes rendering a set of data rows based on the latest data from the\n         * data source, even if the set of rows is empty.\n         */\n        this.contentChanged = new EventEmitter();\n        // TODO(andrewseguin): Remove max value as the end index\n        //   and instead calculate the view on init and scroll.\n        /**\n         * Stream containing the latest information on what rows are being displayed on screen.\n         * Can be used by the data source to as a heuristic of what data should be provided.\n         *\n         * @docs-private\n         */\n        this.viewChange = new BehaviorSubject({ start: 0, end: Number.MAX_VALUE });\n        if (!role) {\n            this._elementRef.nativeElement.setAttribute('role', 'table');\n        }\n        this._document = _document;\n        this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\n    }\n    /**\n     * Tracking function that will be used to check the differences in data changes. Used similarly\n     * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n     * relative to the function to know if a row should be added/removed/moved.\n     * Accepts a function that takes two parameters, `index` and `item`.\n     */\n    get trackBy() {\n        return this._trackByFn;\n    }\n    set trackBy(fn) {\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && fn != null && typeof fn !== 'function') {\n            console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\n        }\n        this._trackByFn = fn;\n    }\n    /**\n     * The table's source of data, which can be provided in three ways (in order of complexity):\n     *   - Simple data array (each object represents one table row)\n     *   - Stream that emits a data array each time the array changes\n     *   - `DataSource` object that implements the connect/disconnect interface.\n     *\n     * If a data array is provided, the table must be notified when the array's objects are\n     * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n     * render the diff since the last table render. If the data array reference is changed, the table\n     * will automatically trigger an update to the rows.\n     *\n     * When providing an Observable stream, the table will trigger an update automatically when the\n     * stream emits a new array of data.\n     *\n     * Finally, when providing a `DataSource` object, the table will use the Observable stream\n     * provided by the connect function and trigger updates when that stream emits new data array\n     * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n     * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n     * subscriptions registered during the connect process).\n     */\n    get dataSource() {\n        return this._dataSource;\n    }\n    set dataSource(dataSource) {\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n    /**\n     * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n     * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n     * dataobject will render the first row that evaluates its when predicate to true, in the order\n     * defined in the table, or otherwise the default row which does not have a when predicate.\n     */\n    get multiTemplateDataRows() {\n        return this._multiTemplateDataRows;\n    }\n    set multiTemplateDataRows(v) {\n        this._multiTemplateDataRows = coerceBooleanProperty(v);\n        // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),\n        // this setter will be invoked before the row outlet has been defined hence the null check.\n        if (this._rowOutlet && this._rowOutlet.viewContainer.length) {\n            this._forceRenderDataRows();\n            this.updateStickyColumnStyles();\n        }\n    }\n    /**\n     * Whether to use a fixed table layout. Enabling this option will enforce consistent column widths\n     * and optimize rendering sticky styles for native tables. No-op for flex tables.\n     */\n    get fixedLayout() {\n        return this._fixedLayout;\n    }\n    set fixedLayout(v) {\n        this._fixedLayout = coerceBooleanProperty(v);\n        // Toggling `fixedLayout` may change column widths. Sticky column styles should be recalculated.\n        this._forceRecalculateCellWidths = true;\n        this._stickyColumnStylesNeedReset = true;\n    }\n    ngOnInit() {\n        this._setupStickyStyler();\n        if (this._isNativeHtmlTable) {\n            this._applyNativeTableSections();\n        }\n        // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n        // the user has provided a custom trackBy, return the result of that function as evaluated\n        // with the values of the `RenderRow`'s data and index.\n        this._dataDiffer = this._differs.find([]).create((_i, dataRow) => {\n            return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n        });\n        this._viewportRuler.change().pipe(takeUntil(this._onDestroy)).subscribe(() => {\n            this._forceRecalculateCellWidths = true;\n        });\n    }\n    ngAfterContentChecked() {\n        // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n        this._cacheRowDefs();\n        this._cacheColumnDefs();\n        // Make sure that the user has at least added header, footer, or data row def.\n        if (!this._headerRowDefs.length && !this._footerRowDefs.length && !this._rowDefs.length &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMissingRowDefsError();\n        }\n        // Render updates if the list of columns have been changed for the header, row, or footer defs.\n        const columnsChanged = this._renderUpdatedColumns();\n        const rowDefsChanged = columnsChanged || this._headerRowDefChanged || this._footerRowDefChanged;\n        // Ensure sticky column styles are reset if set to `true` elsewhere.\n        this._stickyColumnStylesNeedReset = this._stickyColumnStylesNeedReset || rowDefsChanged;\n        this._forceRecalculateCellWidths = rowDefsChanged;\n        // If the header row definition has been changed, trigger a render to the header row.\n        if (this._headerRowDefChanged) {\n            this._forceRenderHeaderRows();\n            this._headerRowDefChanged = false;\n        }\n        // If the footer row definition has been changed, trigger a render to the footer row.\n        if (this._footerRowDefChanged) {\n            this._forceRenderFooterRows();\n            this._footerRowDefChanged = false;\n        }\n        // If there is a data source and row definitions, connect to the data source unless a\n        // connection has already been made.\n        if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n            this._observeRenderChanges();\n        }\n        else if (this._stickyColumnStylesNeedReset) {\n            // In the above case, _observeRenderChanges will result in updateStickyColumnStyles being\n            // called when it row data arrives. Otherwise, we need to call it proactively.\n            this.updateStickyColumnStyles();\n        }\n        this._checkStickyStates();\n    }\n    ngOnDestroy() {\n        this._rowOutlet.viewContainer.clear();\n        this._noDataRowOutlet.viewContainer.clear();\n        this._headerRowOutlet.viewContainer.clear();\n        this._footerRowOutlet.viewContainer.clear();\n        this._cachedRenderRowsMap.clear();\n        this._onDestroy.next();\n        this._onDestroy.complete();\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n    }\n    /**\n     * Renders rows based on the table's latest set of data, which was either provided directly as an\n     * input or retrieved through an Observable stream (directly or from a DataSource).\n     * Checks for differences in the data since the last diff to perform only the necessary\n     * changes (add/remove/move rows).\n     *\n     * If the table's data source is a DataSource or Observable, this will be invoked automatically\n     * each time the provided Observable stream emits a new data array. Otherwise if your data is\n     * an array, this function will need to be called to render any changes.\n     */\n    renderRows() {\n        this._renderRows = this._getAllRenderRows();\n        const changes = this._dataDiffer.diff(this._renderRows);\n        if (!changes) {\n            this._updateNoDataRow();\n            this.contentChanged.next();\n            return;\n        }\n        const viewContainer = this._rowOutlet.viewContainer;\n        this._viewRepeater.applyChanges(changes, viewContainer, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record.item, currentIndex), (record) => record.item.data, (change) => {\n            if (change.operation === 1 /* INSERTED */ && change.context) {\n                this._renderCellTemplateForItem(change.record.item.rowDef, change.context);\n            }\n        });\n        // Update the meta context of a row's context data (index, count, first, last, ...)\n        this._updateRowIndexContext();\n        // Update rows that did not get added/removed/moved but may have had their identity changed,\n        // e.g. if trackBy matched data on some property but the actual data reference changed.\n        changes.forEachIdentityChange((record) => {\n            const rowView = viewContainer.get(record.currentIndex);\n            rowView.context.$implicit = record.item.data;\n        });\n        this._updateNoDataRow();\n        this.updateStickyColumnStyles();\n        this.contentChanged.next();\n    }\n    /** Adds a column definition that was not included as part of the content children. */\n    addColumnDef(columnDef) {\n        this._customColumnDefs.add(columnDef);\n    }\n    /** Removes a column definition that was not included as part of the content children. */\n    removeColumnDef(columnDef) {\n        this._customColumnDefs.delete(columnDef);\n    }\n    /** Adds a row definition that was not included as part of the content children. */\n    addRowDef(rowDef) {\n        this._customRowDefs.add(rowDef);\n    }\n    /** Removes a row definition that was not included as part of the content children. */\n    removeRowDef(rowDef) {\n        this._customRowDefs.delete(rowDef);\n    }\n    /** Adds a header row definition that was not included as part of the content children. */\n    addHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.add(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /** Removes a header row definition that was not included as part of the content children. */\n    removeHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.delete(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /** Adds a footer row definition that was not included as part of the content children. */\n    addFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.add(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /** Removes a footer row definition that was not included as part of the content children. */\n    removeFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.delete(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /** Sets a no data row definition that was not included as a part of the content children. */\n    setNoDataRow(noDataRow) {\n        this._customNoDataRow = noDataRow;\n    }\n    /**\n     * Updates the header sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n     * automatically called when the header row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n    updateStickyHeaderRowStyles() {\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        const tableElement = this._elementRef.nativeElement;\n        // Hide the thead element if there are no header rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        const thead = tableElement.querySelector('thead');\n        if (thead) {\n            thead.style.display = headerRows.length ? '' : 'none';\n        }\n        const stickyStates = this._headerRowDefs.map(def => def.sticky);\n        this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n        this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._headerRowDefs.forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n     * automatically called when the footer row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n    updateStickyFooterRowStyles() {\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        const tableElement = this._elementRef.nativeElement;\n        // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        const tfoot = tableElement.querySelector('tfoot');\n        if (tfoot) {\n            tfoot.style.display = footerRows.length ? '' : 'none';\n        }\n        const stickyStates = this._footerRowDefs.map(def => def.sticky);\n        this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n        this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n        this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._footerRowDefs.forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Updates the column sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the left and right. Then sticky styles are added for the left and right according\n     * to the column definitions for each cell in each row. This is automatically called when\n     * the data source provides a new set of data or when a column definition changes its sticky\n     * input. May be called manually for cases where the cell content changes outside of these events.\n     */\n    updateStickyColumnStyles() {\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        const dataRows = this._getRenderedRows(this._rowOutlet);\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        // For tables not using a fixed layout, the column widths may change when new rows are rendered.\n        // In a table using a fixed layout, row content won't affect column width, so sticky styles\n        // don't need to be cleared unless either the sticky column config changes or one of the row\n        // defs change.\n        if ((this._isNativeHtmlTable && !this._fixedLayout)\n            || this._stickyColumnStylesNeedReset) {\n            // Clear the left and right positioning from all columns in the table across all rows since\n            // sticky columns span across all table sections (header, data, footer)\n            this._stickyStyler.clearStickyPositioning([...headerRows, ...dataRows, ...footerRows], ['left', 'right']);\n            this._stickyColumnStylesNeedReset = false;\n        }\n        // Update the sticky styles for each header row depending on the def's sticky state\n        headerRows.forEach((headerRow, i) => {\n            this._addStickyColumnStyles([headerRow], this._headerRowDefs[i]);\n        });\n        // Update the sticky styles for each data row depending on its def's sticky state\n        this._rowDefs.forEach(rowDef => {\n            // Collect all the rows rendered with this row definition.\n            const rows = [];\n            for (let i = 0; i < dataRows.length; i++) {\n                if (this._renderRows[i].rowDef === rowDef) {\n                    rows.push(dataRows[i]);\n                }\n            }\n            this._addStickyColumnStyles(rows, rowDef);\n        });\n        // Update the sticky styles for each footer row depending on the def's sticky state\n        footerRows.forEach((footerRow, i) => {\n            this._addStickyColumnStyles([footerRow], this._footerRowDefs[i]);\n        });\n        // Reset the dirty state of the sticky input change since it has been used.\n        Array.from(this._columnDefsByName.values()).forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Get the list of RenderRow objects to render according to the current list of data and defined\n     * row definitions. If the previous list already contained a particular pair, it should be reused\n     * so that the differ equates their references.\n     */\n    _getAllRenderRows() {\n        const renderRows = [];\n        // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\n        // new cache while unused ones can be picked up by garbage collection.\n        const prevCachedRenderRows = this._cachedRenderRowsMap;\n        this._cachedRenderRowsMap = new Map();\n        // For each data object, get the list of rows that should be rendered, represented by the\n        // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n        for (let i = 0; i < this._data.length; i++) {\n            let data = this._data[i];\n            const renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n            if (!this._cachedRenderRowsMap.has(data)) {\n                this._cachedRenderRowsMap.set(data, new WeakMap());\n            }\n            for (let j = 0; j < renderRowsForData.length; j++) {\n                let renderRow = renderRowsForData[j];\n                const cache = this._cachedRenderRowsMap.get(renderRow.data);\n                if (cache.has(renderRow.rowDef)) {\n                    cache.get(renderRow.rowDef).push(renderRow);\n                }\n                else {\n                    cache.set(renderRow.rowDef, [renderRow]);\n                }\n                renderRows.push(renderRow);\n            }\n        }\n        return renderRows;\n    }\n    /**\n     * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n     * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n     * `(T, CdkRowDef)` pair.\n     */\n    _getRenderRowsForData(data, dataIndex, cache) {\n        const rowDefs = this._getRowDefs(data, dataIndex);\n        return rowDefs.map(rowDef => {\n            const cachedRenderRows = (cache && cache.has(rowDef)) ? cache.get(rowDef) : [];\n            if (cachedRenderRows.length) {\n                const dataRow = cachedRenderRows.shift();\n                dataRow.dataIndex = dataIndex;\n                return dataRow;\n            }\n            else {\n                return { data, rowDef, dataIndex };\n            }\n        });\n    }\n    /** Update the map containing the content's column definitions. */\n    _cacheColumnDefs() {\n        this._columnDefsByName.clear();\n        const columnDefs = mergeArrayAndSet(this._getOwnDefs(this._contentColumnDefs), this._customColumnDefs);\n        columnDefs.forEach(columnDef => {\n            if (this._columnDefsByName.has(columnDef.name) &&\n                (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableDuplicateColumnNameError(columnDef.name);\n            }\n            this._columnDefsByName.set(columnDef.name, columnDef);\n        });\n    }\n    /** Update the list of all available row definitions that can be used. */\n    _cacheRowDefs() {\n        this._headerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentHeaderRowDefs), this._customHeaderRowDefs);\n        this._footerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentFooterRowDefs), this._customFooterRowDefs);\n        this._rowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentRowDefs), this._customRowDefs);\n        // After all row definitions are determined, find the row definition to be considered default.\n        const defaultRowDefs = this._rowDefs.filter(def => !def.when);\n        if (!this.multiTemplateDataRows && defaultRowDefs.length > 1 &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMultipleDefaultRowDefsError();\n        }\n        this._defaultRowDef = defaultRowDefs[0];\n    }\n    /**\n     * Check if the header, data, or footer rows have changed what columns they want to display or\n     * whether the sticky states have changed for the header or footer. If there is a diff, then\n     * re-render that section.\n     */\n    _renderUpdatedColumns() {\n        const columnsDiffReducer = (acc, def) => acc || !!def.getColumnsDiff();\n        // Force re-render data rows if the list of column definitions have changed.\n        const dataColumnsChanged = this._rowDefs.reduce(columnsDiffReducer, false);\n        if (dataColumnsChanged) {\n            this._forceRenderDataRows();\n        }\n        // Force re-render header/footer rows if the list of column definitions have changed.\n        const headerColumnsChanged = this._headerRowDefs.reduce(columnsDiffReducer, false);\n        if (headerColumnsChanged) {\n            this._forceRenderHeaderRows();\n        }\n        const footerColumnsChanged = this._footerRowDefs.reduce(columnsDiffReducer, false);\n        if (footerColumnsChanged) {\n            this._forceRenderFooterRows();\n        }\n        return dataColumnsChanged || headerColumnsChanged || footerColumnsChanged;\n    }\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the row outlet. Otherwise start listening for new data.\n     */\n    _switchDataSource(dataSource) {\n        this._data = [];\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n        // Stop listening for data from the previous data source.\n        if (this._renderChangeSubscription) {\n            this._renderChangeSubscription.unsubscribe();\n            this._renderChangeSubscription = null;\n        }\n        if (!dataSource) {\n            if (this._dataDiffer) {\n                this._dataDiffer.diff([]);\n            }\n            this._rowOutlet.viewContainer.clear();\n        }\n        this._dataSource = dataSource;\n    }\n    /** Set up a subscription for the data provided by the data source. */\n    _observeRenderChanges() {\n        // If no data source has been set, there is nothing to observe for changes.\n        if (!this.dataSource) {\n            return;\n        }\n        let dataStream;\n        if (isDataSource(this.dataSource)) {\n            dataStream = this.dataSource.connect(this);\n        }\n        else if (isObservable(this.dataSource)) {\n            dataStream = this.dataSource;\n        }\n        else if (Array.isArray(this.dataSource)) {\n            dataStream = of(this.dataSource);\n        }\n        if (dataStream === undefined && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableUnknownDataSourceError();\n        }\n        this._renderChangeSubscription = dataStream.pipe(takeUntil(this._onDestroy))\n            .subscribe(data => {\n            this._data = data || [];\n            this.renderRows();\n        });\n    }\n    /**\n     * Clears any existing content in the header row outlet and creates a new embedded view\n     * in the outlet using the header row definition.\n     */\n    _forceRenderHeaderRows() {\n        // Clear the header row outlet if any content exists.\n        if (this._headerRowOutlet.viewContainer.length > 0) {\n            this._headerRowOutlet.viewContainer.clear();\n        }\n        this._headerRowDefs.forEach((def, i) => this._renderRow(this._headerRowOutlet, def, i));\n        this.updateStickyHeaderRowStyles();\n    }\n    /**\n     * Clears any existing content in the footer row outlet and creates a new embedded view\n     * in the outlet using the footer row definition.\n     */\n    _forceRenderFooterRows() {\n        // Clear the footer row outlet if any content exists.\n        if (this._footerRowOutlet.viewContainer.length > 0) {\n            this._footerRowOutlet.viewContainer.clear();\n        }\n        this._footerRowDefs.forEach((def, i) => this._renderRow(this._footerRowOutlet, def, i));\n        this.updateStickyFooterRowStyles();\n    }\n    /** Adds the sticky column styles for the rows according to the columns' stick states. */\n    _addStickyColumnStyles(rows, rowDef) {\n        const columnDefs = Array.from(rowDef.columns || []).map(columnName => {\n            const columnDef = this._columnDefsByName.get(columnName);\n            if (!columnDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableUnknownColumnError(columnName);\n            }\n            return columnDef;\n        });\n        const stickyStartStates = columnDefs.map(columnDef => columnDef.sticky);\n        const stickyEndStates = columnDefs.map(columnDef => columnDef.stickyEnd);\n        this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates, !this._fixedLayout || this._forceRecalculateCellWidths);\n    }\n    /** Gets the list of rows that have been rendered in the row outlet. */\n    _getRenderedRows(rowOutlet) {\n        const renderedRows = [];\n        for (let i = 0; i < rowOutlet.viewContainer.length; i++) {\n            const viewRef = rowOutlet.viewContainer.get(i);\n            renderedRows.push(viewRef.rootNodes[0]);\n        }\n        return renderedRows;\n    }\n    /**\n     * Get the matching row definitions that should be used for this row data. If there is only\n     * one row definition, it is returned. Otherwise, find the row definitions that has a when\n     * predicate that returns true with the data. If none return true, return the default row\n     * definition.\n     */\n    _getRowDefs(data, dataIndex) {\n        if (this._rowDefs.length == 1) {\n            return [this._rowDefs[0]];\n        }\n        let rowDefs = [];\n        if (this.multiTemplateDataRows) {\n            rowDefs = this._rowDefs.filter(def => !def.when || def.when(dataIndex, data));\n        }\n        else {\n            let rowDef = this._rowDefs.find(def => def.when && def.when(dataIndex, data)) || this._defaultRowDef;\n            if (rowDef) {\n                rowDefs.push(rowDef);\n            }\n        }\n        if (!rowDefs.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMissingMatchingRowDefError(data);\n        }\n        return rowDefs;\n    }\n    _getEmbeddedViewArgs(renderRow, index) {\n        const rowDef = renderRow.rowDef;\n        const context = { $implicit: renderRow.data };\n        return {\n            templateRef: rowDef.template,\n            context,\n            index,\n        };\n    }\n    /**\n     * Creates a new row template in the outlet and fills it with the set of cell templates.\n     * Optionally takes a context to provide to the row and cells, as well as an optional index\n     * of where to place the new row template in the outlet.\n     */\n    _renderRow(outlet, rowDef, index, context = {}) {\n        // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n        const view = outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n        this._renderCellTemplateForItem(rowDef, context);\n        return view;\n    }\n    _renderCellTemplateForItem(rowDef, context) {\n        for (let cellTemplate of this._getCellTemplates(rowDef)) {\n            if (CdkCellOutlet.mostRecentCellOutlet) {\n                CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Updates the index-related context for each row to reflect any changes in the index of the rows,\n     * e.g. first/last/even/odd.\n     */\n    _updateRowIndexContext() {\n        const viewContainer = this._rowOutlet.viewContainer;\n        for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n            const viewRef = viewContainer.get(renderIndex);\n            const context = viewRef.context;\n            context.count = count;\n            context.first = renderIndex === 0;\n            context.last = renderIndex === count - 1;\n            context.even = renderIndex % 2 === 0;\n            context.odd = !context.even;\n            if (this.multiTemplateDataRows) {\n                context.dataIndex = this._renderRows[renderIndex].dataIndex;\n                context.renderIndex = renderIndex;\n            }\n            else {\n                context.index = this._renderRows[renderIndex].dataIndex;\n            }\n        }\n    }\n    /** Gets the column definitions for the provided row def. */\n    _getCellTemplates(rowDef) {\n        if (!rowDef || !rowDef.columns) {\n            return [];\n        }\n        return Array.from(rowDef.columns, columnId => {\n            const column = this._columnDefsByName.get(columnId);\n            if (!column && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableUnknownColumnError(columnId);\n            }\n            return rowDef.extractCellTemplate(column);\n        });\n    }\n    /** Adds native table sections (e.g. tbody) and moves the row outlets into them. */\n    _applyNativeTableSections() {\n        const documentFragment = this._document.createDocumentFragment();\n        const sections = [\n            { tag: 'thead', outlets: [this._headerRowOutlet] },\n            { tag: 'tbody', outlets: [this._rowOutlet, this._noDataRowOutlet] },\n            { tag: 'tfoot', outlets: [this._footerRowOutlet] },\n        ];\n        for (const section of sections) {\n            const element = this._document.createElement(section.tag);\n            element.setAttribute('role', 'rowgroup');\n            for (const outlet of section.outlets) {\n                element.appendChild(outlet.elementRef.nativeElement);\n            }\n            documentFragment.appendChild(element);\n        }\n        // Use a DocumentFragment so we don't hit the DOM on each iteration.\n        this._elementRef.nativeElement.appendChild(documentFragment);\n    }\n    /**\n     * Forces a re-render of the data rows. Should be called in cases where there has been an input\n     * change that affects the evaluation of which rows should be rendered, e.g. toggling\n     * `multiTemplateDataRows` or adding/removing row definitions.\n     */\n    _forceRenderDataRows() {\n        this._dataDiffer.diff([]);\n        this._rowOutlet.viewContainer.clear();\n        this.renderRows();\n    }\n    /**\n     * Checks if there has been a change in sticky states since last check and applies the correct\n     * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n     * during a change detection and after the inputs are settled (after content check).\n     */\n    _checkStickyStates() {\n        const stickyCheckReducer = (acc, d) => {\n            return acc || d.hasStickyChanged();\n        };\n        // Note that the check needs to occur for every definition since it notifies the definition\n        // that it can reset its dirty state. Using another operator like `some` may short-circuit\n        // remaining definitions and leave them in an unchecked state.\n        if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyHeaderRowStyles();\n        }\n        if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyFooterRowStyles();\n        }\n        if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n            this._stickyColumnStylesNeedReset = true;\n            this.updateStickyColumnStyles();\n        }\n    }\n    /**\n     * Creates the sticky styler that will be used for sticky rows and columns. Listens\n     * for directionality changes and provides the latest direction to the styler. Re-applies column\n     * stickiness when directionality changes.\n     */\n    _setupStickyStyler() {\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, direction, this._coalescedStyleScheduler, this._platform.isBrowser, this.needsPositionStickyOnElement, this._stickyPositioningListener);\n        (this._dir ? this._dir.change : of())\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(value => {\n            this._stickyStyler.direction = value;\n            this.updateStickyColumnStyles();\n        });\n    }\n    /** Filters definitions that belong to this table from a QueryList. */\n    _getOwnDefs(items) {\n        return items.filter(item => !item._table || item._table === this);\n    }\n    /** Creates or removes the no data row, depending on whether any data is being shown. */\n    _updateNoDataRow() {\n        const noDataRow = this._customNoDataRow || this._noDataRow;\n        if (noDataRow) {\n            const shouldShow = this._rowOutlet.viewContainer.length === 0;\n            if (shouldShow !== this._isShowingNoDataRow) {\n                const container = this._noDataRowOutlet.viewContainer;\n                shouldShow ? container.createEmbeddedView(noDataRow.templateRef) : container.clear();\n                this._isShowingNoDataRow = shouldShow;\n            }\n        }\n    }\n}\nCdkTable.ɵfac = function CdkTable_Factory(t) { return new (t || CdkTable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵinjectAttribute('role'), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Platform), ɵngcc0.ɵɵdirectiveInject(_VIEW_REPEATER_STRATEGY), ɵngcc0.ɵɵdirectiveInject(_COALESCED_STYLE_SCHEDULER), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(STICKY_POSITIONING_LISTENER, 12)); };\nCdkTable.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CdkTable, selectors: [[\"cdk-table\"], [\"table\", \"cdk-table\", \"\"]], contentQueries: function CdkTable_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkNoDataRow, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkColumnDef, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkRowDef, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkHeaderRowDef, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkFooterRowDef, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._noDataRow = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentColumnDefs = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentRowDefs = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentHeaderRowDefs = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentFooterRowDefs = _t);\n    } }, viewQuery: function CdkTable_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(DataRowOutlet, 7);\n        ɵngcc0.ɵɵviewQuery(HeaderRowOutlet, 7);\n        ɵngcc0.ɵɵviewQuery(FooterRowOutlet, 7);\n        ɵngcc0.ɵɵviewQuery(NoDataRowOutlet, 7);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._rowOutlet = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._headerRowOutlet = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._footerRowOutlet = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._noDataRowOutlet = _t.first);\n    } }, hostAttrs: [1, \"cdk-table\"], hostVars: 2, hostBindings: function CdkTable_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"cdk-table-fixed-layout\", ctx.fixedLayout);\n    } }, inputs: { trackBy: \"trackBy\", dataSource: \"dataSource\", multiTemplateDataRows: \"multiTemplateDataRows\", fixedLayout: \"fixedLayout\" }, outputs: { contentChanged: \"contentChanged\" }, exportAs: [\"cdkTable\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: CDK_TABLE, useExisting: CdkTable },\n            { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n            { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n            // Prevent nested tables from seeing this table's StickyPositioningListener.\n            { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n        ])], ngContentSelectors: _c1, decls: 13, vars: 0, consts: [[\"headerRowOutlet\", \"\"], [\"rowOutlet\", \"\"], [\"noDataRowOutlet\", \"\"], [\"footerRowOutlet\", \"\"]], template: function CdkTable_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c0);\n        ɵngcc0.ɵɵtext(0, \"\\n  \");\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵtext(2, \"\\n  \");\n        ɵngcc0.ɵɵprojection(3, 1);\n        ɵngcc0.ɵɵtext(4, \"\\n  \");\n        ɵngcc0.ɵɵelementContainer(5, 0);\n        ɵngcc0.ɵɵtext(6, \"\\n  \");\n        ɵngcc0.ɵɵelementContainer(7, 1);\n        ɵngcc0.ɵɵtext(8, \"\\n  \");\n        ɵngcc0.ɵɵelementContainer(9, 2);\n        ɵngcc0.ɵɵtext(10, \"\\n  \");\n        ɵngcc0.ɵɵelementContainer(11, 3);\n        ɵngcc0.ɵɵtext(12, \"\\n\");\n    } }, dependencies: [DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, NoDataRowOutlet], styles: [\".cdk-table-fixed-layout{table-layout:fixed}\\n\"], encapsulation: 2 });\nCdkTable.ctorParameters = () => [\n    { type: IterableDiffers },\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: String, decorators: [{ type: Attribute, args: ['role',] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Inject, args: [_VIEW_REPEATER_STRATEGY,] }] },\n    { type: _CoalescedStyleScheduler, decorators: [{ type: Inject, args: [_COALESCED_STYLE_SCHEDULER,] }] },\n    { type: ViewportRuler },\n    { type: undefined, decorators: [{ type: Optional }, { type: SkipSelf }, { type: Inject, args: [STICKY_POSITIONING_LISTENER,] }] }\n];\nCdkTable.propDecorators = {\n    trackBy: [{ type: Input }],\n    dataSource: [{ type: Input }],\n    multiTemplateDataRows: [{ type: Input }],\n    fixedLayout: [{ type: Input }],\n    contentChanged: [{ type: Output }],\n    _rowOutlet: [{ type: ViewChild, args: [DataRowOutlet, { static: true },] }],\n    _headerRowOutlet: [{ type: ViewChild, args: [HeaderRowOutlet, { static: true },] }],\n    _footerRowOutlet: [{ type: ViewChild, args: [FooterRowOutlet, { static: true },] }],\n    _noDataRowOutlet: [{ type: ViewChild, args: [NoDataRowOutlet, { static: true },] }],\n    _contentColumnDefs: [{ type: ContentChildren, args: [CdkColumnDef, { descendants: true },] }],\n    _contentRowDefs: [{ type: ContentChildren, args: [CdkRowDef, { descendants: true },] }],\n    _contentHeaderRowDefs: [{ type: ContentChildren, args: [CdkHeaderRowDef, {\n                    descendants: true\n                },] }],\n    _contentFooterRowDefs: [{ type: ContentChildren, args: [CdkFooterRowDef, {\n                    descendants: true\n                },] }],\n    _noDataRow: [{ type: ContentChild, args: [CdkNoDataRow,] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTable, [{\n        type: Component,\n        args: [{ selector: 'cdk-table, table[cdk-table]', exportAs: 'cdkTable', template: CDK_TABLE_TEMPLATE, host: {\n                    'class': 'cdk-table',\n                    '[class.cdk-table-fixed-layout]': 'fixedLayout'\n                }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, providers: [\n                    { provide: CDK_TABLE, useExisting: CdkTable },\n                    { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n                    { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n                    // Prevent nested tables from seeing this table's StickyPositioningListener.\n                    { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n                ], styles: [\".cdk-table-fixed-layout{table-layout:fixed}\\n\"] }]\n    }], function () { return [{ type: ɵngcc0.IterableDiffers }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['role']\n            }] }, { type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [_VIEW_REPEATER_STRATEGY]\n            }] }, { type: _CoalescedStyleScheduler, decorators: [{\n                type: Inject,\n                args: [_COALESCED_STYLE_SCHEDULER]\n            }] }, { type: ɵngcc3.ViewportRuler }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }, {\n                type: Inject,\n                args: [STICKY_POSITIONING_LISTENER]\n            }] }]; }, { contentChanged: [{\n            type: Output\n        }], trackBy: [{\n            type: Input\n        }], dataSource: [{\n            type: Input\n        }], multiTemplateDataRows: [{\n            type: Input\n        }], fixedLayout: [{\n            type: Input\n        }], _rowOutlet: [{\n            type: ViewChild,\n            args: [DataRowOutlet, { static: true }]\n        }], _headerRowOutlet: [{\n            type: ViewChild,\n            args: [HeaderRowOutlet, { static: true }]\n        }], _footerRowOutlet: [{\n            type: ViewChild,\n            args: [FooterRowOutlet, { static: true }]\n        }], _noDataRowOutlet: [{\n            type: ViewChild,\n            args: [NoDataRowOutlet, { static: true }]\n        }], _contentColumnDefs: [{\n            type: ContentChildren,\n            args: [CdkColumnDef, { descendants: true }]\n        }], _contentRowDefs: [{\n            type: ContentChildren,\n            args: [CdkRowDef, { descendants: true }]\n        }], _contentHeaderRowDefs: [{\n            type: ContentChildren,\n            args: [CdkHeaderRowDef, {\n                    descendants: true\n                }]\n        }], _contentFooterRowDefs: [{\n            type: ContentChildren,\n            args: [CdkFooterRowDef, {\n                    descendants: true\n                }]\n        }], _noDataRow: [{\n            type: ContentChild,\n            args: [CdkNoDataRow]\n        }] }); })();\n/** Utility function that gets a merged list of the entries in an array and values of a Set. */\nfunction mergeArrayAndSet(array, set) {\n    return array.concat(Array.from(set));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\nclass CdkTextColumn {\n    constructor(\n    // `CdkTextColumn` is always requiring a table, but we just assert it manually\n    // for better error reporting.\n    // tslint:disable-next-line: lightweight-tokens\n    _table, _options) {\n        this._table = _table;\n        this._options = _options;\n        /** Alignment of the cell values. */\n        this.justify = 'start';\n        this._options = _options || {};\n    }\n    /** Column name that should be used to reference this column. */\n    get name() {\n        return this._name;\n    }\n    set name(name) {\n        this._name = name;\n        // With Ivy, inputs can be initialized before static query results are\n        // available. In that case, we defer the synchronization until \"ngOnInit\" fires.\n        this._syncColumnDefName();\n    }\n    ngOnInit() {\n        this._syncColumnDefName();\n        if (this.headerText === undefined) {\n            this.headerText = this._createDefaultHeaderText();\n        }\n        if (!this.dataAccessor) {\n            this.dataAccessor =\n                this._options.defaultDataAccessor || ((data, name) => data[name]);\n        }\n        if (this._table) {\n            // Provide the cell and headerCell directly to the table with the static `ViewChild` query,\n            // since the columnDef will not pick up its content by the time the table finishes checking\n            // its content and initializing the rows.\n            this.columnDef.cell = this.cell;\n            this.columnDef.headerCell = this.headerCell;\n            this._table.addColumnDef(this.columnDef);\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getTableTextColumnMissingParentTableError();\n        }\n    }\n    ngOnDestroy() {\n        if (this._table) {\n            this._table.removeColumnDef(this.columnDef);\n        }\n    }\n    /**\n     * Creates a default header text. Use the options' header text transformation function if one\n     * has been provided. Otherwise simply capitalize the column name.\n     */\n    _createDefaultHeaderText() {\n        const name = this.name;\n        if (!name && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableTextColumnMissingNameError();\n        }\n        if (this._options && this._options.defaultHeaderTextTransform) {\n            return this._options.defaultHeaderTextTransform(name);\n        }\n        return name[0].toUpperCase() + name.slice(1);\n    }\n    /** Synchronizes the column definition name with the text column name. */\n    _syncColumnDefName() {\n        if (this.columnDef) {\n            this.columnDef.name = this.name;\n        }\n    }\n}\nCdkTextColumn.ɵfac = function CdkTextColumn_Factory(t) { return new (t || CdkTextColumn)(ɵngcc0.ɵɵdirectiveInject(CdkTable, 8), ɵngcc0.ɵɵdirectiveInject(TEXT_COLUMN_OPTIONS, 8)); };\nCdkTextColumn.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CdkTextColumn, selectors: [[\"cdk-text-column\"]], viewQuery: function CdkTextColumn_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CdkColumnDef, 7);\n        ɵngcc0.ɵɵviewQuery(CdkCellDef, 7);\n        ɵngcc0.ɵɵviewQuery(CdkHeaderCellDef, 7);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.columnDef = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cell = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerCell = _t.first);\n    } }, inputs: { justify: \"justify\", name: \"name\", headerText: \"headerText\", dataAccessor: \"dataAccessor\" }, decls: 8, vars: 0, consts: [[\"cdkColumnDef\", \"\"], [\"cdk-header-cell\", \"\", 3, \"text-align\", 4, \"cdkHeaderCellDef\"], [\"cdk-cell\", \"\", 3, \"text-align\", 4, \"cdkCellDef\"], [\"cdk-header-cell\", \"\"], [\"cdk-cell\", \"\"]], template: function CdkTextColumn_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtext(0, \"\\n    \");\n        ɵngcc0.ɵɵelementContainerStart(1, 0);\n        ɵngcc0.ɵɵtext(2, \"\\n      \");\n        ɵngcc0.ɵɵtemplate(3, CdkTextColumn_th_3_Template, 2, 3, \"th\", 1);\n        ɵngcc0.ɵɵtext(4, \"\\n      \");\n        ɵngcc0.ɵɵtemplate(5, CdkTextColumn_td_5_Template, 2, 3, \"td\", 2);\n        ɵngcc0.ɵɵtext(6, \"\\n    \");\n        ɵngcc0.ɵɵelementContainerEnd();\n        ɵngcc0.ɵɵtext(7, \"\\n  \");\n    } }, dependencies: [CdkCellDef, CdkHeaderCellDef, CdkColumnDef, CdkCell, CdkHeaderCell], encapsulation: 2 });\nCdkTextColumn.ctorParameters = () => [\n    { type: CdkTable, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TEXT_COLUMN_OPTIONS,] }] }\n];\nCdkTextColumn.propDecorators = {\n    name: [{ type: Input }],\n    headerText: [{ type: Input }],\n    dataAccessor: [{ type: Input }],\n    justify: [{ type: Input }],\n    columnDef: [{ type: ViewChild, args: [CdkColumnDef, { static: true },] }],\n    cell: [{ type: ViewChild, args: [CdkCellDef, { static: true },] }],\n    headerCell: [{ type: ViewChild, args: [CdkHeaderCellDef, { static: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTextColumn, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-text-column',\n                template: `\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n                encapsulation: ViewEncapsulation.None,\n                // Change detection is intentionally not set to OnPush. This component's template will be provided\n                // to the table to be inserted into its view. This is problematic when change detection runs since\n                // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                // mean's the template in the table's view will not have the updated value (and in fact will cause\n                // an ExpressionChangedAfterItHasBeenCheckedError).\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default\n            }]\n    }], function () { return [{ type: CdkTable, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [TEXT_COLUMN_OPTIONS]\n            }] }]; }, { justify: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], headerText: [{\n            type: Input\n        }], dataAccessor: [{\n            type: Input\n        }], columnDef: [{\n            type: ViewChild,\n            args: [CdkColumnDef, { static: true }]\n        }], cell: [{\n            type: ViewChild,\n            args: [CdkCellDef, { static: true }]\n        }], headerCell: [{\n            type: ViewChild,\n            args: [CdkHeaderCellDef, { static: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst EXPORTED_DECLARATIONS = [\n    CdkTable,\n    CdkRowDef,\n    CdkCellDef,\n    CdkCellOutlet,\n    CdkHeaderCellDef,\n    CdkFooterCellDef,\n    CdkColumnDef,\n    CdkCell,\n    CdkRow,\n    CdkHeaderCell,\n    CdkFooterCell,\n    CdkHeaderRow,\n    CdkHeaderRowDef,\n    CdkFooterRow,\n    CdkFooterRowDef,\n    DataRowOutlet,\n    HeaderRowOutlet,\n    FooterRowOutlet,\n    CdkTextColumn,\n    CdkNoDataRow,\n    CdkRecycleRows,\n    NoDataRowOutlet,\n];\nclass CdkTableModule {\n}\nCdkTableModule.ɵfac = function CdkTableModule_Factory(t) { return new (t || CdkTableModule)(); };\nCdkTableModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: CdkTableModule });\nCdkTableModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [ScrollingModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTableModule, [{\n        type: NgModule,\n        args: [{\n                exports: EXPORTED_DECLARATIONS,\n                declarations: EXPORTED_DECLARATIONS,\n                imports: [ScrollingModule]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkTableModule, { declarations: function () { return [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CdkTextColumn, CdkNoDataRow, CdkRecycleRows, NoDataRowOutlet]; }, imports: function () { return [ScrollingModule]; }, exports: function () { return [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CdkTextColumn, CdkNoDataRow, CdkRecycleRows, NoDataRowOutlet]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseCdkCell, BaseRowDef, CDK_ROW_TEMPLATE, CDK_TABLE, CDK_TABLE_TEMPLATE, CdkCell, CdkCellDef, CdkCellOutlet, CdkColumnDef, CdkFooterCell, CdkFooterCellDef, CdkFooterRow, CdkFooterRowDef, CdkHeaderCell, CdkHeaderCellDef, CdkHeaderRow, CdkHeaderRowDef, CdkNoDataRow, CdkRecycleRows, CdkRow, CdkRowDef, CdkTable, CdkTableModule, CdkTextColumn, DataRowOutlet, FooterRowOutlet, HeaderRowOutlet, NoDataRowOutlet, STICKY_DIRECTIONS, STICKY_POSITIONING_LISTENER, StickyStyler, TEXT_COLUMN_OPTIONS, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, _Schedule, mixinHasStickyInput };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}