{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\nimport { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getBondIdentifier } from '../bond.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport let BondService = /*#__PURE__*/(() => {\n  class BondService {\n    constructor(http, applicationConfigService) {\n      this.http = http;\n      this.applicationConfigService = applicationConfigService;\n      this.resourceUrl = this.applicationConfigService.getEndpointFor('api/bonds');\n    }\n    create(bond) {\n      const copy = this.convertDateFromClient(bond);\n      return this.http.post(this.resourceUrl, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    update(bond) {\n      const copy = this.convertDateFromClient(bond);\n      return this.http.put(`${this.resourceUrl}/${getBondIdentifier(bond)}`, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    partialUpdate(bond) {\n      const copy = this.convertDateFromClient(bond);\n      return this.http.patch(`${this.resourceUrl}/${getBondIdentifier(bond)}`, copy, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      }).pipe(map(res => this.convertDateFromServer(res)));\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      }).pipe(map(res => this.convertDateArrayFromServer(res)));\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    addBondToCollectionIfMissing(bondCollection, ...bondsToCheck) {\n      const bonds = bondsToCheck.filter(isPresent);\n      if (bonds.length > 0) {\n        const bondCollectionIdentifiers = bondCollection.map(bondItem => getBondIdentifier(bondItem));\n        const bondsToAdd = bonds.filter(bondItem => {\n          const bondIdentifier = getBondIdentifier(bondItem);\n          if (bondIdentifier == null || bondCollectionIdentifiers.includes(bondIdentifier)) {\n            return false;\n          }\n          bondCollectionIdentifiers.push(bondIdentifier);\n          return true;\n        });\n        return [...bondsToAdd, ...bondCollection];\n      }\n      return bondCollection;\n    }\n    convertDateFromClient(bond) {\n      return Object.assign({}, bond, {\n        creationDate: bond.creationDate?.isValid() ? bond.creationDate.toJSON() : undefined,\n        redemptionDate: bond.redemptionDate?.isValid() ? bond.redemptionDate.toJSON() : undefined\n      });\n    }\n    convertDateFromServer(res) {\n      if (res.body) {\n        res.body.creationDate = res.body.creationDate ? dayjs(res.body.creationDate) : undefined;\n        res.body.redemptionDate = res.body.redemptionDate ? dayjs(res.body.redemptionDate) : undefined;\n      }\n      return res;\n    }\n    convertDateArrayFromServer(res) {\n      if (res.body) {\n        res.body.forEach(bond => {\n          bond.creationDate = bond.creationDate ? dayjs(bond.creationDate) : undefined;\n          bond.redemptionDate = bond.redemptionDate ? dayjs(bond.redemptionDate) : undefined;\n        });\n      }\n      return res;\n    }\n  }\n  BondService.ɵfac = function BondService_Factory(t) {\n    return new (t || BondService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n  };\n  BondService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BondService,\n    factory: BondService.ɵfac,\n    providedIn: 'root'\n  });\n  return BondService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}