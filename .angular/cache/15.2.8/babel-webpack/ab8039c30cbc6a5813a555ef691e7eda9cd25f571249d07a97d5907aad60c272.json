{"ast":null,"code":"import _defineProperty from \"/home/ceo/mmmm/createyourevent/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getImageIdentifier } from '../image.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport class ImageService {\n  constructor(http, applicationConfigService) {\n    _defineProperty(this, \"http\", void 0);\n    _defineProperty(this, \"applicationConfigService\", void 0);\n    _defineProperty(this, \"resourceUrl\", this.applicationConfigService.getEndpointFor('api/images'));\n    this.http = http;\n    this.applicationConfigService = applicationConfigService;\n  }\n  create(image) {\n    return this.http.post(this.resourceUrl, image, {\n      observe: 'response'\n    });\n  }\n  update(image) {\n    return this.http.put(`${this.resourceUrl}/${getImageIdentifier(image)}`, image, {\n      observe: 'response'\n    });\n  }\n  partialUpdate(image) {\n    return this.http.patch(`${this.resourceUrl}/${getImageIdentifier(image)}`, image, {\n      observe: 'response'\n    });\n  }\n  find(id) {\n    return this.http.get(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  query(req) {\n    const options = createRequestOption(req);\n    return this.http.get(this.resourceUrl, {\n      params: options,\n      observe: 'response'\n    });\n  }\n  delete(id) {\n    return this.http.delete(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  addImageToCollectionIfMissing(imageCollection, ...imagesToCheck) {\n    const images = imagesToCheck.filter(isPresent);\n    if (images.length > 0) {\n      const imageCollectionIdentifiers = imageCollection.map(imageItem => getImageIdentifier(imageItem));\n      const imagesToAdd = images.filter(imageItem => {\n        const imageIdentifier = getImageIdentifier(imageItem);\n        if (imageIdentifier == null || imageCollectionIdentifiers.includes(imageIdentifier)) {\n          return false;\n        }\n        imageCollectionIdentifiers.push(imageIdentifier);\n        return true;\n      });\n      return [...imagesToAdd, ...imageCollection];\n    }\n    return imageCollection;\n  }\n}\n_defineProperty(ImageService, \"\\u0275fac\", function ImageService_Factory(t) {\n  return new (t || ImageService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n});\n_defineProperty(ImageService, \"\\u0275prov\", /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ImageService,\n  factory: ImageService.ɵfac,\n  providedIn: 'root'\n}));","map":{"version":3,"mappings":";AAIA,SAASA,SAAS,QAAQ,yBAAyB;AAEnD,SAASC,mBAAmB,QAAQ,+BAA+B;AACnE,SAAiBC,kBAAkB,QAAQ,gBAAgB;;;;AAM3D,OAAM,MAAOC,YAAY;EAGvBC,YAAsBC,IAAgB,EAAYC,wBAAkD;IAAA;IAAA;IAAA,qCAF5E,IAAI,CAACA,wBAAwB,CAACC,cAAc,CAAC,YAAY,CAAC;IAE5D,SAAI,GAAJF,IAAI;IAAwB,6BAAwB,GAAxBC,wBAAwB;EAA6B;EAEvGE,MAAM,CAACC,KAAa;IAClB,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAS,IAAI,CAACC,WAAW,EAAEF,KAAK,EAAE;MAAEG,OAAO,EAAE;IAAU,CAAE,CAAC;EACjF;EAEAC,MAAM,CAACJ,KAAa;IAClB,OAAO,IAAI,CAACJ,IAAI,CAACS,GAAG,CAAS,GAAG,IAAI,CAACH,WAAW,IAAIT,kBAAkB,CAACO,KAAK,CAAW,EAAE,EAAEA,KAAK,EAAE;MAAEG,OAAO,EAAE;IAAU,CAAE,CAAC;EAC5H;EAEAG,aAAa,CAACN,KAAa;IACzB,OAAO,IAAI,CAACJ,IAAI,CAACW,KAAK,CAAS,GAAG,IAAI,CAACL,WAAW,IAAIT,kBAAkB,CAACO,KAAK,CAAW,EAAE,EAAEA,KAAK,EAAE;MAAEG,OAAO,EAAE;IAAU,CAAE,CAAC;EAC9H;EAEAK,IAAI,CAACC,EAAU;IACb,OAAO,IAAI,CAACb,IAAI,CAACc,GAAG,CAAS,GAAG,IAAI,CAACR,WAAW,IAAIO,EAAE,EAAE,EAAE;MAAEN,OAAO,EAAE;IAAU,CAAE,CAAC;EACpF;EAEAQ,KAAK,CAACC,GAAS;IACb,MAAMC,OAAO,GAAGrB,mBAAmB,CAACoB,GAAG,CAAC;IACxC,OAAO,IAAI,CAAChB,IAAI,CAACc,GAAG,CAAW,IAAI,CAACR,WAAW,EAAE;MAAEY,MAAM,EAAED,OAAO;MAAEV,OAAO,EAAE;IAAU,CAAE,CAAC;EAC5F;EAEAY,MAAM,CAACN,EAAU;IACf,OAAO,IAAI,CAACb,IAAI,CAACmB,MAAM,CAAC,GAAG,IAAI,CAACb,WAAW,IAAIO,EAAE,EAAE,EAAE;MAAEN,OAAO,EAAE;IAAU,CAAE,CAAC;EAC/E;EAEAa,6BAA6B,CAACC,eAAyB,EAAE,GAAGC,aAA4C;IACtG,MAAMC,MAAM,GAAaD,aAAa,CAACE,MAAM,CAAC7B,SAAS,CAAC;IACxD,IAAI4B,MAAM,CAACE,MAAM,GAAG,CAAC,EAAE;MACrB,MAAMC,0BAA0B,GAAGL,eAAe,CAACM,GAAG,CAACC,SAAS,IAAI/B,kBAAkB,CAAC+B,SAAS,CAAE,CAAC;MACnG,MAAMC,WAAW,GAAGN,MAAM,CAACC,MAAM,CAACI,SAAS,IAAG;QAC5C,MAAME,eAAe,GAAGjC,kBAAkB,CAAC+B,SAAS,CAAC;QACrD,IAAIE,eAAe,IAAI,IAAI,IAAIJ,0BAA0B,CAACK,QAAQ,CAACD,eAAe,CAAC,EAAE;UACnF,OAAO,KAAK;;QAEdJ,0BAA0B,CAACM,IAAI,CAACF,eAAe,CAAC;QAChD,OAAO,IAAI;MACb,CAAC,CAAC;MACF,OAAO,CAAC,GAAGD,WAAW,EAAE,GAAGR,eAAe,CAAC;;IAE7C,OAAOA,eAAe;EACxB;;gBA7CWvB,YAAY;mBAAZA,YAAY;AAAA;AAAA,gBAAZA,YAAY;SAAZA,YAAY;EAAAmC,SAAZnC,YAAY;EAAAoC,YADC;AAAM","names":["isPresent","createRequestOption","getImageIdentifier","ImageService","constructor","http","applicationConfigService","getEndpointFor","create","image","post","resourceUrl","observe","update","put","partialUpdate","patch","find","id","get","query","req","options","params","delete","addImageToCollectionIfMissing","imageCollection","imagesToCheck","images","filter","length","imageCollectionIdentifiers","map","imageItem","imagesToAdd","imageIdentifier","includes","push","factory","providedIn"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/entities/image/service/image.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { isPresent } from 'app/core/util/operators';\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { IImage, getImageIdentifier } from '../image.model';\n\nexport type EntityResponseType = HttpResponse<IImage>;\nexport type EntityArrayResponseType = HttpResponse<IImage[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class ImageService {\n  protected resourceUrl = this.applicationConfigService.getEndpointFor('api/images');\n\n  constructor(protected http: HttpClient, protected applicationConfigService: ApplicationConfigService) {}\n\n  create(image: IImage): Observable<EntityResponseType> {\n    return this.http.post<IImage>(this.resourceUrl, image, { observe: 'response' });\n  }\n\n  update(image: IImage): Observable<EntityResponseType> {\n    return this.http.put<IImage>(`${this.resourceUrl}/${getImageIdentifier(image) as number}`, image, { observe: 'response' });\n  }\n\n  partialUpdate(image: IImage): Observable<EntityResponseType> {\n    return this.http.patch<IImage>(`${this.resourceUrl}/${getImageIdentifier(image) as number}`, image, { observe: 'response' });\n  }\n\n  find(id: number): Observable<EntityResponseType> {\n    return this.http.get<IImage>(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  query(req?: any): Observable<EntityArrayResponseType> {\n    const options = createRequestOption(req);\n    return this.http.get<IImage[]>(this.resourceUrl, { params: options, observe: 'response' });\n  }\n\n  delete(id: number): Observable<HttpResponse<{}>> {\n    return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  addImageToCollectionIfMissing(imageCollection: IImage[], ...imagesToCheck: (IImage | null | undefined)[]): IImage[] {\n    const images: IImage[] = imagesToCheck.filter(isPresent);\n    if (images.length > 0) {\n      const imageCollectionIdentifiers = imageCollection.map(imageItem => getImageIdentifier(imageItem)!);\n      const imagesToAdd = images.filter(imageItem => {\n        const imageIdentifier = getImageIdentifier(imageItem);\n        if (imageIdentifier == null || imageCollectionIdentifiers.includes(imageIdentifier)) {\n          return false;\n        }\n        imageCollectionIdentifiers.push(imageIdentifier);\n        return true;\n      });\n      return [...imagesToAdd, ...imageCollection];\n    }\n    return imageCollection;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}