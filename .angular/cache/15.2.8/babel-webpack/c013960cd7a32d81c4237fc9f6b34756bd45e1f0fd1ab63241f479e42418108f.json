{"ast":null,"code":"/**\n *  Slot Machine Generator\n *  Create an extremely biased, web-based slot machine game.\n *\n *  Copyright 2020-2023, Marc S. Brooks (https://mbrooks.info)\n *  Licensed under the MIT license:\n *  http://www.opensource.org/licenses/mit-license.php\n */\n\n'use strict';\n\n/**\n * @param {Element} container\n *   Containing HTML element.\n *\n * @param {Array<Object>} reels\n *   Reel configuration.\n *\n * @param {Function} callback\n *   Returns selected pay-line symbols.\n *\n * @param {Object} options\n *   Configuration overrides (optional).\n */\nfunction SlotMachine(container, reels, callback, options) {\n  const self = this;\n  const REEL_SEGMENT_TOTAL = 24;\n  const defaults = {\n    reelHeight: 1200,\n    reelWidth: 200,\n    reelOffset: 20,\n    slotYAxis: 0,\n    animSpeed: 1000,\n    sounds: {\n      reelsBegin: null,\n      reelsEnd: null\n    },\n    rngFunc: function () {\n      // The weakest link.\n      return Math.random();\n    }\n  };\n  (function () {\n    self.options = Object.assign(defaults, options);\n    if (reels.length > 0) {\n      initGame();\n    } else {\n      throw new Error('Failed to initialize (missing reels)');\n    }\n  })();\n\n  /**\n   * Initialize a new game instance.\n   */\n  function initGame() {\n    createDisplayElm();\n    createSlotElm();\n  }\n\n  /**\n   * Create display elements.\n   */\n  function createDisplayElm() {\n    const div = document.createElement('div');\n    div.classList.add('display');\n    for (let i = 0; i < reels.length; i++) {\n      const elm = document.createElement('div');\n      elm.style.transform = `rotateY(${self.options.slotYAxis}deg)`;\n      elm.classList.add('reel');\n      div.appendChild(elm);\n    }\n    div.addEventListener('click', () => spinReels());\n    container.appendChild(div);\n  }\n\n  /**\n   * Create slot elements.\n   */\n  function createSlotElm() {\n    const div = document.createElement('div');\n    div.classList.add('slots');\n    reels.forEach(reel => {\n      const elm = createReelElm(reel, reel.symbols[0].position);\n      div.appendChild(elm);\n    });\n    container.appendChild(div);\n  }\n\n  /**\n   * Create reel elements.\n   *\n   * @param {Object} config\n   *   Config options.\n   *\n   * @param {Number} startPos\n   *   Start position.\n   *\n   * @return {Element}\n   */\n  function createReelElm(config, startPos = 0) {\n    const div = document.createElement('div');\n    div.style.transform = `rotateY(${self.options.slotYAxis}deg)`;\n    div.classList.add('reel');\n    const elm = createStripElm(config, config.symbols[0].position);\n    config['element'] = elm;\n    div.appendChild(elm);\n    return div;\n  }\n\n  /**\n   * Create strip elements (faux-panoramic animation).\n   *\n   * @param {Object} config\n   *   Config options.\n   *\n   * @param {Number} startPos\n   *   Start position.\n   *\n   * @return {Element}\n   */\n  function createStripElm(config, startPos = 0) {\n    const stripHeight = getStripHeight();\n    const stripWidth = getStripWidth();\n    const segmentDeg = 360 / REEL_SEGMENT_TOTAL;\n    const transZ = Math.trunc(Math.tan(90 / Math.PI - segmentDeg) * (stripHeight * 0.5) * 4);\n    const marginTop = transZ + stripHeight / 2;\n    const ul = document.createElement('ul');\n    ul.style.height = stripHeight + 'px';\n    ul.style.marginTop = marginTop + 'px';\n    ul.style.width = stripWidth + 'px';\n    ul.classList.add('strip');\n    for (let i = 0; i < REEL_SEGMENT_TOTAL; i++) {\n      const li = document.createElement('li');\n      li.append(i.toString());\n      const imgPosY = getImagePosY(i, startPos);\n      const rotateX = REEL_SEGMENT_TOTAL * segmentDeg - i * segmentDeg;\n\n      // Position image per the strip angle/container radius.\n      li.style.background = `url(${config.imageSrc}) 0 ${imgPosY}px`;\n      li.style.height = stripHeight + 'px';\n      li.style.width = stripWidth + 'px';\n      li.style.transform = `rotateX(${rotateX}deg) translateZ(${transZ}px)`;\n      ul.appendChild(li);\n    }\n    return ul;\n  }\n\n  /**\n   * Select a random symbol by weight.\n   *\n   * @param {Array<Object>} symbols\n   *   List of symbols.\n   *\n   * @return {Object}\n   */\n  function selectRandSymbol(symbols) {\n    let totalWeight = 0;\n    const symbolTotal = symbols.length;\n    for (let i = 0; i < symbolTotal; i++) {\n      const symbol = symbols[i];\n      const weight = symbol.weight;\n      totalWeight += weight;\n    }\n    let randNum = getRandom() * totalWeight;\n    for (let j = 0; j < symbolTotal; j++) {\n      const symbol = symbols[j];\n      const weight = symbol.weight;\n      if (randNum < weight) {\n        return symbol;\n      }\n      randNum -= weight;\n    }\n  }\n\n  /**\n   * Spin the reels and try your luck.\n   */\n  function spinReels() {\n    const payLine = [];\n    if (callback) {\n      // Delay callback until animations have stopped.\n      payLine.push = function () {\n        Array.prototype.push.apply(this, arguments);\n        if (payLine.length === reels.length) {\n          const timer = window.setTimeout(() => {\n            self.isAnimating = false;\n            callback(payLine);\n            window.clearTimeout(timer);\n          }, self.options.animSpeed);\n        }\n      };\n    }\n    playSound(self.options.sounds.reelsBegin);\n    reels.forEach(reel => {\n      const selected = selectRandSymbol(reel.symbols);\n      const startPos = selected.position;\n\n      // Start the rotation animation.\n      const elm = reel.element;\n      elm.classList.remove('stop');\n      elm.classList.toggle('spin');\n\n      // Shift images to select position.\n      elm.childNodes.forEach((li, index) => {\n        li.style.backgroundPositionY = getImagePosY(index, startPos) + 'px';\n      });\n\n      // Randomly stop rotation animation.\n      const timer = window.setTimeout(() => {\n        elm.classList.replace('spin', 'stop');\n        playSound(self.options.sounds.reelsEnd);\n        payLine.push(selected);\n        window.clearTimeout(timer);\n      }, self.options.animSpeed * getRandomInt(1, 4));\n    });\n  }\n\n  /**\n   * Get random number between 0 (inclusive) and 1 (exclusive).\n   *\n   * @return {number}\n   */\n  function getRandom() {\n    return self.options.rngFunc();\n  }\n\n  /**\n   * Get random integer between two values.\n   *\n   * @param {Number} min\n   *   Minimum value (default: 0).\n   *\n   * @param {Number} max\n   *   Maximum value (default: 10).\n   *\n   * @return {Number}\n   */\n  function getRandomInt(min = 1, max = 10) {\n    const minNum = Math.ceil(min);\n    const maxNum = Math.floor(max);\n    return Math.floor(getRandom() * (Math.floor(maxNum) - minNum)) + minNum;\n  }\n\n  /**\n   * Calculate the strip background position.\n   *\n   * @param {Number} index\n   *   Strip symbol index.\n   *\n   * @param {Number} position\n   *   Strip target position.\n   *\n   * @return {Number}\n   */\n  function getImagePosY(index, position) {\n    return -Math.abs(getStripHeight() * index + (position - self.options.reelOffset));\n  }\n\n  /**\n   * Calculate the strip height.\n   *\n   * @return {Number}\n   */\n  function getStripHeight() {\n    return self.options.reelHeight / REEL_SEGMENT_TOTAL;\n  }\n\n  /**\n   * Calculate the strip width.\n   *\n   * @return {Number}\n   */\n  function getStripWidth() {\n    return self.options.reelWidth;\n  }\n\n  /**\n   * Play the audio clip.\n   *\n   * @param {String} url\n   *  Audio file URL.\n   */\n  function playSound(url) {\n    if (url) {\n      const audio = new Audio();\n      audio.src = url;\n      audio.onerror = () => console.warn(`Failed to load audio: ${url}`);\n      audio.play();\n    }\n  }\n\n  /**\n   * Dispatch game actions.\n   *\n   * @param {Function} func\n   *   Function to execute.\n   */\n  function dispatch(func) {\n    if (!self.isAnimating) {\n      self.isAnimating = true;\n      func.call(self);\n    }\n  }\n\n  /**\n   * Protected members.\n   */\n  this.play = function () {\n    dispatch(spinReels);\n  };\n  return self;\n}\n\n/**\n * Set global/exportable instance, where supported.\n */\nwindow.slotMachine = function (container, reels, callback, options) {\n  return new SlotMachine(container, reels, callback, options);\n};\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = SlotMachine;\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}