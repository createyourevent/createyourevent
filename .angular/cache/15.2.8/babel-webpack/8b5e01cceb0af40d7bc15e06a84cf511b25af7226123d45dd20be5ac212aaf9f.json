{"ast":null,"code":"import { UntypedFormGroup } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"app/general.service\";\nimport * as i2 from \"app/entities/property/service/property.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@ngx-formly/core\";\nexport let AdminLuckySpinComponent = /*#__PURE__*/(() => {\n  class AdminLuckySpinComponent {\n    constructor(generalService, propertyService) {\n      this.generalService = generalService;\n      this.propertyService = propertyService;\n      this.minimumPoints_wheeloffortune = 0;\n      this.maximumPoints_wheeloffortune = 0;\n      this.commitmentPoints_wheeloffortune = 0;\n      this.segments_wheeloffortune = 0;\n      this.form = new UntypedFormGroup({});\n      this.model = {\n        minimumPoints_wheeloffortune: 0,\n        maximumPoints_wheeloffortune: 0,\n        commitmentPoints_wheeloffortune: 0,\n        segments_wheeloffortune: 0\n      };\n      this.fields = [{\n        key: 'minimumPoints_wheeloffortune',\n        type: 'input',\n        templateOptions: {\n          label: 'Minimum points',\n          placeholder: 'Minimum points which could be win.',\n          required: true\n        }\n      }, {\n        key: 'maximumPoints_wheeloffortune',\n        type: 'input',\n        templateOptions: {\n          label: 'Maximum points',\n          placeholder: 'Maximum points which could be win.',\n          required: true\n        }\n      }, {\n        key: 'commitmentPoints_wheeloffortune',\n        type: 'input',\n        templateOptions: {\n          label: 'The commitment for one game.',\n          placeholder: 'The commitment from the user to play.',\n          required: true\n        }\n      }, {\n        key: 'segments_wheeloffortune',\n        type: 'input',\n        templateOptions: {\n          label: 'Segments',\n          placeholder: 'How many segments should be on the wheel.',\n          required: true\n        }\n      }];\n    }\n    ngOnInit() {\n      this.generalService.findPropertyByKey('minimumPoints_wheeloffortune').subscribe(rt => {\n        this.minimumPoints_wheeloffortune = Number(rt.body.value);\n        this.generalService.findPropertyByKey('maximumPoints_wheeloffortune').subscribe(rw => {\n          this.maximumPoints_wheeloffortune = Number(rw.body.value);\n          this.generalService.findPropertyByKey('commitmentPoints_wheeloffortune').subscribe(rq => {\n            this.commitmentPoints_wheeloffortune = Number(rq.body.value);\n            this.generalService.findPropertyByKey('segments_wheeloffortune').subscribe(re => {\n              this.segments_wheeloffortune = Number(re.body.value);\n              this.model = {\n                minimumPoints_wheeloffortune: this.minimumPoints_wheeloffortune,\n                maximumPoints_wheeloffortune: this.maximumPoints_wheeloffortune,\n                commitmentPoints_wheeloffortune: this.commitmentPoints_wheeloffortune,\n                segments_wheeloffortune: this.segments_wheeloffortune\n              };\n            });\n          });\n        });\n      });\n    }\n    onSubmit() {\n      if (this.form.valid) {\n        this.generalService.findPropertyByKey('minimumPoints_wheeloffortune').subscribe(rt => {\n          const mp = rt.body;\n          mp.value = this.model.minimumPoints_wheeloffortune.toString();\n          this.propertyService.update(mp).subscribe();\n        });\n        this.generalService.findPropertyByKey('maximumPoints_wheeloffortune').subscribe(rt => {\n          const mp = rt.body;\n          mp.value = this.model.maximumPoints_wheeloffortune.toString();\n          this.propertyService.update(mp).subscribe();\n        });\n        this.generalService.findPropertyByKey('commitmentPoints_wheeloffortune').subscribe(rt => {\n          const mp = rt.body;\n          mp.value = this.model.commitmentPoints_wheeloffortune.toString();\n          this.propertyService.update(mp).subscribe();\n        });\n        this.generalService.findPropertyByKey('segments_wheeloffortune').subscribe(rt => {\n          const mp = rt.body;\n          mp.value = this.model.segments_wheeloffortune.toString();\n          this.propertyService.update(mp).subscribe();\n        });\n      }\n    }\n  }\n  AdminLuckySpinComponent.ɵfac = function AdminLuckySpinComponent_Factory(t) {\n    return new (t || AdminLuckySpinComponent)(i0.ɵɵdirectiveInject(i1.GeneralService), i0.ɵɵdirectiveInject(i2.PropertyService));\n  };\n  AdminLuckySpinComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AdminLuckySpinComponent,\n    selectors: [[\"jhi-admin-lucky-spin\"]],\n    decls: 8,\n    vars: 4,\n    consts: [[3, \"formGroup\", \"ngSubmit\"], [3, \"form\", \"fields\", \"model\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"submit-button\"]],\n    template: function AdminLuckySpinComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function AdminLuckySpinComponent_Template_form_ngSubmit_0_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵtext(1, \"\\n    \");\n        i0.ɵɵelement(2, \"formly-form\", 1);\n        i0.ɵɵtext(3, \"\\n    \");\n        i0.ɵɵelementStart(4, \"button\", 2);\n        i0.ɵɵtext(5, \"Submit\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(6, \"\\n\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(7, \"\\n\");\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.form);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"form\", ctx.form)(\"fields\", ctx.fields)(\"model\", ctx.model);\n      }\n    },\n    dependencies: [i3.ɵNgNoValidate, i3.NgControlStatusGroup, i3.FormGroupDirective, i4.FormlyForm]\n  });\n  return AdminLuckySpinComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}