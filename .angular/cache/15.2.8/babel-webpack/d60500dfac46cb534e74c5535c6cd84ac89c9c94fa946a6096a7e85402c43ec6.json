{"ast":null,"code":"import { map, catchError } from 'rxjs/operators';\nimport { SERVER_API_URL } from 'app/app.constants';\nimport { Observable } from 'rxjs';\nimport { ChatAdapter, Message } from 'ng-chat';\nimport { ChatMessage } from './chat-message.model';\nexport class SocketIOAdapter extends ChatAdapter {\n  constructor(userId, socket, http, sharedChatService) {\n    super();\n    this.sharedChatService = sharedChatService;\n    this.resourceUrl = SERVER_API_URL + 'api/chatMessages';\n    this.socket = socket;\n    this.http = http;\n    this.userId = userId;\n    this.InitializeSocketListerners();\n  }\n  setNgChat(ngChatInstance) {\n    this.ngChatInstance = ngChatInstance;\n  }\n  listFriends() {\n    return this.http.post(\"https://chat.createyourevent.org/listFriends\", {\n      userId: this.userId\n    }).pipe(map(res => res.json()), catchError(error => Observable.throw(error.json().error || 'Server error')));\n  }\n  getMessageHistory(userId) {\n    const ngMessages = [];\n    let messages = [];\n    const response = this.sharedChatService.query({\n      size: 2000\n    }).pipe(map(res => {\n      messages = res.body;\n      messages.forEach(element => {\n        if (element.messageFrom === userId && element.messageTo === this.userId || element.messageFrom === this.userId && element.messageTo === userId) {\n          const m = new Message();\n          m.fromId = element.messageFrom;\n          m.toId = element.messageTo;\n          m.message = element.message;\n          m.type = element.messageType;\n          m.dateSent = element.dateSent;\n          m.dateSeen = element.dateSeen;\n          ngMessages.push(m);\n        }\n      });\n      return ngMessages;\n    }));\n    return response;\n  }\n  sendMessage(message) {\n    const msg = new ChatMessage();\n    msg.dateSent = message.dateSent;\n    msg.messageFrom = message.fromId;\n    msg.messageTo = message.toId;\n    msg.messageType = message.type;\n    msg.message = message.message;\n    this.sharedChatService.create(msg).subscribe(newInstance => {\n      this.socket.emit(\"sendMessage\", message, newInstance.body.id);\n    });\n  }\n  groupCreated(group) {\n    console.log(group);\n    // DemoAdapter.mockedParticipants.push(group);\n    /*\n    DemoAdapter.mockedParticipants = DemoAdapter.mockedParticipants.sort((first, second) =>\n        second.displayName > first.displayName ? -1 : 1\n    );\n    */\n    // Trigger update of friends list\n    this.listFriends().subscribe(response => {\n      this.onFriendsListChanged(response);\n    });\n  }\n  InitializeSocketListerners() {\n    this.socket.on(\"messageReceived\", (messageWrapper, messageId) => {\n      // Handle the received message to ng-chat\n      this.sharedChatService.find(messageId).subscribe(msg => {\n        const message = msg.body;\n        message.dateSeen = new Date();\n        this.sharedChatService.update(message).subscribe(() => {\n          this.onMessageReceived(messageWrapper.user, messageWrapper.message);\n        });\n      });\n    });\n    this.socket.on(\"friendsListChanged\", usersCollection => {\n      this.onFriendsListChanged(usersCollection.filter(x => x.participant.id !== this.userId));\n    });\n    this.socket.on(\"userLoggedOf\", id => {\n      this.ngChatInstance.triggerCloseChatWindow(id);\n    });\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}