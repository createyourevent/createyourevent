{"ast":null,"code":"import _defineProperty from \"/home/ceo/mmmm/createyourevent/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\nimport { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getOrganizationStarRatingIdentifier } from '../organization-star-rating.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport class OrganizationStarRatingService {\n  constructor(http, applicationConfigService) {\n    _defineProperty(this, \"http\", void 0);\n    _defineProperty(this, \"applicationConfigService\", void 0);\n    _defineProperty(this, \"resourceUrl\", this.applicationConfigService.getEndpointFor('api/organization-star-ratings'));\n    this.http = http;\n    this.applicationConfigService = applicationConfigService;\n  }\n  create(organizationStarRating) {\n    const copy = this.convertDateFromClient(organizationStarRating);\n    return this.http.post(this.resourceUrl, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  update(organizationStarRating) {\n    const copy = this.convertDateFromClient(organizationStarRating);\n    return this.http.put(`${this.resourceUrl}/${getOrganizationStarRatingIdentifier(organizationStarRating)}`, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  partialUpdate(organizationStarRating) {\n    const copy = this.convertDateFromClient(organizationStarRating);\n    return this.http.patch(`${this.resourceUrl}/${getOrganizationStarRatingIdentifier(organizationStarRating)}`, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  find(id) {\n    return this.http.get(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  query(req) {\n    const options = createRequestOption(req);\n    return this.http.get(this.resourceUrl, {\n      params: options,\n      observe: 'response'\n    }).pipe(map(res => this.convertDateArrayFromServer(res)));\n  }\n  delete(id) {\n    return this.http.delete(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  addOrganizationStarRatingToCollectionIfMissing(organizationStarRatingCollection, ...organizationStarRatingsToCheck) {\n    const organizationStarRatings = organizationStarRatingsToCheck.filter(isPresent);\n    if (organizationStarRatings.length > 0) {\n      const organizationStarRatingCollectionIdentifiers = organizationStarRatingCollection.map(organizationStarRatingItem => getOrganizationStarRatingIdentifier(organizationStarRatingItem));\n      const organizationStarRatingsToAdd = organizationStarRatings.filter(organizationStarRatingItem => {\n        const organizationStarRatingIdentifier = getOrganizationStarRatingIdentifier(organizationStarRatingItem);\n        if (organizationStarRatingIdentifier == null || organizationStarRatingCollectionIdentifiers.includes(organizationStarRatingIdentifier)) {\n          return false;\n        }\n        organizationStarRatingCollectionIdentifiers.push(organizationStarRatingIdentifier);\n        return true;\n      });\n      return [...organizationStarRatingsToAdd, ...organizationStarRatingCollection];\n    }\n    return organizationStarRatingCollection;\n  }\n  convertDateFromClient(organizationStarRating) {\n    return Object.assign({}, organizationStarRating, {\n      date: organizationStarRating.date?.isValid() ? organizationStarRating.date.toJSON() : undefined\n    });\n  }\n  convertDateFromServer(res) {\n    if (res.body) {\n      res.body.date = res.body.date ? dayjs(res.body.date) : undefined;\n    }\n    return res;\n  }\n  convertDateArrayFromServer(res) {\n    if (res.body) {\n      res.body.forEach(organizationStarRating => {\n        organizationStarRating.date = organizationStarRating.date ? dayjs(organizationStarRating.date) : undefined;\n      });\n    }\n    return res;\n  }\n}\n_defineProperty(OrganizationStarRatingService, \"\\u0275fac\", function OrganizationStarRatingService_Factory(t) {\n  return new (t || OrganizationStarRatingService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n});\n_defineProperty(OrganizationStarRatingService, \"\\u0275prov\", /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: OrganizationStarRatingService,\n  factory: OrganizationStarRatingService.ɵfac,\n  providedIn: 'root'\n}));","map":{"version":3,"mappings":"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","names":["map","dayjs","isPresent","createRequestOption","getOrganizationStarRatingIdentifier","OrganizationStarRatingService","constructor","http","applicationConfigService","getEndpointFor","create","organizationStarRating","copy","convertDateFromClient","post","resourceUrl","observe","pipe","res","convertDateFromServer","update","put","partialUpdate","patch","find","id","get","query","req","options","params","convertDateArrayFromServer","delete","addOrganizationStarRatingToCollectionIfMissing","organizationStarRatingCollection","organizationStarRatingsToCheck","organizationStarRatings","filter","length","organizationStarRatingCollectionIdentifiers","organizationStarRatingItem","organizationStarRatingsToAdd","organizationStarRatingIdentifier","includes","push","Object","assign","date","isValid","toJSON","undefined","body","forEach","factory","providedIn"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/entities/organization-star-rating/service/organization-star-rating.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\n\nimport { isPresent } from 'app/core/util/operators';\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { IOrganizationStarRating, getOrganizationStarRatingIdentifier } from '../organization-star-rating.model';\n\nexport type EntityResponseType = HttpResponse<IOrganizationStarRating>;\nexport type EntityArrayResponseType = HttpResponse<IOrganizationStarRating[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class OrganizationStarRatingService {\n  protected resourceUrl = this.applicationConfigService.getEndpointFor('api/organization-star-ratings');\n\n  constructor(protected http: HttpClient, protected applicationConfigService: ApplicationConfigService) {}\n\n  create(organizationStarRating: IOrganizationStarRating): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(organizationStarRating);\n    return this.http\n      .post<IOrganizationStarRating>(this.resourceUrl, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  update(organizationStarRating: IOrganizationStarRating): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(organizationStarRating);\n    return this.http\n      .put<IOrganizationStarRating>(`${this.resourceUrl}/${getOrganizationStarRatingIdentifier(organizationStarRating) as number}`, copy, {\n        observe: 'response',\n      })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  partialUpdate(organizationStarRating: IOrganizationStarRating): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(organizationStarRating);\n    return this.http\n      .patch<IOrganizationStarRating>(\n        `${this.resourceUrl}/${getOrganizationStarRatingIdentifier(organizationStarRating) as number}`,\n        copy,\n        { observe: 'response' }\n      )\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  find(id: number): Observable<EntityResponseType> {\n    return this.http\n      .get<IOrganizationStarRating>(`${this.resourceUrl}/${id}`, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  query(req?: any): Observable<EntityArrayResponseType> {\n    const options = createRequestOption(req);\n    return this.http\n      .get<IOrganizationStarRating[]>(this.resourceUrl, { params: options, observe: 'response' })\n      .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n  }\n\n  delete(id: number): Observable<HttpResponse<{}>> {\n    return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  addOrganizationStarRatingToCollectionIfMissing(\n    organizationStarRatingCollection: IOrganizationStarRating[],\n    ...organizationStarRatingsToCheck: (IOrganizationStarRating | null | undefined)[]\n  ): IOrganizationStarRating[] {\n    const organizationStarRatings: IOrganizationStarRating[] = organizationStarRatingsToCheck.filter(isPresent);\n    if (organizationStarRatings.length > 0) {\n      const organizationStarRatingCollectionIdentifiers = organizationStarRatingCollection.map(\n        organizationStarRatingItem => getOrganizationStarRatingIdentifier(organizationStarRatingItem)!\n      );\n      const organizationStarRatingsToAdd = organizationStarRatings.filter(organizationStarRatingItem => {\n        const organizationStarRatingIdentifier = getOrganizationStarRatingIdentifier(organizationStarRatingItem);\n        if (\n          organizationStarRatingIdentifier == null ||\n          organizationStarRatingCollectionIdentifiers.includes(organizationStarRatingIdentifier)\n        ) {\n          return false;\n        }\n        organizationStarRatingCollectionIdentifiers.push(organizationStarRatingIdentifier);\n        return true;\n      });\n      return [...organizationStarRatingsToAdd, ...organizationStarRatingCollection];\n    }\n    return organizationStarRatingCollection;\n  }\n\n  protected convertDateFromClient(organizationStarRating: IOrganizationStarRating): IOrganizationStarRating {\n    return Object.assign({}, organizationStarRating, {\n      date: organizationStarRating.date?.isValid() ? organizationStarRating.date.toJSON() : undefined,\n    });\n  }\n\n  protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\n    if (res.body) {\n      res.body.date = res.body.date ? dayjs(res.body.date) : undefined;\n    }\n    return res;\n  }\n\n  protected convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\n    if (res.body) {\n      res.body.forEach((organizationStarRating: IOrganizationStarRating) => {\n        organizationStarRating.date = organizationStarRating.date ? dayjs(organizationStarRating.date) : undefined;\n      });\n    }\n    return res;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}