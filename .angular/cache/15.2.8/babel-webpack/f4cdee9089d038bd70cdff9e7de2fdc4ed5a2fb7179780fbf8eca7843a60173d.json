{"ast":null,"code":"import _defineProperty from \"/home/ceo/mmmm/createyourevent/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport * as dayjs from 'dayjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"app/general.service\";\nexport class TickerService {\n  constructor(generalService) {\n    _defineProperty(this, \"generalService\", void 0);\n    this.generalService = generalService;\n  }\n  load() {\n    return this.generalService.findAllTags().pipe(map(response => {\n      const md = response.body;\n      const tags = md.filter(tag => {\n        if (tag.shop) {\n          return tag.shop.active === true && tag.shop.activeOwner === true;\n        } else if (tag.event) {\n          return tag.event.active === true && tag.event.dateStart > dayjs();\n        } else if (tag.service) {\n          return tag.service.active === true && tag.service.activeOwner === true;\n        }\n        return false;\n      }).map(tag => ({\n        text: tag.tag,\n        weight: this.getRandomInt(5, 9),\n        color: this.getRandomColor(),\n        rotate: this.getRandomInt(-30, 30),\n        link: tag.shop !== null ? '/supplier/shop/' + tag.shop.id + '/overview' : tag.event !== null ? '/events/' + tag.event.id + '/view' : '/services/' + tag.service.id + '/viewService'\n      }));\n      return tags.sort(() => Math.random() - 0.5).slice(0, 50);\n    }));\n  }\n  getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n  getRandomColor() {\n    const c = '#' + (0x1000000 + Math.random() * 0xffffff).toString(16).substr(1, 6);\n    return c;\n  }\n}\n_defineProperty(TickerService, \"\\u0275fac\", function TickerService_Factory(t) {\n  return new (t || TickerService)(i0.ɵɵinject(i1.GeneralService));\n});\n_defineProperty(TickerService, \"\\u0275prov\", /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TickerService,\n  factory: TickerService.ɵfac,\n  providedIn: 'root'\n}));","map":{"version":3,"mappings":";AAGA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,SAASC,GAAG,QAAQ,gBAAgB;;;AAKpC,OAAM,MAAOC,aAAa;EACxBC,YAAoBC,cAA8B;IAAA;IAA9B,mBAAc,GAAdA,cAAc;EAAmB;EAErDC,IAAI;IACF,OAAO,IAAI,CAACD,cAAc,CAACE,WAAW,EAAE,CAACC,IAAI,CAC3CN,GAAG,CAACO,QAAQ,IAAG;MACb,MAAMC,EAAE,GAAGD,QAAQ,CAACE,IAAK;MACzB,MAAMC,IAAI,GAAGF,EAAE,CACZG,MAAM,CAACC,GAAG,IAAG;QACZ,IAAIA,GAAG,CAACC,IAAI,EAAE;UACZ,OAAOD,GAAG,CAACC,IAAI,CAACC,MAAM,KAAK,IAAI,IAAIF,GAAG,CAACC,IAAI,CAACE,WAAW,KAAK,IAAI;SACjE,MAAM,IAAIH,GAAG,CAACI,KAAK,EAAE;UACpB,OAAOJ,GAAG,CAACI,KAAK,CAACF,MAAM,KAAK,IAAI,IAAIF,GAAG,CAACI,KAAK,CAACC,SAAU,GAAGlB,KAAK,EAAE;SACnE,MAAM,IAAIa,GAAG,CAACM,OAAO,EAAE;UACtB,OAAON,GAAG,CAACM,OAAO,CAACJ,MAAM,KAAK,IAAI,IAAIF,GAAG,CAACM,OAAO,CAACH,WAAW,KAAK,IAAI;;QAExE,OAAO,KAAK;MACd,CAAC,CAAC,CACDf,GAAG,CAACY,GAAG,KAAK;QACXO,IAAI,EAAEP,GAAG,CAACA,GAAI;QACdQ,MAAM,EAAE,IAAI,CAACC,YAAY,CAAC,CAAC,EAAE,CAAC,CAAC;QAC/BC,KAAK,EAAE,IAAI,CAACC,cAAc,EAAE;QAC5BC,MAAM,EAAE,IAAI,CAACH,YAAY,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC;QAClCI,IAAI,EACFb,GAAG,CAACC,IAAI,KAAK,IAAI,GACb,iBAAiB,GAAGD,GAAG,CAACC,IAAI,CAACa,EAAE,GAAG,WAAW,GAC7Cd,GAAG,CAACI,KAAK,KAAK,IAAI,GAClB,UAAU,GAAGJ,GAAG,CAACI,KAAK,CAACU,EAAE,GAAG,OAAO,GACnC,YAAY,GAAGd,GAAG,CAACM,OAAQ,CAACQ,EAAE,GAAG;OACxC,CAAC,CAAC;MACL,OAAOhB,IAAI,CAACiB,IAAI,CAAC,MAAMC,IAAI,CAACC,MAAM,EAAE,GAAG,GAAG,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;IAC1D,CAAC,CAAC,CACH;EACH;EAEAT,YAAY,CAACU,GAAW,EAAEC,GAAW;IACnCD,GAAG,GAAGH,IAAI,CAACK,IAAI,CAACF,GAAG,CAAC;IACpBC,GAAG,GAAGJ,IAAI,CAACM,KAAK,CAACF,GAAG,CAAC;IACrB,OAAOJ,IAAI,CAACM,KAAK,CAACN,IAAI,CAACC,MAAM,EAAE,IAAIG,GAAG,GAAGD,GAAG,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG;EAC1D;EAEAR,cAAc;IACZ,MAAMY,CAAC,GAAG,GAAG,GAAG,CAAC,SAAS,GAAGP,IAAI,CAACC,MAAM,EAAE,GAAG,QAAQ,EAAEO,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;IAChF,OAAOF,CAAC;EACV;;gBA5CWlC,aAAa;mBAAbA,aAAa;AAAA;AAAA,gBAAbA,aAAa;SAAbA,aAAa;EAAAqC,SAAbrC,aAAa;EAAAsC,YAFZ;AAAM","names":["dayjs","map","TickerService","constructor","generalService","load","findAllTags","pipe","response","md","body","tags","filter","tag","shop","active","activeOwner","event","dateStart","service","text","weight","getRandomInt","color","getRandomColor","rotate","link","id","sort","Math","random","slice","min","max","ceil","floor","c","toString","substr","factory","providedIn"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/views/ticker/ticker.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CloudData } from 'angular-tag-cloud-module';\nimport { GeneralService } from 'app/general.service';\nimport * as dayjs from 'dayjs';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TickerService {\n  constructor(private generalService: GeneralService) {}\n\n  load(): Observable<CloudData[]> {\n    return this.generalService.findAllTags().pipe(\n      map(response => {\n        const md = response.body!;\n        const tags = md\n          .filter(tag => {\n            if (tag.shop) {\n              return tag.shop.active === true && tag.shop.activeOwner === true;\n            } else if (tag.event) {\n              return tag.event.active === true && tag.event.dateStart! > dayjs();\n            } else if (tag.service) {\n              return tag.service.active === true && tag.service.activeOwner === true;\n            }\n            return false;\n          })\n          .map(tag => ({\n            text: tag.tag!,\n            weight: this.getRandomInt(5, 9),\n            color: this.getRandomColor(),\n            rotate: this.getRandomInt(-30, 30),\n            link:\n              tag.shop !== null\n                ? '/supplier/shop/' + tag.shop.id + '/overview'\n                : tag.event !== null\n                ? '/events/' + tag.event.id + '/view'\n                : '/services/' + tag.service!.id + '/viewService',\n          }));\n        return tags.sort(() => Math.random() - 0.5).slice(0, 50);\n      })\n    );\n  }\n\n  getRandomInt(min: number, max: number): number {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  getRandomColor(): string {\n    const c = '#' + (0x1000000 + Math.random() * 0xffffff).toString(16).substr(1, 6);\n    return c;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}