{"ast":null,"code":"import { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getEventDetailsIdentifier } from '../event-details.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport let EventDetailsService = /*#__PURE__*/(() => {\n  class EventDetailsService {\n    constructor(http, applicationConfigService) {\n      this.http = http;\n      this.applicationConfigService = applicationConfigService;\n      this.resourceUrl = this.applicationConfigService.getEndpointFor('api/event-details');\n    }\n    create(eventDetails) {\n      return this.http.post(this.resourceUrl, eventDetails, {\n        observe: 'response'\n      });\n    }\n    update(eventDetails) {\n      return this.http.put(`${this.resourceUrl}/${getEventDetailsIdentifier(eventDetails)}`, eventDetails, {\n        observe: 'response'\n      });\n    }\n    partialUpdate(eventDetails) {\n      return this.http.patch(`${this.resourceUrl}/${getEventDetailsIdentifier(eventDetails)}`, eventDetails, {\n        observe: 'response'\n      });\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    addEventDetailsToCollectionIfMissing(eventDetailsCollection, ...eventDetailsToCheck) {\n      const eventDetails = eventDetailsToCheck.filter(isPresent);\n      if (eventDetails.length > 0) {\n        const eventDetailsCollectionIdentifiers = eventDetailsCollection.map(eventDetailsItem => getEventDetailsIdentifier(eventDetailsItem));\n        const eventDetailsToAdd = eventDetails.filter(eventDetailsItem => {\n          const eventDetailsIdentifier = getEventDetailsIdentifier(eventDetailsItem);\n          if (eventDetailsIdentifier == null || eventDetailsCollectionIdentifiers.includes(eventDetailsIdentifier)) {\n            return false;\n          }\n          eventDetailsCollectionIdentifiers.push(eventDetailsIdentifier);\n          return true;\n        });\n        return [...eventDetailsToAdd, ...eventDetailsCollection];\n      }\n      return eventDetailsCollection;\n    }\n  }\n  EventDetailsService.ɵfac = function EventDetailsService_Factory(t) {\n    return new (t || EventDetailsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n  };\n  EventDetailsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EventDetailsService,\n    factory: EventDetailsService.ɵfac,\n    providedIn: 'root'\n  });\n  return EventDetailsService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}