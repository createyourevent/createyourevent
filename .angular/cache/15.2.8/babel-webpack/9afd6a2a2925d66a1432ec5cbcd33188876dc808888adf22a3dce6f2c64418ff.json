{"ast":null,"code":"import _defineProperty from \"/home/ceo/mmmm/createyourevent/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\nimport { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getEventIdentifier } from '../event.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport class EventService {\n  constructor(http, applicationConfigService) {\n    _defineProperty(this, \"http\", void 0);\n    _defineProperty(this, \"applicationConfigService\", void 0);\n    _defineProperty(this, \"resourceUrl\", this.applicationConfigService.getEndpointFor('api/events'));\n    this.http = http;\n    this.applicationConfigService = applicationConfigService;\n  }\n  create(event) {\n    const copy = this.convertDateFromClient(event);\n    return this.http.post(this.resourceUrl, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  update(event) {\n    const copy = this.convertDateFromClient(event);\n    return this.http.put(`${this.resourceUrl}/${getEventIdentifier(event)}`, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  partialUpdate(event) {\n    const copy = this.convertDateFromClient(event);\n    return this.http.patch(`${this.resourceUrl}/${getEventIdentifier(event)}`, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  find(id) {\n    return this.http.get(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  query(req) {\n    const options = createRequestOption(req);\n    return this.http.get(this.resourceUrl, {\n      params: options,\n      observe: 'response'\n    }).pipe(map(res => this.convertDateArrayFromServer(res)));\n  }\n  delete(id) {\n    return this.http.delete(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  addEventToCollectionIfMissing(eventCollection, ...eventsToCheck) {\n    const events = eventsToCheck.filter(isPresent);\n    if (events.length > 0) {\n      const eventCollectionIdentifiers = eventCollection.map(eventItem => getEventIdentifier(eventItem));\n      const eventsToAdd = events.filter(eventItem => {\n        const eventIdentifier = getEventIdentifier(eventItem);\n        if (eventIdentifier == null || eventCollectionIdentifiers.includes(eventIdentifier)) {\n          return false;\n        }\n        eventCollectionIdentifiers.push(eventIdentifier);\n        return true;\n      });\n      return [...eventsToAdd, ...eventCollection];\n    }\n    return eventCollection;\n  }\n  convertDateFromClient(event) {\n    return Object.assign({}, event, {\n      dateStart: event.dateStart?.isValid() ? event.dateStart.toJSON() : undefined,\n      dateEnd: event.dateEnd?.isValid() ? event.dateEnd.toJSON() : undefined\n    });\n  }\n  convertDateFromServer(res) {\n    if (res.body) {\n      res.body.dateStart = res.body.dateStart ? dayjs(res.body.dateStart) : undefined;\n      res.body.dateEnd = res.body.dateEnd ? dayjs(res.body.dateEnd) : undefined;\n    }\n    return res;\n  }\n  convertDateArrayFromServer(res) {\n    if (res.body) {\n      res.body.forEach(event => {\n        event.dateStart = event.dateStart ? dayjs(event.dateStart) : undefined;\n        event.dateEnd = event.dateEnd ? dayjs(event.dateEnd) : undefined;\n      });\n    }\n    return res;\n  }\n}\n_defineProperty(EventService, \"\\u0275fac\", function EventService_Factory(t) {\n  return new (t || EventService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n});\n_defineProperty(EventService, \"\\u0275prov\", /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: EventService,\n  factory: EventService.ɵfac,\n  providedIn: 'root'\n}));","map":{"version":3,"mappings":"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","names":["map","dayjs","isPresent","createRequestOption","getEventIdentifier","EventService","constructor","http","applicationConfigService","getEndpointFor","create","event","copy","convertDateFromClient","post","resourceUrl","observe","pipe","res","convertDateFromServer","update","put","partialUpdate","patch","find","id","get","query","req","options","params","convertDateArrayFromServer","delete","addEventToCollectionIfMissing","eventCollection","eventsToCheck","events","filter","length","eventCollectionIdentifiers","eventItem","eventsToAdd","eventIdentifier","includes","push","Object","assign","dateStart","isValid","toJSON","undefined","dateEnd","body","forEach","factory","providedIn"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/entities/event/service/event.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\n\nimport { isPresent } from 'app/core/util/operators';\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { IEvent, getEventIdentifier } from '../event.model';\n\nexport type EntityResponseType = HttpResponse<IEvent>;\nexport type EntityArrayResponseType = HttpResponse<IEvent[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class EventService {\n  protected resourceUrl = this.applicationConfigService.getEndpointFor('api/events');\n\n  constructor(protected http: HttpClient, protected applicationConfigService: ApplicationConfigService) {}\n\n  create(event: IEvent): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(event);\n    return this.http\n      .post<IEvent>(this.resourceUrl, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  update(event: IEvent): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(event);\n    return this.http\n      .put<IEvent>(`${this.resourceUrl}/${getEventIdentifier(event) as number}`, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  partialUpdate(event: IEvent): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(event);\n    return this.http\n      .patch<IEvent>(`${this.resourceUrl}/${getEventIdentifier(event) as number}`, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  find(id: number): Observable<EntityResponseType> {\n    return this.http\n      .get<IEvent>(`${this.resourceUrl}/${id}`, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  query(req?: any): Observable<EntityArrayResponseType> {\n    const options = createRequestOption(req);\n    return this.http\n      .get<IEvent[]>(this.resourceUrl, { params: options, observe: 'response' })\n      .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n  }\n\n  delete(id: number): Observable<HttpResponse<{}>> {\n    return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  addEventToCollectionIfMissing(eventCollection: IEvent[], ...eventsToCheck: (IEvent | null | undefined)[]): IEvent[] {\n    const events: IEvent[] = eventsToCheck.filter(isPresent);\n    if (events.length > 0) {\n      const eventCollectionIdentifiers = eventCollection.map(eventItem => getEventIdentifier(eventItem)!);\n      const eventsToAdd = events.filter(eventItem => {\n        const eventIdentifier = getEventIdentifier(eventItem);\n        if (eventIdentifier == null || eventCollectionIdentifiers.includes(eventIdentifier)) {\n          return false;\n        }\n        eventCollectionIdentifiers.push(eventIdentifier);\n        return true;\n      });\n      return [...eventsToAdd, ...eventCollection];\n    }\n    return eventCollection;\n  }\n\n  protected convertDateFromClient(event: IEvent): IEvent {\n    return Object.assign({}, event, {\n      dateStart: event.dateStart?.isValid() ? event.dateStart.toJSON() : undefined,\n      dateEnd: event.dateEnd?.isValid() ? event.dateEnd.toJSON() : undefined,\n    });\n  }\n\n  protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\n    if (res.body) {\n      res.body.dateStart = res.body.dateStart ? dayjs(res.body.dateStart) : undefined;\n      res.body.dateEnd = res.body.dateEnd ? dayjs(res.body.dateEnd) : undefined;\n    }\n    return res;\n  }\n\n  protected convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\n    if (res.body) {\n      res.body.forEach((event: IEvent) => {\n        event.dateStart = event.dateStart ? dayjs(event.dateStart) : undefined;\n        event.dateEnd = event.dateEnd ? dayjs(event.dateEnd) : undefined;\n      });\n    }\n    return res;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}