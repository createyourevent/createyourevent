{"ast":null,"code":"import { createRequestOption } from 'app/core/request/request-util';\nimport { isPresent } from 'app/core/util/operators';\nimport { getUserIdentifier } from './user.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport class UserService {\n  constructor(http, applicationConfigService) {\n    this.http = http;\n    this.applicationConfigService = applicationConfigService;\n    this.resourceUrl = this.applicationConfigService.getEndpointFor('api/users');\n  }\n  query(req) {\n    const options = createRequestOption(req);\n    return this.http.get(this.resourceUrl, {\n      params: options,\n      observe: 'response'\n    });\n  }\n  addUserToCollectionIfMissing(userCollection, ...usersToCheck) {\n    const users = usersToCheck.filter(isPresent);\n    if (users.length > 0) {\n      const userCollectionIdentifiers = userCollection.map(userItem => getUserIdentifier(userItem));\n      const usersToAdd = users.filter(userItem => {\n        const userIdentifier = getUserIdentifier(userItem);\n        if (userIdentifier == null || userCollectionIdentifiers.includes(userIdentifier)) {\n          return false;\n        }\n        userCollectionIdentifiers.push(userIdentifier);\n        return true;\n      });\n      return [...usersToAdd, ...userCollection];\n    }\n    return userCollection;\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAKA,SAASA,mBAAmB,QAAQ,+BAA+B;AACnE,SAASC,SAAS,QAAQ,yBAAyB;AAEnD,SAAgBC,iBAAiB,QAAQ,cAAc;;;;AAGvD,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB,EAAUC,wBAAkD;IAA5E,SAAI,GAAJD,IAAI;IAAsB,6BAAwB,GAAxBC,wBAAwB;IAF/D,gBAAW,GAAG,IAAI,CAACA,wBAAwB,CAACC,cAAc,CAAC,WAAW,CAAC;EAEqB;EAEnGC,KAAK,CAACC,GAAgB;IACpB,MAAMC,OAAO,GAAGV,mBAAmB,CAACS,GAAG,CAAC;IACxC,OAAO,IAAI,CAACJ,IAAI,CAACM,GAAG,CAAU,IAAI,CAACC,WAAW,EAAE;MAAEC,MAAM,EAAEH,OAAO;MAAEI,OAAO,EAAE;IAAU,CAAE,CAAC;EAC3F;EAEAC,4BAA4B,CAACC,cAAuB,EAAE,GAAGC,YAA0C;IACjG,MAAMC,KAAK,GAAYD,YAAY,CAACE,MAAM,CAAClB,SAAS,CAAC;IACrD,IAAIiB,KAAK,CAACE,MAAM,GAAG,CAAC,EAAE;MACpB,MAAMC,yBAAyB,GAAGL,cAAc,CAACM,GAAG,CAACC,QAAQ,IAAIrB,iBAAiB,CAACqB,QAAQ,CAAE,CAAC;MAC9F,MAAMC,UAAU,GAAGN,KAAK,CAACC,MAAM,CAACI,QAAQ,IAAG;QACzC,MAAME,cAAc,GAAGvB,iBAAiB,CAACqB,QAAQ,CAAC;QAClD,IAAIE,cAAc,IAAI,IAAI,IAAIJ,yBAAyB,CAACK,QAAQ,CAACD,cAAc,CAAC,EAAE;UAChF,OAAO,KAAK;;QAEdJ,yBAAyB,CAACM,IAAI,CAACF,cAAc,CAAC;QAC9C,OAAO,IAAI;MACb,CAAC,CAAC;MACF,OAAO,CAAC,GAAGD,UAAU,EAAE,GAAGR,cAAc,CAAC;;IAE3C,OAAOA,cAAc;EACvB;;;mBAzBWb,WAAW;AAAA;;SAAXA,WAAW;EAAAyB,SAAXzB,WAAW;EAAA0B,YADE;AAAM","names":["createRequestOption","isPresent","getUserIdentifier","UserService","constructor","http","applicationConfigService","getEndpointFor","query","req","options","get","resourceUrl","params","observe","addUserToCollectionIfMissing","userCollection","usersToCheck","users","filter","length","userCollectionIdentifiers","map","userItem","usersToAdd","userIdentifier","includes","push","factory","providedIn"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/entities/user/user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { isPresent } from 'app/core/util/operators';\nimport { Pagination } from 'app/core/request/request.model';\nimport { IUser, getUserIdentifier } from './user.model';\n\n@Injectable({ providedIn: 'root' })\nexport class UserService {\n  public resourceUrl = this.applicationConfigService.getEndpointFor('api/users');\n\n  constructor(private http: HttpClient, private applicationConfigService: ApplicationConfigService) {}\n\n  query(req?: Pagination): Observable<HttpResponse<IUser[]>> {\n    const options = createRequestOption(req);\n    return this.http.get<IUser[]>(this.resourceUrl, { params: options, observe: 'response' });\n  }\n\n  addUserToCollectionIfMissing(userCollection: IUser[], ...usersToCheck: (IUser | null | undefined)[]): IUser[] {\n    const users: IUser[] = usersToCheck.filter(isPresent);\n    if (users.length > 0) {\n      const userCollectionIdentifiers = userCollection.map(userItem => getUserIdentifier(userItem)!);\n      const usersToAdd = users.filter(userItem => {\n        const userIdentifier = getUserIdentifier(userItem);\n        if (userIdentifier == null || userCollectionIdentifiers.includes(userIdentifier)) {\n          return false;\n        }\n        userCollectionIdentifiers.push(userIdentifier);\n        return true;\n      });\n      return [...usersToAdd, ...userCollection];\n    }\n    return userCollection;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}