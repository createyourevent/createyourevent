{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { SERVER_API_URL } from './app.constants';\nimport { Subject } from 'rxjs';\nimport { createRequestOption } from './core/request/request-util';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let SharedChatService = /*#__PURE__*/(() => {\n  class SharedChatService {\n    constructor(http) {\n      this.http = http;\n      this.resourceUrl = SERVER_API_URL + 'api/chatMessages';\n      this.invokeEvent = new Subject();\n      this.messageSeen = new Subject();\n      this.invokeChatNotification = new EventEmitter();\n    }\n    onLoginComplete() {\n      this.invokeChatNotification.emit();\n    }\n    callClickName(user) {\n      this.invokeEvent.next(user);\n    }\n    sendMessageSeen(msgs) {\n      this.messageSeen.next(msgs);\n    }\n    create(message) {\n      return this.http.post(this.resourceUrl, message, {\n        observe: 'response'\n      });\n    }\n    update(message) {\n      return this.http.put(this.resourceUrl, message, {\n        observe: 'response'\n      });\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    findAllByMessageFrom(id) {\n      return this.http.get(`${this.resourceUrl}/${id}/messageFrom`, {\n        observe: 'response'\n      });\n    }\n    findOneByMessageToAndMessageFromAndMessageTypeAndDateSent(idTo, idFrom, messageType, dateSent) {\n      return this.http.get(`${this.resourceUrl}/${idTo}/${idFrom}/${messageType}/${dateSent}/byMessage`, {\n        observe: 'response'\n      });\n    }\n  }\n  SharedChatService.ɵfac = function SharedChatService_Factory(t) {\n    return new (t || SharedChatService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  SharedChatService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SharedChatService,\n    factory: SharedChatService.ɵfac,\n    providedIn: 'root'\n  });\n  return SharedChatService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}