{"ast":null,"code":"import _defineProperty from \"/home/ceo/mmmm/createyourevent/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\nimport { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getEventProductRatingCommentIdentifier } from '../event-product-rating-comment.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport class EventProductRatingCommentService {\n  constructor(http, applicationConfigService) {\n    _defineProperty(this, \"http\", void 0);\n    _defineProperty(this, \"applicationConfigService\", void 0);\n    _defineProperty(this, \"resourceUrl\", this.applicationConfigService.getEndpointFor('api/event-product-rating-comments'));\n    this.http = http;\n    this.applicationConfigService = applicationConfigService;\n  }\n  create(eventProductRatingComment) {\n    const copy = this.convertDateFromClient(eventProductRatingComment);\n    return this.http.post(this.resourceUrl, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  update(eventProductRatingComment) {\n    const copy = this.convertDateFromClient(eventProductRatingComment);\n    return this.http.put(`${this.resourceUrl}/${getEventProductRatingCommentIdentifier(eventProductRatingComment)}`, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  partialUpdate(eventProductRatingComment) {\n    const copy = this.convertDateFromClient(eventProductRatingComment);\n    return this.http.patch(`${this.resourceUrl}/${getEventProductRatingCommentIdentifier(eventProductRatingComment)}`, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  find(id) {\n    return this.http.get(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  query(req) {\n    const options = createRequestOption(req);\n    return this.http.get(this.resourceUrl, {\n      params: options,\n      observe: 'response'\n    }).pipe(map(res => this.convertDateArrayFromServer(res)));\n  }\n  delete(id) {\n    return this.http.delete(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  addEventProductRatingCommentToCollectionIfMissing(eventProductRatingCommentCollection, ...eventProductRatingCommentsToCheck) {\n    const eventProductRatingComments = eventProductRatingCommentsToCheck.filter(isPresent);\n    if (eventProductRatingComments.length > 0) {\n      const eventProductRatingCommentCollectionIdentifiers = eventProductRatingCommentCollection.map(eventProductRatingCommentItem => getEventProductRatingCommentIdentifier(eventProductRatingCommentItem));\n      const eventProductRatingCommentsToAdd = eventProductRatingComments.filter(eventProductRatingCommentItem => {\n        const eventProductRatingCommentIdentifier = getEventProductRatingCommentIdentifier(eventProductRatingCommentItem);\n        if (eventProductRatingCommentIdentifier == null || eventProductRatingCommentCollectionIdentifiers.includes(eventProductRatingCommentIdentifier)) {\n          return false;\n        }\n        eventProductRatingCommentCollectionIdentifiers.push(eventProductRatingCommentIdentifier);\n        return true;\n      });\n      return [...eventProductRatingCommentsToAdd, ...eventProductRatingCommentCollection];\n    }\n    return eventProductRatingCommentCollection;\n  }\n  convertDateFromClient(eventProductRatingComment) {\n    return Object.assign({}, eventProductRatingComment, {\n      date: eventProductRatingComment.date?.isValid() ? eventProductRatingComment.date.toJSON() : undefined\n    });\n  }\n  convertDateFromServer(res) {\n    if (res.body) {\n      res.body.date = res.body.date ? dayjs(res.body.date) : undefined;\n    }\n    return res;\n  }\n  convertDateArrayFromServer(res) {\n    if (res.body) {\n      res.body.forEach(eventProductRatingComment => {\n        eventProductRatingComment.date = eventProductRatingComment.date ? dayjs(eventProductRatingComment.date) : undefined;\n      });\n    }\n    return res;\n  }\n}\n_defineProperty(EventProductRatingCommentService, \"\\u0275fac\", function EventProductRatingCommentService_Factory(t) {\n  return new (t || EventProductRatingCommentService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n});\n_defineProperty(EventProductRatingCommentService, \"\\u0275prov\", /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: EventProductRatingCommentService,\n  factory: EventProductRatingCommentService.ɵfac,\n  providedIn: 'root'\n}));","map":{"version":3,"mappings":"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","names":["map","dayjs","isPresent","createRequestOption","getEventProductRatingCommentIdentifier","EventProductRatingCommentService","constructor","http","applicationConfigService","getEndpointFor","create","eventProductRatingComment","copy","convertDateFromClient","post","resourceUrl","observe","pipe","res","convertDateFromServer","update","put","partialUpdate","patch","find","id","get","query","req","options","params","convertDateArrayFromServer","delete","addEventProductRatingCommentToCollectionIfMissing","eventProductRatingCommentCollection","eventProductRatingCommentsToCheck","eventProductRatingComments","filter","length","eventProductRatingCommentCollectionIdentifiers","eventProductRatingCommentItem","eventProductRatingCommentsToAdd","eventProductRatingCommentIdentifier","includes","push","Object","assign","date","isValid","toJSON","undefined","body","forEach","factory","providedIn"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/entities/event-product-rating-comment/service/event-product-rating-comment.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\n\nimport { isPresent } from 'app/core/util/operators';\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { IEventProductRatingComment, getEventProductRatingCommentIdentifier } from '../event-product-rating-comment.model';\n\nexport type EntityResponseType = HttpResponse<IEventProductRatingComment>;\nexport type EntityArrayResponseType = HttpResponse<IEventProductRatingComment[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class EventProductRatingCommentService {\n  protected resourceUrl = this.applicationConfigService.getEndpointFor('api/event-product-rating-comments');\n\n  constructor(protected http: HttpClient, protected applicationConfigService: ApplicationConfigService) {}\n\n  create(eventProductRatingComment: IEventProductRatingComment): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(eventProductRatingComment);\n    return this.http\n      .post<IEventProductRatingComment>(this.resourceUrl, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  update(eventProductRatingComment: IEventProductRatingComment): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(eventProductRatingComment);\n    return this.http\n      .put<IEventProductRatingComment>(\n        `${this.resourceUrl}/${getEventProductRatingCommentIdentifier(eventProductRatingComment) as number}`,\n        copy,\n        { observe: 'response' }\n      )\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  partialUpdate(eventProductRatingComment: IEventProductRatingComment): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(eventProductRatingComment);\n    return this.http\n      .patch<IEventProductRatingComment>(\n        `${this.resourceUrl}/${getEventProductRatingCommentIdentifier(eventProductRatingComment) as number}`,\n        copy,\n        { observe: 'response' }\n      )\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  find(id: number): Observable<EntityResponseType> {\n    return this.http\n      .get<IEventProductRatingComment>(`${this.resourceUrl}/${id}`, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  query(req?: any): Observable<EntityArrayResponseType> {\n    const options = createRequestOption(req);\n    return this.http\n      .get<IEventProductRatingComment[]>(this.resourceUrl, { params: options, observe: 'response' })\n      .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n  }\n\n  delete(id: number): Observable<HttpResponse<{}>> {\n    return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  addEventProductRatingCommentToCollectionIfMissing(\n    eventProductRatingCommentCollection: IEventProductRatingComment[],\n    ...eventProductRatingCommentsToCheck: (IEventProductRatingComment | null | undefined)[]\n  ): IEventProductRatingComment[] {\n    const eventProductRatingComments: IEventProductRatingComment[] = eventProductRatingCommentsToCheck.filter(isPresent);\n    if (eventProductRatingComments.length > 0) {\n      const eventProductRatingCommentCollectionIdentifiers = eventProductRatingCommentCollection.map(\n        eventProductRatingCommentItem => getEventProductRatingCommentIdentifier(eventProductRatingCommentItem)!\n      );\n      const eventProductRatingCommentsToAdd = eventProductRatingComments.filter(eventProductRatingCommentItem => {\n        const eventProductRatingCommentIdentifier = getEventProductRatingCommentIdentifier(eventProductRatingCommentItem);\n        if (\n          eventProductRatingCommentIdentifier == null ||\n          eventProductRatingCommentCollectionIdentifiers.includes(eventProductRatingCommentIdentifier)\n        ) {\n          return false;\n        }\n        eventProductRatingCommentCollectionIdentifiers.push(eventProductRatingCommentIdentifier);\n        return true;\n      });\n      return [...eventProductRatingCommentsToAdd, ...eventProductRatingCommentCollection];\n    }\n    return eventProductRatingCommentCollection;\n  }\n\n  protected convertDateFromClient(eventProductRatingComment: IEventProductRatingComment): IEventProductRatingComment {\n    return Object.assign({}, eventProductRatingComment, {\n      date: eventProductRatingComment.date?.isValid() ? eventProductRatingComment.date.toJSON() : undefined,\n    });\n  }\n\n  protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\n    if (res.body) {\n      res.body.date = res.body.date ? dayjs(res.body.date) : undefined;\n    }\n    return res;\n  }\n\n  protected convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\n    if (res.body) {\n      res.body.forEach((eventProductRatingComment: IEventProductRatingComment) => {\n        eventProductRatingComment.date = eventProductRatingComment.date ? dayjs(eventProductRatingComment.date) : undefined;\n      });\n    }\n    return res;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}