{"ast":null,"code":"import _defineProperty from \"/home/ceo/mmmm/createyourevent/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getChipsIdentifier } from '../chips.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport class ChipsService {\n  constructor(http, applicationConfigService) {\n    _defineProperty(this, \"http\", void 0);\n    _defineProperty(this, \"applicationConfigService\", void 0);\n    _defineProperty(this, \"resourceUrl\", this.applicationConfigService.getEndpointFor('api/chips'));\n    this.http = http;\n    this.applicationConfigService = applicationConfigService;\n  }\n  create(chips) {\n    return this.http.post(this.resourceUrl, chips, {\n      observe: 'response'\n    });\n  }\n  update(chips) {\n    return this.http.put(`${this.resourceUrl}/${getChipsIdentifier(chips)}`, chips, {\n      observe: 'response'\n    });\n  }\n  partialUpdate(chips) {\n    return this.http.patch(`${this.resourceUrl}/${getChipsIdentifier(chips)}`, chips, {\n      observe: 'response'\n    });\n  }\n  find(id) {\n    return this.http.get(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  query(req) {\n    const options = createRequestOption(req);\n    return this.http.get(this.resourceUrl, {\n      params: options,\n      observe: 'response'\n    });\n  }\n  delete(id) {\n    return this.http.delete(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  addChipsToCollectionIfMissing(chipsCollection, ...chipsToCheck) {\n    const chips = chipsToCheck.filter(isPresent);\n    if (chips.length > 0) {\n      const chipsCollectionIdentifiers = chipsCollection.map(chipsItem => getChipsIdentifier(chipsItem));\n      const chipsToAdd = chips.filter(chipsItem => {\n        const chipsIdentifier = getChipsIdentifier(chipsItem);\n        if (chipsIdentifier == null || chipsCollectionIdentifiers.includes(chipsIdentifier)) {\n          return false;\n        }\n        chipsCollectionIdentifiers.push(chipsIdentifier);\n        return true;\n      });\n      return [...chipsToAdd, ...chipsCollection];\n    }\n    return chipsCollection;\n  }\n}\n_defineProperty(ChipsService, \"\\u0275fac\", function ChipsService_Factory(t) {\n  return new (t || ChipsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n});\n_defineProperty(ChipsService, \"\\u0275prov\", /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ChipsService,\n  factory: ChipsService.ɵfac,\n  providedIn: 'root'\n}));","map":{"version":3,"mappings":";AAIA,SAASA,SAAS,QAAQ,yBAAyB;AAEnD,SAASC,mBAAmB,QAAQ,+BAA+B;AACnE,SAAiBC,kBAAkB,QAAQ,gBAAgB;;;;AAM3D,OAAM,MAAOC,YAAY;EAGvBC,YAAsBC,IAAgB,EAAYC,wBAAkD;IAAA;IAAA;IAAA,qCAF5E,IAAI,CAACA,wBAAwB,CAACC,cAAc,CAAC,WAAW,CAAC;IAE3D,SAAI,GAAJF,IAAI;IAAwB,6BAAwB,GAAxBC,wBAAwB;EAA6B;EAEvGE,MAAM,CAACC,KAAa;IAClB,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAS,IAAI,CAACC,WAAW,EAAEF,KAAK,EAAE;MAAEG,OAAO,EAAE;IAAU,CAAE,CAAC;EACjF;EAEAC,MAAM,CAACJ,KAAa;IAClB,OAAO,IAAI,CAACJ,IAAI,CAACS,GAAG,CAAS,GAAG,IAAI,CAACH,WAAW,IAAIT,kBAAkB,CAACO,KAAK,CAAW,EAAE,EAAEA,KAAK,EAAE;MAAEG,OAAO,EAAE;IAAU,CAAE,CAAC;EAC5H;EAEAG,aAAa,CAACN,KAAa;IACzB,OAAO,IAAI,CAACJ,IAAI,CAACW,KAAK,CAAS,GAAG,IAAI,CAACL,WAAW,IAAIT,kBAAkB,CAACO,KAAK,CAAW,EAAE,EAAEA,KAAK,EAAE;MAAEG,OAAO,EAAE;IAAU,CAAE,CAAC;EAC9H;EAEAK,IAAI,CAACC,EAAU;IACb,OAAO,IAAI,CAACb,IAAI,CAACc,GAAG,CAAS,GAAG,IAAI,CAACR,WAAW,IAAIO,EAAE,EAAE,EAAE;MAAEN,OAAO,EAAE;IAAU,CAAE,CAAC;EACpF;EAEAQ,KAAK,CAACC,GAAS;IACb,MAAMC,OAAO,GAAGrB,mBAAmB,CAACoB,GAAG,CAAC;IACxC,OAAO,IAAI,CAAChB,IAAI,CAACc,GAAG,CAAW,IAAI,CAACR,WAAW,EAAE;MAAEY,MAAM,EAAED,OAAO;MAAEV,OAAO,EAAE;IAAU,CAAE,CAAC;EAC5F;EAEAY,MAAM,CAACN,EAAU;IACf,OAAO,IAAI,CAACb,IAAI,CAACmB,MAAM,CAAC,GAAG,IAAI,CAACb,WAAW,IAAIO,EAAE,EAAE,EAAE;MAAEN,OAAO,EAAE;IAAU,CAAE,CAAC;EAC/E;EAEAa,6BAA6B,CAACC,eAAyB,EAAE,GAAGC,YAA2C;IACrG,MAAMlB,KAAK,GAAakB,YAAY,CAACC,MAAM,CAAC5B,SAAS,CAAC;IACtD,IAAIS,KAAK,CAACoB,MAAM,GAAG,CAAC,EAAE;MACpB,MAAMC,0BAA0B,GAAGJ,eAAe,CAACK,GAAG,CAACC,SAAS,IAAI9B,kBAAkB,CAAC8B,SAAS,CAAE,CAAC;MACnG,MAAMC,UAAU,GAAGxB,KAAK,CAACmB,MAAM,CAACI,SAAS,IAAG;QAC1C,MAAME,eAAe,GAAGhC,kBAAkB,CAAC8B,SAAS,CAAC;QACrD,IAAIE,eAAe,IAAI,IAAI,IAAIJ,0BAA0B,CAACK,QAAQ,CAACD,eAAe,CAAC,EAAE;UACnF,OAAO,KAAK;;QAEdJ,0BAA0B,CAACM,IAAI,CAACF,eAAe,CAAC;QAChD,OAAO,IAAI;MACb,CAAC,CAAC;MACF,OAAO,CAAC,GAAGD,UAAU,EAAE,GAAGP,eAAe,CAAC;;IAE5C,OAAOA,eAAe;EACxB;;gBA7CWvB,YAAY;mBAAZA,YAAY;AAAA;AAAA,gBAAZA,YAAY;SAAZA,YAAY;EAAAkC,SAAZlC,YAAY;EAAAmC,YADC;AAAM","names":["isPresent","createRequestOption","getChipsIdentifier","ChipsService","constructor","http","applicationConfigService","getEndpointFor","create","chips","post","resourceUrl","observe","update","put","partialUpdate","patch","find","id","get","query","req","options","params","delete","addChipsToCollectionIfMissing","chipsCollection","chipsToCheck","filter","length","chipsCollectionIdentifiers","map","chipsItem","chipsToAdd","chipsIdentifier","includes","push","factory","providedIn"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/entities/chips/service/chips.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { isPresent } from 'app/core/util/operators';\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { IChips, getChipsIdentifier } from '../chips.model';\n\nexport type EntityResponseType = HttpResponse<IChips>;\nexport type EntityArrayResponseType = HttpResponse<IChips[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class ChipsService {\n  protected resourceUrl = this.applicationConfigService.getEndpointFor('api/chips');\n\n  constructor(protected http: HttpClient, protected applicationConfigService: ApplicationConfigService) {}\n\n  create(chips: IChips): Observable<EntityResponseType> {\n    return this.http.post<IChips>(this.resourceUrl, chips, { observe: 'response' });\n  }\n\n  update(chips: IChips): Observable<EntityResponseType> {\n    return this.http.put<IChips>(`${this.resourceUrl}/${getChipsIdentifier(chips) as number}`, chips, { observe: 'response' });\n  }\n\n  partialUpdate(chips: IChips): Observable<EntityResponseType> {\n    return this.http.patch<IChips>(`${this.resourceUrl}/${getChipsIdentifier(chips) as number}`, chips, { observe: 'response' });\n  }\n\n  find(id: number): Observable<EntityResponseType> {\n    return this.http.get<IChips>(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  query(req?: any): Observable<EntityArrayResponseType> {\n    const options = createRequestOption(req);\n    return this.http.get<IChips[]>(this.resourceUrl, { params: options, observe: 'response' });\n  }\n\n  delete(id: number): Observable<HttpResponse<{}>> {\n    return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  addChipsToCollectionIfMissing(chipsCollection: IChips[], ...chipsToCheck: (IChips | null | undefined)[]): IChips[] {\n    const chips: IChips[] = chipsToCheck.filter(isPresent);\n    if (chips.length > 0) {\n      const chipsCollectionIdentifiers = chipsCollection.map(chipsItem => getChipsIdentifier(chipsItem)!);\n      const chipsToAdd = chips.filter(chipsItem => {\n        const chipsIdentifier = getChipsIdentifier(chipsItem);\n        if (chipsIdentifier == null || chipsCollectionIdentifiers.includes(chipsIdentifier)) {\n          return false;\n        }\n        chipsCollectionIdentifiers.push(chipsIdentifier);\n        return true;\n      });\n      return [...chipsToAdd, ...chipsCollection];\n    }\n    return chipsCollection;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}