{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngx-translate/core\";\nimport * as i2 from \"../shared/language/translate.directive\";\nexport let CountdownTimerComponent = /*#__PURE__*/(() => {\n  class CountdownTimerComponent {\n    constructor(el, translate) {\n      this.el = el;\n      this.translate = translate;\n      this.photo = false;\n      this.zeroTrigger = new EventEmitter(true);\n    }\n    ngOnInit() {\n      if (this.photo) {\n        if (this.start) {\n          this.displayTime = this.getTimeDiff(this.start, true);\n        } else {\n          this.displayTime = this.getTimeDiff(this.end);\n        }\n      } else {\n        this.timer = setInterval(() => {\n          if (this.start) {\n            this.displayTime = this.getTimeDiff(this.start, true);\n          } else {\n            this.displayTime = this.getTimeDiff(this.end);\n          }\n        }, 1000);\n      }\n    }\n    ngOnDestroy() {\n      if (!this.photo) {\n        this.stopTimer();\n      }\n    }\n    getTimeDiff(datetime, useAsTimer = false) {\n      datetime = new Date(datetime).getTime();\n      const now = new Date().getTime();\n      if (isNaN(datetime)) {\n        return \"\";\n      }\n      let milisecDiff = datetime - now;\n      if (useAsTimer) {\n        milisecDiff = now - datetime;\n      }\n      // Zero Time Trigger\n      if (milisecDiff <= 0) {\n        this.zeroTrigger.emit(\"reached zero\");\n        return \"00 \" + this.translate.instant('countdown.days') + \" : 00 \" + this.translate.instant('countdown.hours') + \" : 00 \" + this.translate.instant('countdown.minutes') + \" : 00 \" + this.translate.instant('countdown.seconds');\n      }\n      const days = Math.floor(milisecDiff / 1000 / 60 / (60 * 24));\n      const dateDiff = new Date(milisecDiff);\n      const dayString = days ? this.twoDigit(days) + \" \" + this.translate.instant('countdown.days') + \" : \" : \"\";\n      const dayHours = days * 24;\n      if (this.timeOnly) {\n        const hours = dateDiff.getUTCHours() + dayHours;\n        return this.twoDigit(hours) + \" \" + this.translate.instant('countdown.hours') + \" : \" + this.twoDigit(dateDiff.getUTCMinutes()) + \" \" + this.translate.instant('countdown.minutes') + \" : \" + this.twoDigit(dateDiff.getUTCSeconds()) + \" \" + this.translate.instant('countdown.seconds');\n      } else {\n        // Date() takes a UTC timestamp – getHours() gets hours in local time not in UTC. therefore we have to use getUTCHours()\n        return dayString + this.twoDigit(dateDiff.getUTCHours()) + \" \" + this.translate.instant('countdown.hours') + \" : \" + this.twoDigit(dateDiff.getUTCMinutes()) + \" \" + this.translate.instant('countdown.minutes') + \" : \" + this.twoDigit(dateDiff.getUTCSeconds()) + \" \" + this.translate.instant('countdown.seconds');\n      }\n    }\n    twoDigit(number) {\n      return number > 9 ? \"\" + number : \"0\" + number;\n    }\n    stopTimer() {\n      clearInterval(this.timer);\n      this.timer = undefined;\n    }\n  }\n  CountdownTimerComponent.ɵfac = function CountdownTimerComponent_Factory(t) {\n    return new (t || CountdownTimerComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.TranslateService));\n  };\n  CountdownTimerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CountdownTimerComponent,\n    selectors: [[\"jhi-countdown-timer\"]],\n    inputs: {\n      start: \"start\",\n      end: \"end\",\n      timeOnly: \"timeOnly\",\n      photo: \"photo\"\n    },\n    outputs: {\n      zeroTrigger: \"zeroTrigger\"\n    },\n    decls: 5,\n    vars: 1,\n    consts: [[1, \"countdown\"], [\"jhiTranslate\", \"countdown.text\", 1, \"countdown_text\"], [1, \"display\"]],\n    template: function CountdownTimerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n        i0.ɵɵtext(2, \"This event starts in:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 2);\n        i0.ɵɵtext(4);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate(ctx.displayTime);\n      }\n    },\n    dependencies: [i2.TranslateDirective],\n    styles: [\".countdown[_ngcontent-%COMP%]{background-image:url(banner_countdown.f22a5b2836f98003.png);width:500px;height:149px;display:block;margin-left:auto;margin-right:auto;margin-bottom:35px;border:3px solid #fff;box-shadow:2px 2px #000;border-radius:10px;box-shadow:5px 5px 15px 5px #ff8080,-9px 5px 15px 5px #ffe488,-7px -5px 15px 5px #8cff85,12px -5px 15px 5px #80c7ff,12px 10px 15px 7px #e488ff,-10px 10px 15px 7px #ff616b,-10px -7px 27px 1px #8e5cff,5px 5px 15px 5px #0000;text-align:center}.countdown_text[_ngcontent-%COMP%]{font-size:larger;font-weight:700;color:#fff;text-shadow:1px 1px 7px #000000;float:both;margin-left:0;padding-top:20px;padding-bottom:10px;margin-top:0}.display[_ngcontent-%COMP%]{font-family:Vast Shadow,cursive;color:#fff;text-shadow:1px 1px 7px #000000;font-size:large;float:both;margin-left:0;margin-top:0}\"]\n  });\n  return CountdownTimerComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}