{"ast":null,"code":"import { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getLocationIdentifier } from '../location.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport let LocationService = /*#__PURE__*/(() => {\n  class LocationService {\n    constructor(http, applicationConfigService) {\n      this.http = http;\n      this.applicationConfigService = applicationConfigService;\n      this.resourceUrl = this.applicationConfigService.getEndpointFor('api/locations');\n    }\n    create(location) {\n      return this.http.post(this.resourceUrl, location, {\n        observe: 'response'\n      });\n    }\n    update(location) {\n      return this.http.put(`${this.resourceUrl}/${getLocationIdentifier(location)}`, location, {\n        observe: 'response'\n      });\n    }\n    partialUpdate(location) {\n      return this.http.patch(`${this.resourceUrl}/${getLocationIdentifier(location)}`, location, {\n        observe: 'response'\n      });\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    addLocationToCollectionIfMissing(locationCollection, ...locationsToCheck) {\n      const locations = locationsToCheck.filter(isPresent);\n      if (locations.length > 0) {\n        const locationCollectionIdentifiers = locationCollection.map(locationItem => getLocationIdentifier(locationItem));\n        const locationsToAdd = locations.filter(locationItem => {\n          const locationIdentifier = getLocationIdentifier(locationItem);\n          if (locationIdentifier == null || locationCollectionIdentifiers.includes(locationIdentifier)) {\n            return false;\n          }\n          locationCollectionIdentifiers.push(locationIdentifier);\n          return true;\n        });\n        return [...locationsToAdd, ...locationCollection];\n      }\n      return locationCollection;\n    }\n  }\n  LocationService.ɵfac = function LocationService_Factory(t) {\n    return new (t || LocationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n  };\n  LocationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LocationService,\n    factory: LocationService.ɵfac,\n    providedIn: 'root'\n  });\n  return LocationService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}