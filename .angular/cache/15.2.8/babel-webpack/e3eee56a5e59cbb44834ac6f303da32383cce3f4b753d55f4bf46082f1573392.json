{"ast":null,"code":"import _defineProperty from \"/home/ceo/mmmm/createyourevent/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { UntypedFormGroup } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"app/general.service\";\nimport * as i2 from \"app/entities/property/service/property.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@ngx-formly/core\";\nexport class AdminLuckySpinComponent {\n  constructor(generalService, propertyService) {\n    _defineProperty(this, \"generalService\", void 0);\n    _defineProperty(this, \"propertyService\", void 0);\n    _defineProperty(this, \"minimumPoints_wheeloffortune\", 0);\n    _defineProperty(this, \"maximumPoints_wheeloffortune\", 0);\n    _defineProperty(this, \"commitmentPoints_wheeloffortune\", 0);\n    _defineProperty(this, \"segments_wheeloffortune\", 0);\n    _defineProperty(this, \"form\", new UntypedFormGroup({}));\n    _defineProperty(this, \"model\", {\n      minimumPoints_wheeloffortune: 0,\n      maximumPoints_wheeloffortune: 0,\n      commitmentPoints_wheeloffortune: 0,\n      segments_wheeloffortune: 0\n    });\n    _defineProperty(this, \"fields\", [{\n      key: 'minimumPoints_wheeloffortune',\n      type: 'input',\n      templateOptions: {\n        label: 'Minimum points',\n        placeholder: 'Minimum points which could be win.',\n        required: true\n      }\n    }, {\n      key: 'maximumPoints_wheeloffortune',\n      type: 'input',\n      templateOptions: {\n        label: 'Maximum points',\n        placeholder: 'Maximum points which could be win.',\n        required: true\n      }\n    }, {\n      key: 'commitmentPoints_wheeloffortune',\n      type: 'input',\n      templateOptions: {\n        label: 'The commitment for one game.',\n        placeholder: 'The commitment from the user to play.',\n        required: true\n      }\n    }, {\n      key: 'segments_wheeloffortune',\n      type: 'input',\n      templateOptions: {\n        label: 'Segments',\n        placeholder: 'How many segments should be on the wheel.',\n        required: true\n      }\n    }]);\n    this.generalService = generalService;\n    this.propertyService = propertyService;\n  }\n  ngOnInit() {\n    this.generalService.findPropertyByKey('minimumPoints_wheeloffortune').subscribe(rt => {\n      this.minimumPoints_wheeloffortune = Number(rt.body.value);\n      this.generalService.findPropertyByKey('maximumPoints_wheeloffortune').subscribe(rw => {\n        this.maximumPoints_wheeloffortune = Number(rw.body.value);\n        this.generalService.findPropertyByKey('commitmentPoints_wheeloffortune').subscribe(rq => {\n          this.commitmentPoints_wheeloffortune = Number(rq.body.value);\n          this.generalService.findPropertyByKey('segments_wheeloffortune').subscribe(re => {\n            this.segments_wheeloffortune = Number(re.body.value);\n            this.model = {\n              minimumPoints_wheeloffortune: this.minimumPoints_wheeloffortune,\n              maximumPoints_wheeloffortune: this.maximumPoints_wheeloffortune,\n              commitmentPoints_wheeloffortune: this.commitmentPoints_wheeloffortune,\n              segments_wheeloffortune: this.segments_wheeloffortune\n            };\n          });\n        });\n      });\n    });\n  }\n  onSubmit() {\n    if (this.form.valid) {\n      this.generalService.findPropertyByKey('minimumPoints_wheeloffortune').subscribe(rt => {\n        const mp = rt.body;\n        mp.value = this.model.minimumPoints_wheeloffortune.toString();\n        this.propertyService.update(mp).subscribe();\n      });\n      this.generalService.findPropertyByKey('maximumPoints_wheeloffortune').subscribe(rt => {\n        const mp = rt.body;\n        mp.value = this.model.maximumPoints_wheeloffortune.toString();\n        this.propertyService.update(mp).subscribe();\n      });\n      this.generalService.findPropertyByKey('commitmentPoints_wheeloffortune').subscribe(rt => {\n        const mp = rt.body;\n        mp.value = this.model.commitmentPoints_wheeloffortune.toString();\n        this.propertyService.update(mp).subscribe();\n      });\n      this.generalService.findPropertyByKey('segments_wheeloffortune').subscribe(rt => {\n        const mp = rt.body;\n        mp.value = this.model.segments_wheeloffortune.toString();\n        this.propertyService.update(mp).subscribe();\n      });\n    }\n  }\n}\n_defineProperty(AdminLuckySpinComponent, \"\\u0275fac\", function AdminLuckySpinComponent_Factory(t) {\n  return new (t || AdminLuckySpinComponent)(i0.ɵɵdirectiveInject(i1.GeneralService), i0.ɵɵdirectiveInject(i2.PropertyService));\n});\n_defineProperty(AdminLuckySpinComponent, \"\\u0275cmp\", /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AdminLuckySpinComponent,\n  selectors: [[\"jhi-admin-lucky-spin\"]],\n  decls: 8,\n  vars: 4,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [3, \"form\", \"fields\", \"model\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"submit-button\"]],\n  template: function AdminLuckySpinComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function AdminLuckySpinComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵtext(1, \"\\n    \");\n      i0.ɵɵelement(2, \"formly-form\", 1);\n      i0.ɵɵtext(3, \"\\n    \");\n      i0.ɵɵelementStart(4, \"button\", 2);\n      i0.ɵɵtext(5, \"Submit\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(6, \"\\n\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(7, \"\\n\");\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"form\", ctx.form)(\"fields\", ctx.fields)(\"model\", ctx.model);\n    }\n  },\n  dependencies: [i3.ɵNgNoValidate, i3.NgControlStatusGroup, i3.FormGroupDirective, i4.FormlyForm],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n}));","map":{"version":3,"mappings":";AACA,SAASA,gBAAgB,QAAQ,gBAAgB;;;;;;AAUjD,OAAM,MAAOC,uBAAuB;EAoDlCC,YAAoBC,cAA8B,EAAUC,eAAgC;IAAA;IAAA;IAAA,sDAnD7D,CAAC;IAAA,sDACD,CAAC;IAAA,yDACE,CAAC;IAAA,iDACT,CAAC;IAAA,8BAEpB,IAAIJ,gBAAgB,CAAC,EAAE,CAAC;IAAA,+BACvB;MACNK,4BAA4B,EAAE,CAAC;MAC/BC,4BAA4B,EAAE,CAAC;MAC/BC,+BAA+B,EAAE,CAAC;MAClCC,uBAAuB,EAAE;KAC1B;IAAA,gCAC6B,CAC5B;MACEC,GAAG,EAAE,8BAA8B;MACnCC,IAAI,EAAE,OAAO;MACbC,eAAe,EAAE;QACfC,KAAK,EAAE,gBAAgB;QACvBC,WAAW,EAAE,oCAAoC;QACjDC,QAAQ,EAAE;;KAEb,EACD;MACEL,GAAG,EAAE,8BAA8B;MACnCC,IAAI,EAAE,OAAO;MACbC,eAAe,EAAE;QACfC,KAAK,EAAE,gBAAgB;QACvBC,WAAW,EAAE,oCAAoC;QACjDC,QAAQ,EAAE;;KAEb,EACD;MACEL,GAAG,EAAE,iCAAiC;MACtCC,IAAI,EAAE,OAAO;MACbC,eAAe,EAAE;QACfC,KAAK,EAAE,8BAA8B;QACrCC,WAAW,EAAE,uCAAuC;QACpDC,QAAQ,EAAE;;KAEb,EACD;MACEL,GAAG,EAAE,yBAAyB;MAC9BC,IAAI,EAAE,OAAO;MACbC,eAAe,EAAE;QACfC,KAAK,EAAE,UAAU;QACjBC,WAAW,EAAE,2CAA2C;QACxDC,QAAQ,EAAE;;KAEb,CACF;IAEmB,mBAAc,GAAdX,cAAc;IAA0B,oBAAe,GAAfC,eAAe;EAAoB;EAE/FW,QAAQ;IACN,IAAI,CAACZ,cAAc,CAACa,iBAAiB,CAAC,8BAA8B,CAAC,CAACC,SAAS,CAACC,EAAE,IAAG;MACnF,IAAI,CAACb,4BAA4B,GAAGc,MAAM,CAACD,EAAE,CAACE,IAAK,CAACC,KAAK,CAAC;MAC1D,IAAI,CAAClB,cAAc,CAACa,iBAAiB,CAAC,8BAA8B,CAAC,CAACC,SAAS,CAACK,EAAE,IAAG;QACnF,IAAI,CAAChB,4BAA4B,GAAGa,MAAM,CAACG,EAAE,CAACF,IAAK,CAACC,KAAK,CAAC;QAC1D,IAAI,CAAClB,cAAc,CAACa,iBAAiB,CAAC,iCAAiC,CAAC,CAACC,SAAS,CAACM,EAAE,IAAG;UACtF,IAAI,CAAChB,+BAA+B,GAAGY,MAAM,CAACI,EAAE,CAACH,IAAK,CAACC,KAAK,CAAC;UAC7D,IAAI,CAAClB,cAAc,CAACa,iBAAiB,CAAC,yBAAyB,CAAC,CAACC,SAAS,CAACO,EAAE,IAAG;YAC9E,IAAI,CAAChB,uBAAuB,GAAGW,MAAM,CAACK,EAAE,CAACJ,IAAK,CAACC,KAAK,CAAC;YACrD,IAAI,CAACI,KAAK,GAAG;cACXpB,4BAA4B,EAAE,IAAI,CAACA,4BAA4B;cAC/DC,4BAA4B,EAAE,IAAI,CAACA,4BAA4B;cAC/DC,+BAA+B,EAAE,IAAI,CAACA,+BAA+B;cACrEC,uBAAuB,EAAE,IAAI,CAACA;aAC/B;UACH,CAAC,CAAC;QACJ,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEAkB,QAAQ;IACN,IAAI,IAAI,CAACC,IAAI,CAACC,KAAK,EAAE;MACnB,IAAI,CAACzB,cAAc,CAACa,iBAAiB,CAAC,8BAA8B,CAAC,CAACC,SAAS,CAACC,EAAE,IAAG;QACnF,MAAMW,EAAE,GAAGX,EAAE,CAACE,IAAK;QACnBS,EAAE,CAACR,KAAK,GAAG,IAAI,CAACI,KAAK,CAACpB,4BAA4B,CAACyB,QAAQ,EAAE;QAC7D,IAAI,CAAC1B,eAAe,CAAC2B,MAAM,CAACF,EAAE,CAAC,CAACZ,SAAS,EAAE;MAC7C,CAAC,CAAC;MACF,IAAI,CAACd,cAAc,CAACa,iBAAiB,CAAC,8BAA8B,CAAC,CAACC,SAAS,CAACC,EAAE,IAAG;QACnF,MAAMW,EAAE,GAAGX,EAAE,CAACE,IAAK;QACnBS,EAAE,CAACR,KAAK,GAAG,IAAI,CAACI,KAAK,CAACnB,4BAA4B,CAACwB,QAAQ,EAAE;QAC7D,IAAI,CAAC1B,eAAe,CAAC2B,MAAM,CAACF,EAAE,CAAC,CAACZ,SAAS,EAAE;MAC7C,CAAC,CAAC;MACF,IAAI,CAACd,cAAc,CAACa,iBAAiB,CAAC,iCAAiC,CAAC,CAACC,SAAS,CAACC,EAAE,IAAG;QACtF,MAAMW,EAAE,GAAGX,EAAE,CAACE,IAAK;QACnBS,EAAE,CAACR,KAAK,GAAG,IAAI,CAACI,KAAK,CAAClB,+BAA+B,CAACuB,QAAQ,EAAE;QAChE,IAAI,CAAC1B,eAAe,CAAC2B,MAAM,CAACF,EAAE,CAAC,CAACZ,SAAS,EAAE;MAC7C,CAAC,CAAC;MACF,IAAI,CAACd,cAAc,CAACa,iBAAiB,CAAC,yBAAyB,CAAC,CAACC,SAAS,CAACC,EAAE,IAAG;QAC9E,MAAMW,EAAE,GAAGX,EAAE,CAACE,IAAK;QACnBS,EAAE,CAACR,KAAK,GAAG,IAAI,CAACI,KAAK,CAACjB,uBAAuB,CAACsB,QAAQ,EAAE;QACxD,IAAI,CAAC1B,eAAe,CAAC2B,MAAM,CAACF,EAAE,CAAC,CAACZ,SAAS,EAAE;MAC7C,CAAC,CAAC;;EAEN;;gBAlGWhB,uBAAuB;mBAAvBA,uBAAuB;AAAA;AAAA,gBAAvBA,uBAAuB;QAAvBA,uBAAuB;EAAA+B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCXpCC,+BAAiD;MAAxBA;QAAA,OAAYC,cAAU;MAAA,EAAC;MAC5CD;MAAAA,iCAA2E;MAC3EA;MAAAA,iCAA4D;MAAAA,sBAAM;MAAAA,iBAAS;MAC/EA;MAAAA,iBAAO;MACPA;;;MAJMA,oCAAkB;MACPA,eAAa;MAAbA,+BAAa","names":["UntypedFormGroup","AdminLuckySpinComponent","constructor","generalService","propertyService","minimumPoints_wheeloffortune","maximumPoints_wheeloffortune","commitmentPoints_wheeloffortune","segments_wheeloffortune","key","type","templateOptions","label","placeholder","required","ngOnInit","findPropertyByKey","subscribe","rt","Number","body","value","rw","rq","re","model","onSubmit","form","valid","mp","toString","update","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/views/games/luckySpin/adminLuckySpin/adminLuckySpin.component.ts","/home/ceo/mmmm/createyourevent/src/main/webapp/app/views/games/luckySpin/adminLuckySpin/adminLuckySpin.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { UntypedFormGroup } from '@angular/forms';\nimport { FormlyFieldConfig } from '@ngx-formly/core';\nimport { PropertyService } from 'app/entities/property/service/property.service';\nimport { GeneralService } from 'app/general.service';\n\n@Component({\n  selector: 'jhi-admin-lucky-spin',\n  templateUrl: './adminLuckySpin.component.html',\n  styleUrls: ['./adminLuckySpin.component.scss'],\n})\nexport class AdminLuckySpinComponent implements OnInit {\n  minimumPoints_wheeloffortune = 0;\n  maximumPoints_wheeloffortune = 0;\n  commitmentPoints_wheeloffortune = 0;\n  segments_wheeloffortune = 0;\n\n  form = new UntypedFormGroup({});\n  model = {\n    minimumPoints_wheeloffortune: 0,\n    maximumPoints_wheeloffortune: 0,\n    commitmentPoints_wheeloffortune: 0,\n    segments_wheeloffortune: 0,\n  };\n  fields: FormlyFieldConfig[] = [\n    {\n      key: 'minimumPoints_wheeloffortune',\n      type: 'input',\n      templateOptions: {\n        label: 'Minimum points',\n        placeholder: 'Minimum points which could be win.',\n        required: true,\n      },\n    },\n    {\n      key: 'maximumPoints_wheeloffortune',\n      type: 'input',\n      templateOptions: {\n        label: 'Maximum points',\n        placeholder: 'Maximum points which could be win.',\n        required: true,\n      },\n    },\n    {\n      key: 'commitmentPoints_wheeloffortune',\n      type: 'input',\n      templateOptions: {\n        label: 'The commitment for one game.',\n        placeholder: 'The commitment from the user to play.',\n        required: true,\n      },\n    },\n    {\n      key: 'segments_wheeloffortune',\n      type: 'input',\n      templateOptions: {\n        label: 'Segments',\n        placeholder: 'How many segments should be on the wheel.',\n        required: true,\n      },\n    },\n  ];\n\n  constructor(private generalService: GeneralService, private propertyService: PropertyService) {}\n\n  ngOnInit(): void {\n    this.generalService.findPropertyByKey('minimumPoints_wheeloffortune').subscribe(rt => {\n      this.minimumPoints_wheeloffortune = Number(rt.body!.value);\n      this.generalService.findPropertyByKey('maximumPoints_wheeloffortune').subscribe(rw => {\n        this.maximumPoints_wheeloffortune = Number(rw.body!.value);\n        this.generalService.findPropertyByKey('commitmentPoints_wheeloffortune').subscribe(rq => {\n          this.commitmentPoints_wheeloffortune = Number(rq.body!.value);\n          this.generalService.findPropertyByKey('segments_wheeloffortune').subscribe(re => {\n            this.segments_wheeloffortune = Number(re.body!.value);\n            this.model = {\n              minimumPoints_wheeloffortune: this.minimumPoints_wheeloffortune,\n              maximumPoints_wheeloffortune: this.maximumPoints_wheeloffortune,\n              commitmentPoints_wheeloffortune: this.commitmentPoints_wheeloffortune,\n              segments_wheeloffortune: this.segments_wheeloffortune,\n            };\n          });\n        });\n      });\n    });\n  }\n\n  onSubmit(): void {\n    if (this.form.valid) {\n      this.generalService.findPropertyByKey('minimumPoints_wheeloffortune').subscribe(rt => {\n        const mp = rt.body!;\n        mp.value = this.model.minimumPoints_wheeloffortune.toString();\n        this.propertyService.update(mp).subscribe();\n      });\n      this.generalService.findPropertyByKey('maximumPoints_wheeloffortune').subscribe(rt => {\n        const mp = rt.body!;\n        mp.value = this.model.maximumPoints_wheeloffortune.toString();\n        this.propertyService.update(mp).subscribe();\n      });\n      this.generalService.findPropertyByKey('commitmentPoints_wheeloffortune').subscribe(rt => {\n        const mp = rt.body!;\n        mp.value = this.model.commitmentPoints_wheeloffortune.toString();\n        this.propertyService.update(mp).subscribe();\n      });\n      this.generalService.findPropertyByKey('segments_wheeloffortune').subscribe(rt => {\n        const mp = rt.body!;\n        mp.value = this.model.segments_wheeloffortune.toString();\n        this.propertyService.update(mp).subscribe();\n      });\n    }\n  }\n}\n","<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n    <formly-form [form]=\"form\" [fields]=\"fields\" [model]=\"model\"></formly-form>\n    <button type=\"submit\" class=\"btn btn-primary submit-button\">Submit</button>\n</form>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}