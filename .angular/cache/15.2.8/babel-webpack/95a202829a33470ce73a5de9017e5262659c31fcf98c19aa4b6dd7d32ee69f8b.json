{"ast":null,"code":"import _defineProperty from \"/home/ceo/mmmm/createyourevent/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@ng-bootstrap/ng-bootstrap\";\nfunction MetricsSystemComponent_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1, \"\\n  \");\n    i0.ɵɵelementStart(2, \"div\", 1);\n    i0.ɵɵtext(3, \"\\n    \");\n    i0.ɵɵelementStart(4, \"div\", 2);\n    i0.ɵɵtext(5, \"Uptime\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(6, \"\\n    \");\n    i0.ɵɵelementStart(7, \"div\", 3);\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(9, \"\\n  \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(10, \"\\n\\n  \");\n    i0.ɵɵelementStart(11, \"div\", 1);\n    i0.ɵɵtext(12, \"\\n    \");\n    i0.ɵɵelementStart(13, \"div\", 2);\n    i0.ɵɵtext(14, \"Start time\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(15, \"\\n    \");\n    i0.ɵɵelementStart(16, \"div\", 3);\n    i0.ɵɵtext(17);\n    i0.ɵɵpipe(18, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(19, \"\\n  \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(20, \"\\n\\n  \");\n    i0.ɵɵelementStart(21, \"div\", 1);\n    i0.ɵɵtext(22, \"\\n    \");\n    i0.ɵɵelementStart(23, \"div\", 4);\n    i0.ɵɵtext(24, \"Process CPU usage\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(25, \"\\n    \");\n    i0.ɵɵelementStart(26, \"div\", 5);\n    i0.ɵɵtext(27);\n    i0.ɵɵpipe(28, \"number\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(29, \"\\n  \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(30, \"\\n\\n  \");\n    i0.ɵɵelementStart(31, \"ngb-progressbar\", 6);\n    i0.ɵɵtext(32, \"\\n    \");\n    i0.ɵɵelementStart(33, \"span\");\n    i0.ɵɵtext(34);\n    i0.ɵɵpipe(35, \"number\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(36, \"\\n  \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(37, \"\\n\\n  \");\n    i0.ɵɵelementStart(38, \"div\", 1);\n    i0.ɵɵtext(39, \"\\n    \");\n    i0.ɵɵelementStart(40, \"div\", 4);\n    i0.ɵɵtext(41, \"System CPU usage\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(42, \"\\n    \");\n    i0.ɵɵelementStart(43, \"div\", 5);\n    i0.ɵɵtext(44);\n    i0.ɵɵpipe(45, \"number\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(46, \"\\n  \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(47, \"\\n\\n  \");\n    i0.ɵɵelementStart(48, \"ngb-progressbar\", 6);\n    i0.ɵɵtext(49, \"\\n    \");\n    i0.ɵɵelementStart(50, \"span\");\n    i0.ɵɵtext(51);\n    i0.ɵɵpipe(52, \"number\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(53, \"\\n  \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(54, \"\\n\\n  \");\n    i0.ɵɵelementStart(55, \"div\", 1);\n    i0.ɵɵtext(56, \"\\n    \");\n    i0.ɵɵelementStart(57, \"div\", 4);\n    i0.ɵɵtext(58, \"System CPU count\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(59, \"\\n    \");\n    i0.ɵɵelementStart(60, \"div\", 5);\n    i0.ɵɵtext(61);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(62, \"\\n  \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(63, \"\\n\\n  \");\n    i0.ɵɵelementStart(64, \"div\", 1);\n    i0.ɵɵtext(65, \"\\n    \");\n    i0.ɵɵelementStart(66, \"div\", 4);\n    i0.ɵɵtext(67, \"System 1m Load average\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(68, \"\\n    \");\n    i0.ɵɵelementStart(69, \"div\", 5);\n    i0.ɵɵtext(70);\n    i0.ɵɵpipe(71, \"number\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(72, \"\\n  \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(73, \"\\n\\n  \");\n    i0.ɵɵelementStart(74, \"div\", 1);\n    i0.ɵɵtext(75, \"\\n    \");\n    i0.ɵɵelementStart(76, \"div\", 4);\n    i0.ɵɵtext(77, \"Process files max\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(78, \"\\n    \");\n    i0.ɵɵelementStart(79, \"div\", 5);\n    i0.ɵɵtext(80);\n    i0.ɵɵpipe(81, \"number\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(82, \"\\n  \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(83, \"\\n\\n  \");\n    i0.ɵɵelementStart(84, \"div\", 1);\n    i0.ɵɵtext(85, \"\\n    \");\n    i0.ɵɵelementStart(86, \"div\", 4);\n    i0.ɵɵtext(87, \"Process files open\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(88, \"\\n    \");\n    i0.ɵɵelementStart(89, \"div\", 5);\n    i0.ɵɵtext(90);\n    i0.ɵɵpipe(91, \"number\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(92, \"\\n  \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(93, \"\\n\");\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(8);\n    i0.ɵɵtextInterpolate(ctx_r0.convertMillisecondsToDuration(ctx_r0.systemMetrics[\"process.uptime\"]));\n    i0.ɵɵadvance(9);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(18, 16, ctx_r0.systemMetrics[\"process.start.time\"], \"full\"));\n    i0.ɵɵadvance(10);\n    i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind2(28, 19, 100 * ctx_r0.systemMetrics[\"process.cpu.usage\"], \"1.0-2\"), \" %\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"value\", 100 * ctx_r0.systemMetrics[\"process.cpu.usage\"])(\"striped\", true)(\"animated\", false);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind2(35, 22, 100 * ctx_r0.systemMetrics[\"process.cpu.usage\"], \"1.0-2\"), \" %\");\n    i0.ɵɵadvance(10);\n    i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind2(45, 25, 100 * ctx_r0.systemMetrics[\"system.cpu.usage\"], \"1.0-2\"), \" %\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"value\", 100 * ctx_r0.systemMetrics[\"system.cpu.usage\"])(\"striped\", true)(\"animated\", false);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind2(52, 28, 100 * ctx_r0.systemMetrics[\"system.cpu.usage\"], \"1.0-2\"), \" %\");\n    i0.ɵɵadvance(10);\n    i0.ɵɵtextInterpolate(ctx_r0.systemMetrics[\"system.cpu.count\"]);\n    i0.ɵɵadvance(9);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(71, 31, ctx_r0.systemMetrics[\"system.load.average.1m\"], \"1.0-2\"));\n    i0.ɵɵadvance(10);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(81, 34, ctx_r0.systemMetrics[\"process.files.max\"], \"1.0-0\"));\n    i0.ɵɵadvance(10);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(91, 37, ctx_r0.systemMetrics[\"process.files.open\"], \"1.0-0\"));\n  }\n}\nexport class MetricsSystemComponent {\n  constructor() {\n    /**\n     * object containing thread related metrics\n     */\n    _defineProperty(this, \"systemMetrics\", void 0);\n    /**\n     * boolean field saying if the metrics are in the process of being updated\n     */\n    _defineProperty(this, \"updating\", void 0);\n  }\n  convertMillisecondsToDuration(ms) {\n    const times = {\n      year: 31557600000,\n      month: 2629746000,\n      day: 86400000,\n      hour: 3600000,\n      minute: 60000,\n      second: 1000\n    };\n    let timeString = '';\n    for (const [key, value] of Object.entries(times)) {\n      if (Math.floor(ms / value) > 0) {\n        let plural = '';\n        if (Math.floor(ms / value) > 1) {\n          plural = 's';\n        }\n        timeString += Math.floor(ms / value).toString() + ' ' + key.toString() + plural + ' ';\n        ms = ms - value * Math.floor(ms / value);\n      }\n    }\n    return timeString;\n  }\n}\n_defineProperty(MetricsSystemComponent, \"\\u0275fac\", function MetricsSystemComponent_Factory(t) {\n  return new (t || MetricsSystemComponent)();\n});\n_defineProperty(MetricsSystemComponent, \"\\u0275cmp\", /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: MetricsSystemComponent,\n  selectors: [[\"jhi-metrics-system\"]],\n  inputs: {\n    systemMetrics: \"systemMetrics\",\n    updating: \"updating\"\n  },\n  decls: 5,\n  vars: 1,\n  consts: [[4, \"ngIf\"], [1, \"row\"], [1, \"col-md-4\"], [1, \"col-md-8\", \"text-right\"], [1, \"col-md-9\"], [1, \"col-md-3\", \"text-right\"], [\"type\", \"success\", 3, \"value\", \"striped\", \"animated\"]],\n  template: function MetricsSystemComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h4\");\n      i0.ɵɵtext(1, \"System\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(2, \"\\n\\n\");\n      i0.ɵɵtemplate(3, MetricsSystemComponent_ng_container_3_Template, 94, 40, \"ng-container\", 0);\n      i0.ɵɵtext(4, \"\\n\");\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", !ctx.updating && ctx.systemMetrics);\n    }\n  },\n  dependencies: [i1.NgIf, i2.NgbProgressbar, i1.DecimalPipe, i1.DatePipe],\n  encapsulation: 2,\n  changeDetection: 0\n}));","map":{"version":3,"mappings":";;;;;;IAEAA,6BAAiD;IAC/CA;IAAAA,8BAAiB;IACfA;IAAAA,8BAAsB;IAAAA,sBAAM;IAAAA,iBAAM;IAClCA;IAAAA,8BAAiC;IAAAA,YAAoE;IAAAA,iBAAM;IAC7GA;IAAAA,iBAAM;IAENA;IAAAA,+BAAiB;IACfA;IAAAA,+BAAsB;IAAAA,2BAAU;IAAAA,iBAAM;IACtCA;IAAAA,+BAAiC;IAAAA,aAAwD;;IAAAA,iBAAM;IACjGA;IAAAA,iBAAM;IAENA;IAAAA,+BAAiB;IACfA;IAAAA,+BAAsB;IAAAA,kCAAiB;IAAAA,iBAAM;IAC7CA;IAAAA,+BAAiC;IAAAA,aAAkE;;IAAAA,iBAAM;IAC3GA;IAAAA,iBAAM;IAENA;IAAAA,2CAAuH;IACrHA;IAAAA,6BAAM;IAAAA,aAAkE;;IAAAA,iBAAO;IACjFA;IAAAA,iBAAkB;IAElBA;IAAAA,+BAAiB;IACfA;IAAAA,+BAAsB;IAAAA,iCAAgB;IAAAA,iBAAM;IAC5CA;IAAAA,+BAAiC;IAAAA,aAAiE;;IAAAA,iBAAM;IAC1GA;IAAAA,iBAAM;IAENA;IAAAA,2CAAsH;IACpHA;IAAAA,6BAAM;IAAAA,aAAiE;;IAAAA,iBAAO;IAChFA;IAAAA,iBAAkB;IAElBA;IAAAA,+BAAiB;IACfA;IAAAA,+BAAsB;IAAAA,iCAAgB;IAAAA,iBAAM;IAC5CA;IAAAA,+BAAiC;IAAAA,aAAuC;IAAAA,iBAAM;IAChFA;IAAAA,iBAAM;IAENA;IAAAA,+BAAiB;IACfA;IAAAA,+BAAsB;IAAAA,uCAAsB;IAAAA,iBAAM;IAClDA;IAAAA,+BAAiC;IAAAA,aAA+D;;IAAAA,iBAAM;IACxGA;IAAAA,iBAAM;IAENA;IAAAA,+BAAiB;IACfA;IAAAA,+BAAsB;IAAAA,kCAAiB;IAAAA,iBAAM;IAC7CA;IAAAA,+BAAiC;IAAAA,aAA0D;;IAAAA,iBAAM;IACnGA;IAAAA,iBAAM;IAENA;IAAAA,+BAAiB;IACfA;IAAAA,+BAAsB;IAAAA,mCAAkB;IAAAA,iBAAM;IAC9CA;IAAAA,+BAAiC;IAAAA,aAA2D;;IAAAA,iBAAM;IACpGA;IAAAA,iBAAM;IACRA;IAAAA,0BAAe;;;;IA7CsBA,eAAoE;IAApEA,kGAAoE;IAKpEA,eAAwD;IAAxDA,gGAAwD;IAKxDA,gBAAkE;IAAlEA,iHAAkE;IAGpFA,eAAkD;IAAlDA,uEAAkD;IAC3DA,eAAkE;IAAlEA,iHAAkE;IAKvCA,gBAAiE;IAAjEA,gHAAiE;IAGnFA,eAAiD;IAAjDA,sEAAiD;IAC1DA,eAAiE;IAAjEA,gHAAiE;IAKtCA,gBAAuC;IAAvCA,8DAAuC;IAKvCA,eAA+D;IAA/DA,qGAA+D;IAK/DA,gBAA0D;IAA1DA,gGAA0D;IAK1DA,gBAA2D;IAA3DA,iGAA2D;;;ACvChG,OAAM,MAAOC,sBAAsB;EAAA;IACjC;;;IAAA;IAKA;;;IAAA;EAAA;EAKAC,6BAA6B,CAACC,EAAU;IACtC,MAAMC,KAAK,GAAG;MACZC,IAAI,EAAE,WAAW;MACjBC,KAAK,EAAE,UAAU;MACjBC,GAAG,EAAE,QAAQ;MACbC,IAAI,EAAE,OAAO;MACbC,MAAM,EAAE,KAAK;MACbC,MAAM,EAAE;KACT;IACD,IAAIC,UAAU,GAAG,EAAE;IACnB,KAAK,MAAM,CAACC,GAAG,EAAEC,KAAK,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACX,KAAK,CAAC,EAAE;MAChD,IAAIY,IAAI,CAACC,KAAK,CAACd,EAAE,GAAGU,KAAK,CAAC,GAAG,CAAC,EAAE;QAC9B,IAAIK,MAAM,GAAG,EAAE;QACf,IAAIF,IAAI,CAACC,KAAK,CAACd,EAAE,GAAGU,KAAK,CAAC,GAAG,CAAC,EAAE;UAC9BK,MAAM,GAAG,GAAG;;QAEdP,UAAU,IAAIK,IAAI,CAACC,KAAK,CAACd,EAAE,GAAGU,KAAK,CAAC,CAACM,QAAQ,EAAE,GAAG,GAAG,GAAGP,GAAG,CAACO,QAAQ,EAAE,GAAGD,MAAM,GAAG,GAAG;QACrFf,EAAE,GAAGA,EAAE,GAAGU,KAAK,GAAGG,IAAI,CAACC,KAAK,CAACd,EAAE,GAAGU,KAAK,CAAC;;;IAG5C,OAAOF,UAAU;EACnB;;gBAhCWV,sBAAsB;mBAAtBA,sBAAsB;AAAA;AAAA,gBAAtBA,sBAAsB;QAAtBA,sBAAsB;EAAAmB;EAAAC;IAAAC;IAAAC;EAAA;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDTnC3B,0BAAI;MAAAA,sBAAM;MAAAA,iBAAK;MAEfA;MAAAA,2FAgDe;MACfA;;;MAjDeA,eAAgC;MAAhCA,yDAAgC","names":["i0","MetricsSystemComponent","convertMillisecondsToDuration","ms","times","year","month","day","hour","minute","second","timeString","key","value","Object","entries","Math","floor","plural","toString","selectors","inputs","systemMetrics","updating","decls","vars","consts","template"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/admin/metrics/blocks/metrics-system/metrics-system.component.html","/home/ceo/mmmm/createyourevent/src/main/webapp/app/admin/metrics/blocks/metrics-system/metrics-system.component.ts"],"sourcesContent":["<h4>System</h4>\n\n<ng-container *ngIf=\"!updating && systemMetrics\">\n  <div class=\"row\">\n    <div class=\"col-md-4\">Uptime</div>\n    <div class=\"col-md-8 text-right\">{{ convertMillisecondsToDuration(systemMetrics['process.uptime']) }}</div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-md-4\">Start time</div>\n    <div class=\"col-md-8 text-right\">{{ systemMetrics['process.start.time'] | date: 'full' }}</div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-md-9\">Process CPU usage</div>\n    <div class=\"col-md-3 text-right\">{{ 100 * systemMetrics['process.cpu.usage'] | number: '1.0-2' }} %</div>\n  </div>\n\n  <ngb-progressbar [value]=\"100 * systemMetrics['process.cpu.usage']\" [striped]=\"true\" [animated]=\"false\" type=\"success\">\n    <span>{{ 100 * systemMetrics['process.cpu.usage'] | number: '1.0-2' }} %</span>\n  </ngb-progressbar>\n\n  <div class=\"row\">\n    <div class=\"col-md-9\">System CPU usage</div>\n    <div class=\"col-md-3 text-right\">{{ 100 * systemMetrics['system.cpu.usage'] | number: '1.0-2' }} %</div>\n  </div>\n\n  <ngb-progressbar [value]=\"100 * systemMetrics['system.cpu.usage']\" [striped]=\"true\" [animated]=\"false\" type=\"success\">\n    <span>{{ 100 * systemMetrics['system.cpu.usage'] | number: '1.0-2' }} %</span>\n  </ngb-progressbar>\n\n  <div class=\"row\">\n    <div class=\"col-md-9\">System CPU count</div>\n    <div class=\"col-md-3 text-right\">{{ systemMetrics['system.cpu.count'] }}</div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-md-9\">System 1m Load average</div>\n    <div class=\"col-md-3 text-right\">{{ systemMetrics['system.load.average.1m'] | number: '1.0-2' }}</div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-md-9\">Process files max</div>\n    <div class=\"col-md-3 text-right\">{{ systemMetrics['process.files.max'] | number: '1.0-0' }}</div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-md-9\">Process files open</div>\n    <div class=\"col-md-3 text-right\">{{ systemMetrics['process.files.open'] | number: '1.0-0' }}</div>\n  </div>\n</ng-container>\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\nimport { ProcessMetrics } from 'app/admin/metrics/metrics.model';\n\n@Component({\n  selector: 'jhi-metrics-system',\n  templateUrl: './metrics-system.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MetricsSystemComponent {\n  /**\n   * object containing thread related metrics\n   */\n  @Input() systemMetrics?: ProcessMetrics;\n\n  /**\n   * boolean field saying if the metrics are in the process of being updated\n   */\n  @Input() updating?: boolean;\n\n  convertMillisecondsToDuration(ms: number): string {\n    const times = {\n      year: 31557600000,\n      month: 2629746000,\n      day: 86400000,\n      hour: 3600000,\n      minute: 60000,\n      second: 1000,\n    };\n    let timeString = '';\n    for (const [key, value] of Object.entries(times)) {\n      if (Math.floor(ms / value) > 0) {\n        let plural = '';\n        if (Math.floor(ms / value) > 1) {\n          plural = 's';\n        }\n        timeString += Math.floor(ms / value).toString() + ' ' + key.toString() + plural + ' ';\n        ms = ms - value * Math.floor(ms / value);\n      }\n    }\n    return timeString;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}