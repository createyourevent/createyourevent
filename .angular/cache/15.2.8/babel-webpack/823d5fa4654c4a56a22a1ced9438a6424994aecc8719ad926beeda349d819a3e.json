{"ast":null,"code":"import { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getChipsCollectionChipsIdentifier } from '../chips-collection-chips.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport let ChipsCollectionChipsService = /*#__PURE__*/(() => {\n  class ChipsCollectionChipsService {\n    constructor(http, applicationConfigService) {\n      this.http = http;\n      this.applicationConfigService = applicationConfigService;\n      this.resourceUrl = this.applicationConfigService.getEndpointFor('api/chips-collection-chips');\n    }\n    create(chipsCollectionChips) {\n      return this.http.post(this.resourceUrl, chipsCollectionChips, {\n        observe: 'response'\n      });\n    }\n    update(chipsCollectionChips) {\n      return this.http.put(`${this.resourceUrl}/${getChipsCollectionChipsIdentifier(chipsCollectionChips)}`, chipsCollectionChips, {\n        observe: 'response'\n      });\n    }\n    partialUpdate(chipsCollectionChips) {\n      return this.http.patch(`${this.resourceUrl}/${getChipsCollectionChipsIdentifier(chipsCollectionChips)}`, chipsCollectionChips, {\n        observe: 'response'\n      });\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    addChipsCollectionChipsToCollectionIfMissing(chipsCollectionChipsCollection, ...chipsCollectionChipsToCheck) {\n      const chipsCollectionChips = chipsCollectionChipsToCheck.filter(isPresent);\n      if (chipsCollectionChips.length > 0) {\n        const chipsCollectionChipsCollectionIdentifiers = chipsCollectionChipsCollection.map(chipsCollectionChipsItem => getChipsCollectionChipsIdentifier(chipsCollectionChipsItem));\n        const chipsCollectionChipsToAdd = chipsCollectionChips.filter(chipsCollectionChipsItem => {\n          const chipsCollectionChipsIdentifier = getChipsCollectionChipsIdentifier(chipsCollectionChipsItem);\n          if (chipsCollectionChipsIdentifier == null || chipsCollectionChipsCollectionIdentifiers.includes(chipsCollectionChipsIdentifier)) {\n            return false;\n          }\n          chipsCollectionChipsCollectionIdentifiers.push(chipsCollectionChipsIdentifier);\n          return true;\n        });\n        return [...chipsCollectionChipsToAdd, ...chipsCollectionChipsCollection];\n      }\n      return chipsCollectionChipsCollection;\n    }\n  }\n  ChipsCollectionChipsService.ɵfac = function ChipsCollectionChipsService_Factory(t) {\n    return new (t || ChipsCollectionChipsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n  };\n  ChipsCollectionChipsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ChipsCollectionChipsService,\n    factory: ChipsCollectionChipsService.ɵfac,\n    providedIn: 'root'\n  });\n  return ChipsCollectionChipsService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}