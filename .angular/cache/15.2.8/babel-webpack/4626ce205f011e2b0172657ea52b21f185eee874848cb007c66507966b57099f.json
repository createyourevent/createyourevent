{"ast":null,"code":"import { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getChipsAdminIdentifier } from '../chips-admin.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport class ChipsAdminService {\n  constructor(http, applicationConfigService) {\n    this.http = http;\n    this.applicationConfigService = applicationConfigService;\n    this.resourceUrl = this.applicationConfigService.getEndpointFor('api/chips-admins');\n  }\n  create(chipsAdmin) {\n    return this.http.post(this.resourceUrl, chipsAdmin, {\n      observe: 'response'\n    });\n  }\n  update(chipsAdmin) {\n    return this.http.put(`${this.resourceUrl}/${getChipsAdminIdentifier(chipsAdmin)}`, chipsAdmin, {\n      observe: 'response'\n    });\n  }\n  partialUpdate(chipsAdmin) {\n    return this.http.patch(`${this.resourceUrl}/${getChipsAdminIdentifier(chipsAdmin)}`, chipsAdmin, {\n      observe: 'response'\n    });\n  }\n  find(id) {\n    return this.http.get(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  query(req) {\n    const options = createRequestOption(req);\n    return this.http.get(this.resourceUrl, {\n      params: options,\n      observe: 'response'\n    });\n  }\n  delete(id) {\n    return this.http.delete(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  addChipsAdminToCollectionIfMissing(chipsAdminCollection, ...chipsAdminsToCheck) {\n    const chipsAdmins = chipsAdminsToCheck.filter(isPresent);\n    if (chipsAdmins.length > 0) {\n      const chipsAdminCollectionIdentifiers = chipsAdminCollection.map(chipsAdminItem => getChipsAdminIdentifier(chipsAdminItem));\n      const chipsAdminsToAdd = chipsAdmins.filter(chipsAdminItem => {\n        const chipsAdminIdentifier = getChipsAdminIdentifier(chipsAdminItem);\n        if (chipsAdminIdentifier == null || chipsAdminCollectionIdentifiers.includes(chipsAdminIdentifier)) {\n          return false;\n        }\n        chipsAdminCollectionIdentifiers.push(chipsAdminIdentifier);\n        return true;\n      });\n      return [...chipsAdminsToAdd, ...chipsAdminCollection];\n    }\n    return chipsAdminCollection;\n  }\n}\nChipsAdminService.ɵfac = function ChipsAdminService_Factory(t) {\n  return new (t || ChipsAdminService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n};\nChipsAdminService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ChipsAdminService,\n  factory: ChipsAdminService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAIA,SAASA,SAAS,QAAQ,yBAAyB;AAEnD,SAASC,mBAAmB,QAAQ,+BAA+B;AACnE,SAAsBC,uBAAuB,QAAQ,sBAAsB;;;;AAM3E,OAAM,MAAOC,iBAAiB;EAG5BC,YAAsBC,IAAgB,EAAYC,wBAAkD;IAA9E,SAAI,GAAJD,IAAI;IAAwB,6BAAwB,GAAxBC,wBAAwB;IAFhE,gBAAW,GAAG,IAAI,CAACA,wBAAwB,CAACC,cAAc,CAAC,kBAAkB,CAAC;EAEe;EAEvGC,MAAM,CAACC,UAAuB;IAC5B,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAc,IAAI,CAACC,WAAW,EAAEF,UAAU,EAAE;MAAEG,OAAO,EAAE;IAAU,CAAE,CAAC;EAC3F;EAEAC,MAAM,CAACJ,UAAuB;IAC5B,OAAO,IAAI,CAACJ,IAAI,CAACS,GAAG,CAAc,GAAG,IAAI,CAACH,WAAW,IAAIT,uBAAuB,CAACO,UAAU,CAAW,EAAE,EAAEA,UAAU,EAAE;MACpHG,OAAO,EAAE;KACV,CAAC;EACJ;EAEAG,aAAa,CAACN,UAAuB;IACnC,OAAO,IAAI,CAACJ,IAAI,CAACW,KAAK,CAAc,GAAG,IAAI,CAACL,WAAW,IAAIT,uBAAuB,CAACO,UAAU,CAAW,EAAE,EAAEA,UAAU,EAAE;MACtHG,OAAO,EAAE;KACV,CAAC;EACJ;EAEAK,IAAI,CAACC,EAAU;IACb,OAAO,IAAI,CAACb,IAAI,CAACc,GAAG,CAAc,GAAG,IAAI,CAACR,WAAW,IAAIO,EAAE,EAAE,EAAE;MAAEN,OAAO,EAAE;IAAU,CAAE,CAAC;EACzF;EAEAQ,KAAK,CAACC,GAAS;IACb,MAAMC,OAAO,GAAGrB,mBAAmB,CAACoB,GAAG,CAAC;IACxC,OAAO,IAAI,CAAChB,IAAI,CAACc,GAAG,CAAgB,IAAI,CAACR,WAAW,EAAE;MAAEY,MAAM,EAAED,OAAO;MAAEV,OAAO,EAAE;IAAU,CAAE,CAAC;EACjG;EAEAY,MAAM,CAACN,EAAU;IACf,OAAO,IAAI,CAACb,IAAI,CAACmB,MAAM,CAAC,GAAG,IAAI,CAACb,WAAW,IAAIO,EAAE,EAAE,EAAE;MAAEN,OAAO,EAAE;IAAU,CAAE,CAAC;EAC/E;EAEAa,kCAAkC,CAChCC,oBAAmC,EACnC,GAAGC,kBAAsD;IAEzD,MAAMC,WAAW,GAAkBD,kBAAkB,CAACE,MAAM,CAAC7B,SAAS,CAAC;IACvE,IAAI4B,WAAW,CAACE,MAAM,GAAG,CAAC,EAAE;MAC1B,MAAMC,+BAA+B,GAAGL,oBAAoB,CAACM,GAAG,CAACC,cAAc,IAAI/B,uBAAuB,CAAC+B,cAAc,CAAE,CAAC;MAC5H,MAAMC,gBAAgB,GAAGN,WAAW,CAACC,MAAM,CAACI,cAAc,IAAG;QAC3D,MAAME,oBAAoB,GAAGjC,uBAAuB,CAAC+B,cAAc,CAAC;QACpE,IAAIE,oBAAoB,IAAI,IAAI,IAAIJ,+BAA+B,CAACK,QAAQ,CAACD,oBAAoB,CAAC,EAAE;UAClG,OAAO,KAAK;;QAEdJ,+BAA+B,CAACM,IAAI,CAACF,oBAAoB,CAAC;QAC1D,OAAO,IAAI;MACb,CAAC,CAAC;MACF,OAAO,CAAC,GAAGD,gBAAgB,EAAE,GAAGR,oBAAoB,CAAC;;IAEvD,OAAOA,oBAAoB;EAC7B;;;mBApDWvB,iBAAiB;AAAA;;SAAjBA,iBAAiB;EAAAmC,SAAjBnC,iBAAiB;EAAAoC,YADJ;AAAM","names":["isPresent","createRequestOption","getChipsAdminIdentifier","ChipsAdminService","constructor","http","applicationConfigService","getEndpointFor","create","chipsAdmin","post","resourceUrl","observe","update","put","partialUpdate","patch","find","id","get","query","req","options","params","delete","addChipsAdminToCollectionIfMissing","chipsAdminCollection","chipsAdminsToCheck","chipsAdmins","filter","length","chipsAdminCollectionIdentifiers","map","chipsAdminItem","chipsAdminsToAdd","chipsAdminIdentifier","includes","push","factory","providedIn"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/entities/chips-admin/service/chips-admin.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { isPresent } from 'app/core/util/operators';\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { IChipsAdmin, getChipsAdminIdentifier } from '../chips-admin.model';\n\nexport type EntityResponseType = HttpResponse<IChipsAdmin>;\nexport type EntityArrayResponseType = HttpResponse<IChipsAdmin[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class ChipsAdminService {\n  protected resourceUrl = this.applicationConfigService.getEndpointFor('api/chips-admins');\n\n  constructor(protected http: HttpClient, protected applicationConfigService: ApplicationConfigService) {}\n\n  create(chipsAdmin: IChipsAdmin): Observable<EntityResponseType> {\n    return this.http.post<IChipsAdmin>(this.resourceUrl, chipsAdmin, { observe: 'response' });\n  }\n\n  update(chipsAdmin: IChipsAdmin): Observable<EntityResponseType> {\n    return this.http.put<IChipsAdmin>(`${this.resourceUrl}/${getChipsAdminIdentifier(chipsAdmin) as number}`, chipsAdmin, {\n      observe: 'response',\n    });\n  }\n\n  partialUpdate(chipsAdmin: IChipsAdmin): Observable<EntityResponseType> {\n    return this.http.patch<IChipsAdmin>(`${this.resourceUrl}/${getChipsAdminIdentifier(chipsAdmin) as number}`, chipsAdmin, {\n      observe: 'response',\n    });\n  }\n\n  find(id: number): Observable<EntityResponseType> {\n    return this.http.get<IChipsAdmin>(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  query(req?: any): Observable<EntityArrayResponseType> {\n    const options = createRequestOption(req);\n    return this.http.get<IChipsAdmin[]>(this.resourceUrl, { params: options, observe: 'response' });\n  }\n\n  delete(id: number): Observable<HttpResponse<{}>> {\n    return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  addChipsAdminToCollectionIfMissing(\n    chipsAdminCollection: IChipsAdmin[],\n    ...chipsAdminsToCheck: (IChipsAdmin | null | undefined)[]\n  ): IChipsAdmin[] {\n    const chipsAdmins: IChipsAdmin[] = chipsAdminsToCheck.filter(isPresent);\n    if (chipsAdmins.length > 0) {\n      const chipsAdminCollectionIdentifiers = chipsAdminCollection.map(chipsAdminItem => getChipsAdminIdentifier(chipsAdminItem)!);\n      const chipsAdminsToAdd = chipsAdmins.filter(chipsAdminItem => {\n        const chipsAdminIdentifier = getChipsAdminIdentifier(chipsAdminItem);\n        if (chipsAdminIdentifier == null || chipsAdminCollectionIdentifiers.includes(chipsAdminIdentifier)) {\n          return false;\n        }\n        chipsAdminCollectionIdentifiers.push(chipsAdminIdentifier);\n        return true;\n      });\n      return [...chipsAdminsToAdd, ...chipsAdminCollection];\n    }\n    return chipsAdminCollection;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}