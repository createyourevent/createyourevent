{"ast":null,"code":"import { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getBuildingIdentifier } from '../building.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport let BuildingService = /*#__PURE__*/(() => {\n  class BuildingService {\n    constructor(http, applicationConfigService) {\n      this.http = http;\n      this.applicationConfigService = applicationConfigService;\n      this.resourceUrl = this.applicationConfigService.getEndpointFor('api/buildings');\n    }\n    create(building) {\n      return this.http.post(this.resourceUrl, building, {\n        observe: 'response'\n      });\n    }\n    update(building) {\n      return this.http.put(`${this.resourceUrl}/${getBuildingIdentifier(building)}`, building, {\n        observe: 'response'\n      });\n    }\n    partialUpdate(building) {\n      return this.http.patch(`${this.resourceUrl}/${getBuildingIdentifier(building)}`, building, {\n        observe: 'response'\n      });\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    addBuildingToCollectionIfMissing(buildingCollection, ...buildingsToCheck) {\n      const buildings = buildingsToCheck.filter(isPresent);\n      if (buildings.length > 0) {\n        const buildingCollectionIdentifiers = buildingCollection.map(buildingItem => getBuildingIdentifier(buildingItem));\n        const buildingsToAdd = buildings.filter(buildingItem => {\n          const buildingIdentifier = getBuildingIdentifier(buildingItem);\n          if (buildingIdentifier == null || buildingCollectionIdentifiers.includes(buildingIdentifier)) {\n            return false;\n          }\n          buildingCollectionIdentifiers.push(buildingIdentifier);\n          return true;\n        });\n        return [...buildingsToAdd, ...buildingCollection];\n      }\n      return buildingCollection;\n    }\n  }\n  BuildingService.ɵfac = function BuildingService_Factory(t) {\n    return new (t || BuildingService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n  };\n  BuildingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BuildingService,\n    factory: BuildingService.ɵfac,\n    providedIn: 'root'\n  });\n  return BuildingService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}