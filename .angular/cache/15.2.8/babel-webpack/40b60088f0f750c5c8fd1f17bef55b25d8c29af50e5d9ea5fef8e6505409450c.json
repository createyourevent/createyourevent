{"ast":null,"code":"import { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getRestaurantIdentifier } from '../restaurant.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport let RestaurantService = /*#__PURE__*/(() => {\n  class RestaurantService {\n    constructor(http, applicationConfigService) {\n      this.http = http;\n      this.applicationConfigService = applicationConfigService;\n      this.resourceUrl = this.applicationConfigService.getEndpointFor('api/restaurants');\n    }\n    create(restaurant) {\n      return this.http.post(this.resourceUrl, restaurant, {\n        observe: 'response'\n      });\n    }\n    update(restaurant) {\n      return this.http.put(`${this.resourceUrl}/${getRestaurantIdentifier(restaurant)}`, restaurant, {\n        observe: 'response'\n      });\n    }\n    partialUpdate(restaurant) {\n      return this.http.patch(`${this.resourceUrl}/${getRestaurantIdentifier(restaurant)}`, restaurant, {\n        observe: 'response'\n      });\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    addRestaurantToCollectionIfMissing(restaurantCollection, ...restaurantsToCheck) {\n      const restaurants = restaurantsToCheck.filter(isPresent);\n      if (restaurants.length > 0) {\n        const restaurantCollectionIdentifiers = restaurantCollection.map(restaurantItem => getRestaurantIdentifier(restaurantItem));\n        const restaurantsToAdd = restaurants.filter(restaurantItem => {\n          const restaurantIdentifier = getRestaurantIdentifier(restaurantItem);\n          if (restaurantIdentifier == null || restaurantCollectionIdentifiers.includes(restaurantIdentifier)) {\n            return false;\n          }\n          restaurantCollectionIdentifiers.push(restaurantIdentifier);\n          return true;\n        });\n        return [...restaurantsToAdd, ...restaurantCollection];\n      }\n      return restaurantCollection;\n    }\n  }\n  RestaurantService.ɵfac = function RestaurantService_Factory(t) {\n    return new (t || RestaurantService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n  };\n  RestaurantService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RestaurantService,\n    factory: RestaurantService.ɵfac,\n    providedIn: 'root'\n  });\n  return RestaurantService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}