{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport Datatrans from './DatatransComponent';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngx-translate/core\";\nconst _c0 = [\"myReactComponentContainer\"];\nconst containerElementName = 'myReactComponentContainer';\nexport class ReactFeelingFormComponent {\n  constructor(translate) {\n    this.translate = translate;\n    this.onLoaded = new EventEmitter();\n    this.onOpened = new EventEmitter();\n    this.onCancelled = new EventEmitter();\n    this.onError = new EventEmitter();\n    this.rootId = 'datatrans-form-root';\n    this.hasViewLoaded = false;\n  }\n  ngOnChanges(changes) {\n    if (changes['transactionId'] !== undefined && changes['transactionId'].currentValue !== undefined) {\n      this.transactionId = changes['transactionId'].currentValue;\n      this.renderComponent();\n      this.translate.onLangChange.subscribe(langChangeEvent => {\n        this.payButton = this.translate.instant(\"datatrans.pay\");\n      });\n    }\n  }\n  ngAfterViewInit() {\n    this.hasViewLoaded = true;\n    this.renderComponent();\n  }\n  renderComponent() {\n    if (!this.hasViewLoaded) {\n      return;\n    }\n    const props = {\n      production: this.production,\n      transactionId: this.transactionId,\n      onLoaded: () => this.onLoaded.emit(),\n      onOpened: () => this.onOpened.emit(),\n      onCancelled: () => this.onCancelled.emit(),\n      onError: data => this.onError.emit(data)\n    };\n    ReactDOM.render(React.createElement(Datatrans, props), document.getElementById(this.rootId));\n  }\n}\nReactFeelingFormComponent.ɵfac = function ReactFeelingFormComponent_Factory(t) {\n  return new (t || ReactFeelingFormComponent)(i0.ɵɵdirectiveInject(i1.TranslateService));\n};\nReactFeelingFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ReactFeelingFormComponent,\n  selectors: [[\"datatrans-component\"]],\n  viewQuery: function ReactFeelingFormComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.containerRef = _t.first);\n    }\n  },\n  inputs: {\n    transactionId: \"transactionId\",\n    production: \"production\"\n  },\n  outputs: {\n    onLoaded: \"onLoaded\",\n    onOpened: \"onOpened\",\n    onCancelled: \"onCancelled\",\n    onError: \"onError\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 3,\n  vars: 1,\n  consts: [[3, \"id\"], [\"myReactComponentContainer\", \"\"]],\n  template: function ReactFeelingFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelement(1, \"span\", null, 1);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"id\", ctx.rootId);\n    }\n  },\n  encapsulation: 2\n});","map":{"version":3,"mappings":"AAAA,SAKEA,YAAY,QAMP,eAAe;AAEtB,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,OAAO,KAAKC,QAAQ,MAAM,WAAW;AACrC,OAAOC,SAAkC,MAAM,sBAAsB;;;;AAErE,MAAMC,oBAAoB,GAAG,2BAA2B;AAOxD,OAAM,MAAOC,yBAAyB;EAkBpCC,YAAoBC,SAA2B;IAA3B,cAAS,GAATA,SAAS;IAVZ,aAAQ,GAAG,IAAIP,YAAY,EAAQ;IACnC,aAAQ,GAAG,IAAIA,YAAY,EAAQ;IACnC,gBAAW,GAAG,IAAIA,YAAY,EAAQ;IACtC,YAAO,GAAG,IAAIA,YAAY,EAAU;IAE9C,WAAM,GAAG,qBAAqB;IAC7B,kBAAa,GAAG,KAAK;EAIqB;EAE3CQ,WAAW,CAACC,OAAsB;IACvC,IAAIA,OAAO,CAAC,eAAe,CAAC,KAAKC,SAAS,IAAID,OAAO,CAAC,eAAe,CAAC,CAACE,YAAY,KAAKD,SAAS,EAAE;MACjG,IAAI,CAACE,aAAa,GAAGH,OAAO,CAAC,eAAe,CAAC,CAACE,YAAY;MAC1D,IAAI,CAACE,eAAe,EAAE;MACtB,IAAI,CAACN,SAAS,CAACO,YAAY,CAACC,SAAS,CAAEC,eAAgC,IAAI;QACzE,IAAI,CAACC,SAAS,GAAG,IAAI,CAACV,SAAS,CAACW,OAAO,CAAC,eAAe,CAAC;MAC1D,CAAC,CAAC;;EAEN;EAEOC,eAAe;IACpB,IAAI,CAACC,aAAa,GAAG,IAAI;IACzB,IAAI,CAACP,eAAe,EAAE;EACxB;EAEQA,eAAe;IACrB,IAAI,CAAC,IAAI,CAACO,aAAa,EAAE;MACvB;;IAGF,MAAMC,KAAK,GAAwB;MACjCC,UAAU,EAAE,IAAI,CAACA,UAAU;MAC3BV,aAAa,EAAE,IAAI,CAACA,aAAa;MACjCW,QAAQ,EAAE,MAAM,IAAI,CAACA,QAAQ,CAACC,IAAI,EAAE;MACpCC,QAAQ,EAAE,MAAM,IAAI,CAACA,QAAQ,CAACD,IAAI,EAAE;MACpCE,WAAW,EAAE,MAAM,IAAI,CAACA,WAAW,CAACF,IAAI,EAAE;MAC1CG,OAAO,EAAGC,IAAI,IAAK,IAAI,CAACD,OAAO,CAACH,IAAI,CAACI,IAAI;KAC1C;IAED1B,QAAQ,CAAC2B,MAAM,CACb5B,KAAK,CAAC6B,aAAa,CAAC3B,SAAS,EAAEkB,KAAK,CAAC,EACrCU,QAAQ,CAACC,cAAc,CAAC,IAAI,CAACC,MAAM,CAAC,CACrC;EACH;;;mBArDW5B,yBAAyB;AAAA;;QAAzBA,yBAAyB;EAAA6B;EAAAC;IAAA","names":["EventEmitter","React","ReactDOM","Datatrans","containerElementName","ReactFeelingFormComponent","constructor","translate","ngOnChanges","changes","undefined","currentValue","transactionId","renderComponent","onLangChange","subscribe","langChangeEvent","payButton","instant","ngAfterViewInit","hasViewLoaded","props","production","onLoaded","emit","onOpened","onCancelled","onError","data","render","createElement","document","getElementById","rootId","selectors","viewQuery"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/views/datatrans_react/Datatrans.component.ts"],"sourcesContent":["import {\n  Component,\n  OnChanges,\n  Input,\n  Output,\n  EventEmitter,\n  AfterViewInit,\n  ViewChild,\n  ViewEncapsulation,\n  ElementRef,\n  SimpleChanges\n} from '@angular/core';\nimport { LangChangeEvent, TranslateService } from '@ngx-translate/core';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport Datatrans, { IDatatransFormProps } from './DatatransComponent';\n\nconst containerElementName = 'myReactComponentContainer';\n\n@Component({\n  selector: 'datatrans-component',\n  template: `<div [id]=\"rootId\"><span #${containerElementName}></span></div>`,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class ReactFeelingFormComponent implements OnChanges, AfterViewInit {\n\n  @ViewChild(containerElementName, {static: false}) containerRef: ElementRef;\n\n  @Input() transactionId: string;\n  @Input() production: boolean;\n\n\n  @Output() public onLoaded = new EventEmitter<void>();\n  @Output() public onOpened = new EventEmitter<void>();\n  @Output() public onCancelled = new EventEmitter<void>();\n  @Output() public onError = new EventEmitter<string>();\n\n  public rootId = 'datatrans-form-root';\n  private hasViewLoaded = false;\n\n  payButton!: string;\n\n  constructor(private translate: TranslateService) {}\n\n  public ngOnChanges(changes: SimpleChanges): void {\n    if (changes['transactionId'] !== undefined && changes['transactionId'].currentValue !== undefined) {\n      this.transactionId = changes['transactionId'].currentValue;\n      this.renderComponent();\n      this.translate.onLangChange.subscribe((langChangeEvent: LangChangeEvent) => {\n        this.payButton = this.translate.instant(\"datatrans.pay\");\n      });\n    }\n  }\n\n  public ngAfterViewInit() {\n    this.hasViewLoaded = true;\n    this.renderComponent();\n  }\n\n  private renderComponent() {\n    if (!this.hasViewLoaded) {\n      return;\n    }\n\n    const props: IDatatransFormProps = {\n      production: this.production,\n      transactionId: this.transactionId,\n      onLoaded: () => this.onLoaded.emit(),\n      onOpened: () => this.onOpened.emit(),\n      onCancelled: () => this.onCancelled.emit(),\n      onError: (data) => this.onError.emit(data)\n    };\n\n    ReactDOM.render(\n      React.createElement(Datatrans, props),\n      document.getElementById(this.rootId)\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}