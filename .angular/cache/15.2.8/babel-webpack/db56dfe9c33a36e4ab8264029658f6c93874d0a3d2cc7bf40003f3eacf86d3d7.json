{"ast":null,"code":"import { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getHotelIdentifier } from '../hotel.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport let HotelService = /*#__PURE__*/(() => {\n  class HotelService {\n    constructor(http, applicationConfigService) {\n      this.http = http;\n      this.applicationConfigService = applicationConfigService;\n      this.resourceUrl = this.applicationConfigService.getEndpointFor('api/hotels');\n    }\n    create(hotel) {\n      return this.http.post(this.resourceUrl, hotel, {\n        observe: 'response'\n      });\n    }\n    update(hotel) {\n      return this.http.put(`${this.resourceUrl}/${getHotelIdentifier(hotel)}`, hotel, {\n        observe: 'response'\n      });\n    }\n    partialUpdate(hotel) {\n      return this.http.patch(`${this.resourceUrl}/${getHotelIdentifier(hotel)}`, hotel, {\n        observe: 'response'\n      });\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    addHotelToCollectionIfMissing(hotelCollection, ...hotelsToCheck) {\n      const hotels = hotelsToCheck.filter(isPresent);\n      if (hotels.length > 0) {\n        const hotelCollectionIdentifiers = hotelCollection.map(hotelItem => getHotelIdentifier(hotelItem));\n        const hotelsToAdd = hotels.filter(hotelItem => {\n          const hotelIdentifier = getHotelIdentifier(hotelItem);\n          if (hotelIdentifier == null || hotelCollectionIdentifiers.includes(hotelIdentifier)) {\n            return false;\n          }\n          hotelCollectionIdentifiers.push(hotelIdentifier);\n          return true;\n        });\n        return [...hotelsToAdd, ...hotelCollection];\n      }\n      return hotelCollection;\n    }\n  }\n  HotelService.ɵfac = function HotelService_Factory(t) {\n    return new (t || HotelService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n  };\n  HotelService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HotelService,\n    factory: HotelService.ɵfac,\n    providedIn: 'root'\n  });\n  return HotelService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}