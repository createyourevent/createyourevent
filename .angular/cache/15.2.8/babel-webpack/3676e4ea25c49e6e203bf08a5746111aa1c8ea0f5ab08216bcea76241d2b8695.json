{"ast":null,"code":"import _defineProperty from \"/home/ceo/mmmm/createyourevent/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"app/core/auth/auth-session.service\";\nimport * as i3 from \"./../general.service\";\nexport class LoginService {\n  constructor(location, authServerProvider, generalService) {\n    _defineProperty(this, \"location\", void 0);\n    _defineProperty(this, \"authServerProvider\", void 0);\n    _defineProperty(this, \"generalService\", void 0);\n    this.location = location;\n    this.authServerProvider = authServerProvider;\n    this.generalService = generalService;\n  }\n  login() {\n    // If you have configured multiple OIDC providers, then, you can update this URL to /login.\n    // It will show a Spring Security generated login page with links to configured OIDC providers.\n    location.href = `${location.origin}${this.location.prepareExternalUrl('oauth2/authorization/oidc')}`;\n  }\n  logout() {\n    this.generalService.findWidthAuthorities().subscribe(u => {\n      u.body.loggedIn = false;\n      if (u.body.points === null) {\n        u.body.points = 0;\n      }\n      this.generalService.updatePointsKeycloak(u.body.points, u.body.id).subscribe(() => {\n        this.generalService.updateUserLoggedInAndPoints(u.body.id, u.body.loggedIn, u.body.points).subscribe(() => {\n          this.authServerProvider.logout().subscribe(logout => {\n            let logoutUrl = logout.logoutUrl;\n            const redirectUri = `${location.origin}${this.location.prepareExternalUrl('/')}`;\n            // if Keycloak, uri has protocol/openid-connect/token\n            if (logoutUrl.includes('/protocol')) {\n              logoutUrl = logoutUrl + '?redirect_uri=' + redirectUri;\n            } else {\n              // Okta\n              logoutUrl = logoutUrl + '?id_token_hint=' + logout.idToken + '&post_logout_redirect_uri=' + redirectUri;\n            }\n            window.location.href = logoutUrl;\n          });\n        });\n      });\n    });\n  }\n}\n_defineProperty(LoginService, \"\\u0275fac\", function LoginService_Factory(t) {\n  return new (t || LoginService)(i0.ɵɵinject(i1.Location), i0.ɵɵinject(i2.AuthServerProvider), i0.ɵɵinject(i3.GeneralService));\n});\n_defineProperty(LoginService, \"\\u0275prov\", /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LoginService,\n  factory: LoginService.ɵfac,\n  providedIn: 'root'\n}));","map":{"version":3,"mappings":";;;;;AAOA,OAAM,MAAOA,YAAY;EACvBC,YAAoBC,QAAkB,EAClBC,kBAAsC,EACtCC,cAA8B;IAAA;IAAA;IAAA;IAF9B,aAAQ,GAARF,QAAQ;IACR,uBAAkB,GAAlBC,kBAAkB;IAClB,mBAAc,GAAdC,cAAc;EAAmB;EAErDC,KAAK;IACH;IACA;IACAH,QAAQ,CAACI,IAAI,GAAG,GAAGJ,QAAQ,CAACK,MAAM,GAAG,IAAI,CAACL,QAAQ,CAACM,kBAAkB,CAAC,2BAA2B,CAAC,EAAE;EACtG;EAEAC,MAAM;IACF,IAAI,CAACL,cAAc,CAACM,oBAAoB,EAAE,CAACC,SAAS,CAACC,CAAC,IAAG;MACvDA,CAAC,CAACC,IAAI,CAACC,QAAQ,GAAG,KAAK;MACvB,IAAGF,CAAC,CAACC,IAAI,CAACE,MAAM,KAAK,IAAI,EAAE;QACzBH,CAAC,CAACC,IAAI,CAACE,MAAM,GAAG,CAAC;;MAEjB,IAAI,CAACX,cAAc,CAACY,oBAAoB,CAACJ,CAAC,CAACC,IAAI,CAACE,MAAM,EAAEH,CAAC,CAACC,IAAI,CAACI,EAAE,CAAC,CAACN,SAAS,CAAC,MAAK;QAChF,IAAI,CAACP,cAAc,CAACc,2BAA2B,CAACN,CAAC,CAACC,IAAI,CAACI,EAAE,EAAEL,CAAC,CAACC,IAAI,CAACC,QAAQ,EAAEF,CAAC,CAACC,IAAI,CAACE,MAAM,CAAC,CAACJ,SAAS,CAAC,MAAK;UACxG,IAAI,CAACR,kBAAkB,CAACM,MAAM,EAAE,CAACE,SAAS,CAAEF,MAAc,IAAI;YAC5D,IAAIU,SAAS,GAAGV,MAAM,CAACU,SAAS;YAChC,MAAMC,WAAW,GAAG,GAAGlB,QAAQ,CAACK,MAAM,GAAG,IAAI,CAACL,QAAQ,CAACM,kBAAkB,CAAC,GAAG,CAAC,EAAE;YAEhF;YACA,IAAIW,SAAS,CAACE,QAAQ,CAAC,WAAW,CAAC,EAAE;cACnCF,SAAS,GAAGA,SAAS,GAAG,gBAAgB,GAAGC,WAAW;aACvD,MAAM;cACL;cACAD,SAAS,GAAGA,SAAS,GAAG,iBAAiB,GAAGV,MAAM,CAACa,OAAO,GAAG,4BAA4B,GAAGF,WAAW;;YAEzGG,MAAM,CAACrB,QAAQ,CAACI,IAAI,GAAGa,SAAS;UAClC,CAAC,CAAC;QACJ,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC,CAAC;EACR;;gBAnCWnB,YAAY;mBAAZA,YAAY;AAAA;AAAA,gBAAZA,YAAY;SAAZA,YAAY;EAAAwB,SAAZxB,YAAY;EAAAyB,YADC;AAAM","names":["LoginService","constructor","location","authServerProvider","generalService","login","href","origin","prepareExternalUrl","logout","findWidthAuthorities","subscribe","u","body","loggedIn","points","updatePointsKeycloak","id","updateUserLoggedInAndPoints","logoutUrl","redirectUri","includes","idToken","window","factory","providedIn"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/login/login.service.ts"],"sourcesContent":["import { GeneralService } from './../general.service';\nimport { Injectable } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { AuthServerProvider } from 'app/core/auth/auth-session.service';\nimport { Logout } from './logout.model';\n\n@Injectable({ providedIn: 'root' })\nexport class LoginService {\n  constructor(private location: Location,\n              private authServerProvider: AuthServerProvider,\n              private generalService: GeneralService) {}\n\n  login(): void {\n    // If you have configured multiple OIDC providers, then, you can update this URL to /login.\n    // It will show a Spring Security generated login page with links to configured OIDC providers.\n    location.href = `${location.origin}${this.location.prepareExternalUrl('oauth2/authorization/oidc')}`;\n  }\n\n  logout(): void {\n      this.generalService.findWidthAuthorities().subscribe(u => {\n        u.body.loggedIn = false;\n        if(u.body.points === null) {\n          u.body.points = 0;\n        }\n          this.generalService.updatePointsKeycloak(u.body.points, u.body.id).subscribe(() => {\n            this.generalService.updateUserLoggedInAndPoints(u.body.id, u.body.loggedIn, u.body.points).subscribe(() => {\n              this.authServerProvider.logout().subscribe((logout: Logout) => {\n                let logoutUrl = logout.logoutUrl;\n                const redirectUri = `${location.origin}${this.location.prepareExternalUrl('/')}`;\n\n                // if Keycloak, uri has protocol/openid-connect/token\n                if (logoutUrl.includes('/protocol')) {\n                  logoutUrl = logoutUrl + '?redirect_uri=' + redirectUri;\n                } else {\n                  // Okta\n                  logoutUrl = logoutUrl + '?id_token_hint=' + logout.idToken + '&post_logout_redirect_uri=' + redirectUri;\n                }\n                window.location.href = logoutUrl;\n              });\n            });\n          });\n        });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}