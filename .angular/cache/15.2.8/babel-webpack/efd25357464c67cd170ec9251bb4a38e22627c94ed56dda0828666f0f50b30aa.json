{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { EventEmitter, Component, ViewEncapsulation, Input, Output, ViewChildren, HostListener, Pipe, ViewChild, NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClient, HttpClientModule } from '@angular/common/http';\nimport { __awaiter } from 'tslib';\nimport { map } from 'rxjs/operators';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common/http';\nimport * as ɵngcc2 from '@angular/common';\nimport * as ɵngcc3 from '@angular/platform-browser';\nimport * as ɵngcc4 from '@angular/forms';\nconst _c0 = [\"chatWindow\"];\nfunction NgChat_link_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"link\", 2);\n    ɵngcc0.ɵɵpipe(1, \"sanitize\");\n  }\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"href\", ɵngcc0.ɵɵpipeBind1(1, 1, ctx_r0.customTheme), ɵngcc0.ɵɵsanitizeResourceUrl);\n  }\n}\nconst _c1 = function (a2) {\n  return {\n    \"ng-chat-window\": true,\n    \"primary-outline-color\": true,\n    \"ng-chat-window-collapsed\": a2\n  };\n};\nconst _c2 = function (a0) {\n  return {\n    \"right\": a0\n  };\n};\nfunction NgChat_div_2_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 6);\n    ɵngcc0.ɵɵtext(1, \"\\n        \");\n    ɵngcc0.ɵɵelementStart(2, \"ng-chat-window\", 7, 8);\n    ɵngcc0.ɵɵlistener(\"onMessagesSeen\", function NgChat_div_2_div_5_Template_ng_chat_window_onMessagesSeen_2_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r7);\n      const ctx_r6 = ɵngcc0.ɵɵnextContext(2);\n      return ɵngcc0.ɵɵresetView(ctx_r6.onWindowMessagesSeen($event));\n    })(\"onMessageSent\", function NgChat_div_2_div_5_Template_ng_chat_window_onMessageSent_2_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r7);\n      const ctx_r8 = ɵngcc0.ɵɵnextContext(2);\n      return ɵngcc0.ɵɵresetView(ctx_r8.onWindowMessageSent($event));\n    })(\"onTabTriggered\", function NgChat_div_2_div_5_Template_ng_chat_window_onTabTriggered_2_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r7);\n      const ctx_r9 = ɵngcc0.ɵɵnextContext(2);\n      return ɵngcc0.ɵɵresetView(ctx_r9.onWindowTabTriggered($event));\n    })(\"onChatWindowClosed\", function NgChat_div_2_div_5_Template_ng_chat_window_onChatWindowClosed_2_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r7);\n      const ctx_r10 = ɵngcc0.ɵɵnextContext(2);\n      return ɵngcc0.ɵɵresetView(ctx_r10.onWindowChatClosed($event));\n    })(\"onOptionTriggered\", function NgChat_div_2_div_5_Template_ng_chat_window_onOptionTriggered_2_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r7);\n      const ctx_r11 = ɵngcc0.ɵɵnextContext(2);\n      return ɵngcc0.ɵɵresetView(ctx_r11.onWindowOptionTriggered($event));\n    })(\"onLoadHistoryTriggered\", function NgChat_div_2_div_5_Template_ng_chat_window_onLoadHistoryTriggered_2_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r7);\n      const ctx_r12 = ɵngcc0.ɵɵnextContext(2);\n      return ɵngcc0.ɵɵresetView(ctx_r12.fetchMessageHistory($event));\n    });\n    ɵngcc0.ɵɵtext(4, \"\\n        \");\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtext(5, \"\\n    \");\n    ɵngcc0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const window_r3 = ctx.$implicit;\n    const i_r4 = ctx.index;\n    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(12, _c1, window_r3.isCollapsed))(\"ngStyle\", ɵngcc0.ɵɵpureFunction1(14, _c2, (!ctx_r2.hideFriendsList ? ctx_r2.friendsListWidth : 0) + 20 + ctx_r2.windowSizeFactor * i_r4 + \"px\"));\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"fileUploadAdapter\", ctx_r2.fileUploadAdapter)(\"localization\", ctx_r2.localization)(\"userId\", ctx_r2.userId)(\"window\", window_r3)(\"showOptions\", ctx_r2.groupAdapter)(\"emojisEnabled\", ctx_r2.emojisEnabled)(\"linkfyEnabled\", ctx_r2.linkfyEnabled)(\"showMessageDate\", ctx_r2.showMessageDate)(\"messageDatePipeFormat\", ctx_r2.messageDatePipeFormat)(\"hasPagedHistory\", ctx_r2.hasPagedHistory);\n  }\n}\nfunction NgChat_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 3);\n    ɵngcc0.ɵɵtext(1, \"\\n    \");\n    ɵngcc0.ɵɵelementStart(2, \"ng-chat-friends-list\", 4);\n    ɵngcc0.ɵɵlistener(\"onParticipantClicked\", function NgChat_div_2_Template_ng_chat_friends_list_onParticipantClicked_2_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r14);\n      const ctx_r13 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r13.onParticipantClickedFromFriendsList($event));\n    })(\"onOptionPromptCanceled\", function NgChat_div_2_Template_ng_chat_friends_list_onOptionPromptCanceled_2_listener() {\n      ɵngcc0.ɵɵrestoreView(_r14);\n      const ctx_r15 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r15.onOptionPromptCanceled());\n    })(\"onOptionPromptConfirmed\", function NgChat_div_2_Template_ng_chat_friends_list_onOptionPromptConfirmed_2_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r14);\n      const ctx_r16 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r16.onOptionPromptConfirmed($event));\n    });\n    ɵngcc0.ɵɵtext(3, \"\\n    \");\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtext(4, \"\\n\\n    \");\n    ɵngcc0.ɵɵtemplate(5, NgChat_div_2_div_5_Template, 6, 16, \"div\", 5);\n    ɵngcc0.ɵɵtext(6, \"\\n\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r1.theme);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"localization\", ctx_r1.localization)(\"shouldDisplay\", !ctx_r1.hideFriendsList)(\"userId\", ctx_r1.userId)(\"isCollapsed\", ctx_r1.isCollapsed)(\"searchEnabled\", ctx_r1.searchEnabled)(\"participants\", ctx_r1.participants)(\"participantsResponse\", ctx_r1.participantsResponse)(\"participantsInteractedWith\", ctx_r1.participantsInteractedWith)(\"windows\", ctx_r1.windows)(\"currentActiveOption\", ctx_r1.currentActiveOption);\n    ɵngcc0.ɵɵadvance(3);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r1.windows);\n  }\n}\nfunction NgChatOptionsComponent_div_0_a_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"a\", 6);\n    ɵngcc0.ɵɵlistener(\"click\", function NgChatOptionsComponent_div_0_a_10_Template_a_click_0_listener() {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r5);\n      const option_r2 = restoredCtx.$implicit;\n      const ctx_r4 = ɵngcc0.ɵɵnextContext(2);\n      return ɵngcc0.ɵɵresetView(ctx_r4.onOptionClicked(option_r2));\n    });\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const option_r2 = ctx.$implicit;\n    ɵngcc0.ɵɵproperty(\"ngClass\", \"primary-text\");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\"\\n\\t\\t\\t\", option_r2.displayLabel, \"\\n\\t\\t\");\n  }\n}\nfunction NgChatOptionsComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1);\n    ɵngcc0.ɵɵtext(1, \"\\n\\t\\t\");\n    ɵngcc0.ɵɵelementStart(2, \"button\", 2);\n    ɵngcc0.ɵɵtext(3, \"\\n\\t\\t\\t\");\n    ɵngcc0.ɵɵelementStart(4, \"span\", 3);\n    ɵngcc0.ɵɵtext(5, \"...\");\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtext(6, \"\\n\\t\\t\");\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtext(7, \"\\n\\t\");\n    ɵngcc0.ɵɵelementStart(8, \"div\", 4);\n    ɵngcc0.ɵɵtext(9, \"\\n\\t\\t\");\n    ɵngcc0.ɵɵtemplate(10, NgChatOptionsComponent_div_0_a_10_Template, 2, 2, \"a\", 5);\n    ɵngcc0.ɵɵtext(11, \"\\n\\t\");\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtext(12, \"      \\n\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(10);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r0.options);\n  }\n}\nfunction NgChatFriendsListComponent_div_0_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 6);\n    ɵngcc0.ɵɵlistener(\"click\", function NgChatFriendsListComponent_div_0_div_8_Template_div_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      const ctx_r4 = ɵngcc0.ɵɵnextContext(2);\n      return ɵngcc0.ɵɵresetView(ctx_r4.onFriendsListActionCancelClicked());\n    });\n    ɵngcc0.ɵɵtext(1, \"\\n\\t\\t\");\n    ɵngcc0.ɵɵelementStart(2, \"a\", 7);\n    ɵngcc0.ɵɵtext(3, \"\\n\\t\\t\\t\");\n    ɵngcc0.ɵɵelement(4, \"i\", 8);\n    ɵngcc0.ɵɵtext(5, \"\\n\\t\\t\");\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtext(6, \"\\n\\t\\t\");\n    ɵngcc0.ɵɵelementStart(7, \"a\", 9);\n    ɵngcc0.ɵɵlistener(\"click\", function NgChatFriendsListComponent_div_0_div_8_Template_a_click_7_listener() {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      const ctx_r6 = ɵngcc0.ɵɵnextContext(2);\n      return ɵngcc0.ɵɵresetView(ctx_r6.onFriendsListActionConfirmClicked());\n    });\n    ɵngcc0.ɵɵtext(8, \"\\n\\t\\t\\t\");\n    ɵngcc0.ɵɵelement(9, \"i\", 10);\n    ɵngcc0.ɵɵtext(10, \"\\n\\t\\t\");\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtext(11, \"\\n\\t\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\nfunction NgChatFriendsListComponent_div_0_input_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"input\", 11);\n    ɵngcc0.ɵɵlistener(\"ngModelChange\", function NgChatFriendsListComponent_div_0_input_10_Template_input_ngModelChange_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r8);\n      const ctx_r7 = ɵngcc0.ɵɵnextContext(2);\n      return ɵngcc0.ɵɵresetView(ctx_r7.searchInput = $event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"placeholder\", ctx_r2.localization.searchPlaceholder)(\"ngModel\", ctx_r2.searchInput);\n  }\n}\nfunction NgChatFriendsListComponent_div_0_ul_12_li_2_input_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"input\", 21);\n    ɵngcc0.ɵɵlistener(\"change\", function NgChatFriendsListComponent_div_0_ul_12_li_2_input_2_Template_input_change_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r17);\n      const user_r10 = ɵngcc0.ɵɵnextContext().$implicit;\n      const ctx_r15 = ɵngcc0.ɵɵnextContext(3);\n      return ɵngcc0.ɵɵresetView(ctx_r15.onFriendsListCheckboxChange(user_r10, $event.target.checked));\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const user_r10 = ɵngcc0.ɵɵnextContext().$implicit;\n    const ctx_r11 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵproperty(\"checked\", ctx_r11.isUserSelectedFromFriendsList(user_r10));\n  }\n}\nfunction NgChatFriendsListComponent_div_0_ul_12_li_2_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 22);\n    ɵngcc0.ɵɵtext(1, \"\\n\\t\\t\\t\\t\\t\");\n    ɵngcc0.ɵɵelement(2, \"i\", 23);\n    ɵngcc0.ɵɵtext(3, \"\\n\\t\\t\\t\\t\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\nfunction NgChatFriendsListComponent_div_0_ul_12_li_2_img_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"img\", 24);\n    ɵngcc0.ɵɵpipe(1, \"sanitize\");\n  }\n  if (rf & 2) {\n    const user_r10 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵproperty(\"src\", ɵngcc0.ɵɵpipeBind1(1, 1, user_r10.avatar), ɵngcc0.ɵɵsanitizeUrl);\n  }\n}\nfunction NgChatFriendsListComponent_div_0_ul_12_li_2_span_15_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 25);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const user_r10 = ɵngcc0.ɵɵnextContext().$implicit;\n    const ctx_r14 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r14.unreadMessagesTotalByParticipant(user_r10));\n  }\n}\nconst _c3 = function (a0) {\n  return {\n    \"ng-chat-friends-list-selectable-offset\": a0,\n    \"ng-chat-friends-list-container\": true\n  };\n};\nconst _c4 = function (a1, a2, a3, a4) {\n  return {\n    \"ng-chat-participant-status\": true,\n    \"online\": a1,\n    \"busy\": a2,\n    \"away\": a3,\n    \"offline\": a4\n  };\n};\nfunction NgChatFriendsListComponent_div_0_ul_12_li_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"li\");\n    ɵngcc0.ɵɵtext(1, \"\\n\\t\\t\\t\");\n    ɵngcc0.ɵɵtemplate(2, NgChatFriendsListComponent_div_0_ul_12_li_2_input_2_Template, 1, 1, \"input\", 14);\n    ɵngcc0.ɵɵtext(3, \"\\n\\t\\t\\t\");\n    ɵngcc0.ɵɵelementStart(4, \"div\", 15);\n    ɵngcc0.ɵɵlistener(\"click\", function NgChatFriendsListComponent_div_0_ul_12_li_2_Template_div_click_4_listener() {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r22);\n      const user_r10 = restoredCtx.$implicit;\n      const ctx_r21 = ɵngcc0.ɵɵnextContext(3);\n      return ɵngcc0.ɵɵresetView(ctx_r21.onUserClick(user_r10));\n    });\n    ɵngcc0.ɵɵtext(5, \"\\n\\t\\t\\t\\t\");\n    ɵngcc0.ɵɵtemplate(6, NgChatFriendsListComponent_div_0_ul_12_li_2_div_6_Template, 4, 0, \"div\", 16);\n    ɵngcc0.ɵɵtext(7, \"\\n\\t\\t\\t\\t\");\n    ɵngcc0.ɵɵtemplate(8, NgChatFriendsListComponent_div_0_ul_12_li_2_img_8_Template, 2, 3, \"img\", 17);\n    ɵngcc0.ɵɵtext(9, \"\\n\\t\\t\\t\\t\");\n    ɵngcc0.ɵɵelementStart(10, \"strong\", 18);\n    ɵngcc0.ɵɵtext(11);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtext(12, \"\\n\\t\\t\\t\\t\");\n    ɵngcc0.ɵɵelement(13, \"span\", 19);\n    ɵngcc0.ɵɵtext(14, \"\\n\\t\\t\\t\\t\");\n    ɵngcc0.ɵɵtemplate(15, NgChatFriendsListComponent_div_0_ul_12_li_2_span_15_Template, 2, 1, \"span\", 20);\n    ɵngcc0.ɵɵtext(16, \"\\n\\t\\t\\t\");\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtext(17, \"\\n\\t\\t\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const user_r10 = ctx.$implicit;\n    const ctx_r9 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r9.currentActiveOption && ctx_r9.currentActiveOption.validateContext(user_r10));\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(9, _c3, ctx_r9.currentActiveOption));\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !user_r10.avatar);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngIf\", user_r10.avatar);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵpropertyInterpolate(\"title\", user_r10.displayName);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(user_r10.displayName);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵpropertyInterpolate(\"title\", ctx_r9.chatParticipantStatusDescriptor(user_r10.status, ctx_r9.localization));\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction4(11, _c4, user_r10.status == ctx_r9.ChatParticipantStatus.Online, user_r10.status == ctx_r9.ChatParticipantStatus.Busy, user_r10.status == ctx_r9.ChatParticipantStatus.Away, user_r10.status == ctx_r9.ChatParticipantStatus.Offline));\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r9.unreadMessagesTotalByParticipant(user_r10).length > 0);\n  }\n}\nconst _c5 = function (a0) {\n  return {\n    \"offset-search\": a0\n  };\n};\nfunction NgChatFriendsListComponent_div_0_ul_12_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"ul\", 12);\n    ɵngcc0.ɵɵtext(1, \"\\n\\t\\t\");\n    ɵngcc0.ɵɵtemplate(2, NgChatFriendsListComponent_div_0_ul_12_li_2_Template, 18, 16, \"li\", 13);\n    ɵngcc0.ɵɵtext(3, \"\\n\\t\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(2, _c5, ctx_r3.searchEnabled));\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r3.filteredParticipants);\n  }\n}\nconst _c6 = function (a2) {\n  return {\n    \"primary-outline-color\": true,\n    \"primary-background\": true,\n    \"ng-chat-people-collapsed\": a2\n  };\n};\nfunction NgChatFriendsListComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r24 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1);\n    ɵngcc0.ɵɵtext(1, \"\\n\\t\");\n    ɵngcc0.ɵɵelementStart(2, \"a\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function NgChatFriendsListComponent_div_0_Template_a_click_2_listener() {\n      ɵngcc0.ɵɵrestoreView(_r24);\n      const ctx_r23 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r23.onChatTitleClicked());\n    });\n    ɵngcc0.ɵɵtext(3, \"\\n\\t\\t\");\n    ɵngcc0.ɵɵelementStart(4, \"span\");\n    ɵngcc0.ɵɵtext(5);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtext(6, \"\\n\\t\");\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtext(7, \"\\n\\t\");\n    ɵngcc0.ɵɵtemplate(8, NgChatFriendsListComponent_div_0_div_8_Template, 12, 0, \"div\", 3);\n    ɵngcc0.ɵɵtext(9, \"\\n\\t\");\n    ɵngcc0.ɵɵtemplate(10, NgChatFriendsListComponent_div_0_input_10_Template, 1, 2, \"input\", 4);\n    ɵngcc0.ɵɵtext(11, \"\\n\\t\");\n    ɵngcc0.ɵɵtemplate(12, NgChatFriendsListComponent_div_0_ul_12_Template, 4, 4, \"ul\", 5);\n    ɵngcc0.ɵɵtext(13, \"\\n\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(5, _c6, ctx_r0.isCollapsed));\n    ɵngcc0.ɵɵadvance(5);\n    ɵngcc0.ɵɵtextInterpolate1(\"\\n\\t\\t\\t\", ctx_r0.localization.title, \"\\n\\t\\t\");\n    ɵngcc0.ɵɵadvance(3);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.currentActiveOption);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.searchEnabled);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r0.isCollapsed);\n  }\n}\nconst _c7 = [\"chatMessages\"];\nconst _c8 = [\"nativeFileInput\"];\nconst _c9 = [\"chatWindowInput\"];\nfunction NgChatWindowComponent_ng_container_0_span_11_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 7);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.unreadMessagesTotal(ctx_r2.window));\n  }\n}\nfunction NgChatWindowComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtext(1, \"\\n\\t\");\n    ɵngcc0.ɵɵelementStart(2, \"div\", 1);\n    ɵngcc0.ɵɵtext(3, \"\\n\\t\\t\");\n    ɵngcc0.ɵɵelementStart(4, \"div\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function NgChatWindowComponent_ng_container_0_Template_div_click_4_listener() {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      const ctx_r3 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r3.onChatWindowClicked(ctx_r3.window));\n    });\n    ɵngcc0.ɵɵtext(5, \"\\n\\t\\t\\t\");\n    ɵngcc0.ɵɵelementStart(6, \"strong\", 3);\n    ɵngcc0.ɵɵtext(7);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtext(8, \"\\n\\t\\t\\t\");\n    ɵngcc0.ɵɵelement(9, \"span\", 4);\n    ɵngcc0.ɵɵtext(10, \"\\n\\t\\t\\t\");\n    ɵngcc0.ɵɵtemplate(11, NgChatWindowComponent_ng_container_0_span_11_Template, 2, 1, \"span\", 5);\n    ɵngcc0.ɵɵtext(12, \"\\n\\t\\t\");\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtext(13, \"\\n\\t\\t\");\n    ɵngcc0.ɵɵelementStart(14, \"a\", 6);\n    ɵngcc0.ɵɵlistener(\"click\", function NgChatWindowComponent_ng_container_0_Template_a_click_14_listener() {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      const ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r5.onCloseChatWindow());\n    });\n    ɵngcc0.ɵɵtext(15, \"X\");\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtext(16, \"\\n\\t\");\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtext(17, \"\\n\");\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(6);\n    ɵngcc0.ɵɵpropertyInterpolate(\"title\", ctx_r0.window.participant.displayName);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\"\\n\\t\\t\\t\\t\", ctx_r0.window.participant.displayName, \"\\n\\t\\t\\t\");\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵpropertyInterpolate(\"title\", ctx_r0.chatParticipantStatusDescriptor(ctx_r0.window.participant.status, ctx_r0.localization));\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction4(5, _c4, ctx_r0.window.participant.status == ctx_r0.ChatParticipantStatus.Online, ctx_r0.window.participant.status == ctx_r0.ChatParticipantStatus.Busy, ctx_r0.window.participant.status == ctx_r0.ChatParticipantStatus.Away, ctx_r0.window.participant.status == ctx_r0.ChatParticipantStatus.Offline));\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.unreadMessagesTotal(ctx_r0.window).length > 0);\n  }\n}\nfunction NgChatWindowComponent_ng_container_2_span_11_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 7);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r6.unreadMessagesTotal(ctx_r6.window));\n  }\n}\nfunction NgChatWindowComponent_ng_container_2_div_23_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 17);\n    ɵngcc0.ɵɵtext(1, \"\\n\\t\\t\\t\");\n    ɵngcc0.ɵɵelementStart(2, \"div\", 18);\n    ɵngcc0.ɵɵtext(3, \"Loading history...\");\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtext(4, \"\\n\\t\\t\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\nfunction NgChatWindowComponent_ng_container_2_div_25_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 19);\n    ɵngcc0.ɵɵtext(1, \"\\n\\t\\t\\t\");\n    ɵngcc0.ɵɵelementStart(2, \"a\", 20);\n    ɵngcc0.ɵɵlistener(\"click\", function NgChatWindowComponent_ng_container_2_div_25_Template_a_click_2_listener() {\n      ɵngcc0.ɵɵrestoreView(_r14);\n      const ctx_r13 = ɵngcc0.ɵɵnextContext(2);\n      return ɵngcc0.ɵɵresetView(ctx_r13.fetchMessageHistory(ctx_r13.window));\n    });\n    ɵngcc0.ɵɵtext(3);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtext(4, \"\\n\\t\\t\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r9 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(3);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r9.localization.loadMessageHistoryPlaceholder);\n  }\n}\nfunction NgChatWindowComponent_ng_container_2_div_27_ng_container_2_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 27);\n    ɵngcc0.ɵɵtext(1, \"\\n\\t\\t\\t\\t\\t\");\n    ɵngcc0.ɵɵelement(2, \"i\", 28);\n    ɵngcc0.ɵɵtext(3, \"\\n\\t\\t\\t\\t\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\nfunction NgChatWindowComponent_ng_container_2_div_27_ng_container_2_img_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"img\", 29);\n    ɵngcc0.ɵɵpipe(1, \"sanitize\");\n  }\n  if (rf & 2) {\n    const message_r15 = ɵngcc0.ɵɵnextContext(2).$implicit;\n    const ctx_r22 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"src\", ɵngcc0.ɵɵpipeBind1(1, 1, ctx_r22.getChatWindowAvatar(ctx_r22.window.participant, message_r15)), ɵngcc0.ɵɵsanitizeUrl);\n  }\n}\nfunction NgChatWindowComponent_ng_container_2_div_27_ng_container_2_span_6_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 30);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵpipe(2, \"groupMessageDisplayName\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const message_r15 = ɵngcc0.ɵɵnextContext(2).$implicit;\n    const ctx_r23 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind2(2, 1, ctx_r23.window.participant, message_r15));\n  }\n}\nfunction NgChatWindowComponent_ng_container_2_div_27_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtext(1, \"\\n\\t\\t\\t\\t\");\n    ɵngcc0.ɵɵtemplate(2, NgChatWindowComponent_ng_container_2_div_27_ng_container_2_div_2_Template, 4, 0, \"div\", 24);\n    ɵngcc0.ɵɵtext(3, \"\\n\\t\\t\\t\\t\");\n    ɵngcc0.ɵɵtemplate(4, NgChatWindowComponent_ng_container_2_div_27_ng_container_2_img_4_Template, 2, 3, \"img\", 25);\n    ɵngcc0.ɵɵtext(5, \"\\n\\t\\t\\t\\t\");\n    ɵngcc0.ɵɵtemplate(6, NgChatWindowComponent_ng_container_2_div_27_ng_container_2_span_6_Template, 3, 4, \"span\", 26);\n    ɵngcc0.ɵɵtext(7, \"\\n\\t\\t\\t\");\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const message_r15 = ɵngcc0.ɵɵnextContext().$implicit;\n    const ctx_r17 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r17.getChatWindowAvatar(ctx_r17.window.participant, message_r15));\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r17.getChatWindowAvatar(ctx_r17.window.participant, message_r15));\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r17.window.participant.participantType == ctx_r17.ChatParticipantType.Group);\n  }\n}\nfunction NgChatWindowComponent_ng_container_2_div_27_div_6_span_6_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 33);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵpipe(2, \"date\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const message_r15 = ɵngcc0.ɵɵnextContext(2).$implicit;\n    const ctx_r27 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind2(2, 1, message_r15.dateSent, ctx_r27.messageDatePipeFormat));\n  }\n}\nconst _c10 = function (a0, a1) {\n  return {\n    \"sent-chat-message-container\": a0,\n    \"received-chat-message-container\": a1\n  };\n};\nfunction NgChatWindowComponent_ng_container_2_div_27_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 21);\n    ɵngcc0.ɵɵtext(1, \"\\n          \");\n    ɵngcc0.ɵɵelement(2, \"span\", 31);\n    ɵngcc0.ɵɵpipe(3, \"linkfy\");\n    ɵngcc0.ɵɵpipe(4, \"emojify\");\n    ɵngcc0.ɵɵtext(5, \"\\n\\t\\t\\t\\t\\t\");\n    ɵngcc0.ɵɵtemplate(6, NgChatWindowComponent_ng_container_2_div_27_div_6_span_6_Template, 3, 4, \"span\", 32);\n    ɵngcc0.ɵɵtext(7, \"\\n\\t\\t\\t\\t\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const message_r15 = ɵngcc0.ɵɵnextContext().$implicit;\n    const ctx_r18 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction2(9, _c10, message_r15.fromId == ctx_r18.userId, message_r15.fromId != ctx_r18.userId));\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"innerHtml\", ɵngcc0.ɵɵpipeBind2(3, 3, ɵngcc0.ɵɵpipeBind2(4, 6, message_r15.message, ctx_r18.emojisEnabled), ctx_r18.linkfyEnabled), ɵngcc0.ɵɵsanitizeHtml);\n    ɵngcc0.ɵɵadvance(4);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r18.showMessageDate && message_r15.dateSent);\n  }\n}\nfunction NgChatWindowComponent_ng_container_2_div_27_div_8_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 33);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵpipe(2, \"date\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const message_r15 = ɵngcc0.ɵɵnextContext(2).$implicit;\n    const ctx_r30 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ɵngcc0.ɵɵpipeBind2(2, 1, message_r15.dateSent, ctx_r30.messageDatePipeFormat));\n  }\n}\nfunction NgChatWindowComponent_ng_container_2_div_27_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 21);\n    ɵngcc0.ɵɵtext(1, \"\\n\\n          \");\n    ɵngcc0.ɵɵelement(2, \"img\", 34);\n    ɵngcc0.ɵɵtext(3, \"\\n\\n\\t\\t\\t\\t\\t\");\n    ɵngcc0.ɵɵtemplate(4, NgChatWindowComponent_ng_container_2_div_27_div_8_span_4_Template, 3, 4, \"span\", 32);\n    ɵngcc0.ɵɵtext(5, \"\\n\\t\\t\\t\\t\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const message_r15 = ɵngcc0.ɵɵnextContext().$implicit;\n    const ctx_r19 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction2(3, _c10, message_r15.fromId == ctx_r19.userId, message_r15.fromId != ctx_r19.userId));\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵpropertyInterpolate(\"src\", message_r15.message, ɵngcc0.ɵɵsanitizeUrl);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r19.showMessageDate && message_r15.dateSent);\n  }\n}\nfunction NgChatWindowComponent_ng_container_2_div_27_div_10_span_12_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 40);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const message_r15 = ɵngcc0.ɵɵnextContext(2).$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\"\", message_r15.fileSizeInBytes, \" Bytes\");\n  }\n}\nconst _c11 = function (a1) {\n  return {\n    \"file-message-container\": true,\n    \"received\": a1\n  };\n};\nfunction NgChatWindowComponent_ng_container_2_div_27_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r37 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 21);\n    ɵngcc0.ɵɵtext(1, \"\\n\\t\\t\\t\\t\\t\");\n    ɵngcc0.ɵɵelementStart(2, \"div\", 35);\n    ɵngcc0.ɵɵtext(3, \"\\n\\t\\t\\t\\t\\t\\t\");\n    ɵngcc0.ɵɵelement(4, \"i\", 36);\n    ɵngcc0.ɵɵtext(5, \"\\n\\t\\t\\t\\t\\t\");\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtext(6, \"\\n\\t\\t\\t\\t\\t\");\n    ɵngcc0.ɵɵelementStart(7, \"a\", 37);\n    ɵngcc0.ɵɵlistener(\"click\", function NgChatWindowComponent_ng_container_2_div_27_div_10_Template_a_click_7_listener() {\n      ɵngcc0.ɵɵrestoreView(_r37);\n      const message_r15 = ɵngcc0.ɵɵnextContext().$implicit;\n      const ctx_r35 = ɵngcc0.ɵɵnextContext(2);\n      return ɵngcc0.ɵɵresetView(ctx_r35.markMessagesAsRead([message_r15]));\n    });\n    ɵngcc0.ɵɵtext(8, \"\\n\\t\\t\\t\\t\\t\\t\");\n    ɵngcc0.ɵɵelementStart(9, \"span\", 38);\n    ɵngcc0.ɵɵtext(10);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtext(11, \"\\n\\t\\t\\t\\t\\t\\t\");\n    ɵngcc0.ɵɵtemplate(12, NgChatWindowComponent_ng_container_2_div_27_div_10_span_12_Template, 2, 1, \"span\", 39);\n    ɵngcc0.ɵɵtext(13, \"\\n\\t\\t\\t\\t\\t\");\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtext(14, \"\\n\\t\\t\\t\\t\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const message_r15 = ɵngcc0.ɵɵnextContext().$implicit;\n    const ctx_r20 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(5, _c11, message_r15.fromId != ctx_r20.userId));\n    ɵngcc0.ɵɵadvance(7);\n    ɵngcc0.ɵɵattribute(\"href\", message_r15.downloadUrl, ɵngcc0.ɵɵsanitizeUrl);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵattribute(\"title\", message_r15.message);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(message_r15.message);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngIf\", message_r15.fileSizeInBytes);\n  }\n}\nconst _c12 = function (a1) {\n  return {\n    \"ng-chat-message\": true,\n    \"ng-chat-message-received\": a1\n  };\n};\nfunction NgChatWindowComponent_ng_container_2_div_27_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 21);\n    ɵngcc0.ɵɵtext(1, \"\\n\\t\\t\\t\");\n    ɵngcc0.ɵɵtemplate(2, NgChatWindowComponent_ng_container_2_div_27_ng_container_2_Template, 8, 3, \"ng-container\", 0);\n    ɵngcc0.ɵɵtext(3, \"\\n\\t\\t\\t\");\n    ɵngcc0.ɵɵelementContainerStart(4, 22);\n    ɵngcc0.ɵɵtext(5, \"\\n\\t\\t\\t\\t\");\n    ɵngcc0.ɵɵtemplate(6, NgChatWindowComponent_ng_container_2_div_27_div_6_Template, 8, 12, \"div\", 23);\n    ɵngcc0.ɵɵtext(7, \"\\n        \");\n    ɵngcc0.ɵɵtemplate(8, NgChatWindowComponent_ng_container_2_div_27_div_8_Template, 6, 6, \"div\", 23);\n    ɵngcc0.ɵɵtext(9, \"\\n\\t\\t\\t\\t\");\n    ɵngcc0.ɵɵtemplate(10, NgChatWindowComponent_ng_container_2_div_27_div_10_Template, 15, 7, \"div\", 23);\n    ɵngcc0.ɵɵtext(11, \"\\n\\t\\t\\t\");\n    ɵngcc0.ɵɵelementContainerEnd();\n    ɵngcc0.ɵɵtext(12, \"\\n\\t\\t\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const message_r15 = ctx.$implicit;\n    const i_r16 = ctx.index;\n    const ctx_r10 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(6, _c12, message_r15.fromId != ctx_r10.userId));\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r10.isAvatarVisible(ctx_r10.window, message_r15, i_r16));\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngSwitch\", message_r15.type);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", ctx_r10.MessageType.Text);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", ctx_r10.MessageType.Image);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", ctx_r10.MessageType.File);\n  }\n}\nfunction NgChatWindowComponent_ng_container_2_ng_container_37_a_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r43 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"a\", 45);\n    ɵngcc0.ɵɵlistener(\"click\", function NgChatWindowComponent_ng_container_2_ng_container_37_a_2_Template_a_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r43);\n      const ctx_r42 = ɵngcc0.ɵɵnextContext(3);\n      return ɵngcc0.ɵɵresetView(ctx_r42.triggerNativeFileUpload(ctx_r42.window));\n    });\n    ɵngcc0.ɵɵtext(1, \"\\n\\t\\t\\t\\t\");\n    ɵngcc0.ɵɵelement(2, \"i\", 46);\n    ɵngcc0.ɵɵtext(3, \"\\n\\t\\t\\t\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\nfunction NgChatWindowComponent_ng_container_2_ng_container_37_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 18);\n  }\n}\nfunction NgChatWindowComponent_ng_container_2_ng_container_37_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r45 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtext(1, \"\\n\\t\\t\\t\");\n    ɵngcc0.ɵɵtemplate(2, NgChatWindowComponent_ng_container_2_ng_container_37_a_2_Template, 4, 0, \"a\", 41);\n    ɵngcc0.ɵɵtext(3, \"\\n\\t\\t\\t\");\n    ɵngcc0.ɵɵelementStart(4, \"input\", 42, 43);\n    ɵngcc0.ɵɵlistener(\"change\", function NgChatWindowComponent_ng_container_2_ng_container_37_Template_input_change_4_listener() {\n      ɵngcc0.ɵɵrestoreView(_r45);\n      const ctx_r44 = ɵngcc0.ɵɵnextContext(2);\n      return ɵngcc0.ɵɵresetView(ctx_r44.onFileChosen(ctx_r44.window));\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtext(6, \"\\n\\t\\t\\t\");\n    ɵngcc0.ɵɵtemplate(7, NgChatWindowComponent_ng_container_2_ng_container_37_div_7_Template, 1, 0, \"div\", 44);\n    ɵngcc0.ɵɵtext(8, \"\\n\\t\\t\");\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r12 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r12.isUploadingFile(ctx_r12.window));\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵattribute(\"id\", ctx_r12.getUniqueFileUploadInstanceId(ctx_r12.window));\n    ɵngcc0.ɵɵadvance(3);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r12.isUploadingFile(ctx_r12.window));\n  }\n}\nconst _c13 = function (a1) {\n  return {\n    \"chat-window-input\": true,\n    \"has-side-action\": a1\n  };\n};\nfunction NgChatWindowComponent_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r47 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtext(1, \"\\n\\t\");\n    ɵngcc0.ɵɵelementStart(2, \"div\", 1);\n    ɵngcc0.ɵɵtext(3, \"\\n\\t\\t\");\n    ɵngcc0.ɵɵelementStart(4, \"div\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function NgChatWindowComponent_ng_container_2_Template_div_click_4_listener() {\n      ɵngcc0.ɵɵrestoreView(_r47);\n      const ctx_r46 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r46.onChatWindowClicked(ctx_r46.window));\n    });\n    ɵngcc0.ɵɵtext(5, \"\\n\\t\\t\\t\");\n    ɵngcc0.ɵɵelementStart(6, \"strong\", 3);\n    ɵngcc0.ɵɵtext(7);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtext(8, \"\\n\\t\\t\\t\");\n    ɵngcc0.ɵɵelement(9, \"span\", 4);\n    ɵngcc0.ɵɵtext(10, \"\\n\\t\\t\\t\");\n    ɵngcc0.ɵɵtemplate(11, NgChatWindowComponent_ng_container_2_span_11_Template, 2, 1, \"span\", 5);\n    ɵngcc0.ɵɵtext(12, \"\\n\\t\\t\");\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtext(13, \"\\n\\t\\t\");\n    ɵngcc0.ɵɵelementStart(14, \"a\", 6);\n    ɵngcc0.ɵɵlistener(\"click\", function NgChatWindowComponent_ng_container_2_Template_a_click_14_listener() {\n      ɵngcc0.ɵɵrestoreView(_r47);\n      const ctx_r48 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r48.onCloseChatWindow());\n    });\n    ɵngcc0.ɵɵtext(15, \"X\");\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtext(16, \"\\n\\t\\t\");\n    ɵngcc0.ɵɵelementStart(17, \"ng-chat-options\", 8);\n    ɵngcc0.ɵɵlistener(\"activeOptionTrackerChange\", function NgChatWindowComponent_ng_container_2_Template_ng_chat_options_activeOptionTrackerChange_17_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r47);\n      const ctx_r49 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r49.activeOptionTrackerChange($event));\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtext(18, \"\\n\\t\");\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtext(19, \"\\n\\t\");\n    ɵngcc0.ɵɵelementStart(20, \"div\", 9, 10);\n    ɵngcc0.ɵɵtext(22, \"\\n\\t\\t\");\n    ɵngcc0.ɵɵtemplate(23, NgChatWindowComponent_ng_container_2_div_23_Template, 5, 0, \"div\", 11);\n    ɵngcc0.ɵɵtext(24, \"\\n\\t\\t\");\n    ɵngcc0.ɵɵtemplate(25, NgChatWindowComponent_ng_container_2_div_25_Template, 5, 1, \"div\", 12);\n    ɵngcc0.ɵɵtext(26, \"\\n\\n\\t\\t\");\n    ɵngcc0.ɵɵtemplate(27, NgChatWindowComponent_ng_container_2_div_27_Template, 13, 8, \"div\", 13);\n    ɵngcc0.ɵɵtext(28, \"\\n\\t\");\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtext(29, \"\\n\\n\\t\");\n    ɵngcc0.ɵɵelementStart(30, \"div\", 14);\n    ɵngcc0.ɵɵtext(31, \"\\n\\t\\t\");\n    ɵngcc0.ɵɵelementStart(32, \"input\", 15, 16);\n    ɵngcc0.ɵɵlistener(\"ngModelChange\", function NgChatWindowComponent_ng_container_2_Template_input_ngModelChange_32_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r47);\n      const ctx_r50 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r50.window.newMessage = $event);\n    })(\"keydown\", function NgChatWindowComponent_ng_container_2_Template_input_keydown_32_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r47);\n      const ctx_r51 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r51.onChatInputTyped($event, ctx_r51.window));\n    })(\"blur\", function NgChatWindowComponent_ng_container_2_Template_input_blur_32_listener() {\n      ɵngcc0.ɵɵrestoreView(_r47);\n      const ctx_r52 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r52.toggleWindowFocus(ctx_r52.window));\n    })(\"focus\", function NgChatWindowComponent_ng_container_2_Template_input_focus_32_listener() {\n      ɵngcc0.ɵɵrestoreView(_r47);\n      const ctx_r53 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r53.toggleWindowFocus(ctx_r53.window));\n    });\n    ɵngcc0.ɵɵpipe(34, \"emojify\");\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtext(35, \"\\n\\n\\t\\t\");\n    ɵngcc0.ɵɵtext(36, \"\\n\\t\\t\");\n    ɵngcc0.ɵɵtemplate(37, NgChatWindowComponent_ng_container_2_ng_container_37_Template, 9, 3, \"ng-container\", 0);\n    ɵngcc0.ɵɵtext(38, \"\\n\\t\");\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtext(39, \"\\n\");\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(6);\n    ɵngcc0.ɵɵpropertyInterpolate(\"title\", ctx_r1.window.participant.displayName);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\"\\n\\t\\t\\t\\t\", ctx_r1.window.participant.displayName, \"\\n\\t\\t\\t\");\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵpropertyInterpolate(\"title\", ctx_r1.chatParticipantStatusDescriptor(ctx_r1.window.participant.status, ctx_r1.localization));\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction4(17, _c4, ctx_r1.window.participant.status == ctx_r1.ChatParticipantStatus.Online, ctx_r1.window.participant.status == ctx_r1.ChatParticipantStatus.Busy, ctx_r1.window.participant.status == ctx_r1.ChatParticipantStatus.Away, ctx_r1.window.participant.status == ctx_r1.ChatParticipantStatus.Offline));\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r1.unreadMessagesTotal(ctx_r1.window).length > 0);\n    ɵngcc0.ɵɵadvance(6);\n    ɵngcc0.ɵɵproperty(\"ngClass\", \"ng-chat-options-container\")(\"options\", ctx_r1.defaultWindowOptions(ctx_r1.window));\n    ɵngcc0.ɵɵadvance(6);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r1.window.isLoadingHistory);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r1.hasPagedHistory && ctx_r1.window.hasMoreMessages && !ctx_r1.window.isLoadingHistory);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r1.window.messages);\n    ɵngcc0.ɵɵadvance(5);\n    ɵngcc0.ɵɵproperty(\"ngModel\", ɵngcc0.ɵɵpipeBind2(34, 14, ctx_r1.window.newMessage, ctx_r1.emojisEnabled))(\"placeholder\", ctx_r1.localization.messagePlaceholder)(\"ngClass\", ɵngcc0.ɵɵpureFunction1(22, _c13, ctx_r1.fileUploadAdapter));\n    ɵngcc0.ɵɵadvance(5);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r1.fileUploadAdapter);\n  }\n}\nclass ChatAdapter {\n  constructor() {\n    // ### Abstract adapter methods ###\n    // Event handlers\n    /** @internal */\n    this.friendsListChangedHandler = participantsResponse => {};\n    /** @internal */\n    this.messageReceivedHandler = (participant, message) => {};\n  }\n  // ### Adapter/Chat income/ingress events ###\n  onFriendsListChanged(participantsResponse) {\n    this.friendsListChangedHandler(participantsResponse);\n  }\n  onMessageReceived(participant, message) {\n    this.messageReceivedHandler(participant, message);\n  }\n}\nvar MessageType = /*#__PURE__*/(() => {\n  (function (MessageType) {\n    MessageType[MessageType[\"Text\"] = 1] = \"Text\";\n    MessageType[MessageType[\"File\"] = 2] = \"File\";\n    MessageType[MessageType[\"Image\"] = 3] = \"Image\";\n  })(MessageType || (MessageType = {}));\n  return MessageType;\n})();\nclass Message {\n  constructor() {\n    this.type = MessageType.Text;\n  }\n}\nvar ChatParticipantStatus = /*#__PURE__*/(() => {\n  (function (ChatParticipantStatus) {\n    ChatParticipantStatus[ChatParticipantStatus[\"Online\"] = 0] = \"Online\";\n    ChatParticipantStatus[ChatParticipantStatus[\"Busy\"] = 1] = \"Busy\";\n    ChatParticipantStatus[ChatParticipantStatus[\"Away\"] = 2] = \"Away\";\n    ChatParticipantStatus[ChatParticipantStatus[\"Offline\"] = 3] = \"Offline\";\n  })(ChatParticipantStatus || (ChatParticipantStatus = {}));\n  return ChatParticipantStatus;\n})();\nvar ChatParticipantType = /*#__PURE__*/(() => {\n  (function (ChatParticipantType) {\n    ChatParticipantType[ChatParticipantType[\"User\"] = 0] = \"User\";\n    ChatParticipantType[ChatParticipantType[\"Group\"] = 1] = \"Group\";\n  })(ChatParticipantType || (ChatParticipantType = {}));\n  return ChatParticipantType;\n})();\nclass User {\n  constructor() {\n    this.participantType = ChatParticipantType.User;\n  }\n}\nclass ParticipantResponse {}\nclass ParticipantMetadata {\n  constructor() {\n    this.totalUnreadMessages = 0;\n  }\n}\nclass Window {\n  constructor(participant, isLoadingHistory, isCollapsed) {\n    this.messages = [];\n    this.newMessage = \"\";\n    // UI Behavior properties\n    this.isCollapsed = false;\n    this.isLoadingHistory = false;\n    this.hasFocus = false;\n    this.hasMoreMessages = true;\n    this.historyPage = 0;\n    this.participant = participant;\n    this.messages = [];\n    this.isLoadingHistory = isLoadingHistory;\n    this.hasFocus = false; // This will be triggered when the 'newMessage' input gets the current focus\n    this.isCollapsed = isCollapsed;\n    this.hasMoreMessages = false;\n    this.historyPage = 0;\n  }\n}\n\n/**\r\n * @description Chat Adapter decorator class that adds pagination to load the history of messagesr.\r\n * You will need an existing @see ChatAdapter implementation\r\n */\nclass PagedHistoryChatAdapter extends ChatAdapter {}\nvar Theme = /*#__PURE__*/(() => {\n  (function (Theme) {\n    Theme[\"Custom\"] = \"custom-theme\";\n    Theme[\"Light\"] = \"light-theme\";\n    Theme[\"Dark\"] = \"dark-theme\";\n  })(Theme || (Theme = {}));\n  return Theme;\n})();\n// Poached from: https://github.com/Steve-Fenton/TypeScriptUtilities\n// @dynamic\nclass Guid {\n  static newGuid() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n      var r = Math.random() * 16 | 0,\n        v = c == 'x' ? r : r & 0x3 | 0x8;\n      return v.toString(16);\n    });\n  }\n}\nclass Group {\n  constructor(participants) {\n    this.id = Guid.newGuid();\n    this.participantType = ChatParticipantType.Group;\n    this.chattingTo = participants;\n    this.status = ChatParticipantStatus.Online;\n    // TODO: Add some customization for this in future releases\n    this.displayName = participants.map(p => p.displayName).sort((first, second) => second > first ? -1 : 1).join(\", \");\n  }\n}\nvar ScrollDirection = /*#__PURE__*/(() => {\n  (function (ScrollDirection) {\n    ScrollDirection[ScrollDirection[\"Top\"] = 0] = \"Top\";\n    ScrollDirection[ScrollDirection[\"Bottom\"] = 1] = \"Bottom\";\n  })(ScrollDirection || (ScrollDirection = {}));\n  return ScrollDirection;\n})();\nclass DefaultFileUploadAdapter {\n  /**\r\n   * @summary Basic file upload adapter implementation for HTTP request form file consumption\r\n   * @param _serverEndpointUrl The API endpoint full qualified address that will receive a form file to process and return the metadata.\r\n   */\n  constructor(_serverEndpointUrl, _http) {\n    this._serverEndpointUrl = _serverEndpointUrl;\n    this._http = _http;\n  }\n  uploadFile(file, participantId) {\n    const formData = new FormData();\n    //formData.append('ng-chat-sender-userid', currentUserId);\n    formData.append('ng-chat-participant-id', participantId);\n    formData.append('file', file, file.name);\n    return this._http.post(this._serverEndpointUrl, formData);\n    // TODO: Leaving this if we want to track upload progress in detail in the future. Might need a different Subject generic type wrapper\n    // const fileRequest = new HttpRequest('POST', this._serverEndpointUrl, formData, {\n    //     reportProgress: true\n    // });\n    // const uploadProgress = new Subject<number>();\n    // const uploadStatus = uploadProgress.asObservable();\n    //const responsePromise = new Subject<Message>();\n    // this._http\n    //     .request(fileRequest)\n    //     .subscribe(event => {\n    //         // if (event.type == HttpEventType.UploadProgress)\n    //         // {\n    //         //     const percentDone = Math.round(100 * event.loaded / event.total);\n    //         //     uploadProgress.next(percentDone);\n    //         // }\n    //         // else if (event instanceof HttpResponse)\n    //         // {\n    //         //     uploadProgress.complete();\n    //         // }\n    //     });\n  }\n}\nlet NgChat = /*#__PURE__*/(() => {\n  class NgChat {\n    constructor(_httpClient) {\n      this._httpClient = _httpClient;\n      // Exposes enums for the ng-template\n      this.ChatParticipantType = ChatParticipantType;\n      this.ChatParticipantStatus = ChatParticipantStatus;\n      this.MessageType = MessageType;\n      this._isDisabled = false;\n      this.isCollapsed = false;\n      this.maximizeWindowOnNewMessage = true;\n      this.pollFriendsList = false;\n      this.pollingInterval = 5000;\n      this.historyEnabled = true;\n      this.emojisEnabled = true;\n      this.linkfyEnabled = true;\n      this.audioEnabled = true;\n      this.searchEnabled = true;\n      this.audioSource = 'https://raw.githubusercontent.com/rpaschoal/ng-chat/master/src/ng-chat/assets/notification.wav';\n      this.persistWindowsState = true;\n      this.title = \"Friends\";\n      this.messagePlaceholder = \"Type a message\";\n      this.searchPlaceholder = \"Search\";\n      this.browserNotificationsEnabled = true;\n      this.browserNotificationIconSource = 'https://raw.githubusercontent.com/rpaschoal/ng-chat/master/src/ng-chat/assets/notification.png';\n      this.browserNotificationTitle = \"New message from\";\n      this.historyPageSize = 10;\n      this.hideFriendsList = false;\n      this.hideFriendsListOnUnsupportedViewport = true;\n      this.theme = Theme.Light;\n      this.messageDatePipeFormat = \"short\";\n      this.showMessageDate = true;\n      this.isViewportOnMobileEnabled = false;\n      this.onParticipantClicked = new EventEmitter();\n      this.onParticipantChatOpened = new EventEmitter();\n      this.onParticipantChatClosed = new EventEmitter();\n      this.onMessagesSeen = new EventEmitter();\n      this.browserNotificationsBootstrapped = false;\n      this.hasPagedHistory = false;\n      // Don't want to add this as a setting to simplify usage. Previous placeholder and title settings available to be used, or use full Localization object.\n      this.statusDescription = {\n        online: 'Online',\n        busy: 'Busy',\n        away: 'Away',\n        offline: 'Offline'\n      };\n      this.participantsInteractedWith = [];\n      // Defines the size of each opened window to calculate how many windows can be opened on the viewport at the same time.\n      this.windowSizeFactor = 320;\n      // Total width size of the friends list section\n      this.friendsListWidth = 262;\n      // Set to true if there is no space to display at least one chat window and 'hideFriendsListOnUnsupportedViewport' is true\n      this.unsupportedViewport = false;\n      this.windows = [];\n      this.isBootstrapped = false;\n    }\n    get isDisabled() {\n      return this._isDisabled;\n    }\n    set isDisabled(value) {\n      this._isDisabled = value;\n      if (value) {\n        // To address issue https://github.com/rpaschoal/ng-chat/issues/120\n        window.clearInterval(this.pollingIntervalWindowInstance);\n      } else {\n        this.activateFriendListFetch();\n      }\n    }\n    get localStorageKey() {\n      return `ng-chat-users-${this.userId}`; // Appending the user id so the state is unique per user in a computer.\n    }\n\n    ngOnInit() {\n      this.bootstrapChat();\n    }\n    onResize(event) {\n      this.viewPortTotalArea = event.target.innerWidth;\n      this.NormalizeWindows();\n    }\n    // Checks if there are more opened windows than the view port can display\n    NormalizeWindows() {\n      const maxSupportedOpenedWindows = Math.floor((this.viewPortTotalArea - (!this.hideFriendsList ? this.friendsListWidth : 0)) / this.windowSizeFactor);\n      const difference = this.windows.length - maxSupportedOpenedWindows;\n      if (difference >= 0) {\n        this.windows.splice(this.windows.length - difference);\n      }\n      this.updateWindowsState(this.windows);\n      // Viewport should have space for at least one chat window but should show in mobile if option is enabled.\n      this.unsupportedViewport = this.isViewportOnMobileEnabled ? false : this.hideFriendsListOnUnsupportedViewport && maxSupportedOpenedWindows < 1;\n    }\n    // Initializes the chat plugin and the messaging adapter\n    bootstrapChat() {\n      let initializationException = null;\n      if (this.adapter != null && this.userId != null) {\n        try {\n          this.viewPortTotalArea = window.innerWidth;\n          this.initializeTheme();\n          this.initializeDefaultText();\n          this.initializeBrowserNotifications();\n          // Binding event listeners\n          this.adapter.messageReceivedHandler = (participant, msg) => this.onMessageReceived(participant, msg);\n          this.adapter.friendsListChangedHandler = participantsResponse => this.onFriendsListChanged(participantsResponse);\n          this.activateFriendListFetch();\n          this.bufferAudioFile();\n          this.hasPagedHistory = this.adapter instanceof PagedHistoryChatAdapter;\n          if (this.fileUploadUrl && this.fileUploadUrl !== \"\") {\n            this.fileUploadAdapter = new DefaultFileUploadAdapter(this.fileUploadUrl, this._httpClient);\n          }\n          this.NormalizeWindows();\n          this.isBootstrapped = true;\n        } catch (ex) {\n          initializationException = ex;\n        }\n      }\n      if (!this.isBootstrapped) {\n        console.error(\"ng-chat component couldn't be bootstrapped.\");\n        if (this.userId == null) {\n          console.error(\"ng-chat can't be initialized without an user id. Please make sure you've provided an userId as a parameter of the ng-chat component.\");\n        }\n        if (this.adapter == null) {\n          console.error(\"ng-chat can't be bootstrapped without a ChatAdapter. Please make sure you've provided a ChatAdapter implementation as a parameter of the ng-chat component.\");\n        }\n        if (initializationException) {\n          console.error(`An exception has occurred while initializing ng-chat. Details: ${initializationException.message}`);\n          console.error(initializationException);\n        }\n      }\n    }\n    activateFriendListFetch() {\n      if (this.adapter) {\n        // Loading current users list\n        if (this.pollFriendsList) {\n          // Setting a long poll interval to update the friends list\n          this.fetchFriendsList(true);\n          this.pollingIntervalWindowInstance = window.setInterval(() => this.fetchFriendsList(false), this.pollingInterval);\n        } else {\n          // Since polling was disabled, a friends list update mechanism will have to be implemented in the ChatAdapter.\n          this.fetchFriendsList(true);\n        }\n      }\n    }\n    // Initializes browser notifications\n    initializeBrowserNotifications() {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.browserNotificationsEnabled && \"Notification\" in window) {\n          if ((yield Notification.requestPermission()) === \"granted\") {\n            this.browserNotificationsBootstrapped = true;\n          }\n        }\n      });\n    }\n    // Initializes default text\n    initializeDefaultText() {\n      if (!this.localization) {\n        this.localization = {\n          messagePlaceholder: this.messagePlaceholder,\n          searchPlaceholder: this.searchPlaceholder,\n          title: this.title,\n          statusDescription: this.statusDescription,\n          browserNotificationTitle: this.browserNotificationTitle,\n          loadMessageHistoryPlaceholder: \"Load older messages\"\n        };\n      }\n    }\n    initializeTheme() {\n      if (this.customTheme) {\n        this.theme = Theme.Custom;\n      } else if (this.theme != Theme.Light && this.theme != Theme.Dark) {\n        // TODO: Use es2017 in future with Object.values(Theme).includes(this.theme) to do this check\n        throw new Error(`Invalid theme configuration for ng-chat. \"${this.theme}\" is not a valid theme value.`);\n      }\n    }\n    // Sends a request to load the friends list\n    fetchFriendsList(isBootstrapping) {\n      this.adapter.listFriends().pipe(map(participantsResponse => {\n        this.participantsResponse = participantsResponse;\n        this.participants = participantsResponse.map(response => {\n          return response.participant;\n        });\n      })).subscribe(() => {\n        if (isBootstrapping) {\n          this.restoreWindowsState();\n        }\n      });\n    }\n    fetchMessageHistory(window) {\n      // Not ideal but will keep this until we decide if we are shipping pagination with the default adapter\n      if (this.adapter instanceof PagedHistoryChatAdapter) {\n        window.isLoadingHistory = true;\n        this.adapter.getMessageHistoryByPage(window.participant.id, this.historyPageSize, ++window.historyPage).pipe(map(result => {\n          result.forEach(message => this.assertMessageType(message));\n          window.messages = result.concat(window.messages);\n          window.isLoadingHistory = false;\n          const direction = window.historyPage == 1 ? ScrollDirection.Bottom : ScrollDirection.Top;\n          window.hasMoreMessages = result.length == this.historyPageSize;\n          setTimeout(() => this.onFetchMessageHistoryLoaded(result, window, direction, true));\n        })).subscribe();\n      } else {\n        this.adapter.getMessageHistory(window.participant.id).pipe(map(result => {\n          result.forEach(message => this.assertMessageType(message));\n          window.messages = result.concat(window.messages);\n          window.isLoadingHistory = false;\n          setTimeout(() => this.onFetchMessageHistoryLoaded(result, window, ScrollDirection.Bottom));\n        })).subscribe();\n      }\n    }\n    onFetchMessageHistoryLoaded(messages, window, direction, forceMarkMessagesAsSeen = false) {\n      this.scrollChatWindow(window, direction);\n      if (window.hasFocus || forceMarkMessagesAsSeen) {\n        const unseenMessages = messages.filter(m => !m.dateSeen);\n        this.markMessagesAsRead(unseenMessages);\n      }\n    }\n    // Updates the friends list via the event handler\n    onFriendsListChanged(participantsResponse) {\n      if (participantsResponse) {\n        this.participantsResponse = participantsResponse;\n        this.participants = participantsResponse.map(response => {\n          return response.participant;\n        });\n        this.participantsInteractedWith = [];\n      }\n    }\n    // Handles received messages by the adapter\n    onMessageReceived(participant, message) {\n      if (participant && message) {\n        const chatWindow = this.openChatWindow(participant);\n        this.assertMessageType(message);\n        if (!chatWindow[1] || !this.historyEnabled) {\n          chatWindow[0].messages.push(message);\n          this.scrollChatWindow(chatWindow[0], ScrollDirection.Bottom);\n          if (chatWindow[0].hasFocus) {\n            this.markMessagesAsRead([message]);\n          }\n        }\n        this.emitMessageSound(chatWindow[0]);\n        // Github issue #58\n        // Do not push browser notifications with message content for privacy purposes if the 'maximizeWindowOnNewMessage' setting is off and this is a new chat window.\n        if (this.maximizeWindowOnNewMessage || !chatWindow[1] && !chatWindow[0].isCollapsed) {\n          // Some messages are not pushed because they are loaded by fetching the history hence why we supply the message here\n          this.emitBrowserNotification(chatWindow[0], message);\n        }\n      }\n    }\n    onParticipantClickedFromFriendsList(participant) {\n      this.openChatWindow(participant, true, true);\n    }\n    cancelOptionPrompt() {\n      if (this.currentActiveOption) {\n        this.currentActiveOption.isActive = false;\n        this.currentActiveOption = null;\n      }\n    }\n    onOptionPromptCanceled() {\n      this.cancelOptionPrompt();\n    }\n    onOptionPromptConfirmed(event) {\n      // For now this is fine as there is only one option available. Introduce option types and type checking if a new option is added.\n      this.confirmNewGroup(event);\n      // Canceling current state\n      this.cancelOptionPrompt();\n    }\n    confirmNewGroup(users) {\n      const newGroup = new Group(users);\n      this.openChatWindow(newGroup);\n      if (this.groupAdapter) {\n        this.groupAdapter.groupCreated(newGroup);\n      }\n    }\n    // Opens a new chat whindow. Takes care of available viewport\n    // Works for opening a chat window for an user or for a group\n    // Returns => [Window: Window object reference, boolean: Indicates if this window is a new chat window]\n    openChatWindow(participant, focusOnNewWindow = false, invokedByUserClick = false) {\n      // Is this window opened?\n      const openedWindow = this.windows.find(x => x.participant.id == participant.id);\n      if (!openedWindow) {\n        if (invokedByUserClick) {\n          this.onParticipantClicked.emit(participant);\n        }\n        // Refer to issue #58 on Github\n        const collapseWindow = invokedByUserClick ? false : !this.maximizeWindowOnNewMessage;\n        const newChatWindow = new Window(participant, this.historyEnabled, collapseWindow);\n        // Loads the chat history via an RxJs Observable\n        if (this.historyEnabled) {\n          this.fetchMessageHistory(newChatWindow);\n        }\n        this.windows.unshift(newChatWindow);\n        // Is there enough space left in the view port ? but should be displayed in mobile if option is enabled\n        if (!this.isViewportOnMobileEnabled) {\n          if (this.windows.length * this.windowSizeFactor >= this.viewPortTotalArea - (!this.hideFriendsList ? this.friendsListWidth : 0)) {\n            this.windows.pop();\n          }\n        }\n        this.updateWindowsState(this.windows);\n        if (focusOnNewWindow && !collapseWindow) {\n          this.focusOnWindow(newChatWindow);\n        }\n        this.participantsInteractedWith.push(participant);\n        this.onParticipantChatOpened.emit(participant);\n        return [newChatWindow, true];\n      } else {\n        // Returns the existing chat window\n        return [openedWindow, false];\n      }\n    }\n    // Focus on the input element of the supplied window\n    focusOnWindow(window, callback = () => {}) {\n      const windowIndex = this.windows.indexOf(window);\n      if (windowIndex >= 0) {\n        setTimeout(() => {\n          if (this.chatWindows) {\n            const chatWindowToFocus = this.chatWindows.toArray()[windowIndex];\n            chatWindowToFocus.chatWindowInput.nativeElement.focus();\n          }\n          callback();\n        });\n      }\n    }\n    assertMessageType(message) {\n      // Always fallback to \"Text\" messages to avoid rendenring issues\n      if (!message.type) {\n        message.type = MessageType.Text;\n      }\n    }\n    // Marks all messages provided as read with the current time.\n    markMessagesAsRead(messages) {\n      const currentDate = new Date();\n      messages.forEach(msg => {\n        msg.dateSeen = currentDate;\n      });\n      this.onMessagesSeen.emit(messages);\n    }\n    // Buffers audio file (For component's bootstrapping)\n    bufferAudioFile() {\n      if (this.audioSource && this.audioSource.length > 0) {\n        this.audioFile = new Audio();\n        this.audioFile.src = this.audioSource;\n        this.audioFile.load();\n      }\n    }\n    // Emits a message notification audio if enabled after every message received\n    emitMessageSound(window) {\n      if (this.audioEnabled && !window.hasFocus && this.audioFile) {\n        this.audioFile.play();\n      }\n    }\n    // Emits a browser notification\n    emitBrowserNotification(window, message) {\n      if (this.browserNotificationsBootstrapped && !window.hasFocus && message) {\n        const notification = new Notification(`${this.localization.browserNotificationTitle} ${window.participant.displayName}`, {\n          'body': message.message,\n          'icon': this.browserNotificationIconSource\n        });\n        setTimeout(() => {\n          notification.close();\n        }, message.message.length <= 50 ? 5000 : 7000); // More time to read longer messages\n      }\n    }\n    // Saves current windows state into local storage if persistence is enabled\n    updateWindowsState(windows) {\n      if (this.persistWindowsState) {\n        const participantIds = windows.map(w => {\n          return w.participant.id;\n        });\n        localStorage.setItem(this.localStorageKey, JSON.stringify(participantIds));\n      }\n    }\n    restoreWindowsState() {\n      try {\n        if (this.persistWindowsState) {\n          const stringfiedParticipantIds = localStorage.getItem(this.localStorageKey);\n          if (stringfiedParticipantIds && stringfiedParticipantIds.length > 0) {\n            const participantIds = JSON.parse(stringfiedParticipantIds);\n            const participantsToRestore = this.participants.filter(u => participantIds.indexOf(u.id) >= 0);\n            participantsToRestore.forEach(participant => {\n              this.openChatWindow(participant);\n            });\n          }\n        }\n      } catch (ex) {\n        console.error(`An error occurred while restoring ng-chat windows state. Details: ${ex}`);\n      }\n    }\n    // Gets closest open window if any. Most recent opened has priority (Right)\n    getClosestWindow(window) {\n      const index = this.windows.indexOf(window);\n      if (index > 0) {\n        return this.windows[index - 1];\n      } else if (index == 0 && this.windows.length > 1) {\n        return this.windows[index + 1];\n      }\n    }\n    closeWindow(window) {\n      const index = this.windows.indexOf(window);\n      this.windows.splice(index, 1);\n      this.updateWindowsState(this.windows);\n      this.onParticipantChatClosed.emit(window.participant);\n    }\n    getChatWindowComponentInstance(targetWindow) {\n      const windowIndex = this.windows.indexOf(targetWindow);\n      if (this.chatWindows) {\n        let targetWindow = this.chatWindows.toArray()[windowIndex];\n        return targetWindow;\n      }\n      return null;\n    }\n    // Scrolls a chat window message flow to the bottom\n    scrollChatWindow(window, direction) {\n      const chatWindow = this.getChatWindowComponentInstance(window);\n      if (chatWindow) {\n        chatWindow.scrollChatWindow(window, direction);\n      }\n    }\n    onWindowMessagesSeen(messagesSeen) {\n      this.markMessagesAsRead(messagesSeen);\n    }\n    onWindowChatClosed(payload) {\n      const {\n        closedWindow,\n        closedViaEscapeKey\n      } = payload;\n      if (closedViaEscapeKey) {\n        let closestWindow = this.getClosestWindow(closedWindow);\n        if (closestWindow) {\n          this.focusOnWindow(closestWindow, () => {\n            this.closeWindow(closedWindow);\n          });\n        } else {\n          this.closeWindow(closedWindow);\n        }\n      } else {\n        this.closeWindow(closedWindow);\n      }\n    }\n    onWindowTabTriggered(payload) {\n      const {\n        triggeringWindow,\n        shiftKeyPressed\n      } = payload;\n      const currentWindowIndex = this.windows.indexOf(triggeringWindow);\n      let windowToFocus = this.windows[currentWindowIndex + (shiftKeyPressed ? 1 : -1)]; // Goes back on shift + tab\n      if (!windowToFocus) {\n        // Edge windows, go to start or end\n        windowToFocus = this.windows[currentWindowIndex > 0 ? 0 : this.chatWindows.length - 1];\n      }\n      this.focusOnWindow(windowToFocus);\n    }\n    onWindowMessageSent(messageSent) {\n      this.adapter.sendMessage(messageSent);\n    }\n    onWindowOptionTriggered(option) {\n      this.currentActiveOption = option;\n    }\n    triggerOpenChatWindow(user) {\n      if (user) {\n        this.openChatWindow(user);\n      }\n    }\n    triggerCloseChatWindow(userId) {\n      const openedWindow = this.windows.find(x => x.participant.id == userId);\n      if (openedWindow) {\n        this.closeWindow(openedWindow);\n      }\n    }\n    triggerToggleChatWindowVisibility(userId) {\n      const openedWindow = this.windows.find(x => x.participant.id == userId);\n      if (openedWindow) {\n        const chatWindow = this.getChatWindowComponentInstance(openedWindow);\n        if (chatWindow) {\n          chatWindow.onChatWindowClicked(openedWindow);\n        }\n      }\n    }\n  }\n  NgChat.ɵfac = function NgChat_Factory(t) {\n    return new (t || NgChat)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.HttpClient));\n  };\n  NgChat.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: NgChat,\n    selectors: [[\"ng-chat\"]],\n    viewQuery: function NgChat_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.chatWindows = _t);\n      }\n    },\n    hostBindings: function NgChat_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"resize\", function NgChat_resize_HostBindingHandler($event) {\n          return ctx.onResize($event);\n        }, false, ɵngcc0.ɵɵresolveWindow);\n      }\n    },\n    inputs: {\n      isCollapsed: \"isCollapsed\",\n      maximizeWindowOnNewMessage: \"maximizeWindowOnNewMessage\",\n      pollFriendsList: \"pollFriendsList\",\n      pollingInterval: \"pollingInterval\",\n      historyEnabled: \"historyEnabled\",\n      emojisEnabled: \"emojisEnabled\",\n      linkfyEnabled: \"linkfyEnabled\",\n      audioEnabled: \"audioEnabled\",\n      searchEnabled: \"searchEnabled\",\n      audioSource: \"audioSource\",\n      persistWindowsState: \"persistWindowsState\",\n      title: \"title\",\n      messagePlaceholder: \"messagePlaceholder\",\n      searchPlaceholder: \"searchPlaceholder\",\n      browserNotificationsEnabled: \"browserNotificationsEnabled\",\n      browserNotificationIconSource: \"browserNotificationIconSource\",\n      browserNotificationTitle: \"browserNotificationTitle\",\n      historyPageSize: \"historyPageSize\",\n      hideFriendsList: \"hideFriendsList\",\n      hideFriendsListOnUnsupportedViewport: \"hideFriendsListOnUnsupportedViewport\",\n      theme: \"theme\",\n      messageDatePipeFormat: \"messageDatePipeFormat\",\n      showMessageDate: \"showMessageDate\",\n      isViewportOnMobileEnabled: \"isViewportOnMobileEnabled\",\n      isDisabled: \"isDisabled\",\n      fileUploadAdapter: \"fileUploadAdapter\",\n      localization: \"localization\",\n      adapter: \"adapter\",\n      groupAdapter: \"groupAdapter\",\n      userId: \"userId\",\n      fileUploadUrl: \"fileUploadUrl\",\n      customTheme: \"customTheme\"\n    },\n    outputs: {\n      onParticipantClicked: \"onParticipantClicked\",\n      onParticipantChatOpened: \"onParticipantChatOpened\",\n      onParticipantChatClosed: \"onParticipantChatClosed\",\n      onMessagesSeen: \"onMessagesSeen\"\n    },\n    decls: 4,\n    vars: 2,\n    consts: [[\"rel\", \"stylesheet\", 3, \"href\", 4, \"ngIf\"], [\"id\", \"ng-chat\", 3, \"ngClass\", 4, \"ngIf\"], [\"rel\", \"stylesheet\", 3, \"href\"], [\"id\", \"ng-chat\", 3, \"ngClass\"], [3, \"localization\", \"shouldDisplay\", \"userId\", \"isCollapsed\", \"searchEnabled\", \"participants\", \"participantsResponse\", \"participantsInteractedWith\", \"windows\", \"currentActiveOption\", \"onParticipantClicked\", \"onOptionPromptCanceled\", \"onOptionPromptConfirmed\"], [3, \"ngClass\", \"ngStyle\", 4, \"ngFor\", \"ngForOf\"], [3, \"ngClass\", \"ngStyle\"], [3, \"fileUploadAdapter\", \"localization\", \"userId\", \"window\", \"showOptions\", \"emojisEnabled\", \"linkfyEnabled\", \"showMessageDate\", \"messageDatePipeFormat\", \"hasPagedHistory\", \"onMessagesSeen\", \"onMessageSent\", \"onTabTriggered\", \"onChatWindowClosed\", \"onOptionTriggered\", \"onLoadHistoryTriggered\"], [\"chatWindow\", \"\"]],\n    template: function NgChat_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, NgChat_link_0_Template, 2, 3, \"link\", 0);\n        ɵngcc0.ɵɵtext(1, \"\\n\\n\");\n        ɵngcc0.ɵɵtemplate(2, NgChat_div_2_Template, 7, 12, \"div\", 1);\n        ɵngcc0.ɵɵtext(3, \"\\n\");\n      }\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.customTheme);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.isDisabled && ctx.isBootstrapped && !ctx.unsupportedViewport);\n      }\n    },\n    dependencies: function () {\n      return [ɵngcc2.NgClass, ɵngcc2.NgForOf, ɵngcc2.NgIf, ɵngcc2.NgStyle, NgChatFriendsListComponent, NgChatWindowComponent, SanitizePipe];\n    },\n    styles: [\".user-icon{box-sizing:border-box;background-color:#fff;border:2px solid;width:32px;height:20px;border-radius:64px 64px 0 0/64px;margin-top:14px;margin-left:-1px;display:inline-block;vertical-align:middle;position:relative;font-style:normal;color:#ddd;text-align:left;text-indent:-9999px}.user-icon:before{border:2px solid;background-color:#fff;width:12px;height:12px;top:-19px;border-radius:50%;position:absolute;left:50%;transform:translateX(-50%)}.user-icon:after,.user-icon:before{content:\\\"\\\";pointer-events:none}.upload-icon{position:absolute;margin-left:3px;margin-top:12px;width:13px;height:4px;border:1px solid;border-top:none;border-radius:1px}.upload-icon:before{content:\\\"\\\";position:absolute;top:-8px;left:6px;width:1px;height:9px;background-color:currentColor}.upload-icon:after{content:\\\"\\\";top:-8px;left:4px;width:4px;height:4px;transform:rotate(-45deg)}.paperclip-icon,.upload-icon:after{position:absolute;border-top:1px solid;border-right:1px solid}.paperclip-icon{margin-left:9px;margin-top:2px;width:6px;height:12px;border-radius:4px 4px 0 0;border-left:1px solid;transform:rotate(45deg)}.paperclip-icon:before{top:11px;left:-1px;width:4px;height:6px;border-radius:0 0 3px 3px;border-bottom:1px solid}.paperclip-icon:after,.paperclip-icon:before{content:\\\"\\\";position:absolute;border-left:1px solid;border-right:1px solid}.paperclip-icon:after{left:1px;top:1px;width:2px;height:10px;border-radius:4px 4px 0 0;border-top:1px solid}.check-icon{margin-top:4px;width:14px;height:8px;border-bottom:1px solid;border-left:1px solid;transform:rotate(-45deg)}.check-icon,.remove-icon{color:#000;position:absolute;margin-left:3px}.remove-icon{margin-top:10px}.remove-icon:before{transform:rotate(45deg)}.remove-icon:after,.remove-icon:before{content:\\\"\\\";position:absolute;width:15px;height:1px;background-color:currentColor}.remove-icon:after{transform:rotate(-45deg)}\", \".loader,.loader:after,.loader:before{background:#e3e3e3;-webkit-animation:load1 1s ease-in-out infinite;animation:load1 1s ease-in-out infinite;width:1em;height:4em}.loader{color:#e3e3e3;text-indent:-9999em;margin:4px auto 0;position:relative;font-size:4px;transform:translateZ(0);-webkit-animation-delay:-.16s;animation-delay:-.16s}.loader:after,.loader:before{position:absolute;top:0;content:\\\"\\\"}.loader:before{left:-1.5em;-webkit-animation-delay:-.32s;animation-delay:-.32s}.loader:after{left:1.5em}@-webkit-keyframes load1{0%,80%,to{box-shadow:0 0;height:4em}40%{box-shadow:0 -2em;height:5em}}@keyframes load1{0%,80%,to{box-shadow:0 0;height:4em}40%{box-shadow:0 -2em;height:5em}}\", \"#ng-chat{position:fixed;z-index:999;right:0;bottom:0;box-sizing:content-box;box-sizing:initial;font-size:11pt;text-align:left}#ng-chat input{outline:none}#ng-chat .shadowed{box-shadow:0 4px 8px rgba(0,0,0,.25)}.ng-chat-loading-wrapper{height:30px;text-align:center;font-size:.9em}.ng-chat-close{text-decoration:none;float:right}.ng-chat-title,.ng-chat-title:hover{position:relative;z-index:2;height:30px;line-height:30px;font-size:.9em;padding:0 10px;display:block;text-decoration:none;color:inherit;font-weight:400;cursor:pointer}.ng-chat-title .ng-chat-title-visibility-toggle-area{display:inline-block;width:85%}.ng-chat-title .ng-chat-title-visibility-toggle-area>strong{font-weight:600;display:block;overflow:hidden;height:30px;text-overflow:ellipsis;white-space:nowrap;max-width:85%;float:left}.ng-chat-title .ng-chat-title-visibility-toggle-area .ng-chat-participant-status{float:left;margin-left:5px}.ng-chat-participant-status{display:inline-block;border-radius:25px;width:8px;height:8px;margin-top:10px}.ng-chat-participant-status.online{background-color:#92a400}.ng-chat-participant-status.busy{background-color:#f91c1e}.ng-chat-participant-status.away{background-color:#f7d21b}.ng-chat-participant-status.offline{background-color:#bababa}.ng-chat-unread-messages-count{margin-left:5px;padding:0 5px;border-radius:25px;font-size:.9em;line-height:30px}.ng-chat-options-container{float:right;margin-right:5px}\", \"#ng-chat.light-theme,#ng-chat.light-theme .primary-text{color:#5c5c5c;font-family:Arial,Helvetica,sans-serif}#ng-chat.light-theme .primary-background{background-color:#fff}#ng-chat.light-theme .secondary-background{background-color:#fafafa}#ng-chat.light-theme .primary-outline-color{border-color:#a3a3a3}#ng-chat.light-theme .friends-search-bar{background-color:#fff}#ng-chat.light-theme .ng-chat-people-action,#ng-chat.light-theme .ng-chat-people-action>i,#ng-chat.light-theme .unread-messages-counter-container{color:#5c5c5c;background-color:#e3e3e3}#ng-chat.light-theme .load-history-action{background-color:#e3e3e3}#ng-chat.light-theme .chat-window-input{background-color:#fff}#ng-chat.light-theme .file-message-container,#ng-chat.light-theme .sent-chat-message-container{background-color:#e3e3e3;border-color:#e3e3e3}#ng-chat.light-theme .file-message-container.received,#ng-chat.light-theme .received-chat-message-container{background-color:#fff;border-color:#e3e3e3}\", \"#ng-chat.dark-theme,#ng-chat.dark-theme .primary-text{color:#fff;font-family:Arial,Helvetica,sans-serif}#ng-chat.dark-theme .primary-background{background-color:#565656}#ng-chat.dark-theme .secondary-background{background-color:#444}#ng-chat.dark-theme .primary-outline-color{border-color:#353535}#ng-chat.dark-theme .friends-search-bar{background-color:#444;border:1px solid #444;color:#fff}#ng-chat.dark-theme .ng-chat-people-action,#ng-chat.dark-theme .ng-chat-people-action>i,#ng-chat.dark-theme .unread-messages-counter-container{background-color:#fff;color:#444}#ng-chat.dark-theme .load-history-action{background-color:#444}#ng-chat.dark-theme .chat-window-input{background-color:#444;color:#fff}#ng-chat.dark-theme .file-message-container,#ng-chat.dark-theme .sent-chat-message-container{border-color:#444;background-color:#444}#ng-chat.dark-theme .file-message-container.received,#ng-chat.dark-theme .received-chat-message-container{background-color:#565656;border-color:#444}#ng-chat.dark-theme .ng-chat-footer{background-color:#444}#ng-chat.dark-theme .ng-chat-message a{color:#fff}\"],\n    encapsulation: 2\n  });\n  return NgChat;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet emojiDictionary = [{\n  patterns: [':)', ':-)', '=)'],\n  unicode: '😃'\n}, {\n  patterns: [':D', ':-D', '=D'],\n  unicode: '😀'\n}, {\n  patterns: [':(', ':-(', '=('],\n  unicode: '🙁'\n}, {\n  patterns: [':|', ':-|', '=|'],\n  unicode: '😐'\n}, {\n  patterns: [':*', ':-*', '=*'],\n  unicode: '😙'\n}, {\n  patterns: ['T_T', 'T.T'],\n  unicode: '😭'\n}, {\n  patterns: [':O', ':-O', '=O', ':o', ':-o', '=o'],\n  unicode: '😮'\n}, {\n  patterns: [':P', ':-P', '=P', ':p', ':-p', '=p'],\n  unicode: '😋'\n}, {\n  patterns: ['>.<'],\n  unicode: '😣'\n}, {\n  patterns: ['@.@'],\n  unicode: '😵'\n}, {\n  patterns: ['*.*'],\n  unicode: '😍'\n}, {\n  patterns: ['<3'],\n  unicode: '❤️'\n}, {\n  patterns: ['^.^'],\n  unicode: '😊'\n}, {\n  patterns: [':+1'],\n  unicode: '👍'\n}, {\n  patterns: [':-1'],\n  unicode: '👎'\n}];\n/*\r\n * Transforms common emoji text to UTF encoded emojis\r\n*/\nlet EmojifyPipe = /*#__PURE__*/(() => {\n  class EmojifyPipe {\n    transform(message, pipeEnabled) {\n      if (pipeEnabled && message && message.length > 1) {\n        emojiDictionary.forEach(emoji => {\n          emoji.patterns.forEach(pattern => {\n            message = message.replace(pattern, emoji.unicode);\n          });\n        });\n      }\n      return message;\n    }\n  }\n  EmojifyPipe.ɵfac = function EmojifyPipe_Factory(t) {\n    return new (t || EmojifyPipe)();\n  };\n  EmojifyPipe.ɵpipe = /*@__PURE__*/ɵngcc0.ɵɵdefinePipe({\n    name: \"emojify\",\n    type: EmojifyPipe,\n    pure: true\n  });\n  return EmojifyPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*\r\n * Transforms text containing URLs or E-mails to valid links/mailtos\r\n*/\nlet LinkfyPipe = /*#__PURE__*/(() => {\n  class LinkfyPipe {\n    transform(message, pipeEnabled) {\n      if (pipeEnabled && message && message.length > 1) {\n        let replacedText;\n        let replacePatternProtocol;\n        let replacePatternWWW;\n        let replacePatternMailTo;\n        // URLs starting with http://, https://, or ftp://\n        replacePatternProtocol = /(\\b(https?|ftp):\\/\\/[-A-Z0-9+&@#\\/%?=~_|!:,.;]*[-A-Z0-9+&@#\\/%=~_|])/gim;\n        replacedText = message.replace(replacePatternProtocol, '<a href=\"$1\" target=\"_blank\">$1</a>');\n        // URLs starting with \"www.\" (ignoring // before it).\n        replacePatternWWW = /(^|[^\\/])(www\\.[\\S]+(\\b|$))/gim;\n        replacedText = replacedText.replace(replacePatternWWW, '$1<a href=\"http://$2\" target=\"_blank\">$2</a>');\n        // Change email addresses to mailto:: links.\n        replacePatternMailTo = /(([a-zA-Z0-9\\-\\_\\.])+@[a-zA-Z\\_]+?(\\.[a-zA-Z]{2,6})+)/gim;\n        replacedText = replacedText.replace(replacePatternMailTo, '<a href=\"mailto:$1\">$1</a>');\n        return replacedText;\n      } else return message;\n    }\n  }\n  LinkfyPipe.ɵfac = function LinkfyPipe_Factory(t) {\n    return new (t || LinkfyPipe)();\n  };\n  LinkfyPipe.ɵpipe = /*@__PURE__*/ɵngcc0.ɵɵdefinePipe({\n    name: \"linkfy\",\n    type: LinkfyPipe,\n    pure: true\n  });\n  return LinkfyPipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*\r\n * Sanitizes an URL resource\r\n*/\nlet SanitizePipe = /*#__PURE__*/(() => {\n  class SanitizePipe {\n    constructor(sanitizer) {\n      this.sanitizer = sanitizer;\n    }\n    transform(url) {\n      return this.sanitizer.bypassSecurityTrustResourceUrl(url);\n    }\n  }\n  SanitizePipe.ɵfac = function SanitizePipe_Factory(t) {\n    return new (t || SanitizePipe)(ɵngcc0.ɵɵdirectiveInject(ɵngcc3.DomSanitizer, 16));\n  };\n  SanitizePipe.ɵpipe = /*@__PURE__*/ɵngcc0.ɵɵdefinePipe({\n    name: \"sanitize\",\n    type: SanitizePipe,\n    pure: true\n  });\n  return SanitizePipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*\r\n * Renders the display name of a participant in a group based on who's sent the message\r\n*/\nlet GroupMessageDisplayNamePipe = /*#__PURE__*/(() => {\n  class GroupMessageDisplayNamePipe {\n    transform(participant, message) {\n      if (participant && participant.participantType == ChatParticipantType.Group) {\n        let group = participant;\n        let userIndex = group.chattingTo.findIndex(x => x.id == message.fromId);\n        return group.chattingTo[userIndex >= 0 ? userIndex : 0].displayName;\n      } else return \"\";\n    }\n  }\n  GroupMessageDisplayNamePipe.ɵfac = function GroupMessageDisplayNamePipe_Factory(t) {\n    return new (t || GroupMessageDisplayNamePipe)();\n  };\n  GroupMessageDisplayNamePipe.ɵpipe = /*@__PURE__*/ɵngcc0.ɵɵdefinePipe({\n    name: \"groupMessageDisplayName\",\n    type: GroupMessageDisplayNamePipe,\n    pure: true\n  });\n  return GroupMessageDisplayNamePipe;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet NgChatOptionsComponent = /*#__PURE__*/(() => {\n  class NgChatOptionsComponent {\n    constructor() {\n      this.activeOptionTrackerChange = new EventEmitter();\n    }\n    onOptionClicked(option) {\n      option.isActive = true;\n      if (option.action) {\n        option.action(option.chattingTo);\n      }\n      this.activeOptionTrackerChange.emit(option);\n    }\n  }\n  NgChatOptionsComponent.ɵfac = function NgChatOptionsComponent_Factory(t) {\n    return new (t || NgChatOptionsComponent)();\n  };\n  NgChatOptionsComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: NgChatOptionsComponent,\n    selectors: [[\"ng-chat-options\"]],\n    inputs: {\n      options: \"options\",\n      activeOptionTracker: \"activeOptionTracker\"\n    },\n    outputs: {\n      activeOptionTrackerChange: \"activeOptionTrackerChange\"\n    },\n    decls: 2,\n    vars: 1,\n    consts: [[\"class\", \"ng-chat-options\", 4, \"ngIf\"], [1, \"ng-chat-options\"], [1, \"ng-chat-options-activator\"], [1, \"primary-text\"], [1, \"ng-chat-options-content\", \"primary-background\", \"shadowed\"], [3, \"ngClass\", \"click\", 4, \"ngFor\", \"ngForOf\"], [3, \"ngClass\", \"click\"]],\n    template: function NgChatOptionsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, NgChatOptionsComponent_div_0_Template, 13, 1, \"div\", 0);\n        ɵngcc0.ɵɵtext(1, \"\\n\");\n      }\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.options && ctx.options.length > 0);\n      }\n    },\n    dependencies: [ɵngcc2.NgClass, ɵngcc2.NgForOf, ɵngcc2.NgIf],\n    styles: [\".ng-chat-options-activator[_ngcontent-%COMP%]{background-color:unset;color:#fff;line-height:28px;border:none;position:relative}.ng-chat-options-activator[_ngcontent-%COMP%] > span[_ngcontent-%COMP%]{position:relative;top:-5px;left:0}.ng-chat-options[_ngcontent-%COMP%]{position:relative;display:inline-block}.ng-chat-options[_ngcontent-%COMP%]:hover   .ng-chat-options-content[_ngcontent-%COMP%]{display:block}.ng-chat-options[_ngcontent-%COMP%]:hover   .ng-chat-options-activator[_ngcontent-%COMP%]{background-color:#ddd}.ng-chat-options-content[_ngcontent-%COMP%]{display:none;position:absolute;min-width:160px;z-index:1}.ng-chat-options-content[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]:hover{background-color:#ddd}.ng-chat-options-content[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]{padding:6px 16px;text-decoration:none;display:block}@media only screen and (max-width:581px){.ng-chat-options-content[_ngcontent-%COMP%]{right:0}}\"]\n  });\n  return NgChatOptionsComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nclass MessageCounter {\n  static formatUnreadMessagesTotal(totalUnreadMessages) {\n    if (totalUnreadMessages > 0) {\n      if (totalUnreadMessages > 99) return \"99+\";else return String(totalUnreadMessages);\n    }\n    // Empty fallback.\n    return \"\";\n  }\n  /**\r\n   * Returns a formatted string containing the total unread messages of a chat window.\r\n   * @param window The window instance to count the unread total messages.\r\n   * @param currentUserId The current chat instance user id. In this context it would be the sender.\r\n   */\n  static unreadMessagesTotal(window, currentUserId) {\n    let totalUnreadMessages = 0;\n    if (window) {\n      totalUnreadMessages = window.messages.filter(x => x.fromId != currentUserId && !x.dateSeen).length;\n    }\n    return MessageCounter.formatUnreadMessagesTotal(totalUnreadMessages);\n  }\n}\nfunction chatParticipantStatusDescriptor(status, localization) {\n  const currentStatus = ChatParticipantStatus[status].toString().toLowerCase();\n  return localization.statusDescription[currentStatus];\n}\nlet NgChatFriendsListComponent = /*#__PURE__*/(() => {\n  class NgChatFriendsListComponent {\n    constructor() {\n      this.participantsInteractedWith = [];\n      this.onParticipantClicked = new EventEmitter();\n      this.onOptionPromptCanceled = new EventEmitter();\n      this.onOptionPromptConfirmed = new EventEmitter();\n      this.selectedUsersFromFriendsList = [];\n      this.searchInput = '';\n      // Exposes enums and functions for the ng-template\n      this.ChatParticipantStatus = ChatParticipantStatus;\n      this.chatParticipantStatusDescriptor = chatParticipantStatusDescriptor;\n      this.cleanUpUserSelection = () => this.selectedUsersFromFriendsList = [];\n    }\n    ngOnChanges(changes) {\n      if (this.currentActiveOption) {\n        const currentOptionTriggeredBy = this.currentActiveOption && this.currentActiveOption.chattingTo.participant.id;\n        const isActivatedUserInSelectedList = this.selectedUsersFromFriendsList.filter(item => item.id == currentOptionTriggeredBy).length > 0;\n        if (!isActivatedUserInSelectedList) {\n          this.selectedUsersFromFriendsList = this.selectedUsersFromFriendsList.concat(this.currentActiveOption.chattingTo.participant);\n        }\n      }\n    }\n    get filteredParticipants() {\n      if (this.searchInput.length > 0) {\n        // Searches in the friend list by the inputted search string\n        return this.participants.filter(x => x.displayName.toUpperCase().includes(this.searchInput.toUpperCase()));\n      }\n      return this.participants;\n    }\n    isUserSelectedFromFriendsList(user) {\n      return this.selectedUsersFromFriendsList.filter(item => item.id == user.id).length > 0;\n    }\n    unreadMessagesTotalByParticipant(participant) {\n      let openedWindow = this.windows.find(x => x.participant.id == participant.id);\n      if (openedWindow) {\n        return MessageCounter.unreadMessagesTotal(openedWindow, this.userId);\n      } else {\n        let totalUnreadMessages = this.participantsResponse.filter(x => x.participant.id == participant.id && !this.participantsInteractedWith.find(u => u.id == participant.id) && x.metadata && x.metadata.totalUnreadMessages > 0).map(participantResponse => {\n          return participantResponse.metadata.totalUnreadMessages;\n        })[0];\n        return MessageCounter.formatUnreadMessagesTotal(totalUnreadMessages);\n      }\n    }\n    // Toggle friends list visibility\n    onChatTitleClicked() {\n      this.isCollapsed = !this.isCollapsed;\n    }\n    onFriendsListCheckboxChange(selectedUser, isChecked) {\n      if (isChecked) {\n        this.selectedUsersFromFriendsList.push(selectedUser);\n      } else {\n        this.selectedUsersFromFriendsList.splice(this.selectedUsersFromFriendsList.indexOf(selectedUser), 1);\n      }\n    }\n    onUserClick(clickedUser) {\n      this.onParticipantClicked.emit(clickedUser);\n    }\n    onFriendsListActionCancelClicked() {\n      this.onOptionPromptCanceled.emit();\n      this.cleanUpUserSelection();\n    }\n    onFriendsListActionConfirmClicked() {\n      this.onOptionPromptConfirmed.emit(this.selectedUsersFromFriendsList);\n      this.cleanUpUserSelection();\n    }\n  }\n  NgChatFriendsListComponent.ɵfac = function NgChatFriendsListComponent_Factory(t) {\n    return new (t || NgChatFriendsListComponent)();\n  };\n  NgChatFriendsListComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: NgChatFriendsListComponent,\n    selectors: [[\"ng-chat-friends-list\"]],\n    inputs: {\n      participantsInteractedWith: \"participantsInteractedWith\",\n      isCollapsed: \"isCollapsed\",\n      participants: \"participants\",\n      participantsResponse: \"participantsResponse\",\n      windows: \"windows\",\n      userId: \"userId\",\n      localization: \"localization\",\n      shouldDisplay: \"shouldDisplay\",\n      searchEnabled: \"searchEnabled\",\n      currentActiveOption: \"currentActiveOption\"\n    },\n    outputs: {\n      onParticipantClicked: \"onParticipantClicked\",\n      onOptionPromptCanceled: \"onOptionPromptCanceled\",\n      onOptionPromptConfirmed: \"onOptionPromptConfirmed\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[\"id\", \"ng-chat-people\", 3, \"ngClass\", 4, \"ngIf\"], [\"id\", \"ng-chat-people\", 3, \"ngClass\"], [\"href\", \"javascript:void(0);\", 1, \"ng-chat-title\", \"secondary-background\", \"shadowed\", 3, \"click\"], [\"class\", \"ng-chat-people-actions\", 3, \"click\", 4, \"ngIf\"], [\"id\", \"ng-chat-search_friend\", \"class\", \"friends-search-bar\", \"type\", \"search\", 3, \"placeholder\", \"ngModel\", \"ngModelChange\", 4, \"ngIf\"], [\"id\", \"ng-chat-users\", 3, \"ngClass\", 4, \"ngIf\"], [1, \"ng-chat-people-actions\", 3, \"click\"], [\"href\", \"javascript:void(0);\", 1, \"ng-chat-people-action\"], [1, \"remove-icon\"], [\"href\", \"javascript:void(0);\", 1, \"ng-chat-people-action\", 3, \"click\"], [1, \"check-icon\"], [\"id\", \"ng-chat-search_friend\", \"type\", \"search\", 1, \"friends-search-bar\", 3, \"placeholder\", \"ngModel\", \"ngModelChange\"], [\"id\", \"ng-chat-users\", 3, \"ngClass\"], [4, \"ngFor\", \"ngForOf\"], [\"type\", \"checkbox\", \"class\", \"ng-chat-users-checkbox\", 3, \"checked\", \"change\", 4, \"ngIf\"], [3, \"ngClass\", \"click\"], [\"class\", \"icon-wrapper\", 4, \"ngIf\"], [\"alt\", \"\", \"class\", \"avatar\", \"height\", \"30\", \"width\", \"30\", 3, \"src\", 4, \"ngIf\"], [3, \"title\"], [3, \"ngClass\", \"title\"], [\"class\", \"ng-chat-unread-messages-count unread-messages-counter-container primary-text\", 4, \"ngIf\"], [\"type\", \"checkbox\", 1, \"ng-chat-users-checkbox\", 3, \"checked\", \"change\"], [1, \"icon-wrapper\"], [1, \"user-icon\"], [\"alt\", \"\", \"height\", \"30\", \"width\", \"30\", 1, \"avatar\", 3, \"src\"], [1, \"ng-chat-unread-messages-count\", \"unread-messages-counter-container\", \"primary-text\"]],\n    template: function NgChatFriendsListComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, NgChatFriendsListComponent_div_0_Template, 14, 7, \"div\", 0);\n      }\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.shouldDisplay);\n      }\n    },\n    dependencies: [ɵngcc2.NgClass, ɵngcc2.NgForOf, ɵngcc2.NgIf, ɵngcc4.DefaultValueAccessor, ɵngcc4.NgControlStatus, ɵngcc4.NgModel, SanitizePipe],\n    styles: [\"#ng-chat-people{position:relative;width:240px;height:360px;border-width:1px;border-style:solid;margin-right:20px;box-shadow:0 4px 8px rgba(0,0,0,.25);border-bottom:0}#ng-chat-people.ng-chat-people-collapsed{height:30px}#ng-chat-search_friend{display:block;padding:7px 10px;width:calc(100% - 20px);margin:10px auto 0;font-size:.9em;-webkit-appearance:searchfield}#ng-chat-users{padding:0 10px;list-style:none;margin:0;overflow:auto;position:absolute;top:42px;bottom:0;width:100%;box-sizing:border-box}#ng-chat-users.offset-search{top:84px}#ng-chat-users .ng-chat-users-checkbox{float:left;margin-right:5px;margin-top:8px}#ng-chat-users li{clear:both;margin-bottom:10px;overflow:hidden;cursor:pointer;max-height:30px}#ng-chat-users li>.ng-chat-friends-list-selectable-offset{margin-left:22px}#ng-chat-users li .ng-chat-friends-list-container{display:inline-block;width:100%}#ng-chat-users li>.ng-chat-friends-list-selectable-offset.ng-chat-friends-list-container{display:block;width:auto}#ng-chat-users li .ng-chat-friends-list-container>.icon-wrapper,#ng-chat-users li .ng-chat-friends-list-container>img.avatar{float:left;margin-right:5px;border-radius:25px}#ng-chat-users li .ng-chat-friends-list-container>.icon-wrapper{background-color:#bababa;overflow:hidden;width:30px;height:30px}#ng-chat-users li .ng-chat-friends-list-container>.icon-wrapper>i{color:#fff;transform:scale(.7)}#ng-chat-users li .ng-chat-friends-list-container>strong{float:left;line-height:30px;font-size:.8em;max-width:57%;max-height:30px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}#ng-chat-users li .ng-chat-friends-list-container>.ng-chat-participant-status{float:right}.ng-chat-people-actions{position:absolute;top:4px;right:5px;margin:0;padding:0;z-index:2}.ng-chat-people-actions>a.ng-chat-people-action{display:inline-block;width:21px;height:21px;margin-right:8px;text-decoration:none;border:none;border-radius:25px;padding:1px}@media only screen and (max-width:581px){#ng-chat-people{width:300px;height:360px;margin-right:0}}\"],\n    encapsulation: 2\n  });\n  return NgChatFriendsListComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet NgChatWindowComponent = /*#__PURE__*/(() => {\n  class NgChatWindowComponent {\n    constructor() {\n      this.emojisEnabled = true;\n      this.linkfyEnabled = true;\n      this.showMessageDate = true;\n      this.messageDatePipeFormat = \"short\";\n      this.hasPagedHistory = true;\n      this.onChatWindowClosed = new EventEmitter();\n      this.onMessagesSeen = new EventEmitter();\n      this.onMessageSent = new EventEmitter();\n      this.onTabTriggered = new EventEmitter();\n      this.onOptionTriggered = new EventEmitter();\n      this.onLoadHistoryTriggered = new EventEmitter();\n      // File upload state\n      this.fileUploadersInUse = []; // Id bucket of uploaders in use\n      // Exposes enums and functions for the ng-template\n      this.ChatParticipantType = ChatParticipantType;\n      this.ChatParticipantStatus = ChatParticipantStatus;\n      this.MessageType = MessageType;\n      this.chatParticipantStatusDescriptor = chatParticipantStatusDescriptor;\n    }\n    defaultWindowOptions(currentWindow) {\n      if (this.showOptions && currentWindow.participant.participantType == ChatParticipantType.User) {\n        return [{\n          isActive: false,\n          chattingTo: currentWindow,\n          validateContext: participant => {\n            return participant.participantType == ChatParticipantType.User;\n          },\n          displayLabel: 'Add People' // TODO: Localize this\n        }];\n      }\n\n      return [];\n    }\n    // Asserts if a user avatar is visible in a chat cluster\n    isAvatarVisible(window, message, index) {\n      if (message.fromId != this.userId) {\n        if (index == 0) {\n          return true; // First message, good to show the thumbnail\n        } else {\n          // Check if the previous message belongs to the same user, if it belongs there is no need to show the avatar again to form the message cluster\n          if (window.messages[index - 1].fromId != message.fromId) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n    getChatWindowAvatar(participant, message) {\n      if (participant.participantType == ChatParticipantType.User) {\n        return participant.avatar;\n      } else if (participant.participantType == ChatParticipantType.Group) {\n        let group = participant;\n        let userIndex = group.chattingTo.findIndex(x => x.id == message.fromId);\n        return group.chattingTo[userIndex >= 0 ? userIndex : 0].avatar;\n      }\n      return null;\n    }\n    isUploadingFile(window) {\n      const fileUploadInstanceId = this.getUniqueFileUploadInstanceId(window);\n      return this.fileUploadersInUse.indexOf(fileUploadInstanceId) > -1;\n    }\n    // Generates a unique file uploader id for each participant\n    getUniqueFileUploadInstanceId(window) {\n      if (window && window.participant) {\n        return `ng-chat-file-upload-${window.participant.id}`;\n      }\n      return 'ng-chat-file-upload';\n    }\n    unreadMessagesTotal(window) {\n      return MessageCounter.unreadMessagesTotal(window, this.userId);\n    }\n    // Scrolls a chat window message flow to the bottom\n    scrollChatWindow(window, direction) {\n      if (!window.isCollapsed) {\n        setTimeout(() => {\n          if (this.chatMessages) {\n            let element = this.chatMessages.nativeElement;\n            let position = direction === ScrollDirection.Top ? 0 : element.scrollHeight;\n            element.scrollTop = position;\n          }\n        });\n      }\n    }\n    activeOptionTrackerChange(option) {\n      this.onOptionTriggered.emit(option);\n    }\n    // Triggers native file upload for file selection from the user\n    triggerNativeFileUpload(window) {\n      if (window) {\n        if (this.nativeFileInput) this.nativeFileInput.nativeElement.click();\n      }\n    }\n    // Toggles a window focus on the focus/blur of a 'newMessage' input\n    toggleWindowFocus(window) {\n      window.hasFocus = !window.hasFocus;\n      if (window.hasFocus) {\n        const unreadMessages = window.messages.filter(message => message.dateSeen == null && (message.toId == this.userId || window.participant.participantType === ChatParticipantType.Group));\n        if (unreadMessages && unreadMessages.length > 0) {\n          this.onMessagesSeen.emit(unreadMessages);\n        }\n      }\n    }\n    markMessagesAsRead(messages) {\n      this.onMessagesSeen.emit(messages);\n    }\n    fetchMessageHistory(window) {\n      this.onLoadHistoryTriggered.emit(window);\n    }\n    // Closes a chat window via the close 'X' button\n    onCloseChatWindow() {\n      this.onChatWindowClosed.emit({\n        closedWindow: this.window,\n        closedViaEscapeKey: false\n      });\n    }\n    /*  Monitors pressed keys on a chat window\r\n        - Dispatches a message when the ENTER key is pressed\r\n        - Tabs between windows on TAB or SHIFT + TAB\r\n        - Closes the current focused window on ESC\r\n    */\n    onChatInputTyped(event, window) {\n      switch (event.keyCode) {\n        case 13:\n          if (window.newMessage && window.newMessage.trim() != \"\") {\n            let message = new Message();\n            message.fromId = this.userId;\n            message.toId = window.participant.id;\n            message.message = window.newMessage;\n            message.dateSent = new Date();\n            window.messages.push(message);\n            this.onMessageSent.emit(message);\n            window.newMessage = \"\"; // Resets the new message input\n            this.scrollChatWindow(window, ScrollDirection.Bottom);\n          }\n          break;\n        case 9:\n          event.preventDefault();\n          this.onTabTriggered.emit({\n            triggeringWindow: window,\n            shiftKeyPressed: event.shiftKey\n          });\n          break;\n        case 27:\n          this.onChatWindowClosed.emit({\n            closedWindow: window,\n            closedViaEscapeKey: true\n          });\n          break;\n      }\n    }\n    // Toggles a chat window visibility between maximized/minimized\n    onChatWindowClicked(window) {\n      window.isCollapsed = !window.isCollapsed;\n      this.scrollChatWindow(window, ScrollDirection.Bottom);\n    }\n    clearInUseFileUploader(fileUploadInstanceId) {\n      const uploaderInstanceIdIndex = this.fileUploadersInUse.indexOf(fileUploadInstanceId);\n      if (uploaderInstanceIdIndex > -1) {\n        this.fileUploadersInUse.splice(uploaderInstanceIdIndex, 1);\n      }\n    }\n    // Handles file selection and uploads the selected file using the file upload adapter\n    onFileChosen(window) {\n      const fileUploadInstanceId = this.getUniqueFileUploadInstanceId(window);\n      const uploadElementRef = this.nativeFileInput;\n      if (uploadElementRef) {\n        const file = uploadElementRef.nativeElement.files[0];\n        this.fileUploadersInUse.push(fileUploadInstanceId);\n        this.fileUploadAdapter.uploadFile(file, window.participant.id).subscribe(fileMessage => {\n          this.clearInUseFileUploader(fileUploadInstanceId);\n          fileMessage.fromId = this.userId;\n          // Push file message to current user window   \n          window.messages.push(fileMessage);\n          this.onMessageSent.emit(fileMessage);\n          this.scrollChatWindow(window, ScrollDirection.Bottom);\n          // Resets the file upload element\n          uploadElementRef.nativeElement.value = '';\n        }, error => {\n          this.clearInUseFileUploader(fileUploadInstanceId);\n          // Resets the file upload element\n          uploadElementRef.nativeElement.value = '';\n          // TODO: Invoke a file upload adapter error here\n        });\n      }\n    }\n  }\n\n  NgChatWindowComponent.ɵfac = function NgChatWindowComponent_Factory(t) {\n    return new (t || NgChatWindowComponent)();\n  };\n  NgChatWindowComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: NgChatWindowComponent,\n    selectors: [[\"ng-chat-window\"]],\n    viewQuery: function NgChatWindowComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c7, 5);\n        ɵngcc0.ɵɵviewQuery(_c8, 5);\n        ɵngcc0.ɵɵviewQuery(_c9, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.chatMessages = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.nativeFileInput = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.chatWindowInput = _t.first);\n      }\n    },\n    inputs: {\n      emojisEnabled: \"emojisEnabled\",\n      linkfyEnabled: \"linkfyEnabled\",\n      showMessageDate: \"showMessageDate\",\n      messageDatePipeFormat: \"messageDatePipeFormat\",\n      hasPagedHistory: \"hasPagedHistory\",\n      fileUploadAdapter: \"fileUploadAdapter\",\n      window: \"window\",\n      userId: \"userId\",\n      localization: \"localization\",\n      showOptions: \"showOptions\"\n    },\n    outputs: {\n      onChatWindowClosed: \"onChatWindowClosed\",\n      onMessagesSeen: \"onMessagesSeen\",\n      onMessageSent: \"onMessageSent\",\n      onTabTriggered: \"onTabTriggered\",\n      onOptionTriggered: \"onOptionTriggered\",\n      onLoadHistoryTriggered: \"onLoadHistoryTriggered\"\n    },\n    decls: 4,\n    vars: 2,\n    consts: [[4, \"ngIf\"], [1, \"ng-chat-title\", \"secondary-background\"], [1, \"ng-chat-title-visibility-toggle-area\", 3, \"click\"], [3, \"title\"], [3, \"ngClass\", \"title\"], [\"class\", \"ng-chat-unread-messages-count unread-messages-counter-container primary-text\", 4, \"ngIf\"], [\"href\", \"javascript:void(0);\", 1, \"ng-chat-close\", \"primary-text\", 3, \"click\"], [1, \"ng-chat-unread-messages-count\", \"unread-messages-counter-container\", \"primary-text\"], [3, \"ngClass\", \"options\", \"activeOptionTrackerChange\"], [1, \"ng-chat-messages\", \"primary-background\"], [\"chatMessages\", \"\"], [\"class\", \"ng-chat-loading-wrapper\", 4, \"ngIf\"], [\"class\", \"ng-chat-load-history\", 4, \"ngIf\"], [3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [1, \"ng-chat-footer\", \"primary-outline-color\", \"primary-background\"], [\"type\", \"text\", 3, \"ngModel\", \"placeholder\", \"ngClass\", \"ngModelChange\", \"keydown\", \"blur\", \"focus\"], [\"chatWindowInput\", \"\"], [1, \"ng-chat-loading-wrapper\"], [1, \"loader\"], [1, \"ng-chat-load-history\"], [1, \"load-history-action\", 3, \"click\"], [3, \"ngClass\"], [3, \"ngSwitch\"], [3, \"ngClass\", 4, \"ngSwitchCase\"], [\"class\", \"icon-wrapper\", 4, \"ngIf\"], [\"alt\", \"\", \"class\", \"avatar\", \"height\", \"30\", \"width\", \"30\", 3, \"src\", 4, \"ngIf\"], [\"class\", \"ng-chat-participant-name\", 4, \"ngIf\"], [1, \"icon-wrapper\"], [1, \"user-icon\"], [\"alt\", \"\", \"height\", \"30\", \"width\", \"30\", 1, \"avatar\", 3, \"src\"], [1, \"ng-chat-participant-name\"], [3, \"innerHtml\"], [\"class\", \"message-sent-date\", 4, \"ngIf\"], [1, \"message-sent-date\"], [1, \"image-message\", 3, \"src\"], [1, \"file-message-icon-container\"], [1, \"paperclip-icon\"], [\"target\", \"_blank\", \"rel\", \"noopener noreferrer\", \"download\", \"\", 1, \"file-details\", 3, \"click\"], [1, \"file-message-title\"], [\"class\", \"file-message-size\", 4, \"ngIf\"], [1, \"file-message-size\"], [\"class\", \"btn-add-file\", 3, \"click\", 4, \"ngIf\"], [\"type\", \"file\", 2, \"display\", \"none\", 3, \"change\"], [\"nativeFileInput\", \"\"], [\"class\", \"loader\", 4, \"ngIf\"], [1, \"btn-add-file\", 3, \"click\"], [1, \"upload-icon\"]],\n    template: function NgChatWindowComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, NgChatWindowComponent_ng_container_0_Template, 18, 10, \"ng-container\", 0);\n        ɵngcc0.ɵɵtext(1, \"\\n\");\n        ɵngcc0.ɵɵtemplate(2, NgChatWindowComponent_ng_container_2_Template, 40, 24, \"ng-container\", 0);\n        ɵngcc0.ɵɵtext(3, \"\\n\");\n      }\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.window && ctx.window.isCollapsed);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.window && !ctx.window.isCollapsed);\n      }\n    },\n    dependencies: [ɵngcc2.NgClass, ɵngcc2.NgForOf, ɵngcc2.NgIf, ɵngcc2.NgSwitch, ɵngcc2.NgSwitchCase, ɵngcc4.DefaultValueAccessor, ɵngcc4.NgControlStatus, ɵngcc4.NgModel, NgChatOptionsComponent, ɵngcc2.DatePipe, EmojifyPipe, LinkfyPipe, SanitizePipe, GroupMessageDisplayNamePipe],\n    styles: [\".ng-chat-window{right:260px;height:360px;z-index:999;bottom:0;width:300px;position:fixed;border-width:1px;border-style:solid;border-bottom:0;box-shadow:0 4px 8px rgba(0,0,0,.25)}.ng-chat-window-collapsed{height:30px!important}.ng-chat-window .ng-chat-footer{box-sizing:border-box;padding:0;display:block;height:calc(10%);width:100%;border:none;border-top:1px solid transparent;border-color:inherit}.ng-chat-window .ng-chat-footer>input{font-size:.8em;box-sizing:border-box;padding:0 5px;display:block;height:100%;width:100%;border:none}.ng-chat-window .ng-chat-footer>input.has-side-action{width:calc(100% - 30px)}.ng-chat-window .ng-chat-footer .btn-add-file{position:absolute;right:5px;bottom:7px;height:20px;width:20px;cursor:pointer}.ng-chat-window .ng-chat-footer .loader{position:absolute;right:14px;bottom:8px}.ng-chat-window .ng-chat-load-history{height:30px;text-align:center;font-size:.8em}.ng-chat-window .ng-chat-load-history>a{border-radius:15px;cursor:pointer;padding:5px 10px}.ng-chat-window .ng-chat-messages{padding:10px;width:100%;height:calc(90% - 30px);box-sizing:border-box;position:relative;overflow:auto}.ng-chat-window .ng-chat-messages .ng-chat-message{clear:both}.ng-chat-window .ng-chat-messages .ng-chat-message>.icon-wrapper,.ng-chat-window .ng-chat-messages .ng-chat-message>img.avatar{position:absolute;left:10px;border-radius:25px}.ng-chat-window .ng-chat-messages .ng-chat-message .ng-chat-participant-name{display:inline-block;margin-left:40px;padding-bottom:5px;font-weight:700;font-size:.8em;text-overflow:ellipsis;max-width:180px}.ng-chat-window .ng-chat-messages .ng-chat-message>.icon-wrapper{background-color:#bababa;overflow:hidden;width:30px;height:30px;padding:0}.ng-chat-window .ng-chat-messages .ng-chat-message>.icon-wrapper>i{color:#fff;transform:scale(.7)}.ng-chat-window .ng-chat-messages .ng-chat-message .message-sent-date{font-size:.8em;display:block;text-align:right;margin-top:5px}.ng-chat-window .ng-chat-messages .ng-chat-message>div{float:right;width:182px;border-radius:5px;padding:10px;margin-top:0;margin-bottom:5px;font-size:.9em;word-wrap:break-word}.ng-chat-window .ng-chat-messages .ng-chat-message.ng-chat-message-received>div.received-chat-message-container{float:left;margin-left:40px;padding-top:7px;padding-bottom:7px;border-style:solid;border-width:3px;margin-top:0;margin-bottom:5px}.ng-chat-window .ng-chat-messages .ng-chat-message .file-message-container{float:right;width:202px;border-style:solid;border-width:3px;border-radius:5px;overflow:hidden;margin-bottom:5px;display:block;text-decoration:none;font-size:.9em;padding:0;box-sizing:border-box}.ng-chat-window .ng-chat-messages .ng-chat-message .file-message-container.received{float:left;margin-left:40px;width:208px}.ng-chat-window .ng-chat-messages .ng-chat-message .file-message-container>.file-message-icon-container{width:20px;height:35px;padding:10px 5px;float:left}.ng-chat-window .ng-chat-messages .ng-chat-message .file-message-container>.file-message-icon-container i{margin-top:8px}.ng-chat-window .ng-chat-messages .ng-chat-message .file-message-container>.file-details{float:left;padding:10px;width:calc(100% - 60px);color:currentColor;text-decoration:none}.ng-chat-window .ng-chat-messages .ng-chat-message .file-message-container>.file-details:hover{text-decoration:underline}.ng-chat-window .ng-chat-messages .ng-chat-message .file-message-container>.file-details span{display:block;width:100%;text-overflow:ellipsis;overflow:hidden;white-space:nowrap}.ng-chat-window .ng-chat-messages .ng-chat-message .file-message-container>.file-details .file-message-title{font-weight:700}.ng-chat-window .ng-chat-messages .ng-chat-message .file-message-container>.file-details .file-message-size{font-size:.8em;margin-top:5px}.ng-chat-window .image-message{width:100%;height:auto}@media only screen and (max-width:581px){.ng-chat-window{position:static}}\"],\n    encapsulation: 2\n  });\n  return NgChatWindowComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet NgChatModule = /*#__PURE__*/(() => {\n  class NgChatModule {}\n  NgChatModule.ɵfac = function NgChatModule_Factory(t) {\n    return new (t || NgChatModule)();\n  };\n  NgChatModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: NgChatModule\n  });\n  NgChatModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [CommonModule, FormsModule, HttpClientModule]\n  });\n  return NgChatModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgChatModule, {\n    declarations: function () {\n      return [NgChat, EmojifyPipe, LinkfyPipe, SanitizePipe, GroupMessageDisplayNamePipe, NgChatOptionsComponent, NgChatFriendsListComponent, NgChatWindowComponent];\n    },\n    imports: function () {\n      return [CommonModule, FormsModule, HttpClientModule];\n    },\n    exports: function () {\n      return [NgChat];\n    }\n  });\n})();\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { ChatAdapter, ChatParticipantStatus, ChatParticipantType, Group, Message, MessageType, NgChatModule, PagedHistoryChatAdapter, ParticipantMetadata, ParticipantResponse, Theme, User, Window, NgChat as ɵa, EmojifyPipe as ɵb, LinkfyPipe as ɵc, SanitizePipe as ɵd, GroupMessageDisplayNamePipe as ɵe, NgChatOptionsComponent as ɵf, NgChatFriendsListComponent as ɵg, NgChatWindowComponent as ɵh };\n\n//# sourceMappingURL=ng-chat.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}