{"ast":null,"code":"import _defineProperty from \"/home/ceo/mmmm/createyourevent/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\nimport { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getFeeTransactionIdentifier } from '../fee-transaction.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport class FeeTransactionService {\n  constructor(http, applicationConfigService) {\n    _defineProperty(this, \"http\", void 0);\n    _defineProperty(this, \"applicationConfigService\", void 0);\n    _defineProperty(this, \"resourceUrl\", this.applicationConfigService.getEndpointFor('api/fee-transactions'));\n    this.http = http;\n    this.applicationConfigService = applicationConfigService;\n  }\n  create(feeTransaction) {\n    const copy = this.convertDateFromClient(feeTransaction);\n    return this.http.post(this.resourceUrl, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  update(feeTransaction) {\n    const copy = this.convertDateFromClient(feeTransaction);\n    return this.http.put(`${this.resourceUrl}/${getFeeTransactionIdentifier(feeTransaction)}`, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  partialUpdate(feeTransaction) {\n    const copy = this.convertDateFromClient(feeTransaction);\n    return this.http.patch(`${this.resourceUrl}/${getFeeTransactionIdentifier(feeTransaction)}`, copy, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  find(id) {\n    return this.http.get(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    }).pipe(map(res => this.convertDateFromServer(res)));\n  }\n  query(req) {\n    const options = createRequestOption(req);\n    return this.http.get(this.resourceUrl, {\n      params: options,\n      observe: 'response'\n    }).pipe(map(res => this.convertDateArrayFromServer(res)));\n  }\n  delete(id) {\n    return this.http.delete(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  addFeeTransactionToCollectionIfMissing(feeTransactionCollection, ...feeTransactionsToCheck) {\n    const feeTransactions = feeTransactionsToCheck.filter(isPresent);\n    if (feeTransactions.length > 0) {\n      const feeTransactionCollectionIdentifiers = feeTransactionCollection.map(feeTransactionItem => getFeeTransactionIdentifier(feeTransactionItem));\n      const feeTransactionsToAdd = feeTransactions.filter(feeTransactionItem => {\n        const feeTransactionIdentifier = getFeeTransactionIdentifier(feeTransactionItem);\n        if (feeTransactionIdentifier == null || feeTransactionCollectionIdentifiers.includes(feeTransactionIdentifier)) {\n          return false;\n        }\n        feeTransactionCollectionIdentifiers.push(feeTransactionIdentifier);\n        return true;\n      });\n      return [...feeTransactionsToAdd, ...feeTransactionCollection];\n    }\n    return feeTransactionCollection;\n  }\n  convertDateFromClient(feeTransaction) {\n    return Object.assign({}, feeTransaction, {\n      date: feeTransaction.date?.isValid() ? feeTransaction.date.toJSON() : undefined\n    });\n  }\n  convertDateFromServer(res) {\n    if (res.body) {\n      res.body.date = res.body.date ? dayjs(res.body.date) : undefined;\n    }\n    return res;\n  }\n  convertDateArrayFromServer(res) {\n    if (res.body) {\n      res.body.forEach(feeTransaction => {\n        feeTransaction.date = feeTransaction.date ? dayjs(feeTransaction.date) : undefined;\n      });\n    }\n    return res;\n  }\n}\n_defineProperty(FeeTransactionService, \"\\u0275fac\", function FeeTransactionService_Factory(t) {\n  return new (t || FeeTransactionService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n});\n_defineProperty(FeeTransactionService, \"\\u0275prov\", /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FeeTransactionService,\n  factory: FeeTransactionService.ɵfac,\n  providedIn: 'root'\n}));","map":{"version":3,"mappings":"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","names":["map","dayjs","isPresent","createRequestOption","getFeeTransactionIdentifier","FeeTransactionService","constructor","http","applicationConfigService","getEndpointFor","create","feeTransaction","copy","convertDateFromClient","post","resourceUrl","observe","pipe","res","convertDateFromServer","update","put","partialUpdate","patch","find","id","get","query","req","options","params","convertDateArrayFromServer","delete","addFeeTransactionToCollectionIfMissing","feeTransactionCollection","feeTransactionsToCheck","feeTransactions","filter","length","feeTransactionCollectionIdentifiers","feeTransactionItem","feeTransactionsToAdd","feeTransactionIdentifier","includes","push","Object","assign","date","isValid","toJSON","undefined","body","forEach","factory","providedIn"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/entities/fee-transaction/service/fee-transaction.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as dayjs from 'dayjs';\n\nimport { isPresent } from 'app/core/util/operators';\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { IFeeTransaction, getFeeTransactionIdentifier } from '../fee-transaction.model';\n\nexport type EntityResponseType = HttpResponse<IFeeTransaction>;\nexport type EntityArrayResponseType = HttpResponse<IFeeTransaction[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class FeeTransactionService {\n  protected resourceUrl = this.applicationConfigService.getEndpointFor('api/fee-transactions');\n\n  constructor(protected http: HttpClient, protected applicationConfigService: ApplicationConfigService) {}\n\n  create(feeTransaction: IFeeTransaction): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(feeTransaction);\n    return this.http\n      .post<IFeeTransaction>(this.resourceUrl, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  update(feeTransaction: IFeeTransaction): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(feeTransaction);\n    return this.http\n      .put<IFeeTransaction>(`${this.resourceUrl}/${getFeeTransactionIdentifier(feeTransaction) as number}`, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  partialUpdate(feeTransaction: IFeeTransaction): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(feeTransaction);\n    return this.http\n      .patch<IFeeTransaction>(`${this.resourceUrl}/${getFeeTransactionIdentifier(feeTransaction) as number}`, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  find(id: number): Observable<EntityResponseType> {\n    return this.http\n      .get<IFeeTransaction>(`${this.resourceUrl}/${id}`, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  query(req?: any): Observable<EntityArrayResponseType> {\n    const options = createRequestOption(req);\n    return this.http\n      .get<IFeeTransaction[]>(this.resourceUrl, { params: options, observe: 'response' })\n      .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n  }\n\n  delete(id: number): Observable<HttpResponse<{}>> {\n    return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  addFeeTransactionToCollectionIfMissing(\n    feeTransactionCollection: IFeeTransaction[],\n    ...feeTransactionsToCheck: (IFeeTransaction | null | undefined)[]\n  ): IFeeTransaction[] {\n    const feeTransactions: IFeeTransaction[] = feeTransactionsToCheck.filter(isPresent);\n    if (feeTransactions.length > 0) {\n      const feeTransactionCollectionIdentifiers = feeTransactionCollection.map(\n        feeTransactionItem => getFeeTransactionIdentifier(feeTransactionItem)!\n      );\n      const feeTransactionsToAdd = feeTransactions.filter(feeTransactionItem => {\n        const feeTransactionIdentifier = getFeeTransactionIdentifier(feeTransactionItem);\n        if (feeTransactionIdentifier == null || feeTransactionCollectionIdentifiers.includes(feeTransactionIdentifier)) {\n          return false;\n        }\n        feeTransactionCollectionIdentifiers.push(feeTransactionIdentifier);\n        return true;\n      });\n      return [...feeTransactionsToAdd, ...feeTransactionCollection];\n    }\n    return feeTransactionCollection;\n  }\n\n  protected convertDateFromClient(feeTransaction: IFeeTransaction): IFeeTransaction {\n    return Object.assign({}, feeTransaction, {\n      date: feeTransaction.date?.isValid() ? feeTransaction.date.toJSON() : undefined,\n    });\n  }\n\n  protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\n    if (res.body) {\n      res.body.date = res.body.date ? dayjs(res.body.date) : undefined;\n    }\n    return res;\n  }\n\n  protected convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\n    if (res.body) {\n      res.body.forEach((feeTransaction: IFeeTransaction) => {\n        feeTransaction.date = feeTransaction.date ? dayjs(feeTransaction.date) : undefined;\n      });\n    }\n    return res;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}