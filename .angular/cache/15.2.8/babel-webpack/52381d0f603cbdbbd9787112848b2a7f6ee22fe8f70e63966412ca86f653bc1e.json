{"ast":null,"code":"import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceStringArray } from '@angular/cdk/coercion';\nimport { Platform, _getEventTarget } from '@angular/cdk/platform';\nimport { InjectionToken, EventEmitter, Directive, ChangeDetectorRef, ElementRef, Inject, ViewChild, TemplateRef, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, forwardRef, ViewContainerRef, NgZone, Optional, Host, NgModule } from '@angular/core';\nimport { mixinDisableRipple, MAT_OPTION_PARENT_COMPONENT, MAT_OPTGROUP, MatOption, MatOptionSelectionChange, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { Subscription, Subject, defer, merge, of, fromEvent } from 'rxjs';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ESCAPE, hasModifierKey, ENTER, UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatFormField, MAT_FORM_FIELD } from '@angular/material/form-field';\nimport { take, switchMap, filter, map, tap, delay } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/common';\nimport * as ɵngcc3 from '@angular/cdk/overlay';\nimport * as ɵngcc4 from '@angular/cdk/bidi';\nimport * as ɵngcc5 from '@angular/cdk/scrolling';\nimport * as ɵngcc6 from '@angular/material/form-field';\nconst _c0 = [\"panel\"];\nfunction MatAutocomplete_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtext(0, \"\\n  \");\n    ɵngcc0.ɵɵelementStart(1, \"div\", 0, 1);\n    ɵngcc0.ɵɵtext(3, \"\\n    \");\n    ɵngcc0.ɵɵprojection(4);\n    ɵngcc0.ɵɵtext(5, \"\\n  \");\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtext(6, \"\\n\");\n  }\n  if (rf & 2) {\n    const formFieldId_r1 = ctx.id;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r0.id)(\"ngClass\", ctx_r0._classList);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r0.ariaLabel || null)(\"aria-labelledby\", ctx_r0._getPanelAriaLabelledby(formFieldId_r1));\n  }\n}\nconst _c1 = [\"*\"];\nlet _uniqueAutocompleteIdCounter = 0;\n/** Event object that is emitted when an autocomplete option is selected. */\nclass MatAutocompleteSelectedEvent {\n  constructor( /** Reference to the autocomplete panel that emitted the event. */\n  source, /** Option that was selected. */\n  option) {\n    this.source = source;\n    this.option = option;\n  }\n}\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nconst _MatAutocompleteMixinBase = mixinDisableRipple(class {});\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n  providedIn: 'root',\n  factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    autoActiveFirstOption: false\n  };\n}\n/** Base class with all of the `MatAutocomplete` functionality. */\nclass _MatAutocompleteBase extends _MatAutocompleteMixinBase {\n  constructor(_changeDetectorRef, _elementRef, defaults, platform) {\n    super();\n    this._changeDetectorRef = _changeDetectorRef;\n    this._elementRef = _elementRef;\n    this._activeOptionChanges = Subscription.EMPTY;\n    /** Whether the autocomplete panel should be visible, depending on option length. */\n    this.showPanel = false;\n    this._isOpen = false;\n    /** Function that maps an option's control value to its display value in the trigger. */\n    this.displayWith = null;\n    /** Event that is emitted whenever an option from the list is selected. */\n    this.optionSelected = new EventEmitter();\n    /** Event that is emitted when the autocomplete panel is opened. */\n    this.opened = new EventEmitter();\n    /** Event that is emitted when the autocomplete panel is closed. */\n    this.closed = new EventEmitter();\n    /** Emits whenever an option is activated using the keyboard. */\n    this.optionActivated = new EventEmitter();\n    this._classList = {};\n    /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n    this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n    // TODO(crisbeto): the problem that the `inertGroups` option resolves is only present on\n    // Safari using VoiceOver. We should occasionally check back to see whether the bug\n    // wasn't resolved in VoiceOver, and if it has, we can remove this and the `inertGroups`\n    // option altogether.\n    this.inertGroups = (platform === null || platform === void 0 ? void 0 : platform.SAFARI) || false;\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n  /** Whether the autocomplete panel is open. */\n  get isOpen() {\n    return this._isOpen && this.showPanel;\n  }\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  get autoActiveFirstOption() {\n    return this._autoActiveFirstOption;\n  }\n  set autoActiveFirstOption(value) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  set classList(value) {\n    if (value && value.length) {\n      this._classList = coerceStringArray(value).reduce((classList, className) => {\n        classList[className] = true;\n        return classList;\n      }, {});\n    } else {\n      this._classList = {};\n    }\n    this._setVisibilityClasses(this._classList);\n    this._elementRef.nativeElement.className = '';\n  }\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n    this._activeOptionChanges = this._keyManager.change.subscribe(index => {\n      if (this.isOpen) {\n        this.optionActivated.emit({\n          source: this,\n          option: this.options.toArray()[index] || null\n        });\n      }\n    });\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n  ngOnDestroy() {\n    this._activeOptionChanges.unsubscribe();\n  }\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop) {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n  /** Returns the panel's scrollTop. */\n  _getScrollTop() {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._setVisibilityClasses(this._classList);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** Emits the `select` event. */\n  _emitSelectEvent(option) {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n  /** Gets the aria-labelledby for the autocomplete panel. */\n  _getPanelAriaLabelledby(labelId) {\n    if (this.ariaLabel) {\n      return null;\n    }\n    const labelExpression = labelId ? labelId + ' ' : '';\n    return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n  }\n  /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n  _setVisibilityClasses(classList) {\n    classList[this._visibleClass] = this.showPanel;\n    classList[this._hiddenClass] = !this.showPanel;\n  }\n}\n_MatAutocompleteBase.ɵfac = function _MatAutocompleteBase_Factory(t) {\n  return new (t || _MatAutocompleteBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform));\n};\n_MatAutocompleteBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: _MatAutocompleteBase,\n  viewQuery: function _MatAutocompleteBase_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(TemplateRef, 7);\n      ɵngcc0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n    }\n  },\n  inputs: {\n    displayWith: \"displayWith\",\n    autoActiveFirstOption: \"autoActiveFirstOption\",\n    classList: [\"class\", \"classList\"],\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    panelWidth: \"panelWidth\"\n  },\n  outputs: {\n    optionSelected: \"optionSelected\",\n    opened: \"opened\",\n    closed: \"closed\",\n    optionActivated: \"optionActivated\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n_MatAutocompleteBase.ctorParameters = () => [{\n  type: ChangeDetectorRef\n}, {\n  type: ElementRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n  }]\n}, {\n  type: Platform\n}];\n_MatAutocompleteBase.propDecorators = {\n  template: [{\n    type: ViewChild,\n    args: [TemplateRef, {\n      static: true\n    }]\n  }],\n  panel: [{\n    type: ViewChild,\n    args: ['panel']\n  }],\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  ariaLabelledby: [{\n    type: Input,\n    args: ['aria-labelledby']\n  }],\n  displayWith: [{\n    type: Input\n  }],\n  autoActiveFirstOption: [{\n    type: Input\n  }],\n  panelWidth: [{\n    type: Input\n  }],\n  optionSelected: [{\n    type: Output\n  }],\n  opened: [{\n    type: Output\n  }],\n  closed: [{\n    type: Output\n  }],\n  optionActivated: [{\n    type: Output\n  }],\n  classList: [{\n    type: Input,\n    args: ['class']\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatAutocompleteBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n      }]\n    }, {\n      type: ɵngcc1.Platform\n    }];\n  }, {\n    displayWith: [{\n      type: Input\n    }],\n    optionSelected: [{\n      type: Output\n    }],\n    opened: [{\n      type: Output\n    }],\n    closed: [{\n      type: Output\n    }],\n    optionActivated: [{\n      type: Output\n    }],\n    autoActiveFirstOption: [{\n      type: Input\n    }],\n    classList: [{\n      type: Input,\n      args: ['class']\n    }],\n    template: [{\n      type: ViewChild,\n      args: [TemplateRef, {\n        static: true\n      }]\n    }],\n    panel: [{\n      type: ViewChild,\n      args: ['panel']\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    panelWidth: [{\n      type: Input\n    }]\n  });\n})();\nclass MatAutocomplete extends _MatAutocompleteBase {\n  constructor() {\n    super(...arguments);\n    this._visibleClass = 'mat-autocomplete-visible';\n    this._hiddenClass = 'mat-autocomplete-hidden';\n  }\n}\nMatAutocomplete.ɵfac = /*@__PURE__*/function () {\n  let ɵMatAutocomplete_BaseFactory;\n  return function MatAutocomplete_Factory(t) {\n    return (ɵMatAutocomplete_BaseFactory || (ɵMatAutocomplete_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatAutocomplete)))(t || MatAutocomplete);\n  };\n}();\nMatAutocomplete.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatAutocomplete,\n  selectors: [[\"mat-autocomplete\"]],\n  contentQueries: function MatAutocomplete_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, 5);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n    }\n  },\n  hostAttrs: [1, \"mat-autocomplete\"],\n  inputs: {\n    disableRipple: \"disableRipple\"\n  },\n  exportAs: [\"matAutocomplete\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MAT_OPTION_PARENT_COMPONENT,\n    useExisting: MatAutocomplete\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c1,\n  decls: 2,\n  vars: 0,\n  consts: [[\"role\", \"listbox\", 1, \"mat-autocomplete-panel\", 3, \"id\", \"ngClass\"], [\"panel\", \"\"]],\n  template: function MatAutocomplete_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵtemplate(0, MatAutocomplete_ng_template_0_Template, 7, 4, \"ng-template\");\n      ɵngcc0.ɵɵtext(1, \"\\n\");\n    }\n  },\n  dependencies: [ɵngcc2.NgClass],\n  styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}mat-autocomplete{display:none}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\nMatAutocomplete.propDecorators = {\n  optionGroups: [{\n    type: ContentChildren,\n    args: [MAT_OPTGROUP, {\n      descendants: true\n    }]\n  }],\n  options: [{\n    type: ContentChildren,\n    args: [MatOption, {\n      descendants: true\n    }]\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocomplete, [{\n    type: Component,\n    args: [{\n      selector: 'mat-autocomplete',\n      template: \"<ng-template let-formFieldId=\\\"id\\\">\\n  <div class=\\\"mat-autocomplete-panel\\\"\\n       role=\\\"listbox\\\"\\n       [id]=\\\"id\\\"\\n       [attr.aria-label]=\\\"ariaLabel || null\\\"\\n       [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby(formFieldId)\\\"\\n       [ngClass]=\\\"_classList\\\"\\n       #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      exportAs: 'matAutocomplete',\n      inputs: ['disableRipple'],\n      host: {\n        'class': 'mat-autocomplete'\n      },\n      providers: [{\n        provide: MAT_OPTION_PARENT_COMPONENT,\n        useExisting: MatAutocomplete\n      }],\n      styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}mat-autocomplete{display:none}\\n\"]\n    }]\n  }], null, {\n    optionGroups: [{\n      type: ContentChildren,\n      args: [MAT_OPTGROUP, {\n        descendants: true\n      }]\n    }],\n    options: [{\n      type: ContentChildren,\n      args: [MatOption, {\n        descendants: true\n      }]\n    }]\n  });\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Base class containing all of the functionality for `MatAutocompleteOrigin`. */\nclass _MatAutocompleteOriginBase {\n  constructor( /** Reference to the element on which the directive is applied. */\n  elementRef) {\n    this.elementRef = elementRef;\n  }\n}\n_MatAutocompleteOriginBase.ɵfac = function _MatAutocompleteOriginBase_Factory(t) {\n  return new (t || _MatAutocompleteOriginBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n_MatAutocompleteOriginBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: _MatAutocompleteOriginBase\n});\n_MatAutocompleteOriginBase.ctorParameters = () => [{\n  type: ElementRef\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatAutocompleteOriginBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nclass MatAutocompleteOrigin extends _MatAutocompleteOriginBase {}\nMatAutocompleteOrigin.ɵfac = /*@__PURE__*/function () {\n  let ɵMatAutocompleteOrigin_BaseFactory;\n  return function MatAutocompleteOrigin_Factory(t) {\n    return (ɵMatAutocompleteOrigin_BaseFactory || (ɵMatAutocompleteOrigin_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatAutocompleteOrigin)))(t || MatAutocompleteOrigin);\n  };\n}();\nMatAutocompleteOrigin.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatAutocompleteOrigin,\n  selectors: [[\"\", \"matAutocompleteOrigin\", \"\"]],\n  exportAs: [\"matAutocompleteOrigin\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteOrigin, [{\n    type: Directive,\n    args: [{\n      selector: '[matAutocompleteOrigin]',\n      exportAs: 'matAutocompleteOrigin'\n    }]\n  }], null, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nfunction getMatAutocompleteMissingPanelError() {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' + 'Make sure that the id passed to the `matAutocomplete` is correct and that ' + 'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n/** Base class with all of the `MatAutocompleteTrigger` functionality. */\nclass _MatAutocompleteTriggerBase {\n  constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler, _defaults) {\n    this._element = _element;\n    this._overlay = _overlay;\n    this._viewContainerRef = _viewContainerRef;\n    this._zone = _zone;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._dir = _dir;\n    this._formField = _formField;\n    this._document = _document;\n    this._viewportRuler = _viewportRuler;\n    this._defaults = _defaults;\n    this._componentDestroyed = false;\n    this._autocompleteDisabled = false;\n    /** Whether or not the label state is being overridden. */\n    this._manuallyFloatingLabel = false;\n    /** Subscription to viewport size changes. */\n    this._viewportSubscription = Subscription.EMPTY;\n    /**\n     * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n     * closed autocomplete from being reopened if the user switches to another browser tab and then\n     * comes back.\n     */\n    this._canOpenOnNextFocus = true;\n    /** Stream of keyboard events that can close the panel. */\n    this._closeKeyEventStream = new Subject();\n    /**\n     * Event handler for when the window is blurred. Needs to be an\n     * arrow function in order to preserve the context.\n     */\n    this._windowBlurHandler = () => {\n      // If the user blurred the window while the autocomplete is focused, it means that it'll be\n      // refocused when they come back. In this case we want to skip the first focus event, if the\n      // pane was closed, in order to avoid reopening it unintentionally.\n      this._canOpenOnNextFocus = this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n    };\n    /** `View -> model callback called when value changes` */\n    this._onChange = () => {};\n    /** `View -> model callback called when autocomplete has been touched` */\n    this._onTouched = () => {};\n    /**\n     * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n     * will render the panel underneath the trigger if there is enough space for it to fit in\n     * the viewport, otherwise the panel will be shown above it. If the position is set to\n     * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n     * whether it fits completely in the viewport.\n     */\n    this.position = 'auto';\n    /**\n     * `autocomplete` attribute to be set on the input element.\n     * @docs-private\n     */\n    this.autocompleteAttribute = 'off';\n    this._overlayAttached = false;\n    /** Stream of autocomplete option selections. */\n    this.optionSelections = defer(() => {\n      if (this.autocomplete && this.autocomplete.options) {\n        return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n      }\n      // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n      // Return a stream that we'll replace with the real one once everything is in place.\n      return this._zone.onStable.pipe(take(1), switchMap(() => this.optionSelections));\n    });\n    this._scrollStrategy = scrollStrategy;\n  }\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  get autocompleteDisabled() {\n    return this._autocompleteDisabled;\n  }\n  set autocompleteDisabled(value) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n  ngAfterViewInit() {\n    const window = this._getWindow();\n    if (typeof window !== 'undefined') {\n      this._zone.runOutsideAngular(() => window.addEventListener('blur', this._windowBlurHandler));\n    }\n  }\n  ngOnChanges(changes) {\n    if (changes['position'] && this._positionStrategy) {\n      this._setStrategyPositions(this._positionStrategy);\n      if (this.panelOpen) {\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n  ngOnDestroy() {\n    const window = this._getWindow();\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen() {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  /** Opens the autocomplete suggestion panel. */\n  openPanel() {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n  /** Closes the autocomplete suggestion panel. */\n  closePanel() {\n    this._resetLabel();\n    if (!this._overlayAttached) {\n      return;\n    }\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n    this.autocomplete._isOpen = this._overlayAttached = false;\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition() {\n    if (this._overlayAttached) {\n      this._overlayRef.updatePosition();\n    }\n  }\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions() {\n    return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ? this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) : of()).pipe(\n    // Normalize the output so we return a consistent type.\n    map(event => event instanceof MatOptionSelectionChange ? event : null));\n  }\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption() {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n    return null;\n  }\n  /** Stream of clicks outside of the autocomplete panel. */\n  _getOutsideClickStream() {\n    return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'auxclick'), fromEvent(this._document, 'touchend')).pipe(filter(event => {\n      // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n      // fall back to check the first element in the path of the click event.\n      const clickTarget = _getEventTarget(event);\n      const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n      const customOrigin = this.connectedTo ? this.connectedTo.elementRef.nativeElement : null;\n      return this._overlayAttached && clickTarget !== this._element.nativeElement && (!formField || !formField.contains(clickTarget)) && (!customOrigin || !customOrigin.contains(clickTarget)) && !!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget);\n    }));\n  }\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value) {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn) {\n    this._onChange = fn;\n  }\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  }\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n  _handleKeydown(event) {\n    const keyCode = event.keyCode;\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE && !hasModifierKey(event)) {\n      event.preventDefault();\n    }\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption(this.autocomplete._keyManager.activeItemIndex || 0);\n      }\n    }\n  }\n  _handleInput(event) {\n    let target = event.target;\n    let value = target.value;\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value) {\n      this._previousValue = value;\n      this._onChange(value);\n      if (this._canOpen() && this._document.activeElement === event.target) {\n        this.openPanel();\n      }\n    }\n  }\n  _handleFocus() {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  _floatLabel(shouldAnimate = false) {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n      this._manuallyFloatingLabel = true;\n    }\n  }\n  /** If the label has been manually elevated, return it to its normal state. */\n  _resetLabel() {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  _subscribeToClosingActions() {\n    const firstStable = this._zone.onStable.pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(tap(() => this._positionStrategy.reapplyLastPosition()),\n    // Defer emitting to the stream until the next tick, because changing\n    // bindings in here will cause \"changed after checked\" errors.\n    delay(0));\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges).pipe(\n    // create a new stream of panelClosingActions, replacing any previous streams\n    // that were created, and flatten it so our stream only emits closing events...\n    switchMap(() => {\n      const wasOpen = this.panelOpen;\n      this._resetActiveItem();\n      this.autocomplete._setVisibility();\n      if (this.panelOpen) {\n        this._overlayRef.updatePosition();\n        // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n        // event, because we may not have emitted it when the panel was attached. This\n        // can happen if the users opens the panel and there are no options, but the\n        // options come in slightly later or as a result of the value changing.\n        if (wasOpen !== this.panelOpen) {\n          this.autocomplete.opened.emit();\n        }\n      }\n      return this.panelClosingActions;\n    }),\n    // when the first closing event occurs...\n    take(1))\n    // set the value, close the panel, and complete.\n    .subscribe(event => this._setValueAndClose(event));\n  }\n  /** Destroys the autocomplete suggestion panel. */\n  _destroyPanel() {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n  _setTriggerValue(value) {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ? this.autocomplete.displayWith(value) : value;\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n    this._previousValue = inputValue;\n  }\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  _setValueAndClose(event) {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n    this.closePanel();\n  }\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  _clearPreviousSelectedOption(skip) {\n    this.autocomplete.options.forEach(option => {\n      if (option !== skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n  _attachOverlay() {\n    var _a;\n    if (!this.autocomplete && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n    let overlayRef = this._overlayRef;\n    if (!overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef, {\n        id: (_a = this._formField) === null || _a === void 0 ? void 0 : _a.getLabelId()\n      });\n      overlayRef = this._overlay.create(this._getOverlayConfig());\n      this._overlayRef = overlayRef;\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE && !hasModifierKey(event) || event.keyCode === UP_ARROW && hasModifierKey(event, 'altKey')) {\n          this._closeKeyEventStream.next();\n          this._resetActiveItem();\n          // We need to stop propagation, otherwise the event will eventually\n          // reach the input itself and cause the overlay to be reopened.\n          event.stopPropagation();\n          event.preventDefault();\n        }\n      });\n      this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n        if (this.panelOpen && overlayRef) {\n          overlayRef.updateSize({\n            width: this._getPanelWidth()\n          });\n        }\n      });\n    } else {\n      // Update the trigger, panel width and direction, in case anything has changed.\n      this._positionStrategy.setOrigin(this._getConnectedElement());\n      overlayRef.updateSize({\n        width: this._getPanelWidth()\n      });\n    }\n    if (overlayRef && !overlayRef.hasAttached()) {\n      overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n    const wasOpen = this.panelOpen;\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n  _getOverlayConfig() {\n    var _a;\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir,\n      panelClass: (_a = this._defaults) === null || _a === void 0 ? void 0 : _a.overlayPanelClass\n    });\n  }\n  _getOverlayPosition() {\n    const strategy = this._overlay.position().flexibleConnectedTo(this._getConnectedElement()).withFlexibleDimensions(false).withPush(false);\n    this._setStrategyPositions(strategy);\n    this._positionStrategy = strategy;\n    return strategy;\n  }\n  /** Sets the positions on a position strategy based on the directive's input state. */\n  _setStrategyPositions(positionStrategy) {\n    // Note that we provide horizontal fallback positions, even though by default the dropdown\n    // width matches the input, because consumers can override the width. See #18854.\n    const belowPositions = [{\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'top'\n    }, {\n      originX: 'end',\n      originY: 'bottom',\n      overlayX: 'end',\n      overlayY: 'top'\n    }];\n    // The overlay edge connected to the trigger should have squared corners, while\n    // the opposite end has rounded corners. We apply a CSS class to swap the\n    // border-radius based on the overlay position.\n    const panelClass = this._aboveClass;\n    const abovePositions = [{\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'bottom',\n      panelClass\n    }, {\n      originX: 'end',\n      originY: 'top',\n      overlayX: 'end',\n      overlayY: 'bottom',\n      panelClass\n    }];\n    let positions;\n    if (this.position === 'above') {\n      positions = abovePositions;\n    } else if (this.position === 'below') {\n      positions = belowPositions;\n    } else {\n      positions = [...belowPositions, ...abovePositions];\n    }\n    positionStrategy.withPositions(positions);\n  }\n  _getConnectedElement() {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n  _getPanelWidth() {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n  /** Returns the width of the input element, so the panel width can match it. */\n  _getHostWidth() {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  _resetActiveItem() {\n    const autocomplete = this.autocomplete;\n    if (autocomplete.autoActiveFirstOption) {\n      // Note that we go through `setFirstItemActive`, rather than `setActiveItem(0)`, because\n      // the former will find the next enabled option, if the first one is disabled.\n      autocomplete._keyManager.setFirstItemActive();\n    } else {\n      autocomplete._keyManager.setActiveItem(-1);\n    }\n  }\n  /** Determines whether the panel can be opened. */\n  _canOpen() {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n  /** Use defaultView of injected document if available or fallback to global window reference */\n  _getWindow() {\n    var _a;\n    return ((_a = this._document) === null || _a === void 0 ? void 0 : _a.defaultView) || window;\n  }\n  /** Scrolls to a particular option in the list. */\n  _scrollToOption(index) {\n    // Given that we are not actually focusing active options, we must manually adjust scroll\n    // to reveal options below the fold. First, we find the offset of the option from the top\n    // of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n    // the panel height + the option height, so the active option will be just visible at the\n    // bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n    // will become the offset. If that offset is visible within the panel already, the scrollTop is\n    // not adjusted.\n    const autocomplete = this.autocomplete;\n    const labelCount = _countGroupLabelsBeforeOption(index, autocomplete.options, autocomplete.optionGroups);\n    if (index === 0 && labelCount === 1) {\n      // If we've got one group label before the option and we're at the top option,\n      // scroll the list to the top. This is better UX than scrolling the list to the\n      // top of the option, because it allows the user to read the top group's label.\n      autocomplete._setScrollTop(0);\n    } else if (autocomplete.panel) {\n      const option = autocomplete.options.toArray()[index];\n      if (option) {\n        const element = option._getHostElement();\n        const newScrollPosition = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, autocomplete._getScrollTop(), autocomplete.panel.nativeElement.offsetHeight);\n        autocomplete._setScrollTop(newScrollPosition);\n      }\n    }\n  }\n}\n_MatAutocompleteTriggerBase.ɵfac = function _MatAutocompleteTriggerBase_Factory(t) {\n  return new (t || _MatAutocompleteTriggerBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 9), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, 8));\n};\n_MatAutocompleteTriggerBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: _MatAutocompleteTriggerBase,\n  inputs: {\n    position: [\"matAutocompletePosition\", \"position\"],\n    autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"],\n    autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\"],\n    autocomplete: [\"matAutocomplete\", \"autocomplete\"],\n    connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"]\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n_MatAutocompleteTriggerBase.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: Overlay\n}, {\n  type: ViewContainerRef\n}, {\n  type: NgZone\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n  }]\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: MatFormField,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_FORM_FIELD]\n  }, {\n    type: Host\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: ViewportRuler\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n  }]\n}];\n_MatAutocompleteTriggerBase.propDecorators = {\n  autocomplete: [{\n    type: Input,\n    args: ['matAutocomplete']\n  }],\n  position: [{\n    type: Input,\n    args: ['matAutocompletePosition']\n  }],\n  connectedTo: [{\n    type: Input,\n    args: ['matAutocompleteConnectedTo']\n  }],\n  autocompleteAttribute: [{\n    type: Input,\n    args: ['autocomplete']\n  }],\n  autocompleteDisabled: [{\n    type: Input,\n    args: ['matAutocompleteDisabled']\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatAutocompleteTriggerBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc3.Overlay\n    }, {\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: ɵngcc4.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc6.MatFormField,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_FORM_FIELD]\n      }, {\n        type: Host\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc5.ViewportRuler\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    position: [{\n      type: Input,\n      args: ['matAutocompletePosition']\n    }],\n    autocompleteAttribute: [{\n      type: Input,\n      args: ['autocomplete']\n    }],\n    autocompleteDisabled: [{\n      type: Input,\n      args: ['matAutocompleteDisabled']\n    }],\n    autocomplete: [{\n      type: Input,\n      args: ['matAutocomplete']\n    }],\n    connectedTo: [{\n      type: Input,\n      args: ['matAutocompleteConnectedTo']\n    }]\n  });\n})();\nclass MatAutocompleteTrigger extends _MatAutocompleteTriggerBase {\n  constructor() {\n    super(...arguments);\n    this._aboveClass = 'mat-autocomplete-panel-above';\n  }\n}\nMatAutocompleteTrigger.ɵfac = /*@__PURE__*/function () {\n  let ɵMatAutocompleteTrigger_BaseFactory;\n  return function MatAutocompleteTrigger_Factory(t) {\n    return (ɵMatAutocompleteTrigger_BaseFactory || (ɵMatAutocompleteTrigger_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatAutocompleteTrigger)))(t || MatAutocompleteTrigger);\n  };\n}();\nMatAutocompleteTrigger.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatAutocompleteTrigger,\n  selectors: [[\"input\", \"matAutocomplete\", \"\"], [\"textarea\", \"matAutocomplete\", \"\"]],\n  hostAttrs: [1, \"mat-autocomplete-trigger\"],\n  hostVars: 7,\n  hostBindings: function MatAutocompleteTrigger_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"focusin\", function MatAutocompleteTrigger_focusin_HostBindingHandler() {\n        return ctx._handleFocus();\n      })(\"blur\", function MatAutocompleteTrigger_blur_HostBindingHandler() {\n        return ctx._onTouched();\n      })(\"input\", function MatAutocompleteTrigger_input_HostBindingHandler($event) {\n        return ctx._handleInput($event);\n      })(\"keydown\", function MatAutocompleteTrigger_keydown_HostBindingHandler($event) {\n        return ctx._handleKeydown($event);\n      });\n    }\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"autocomplete\", ctx.autocompleteAttribute)(\"role\", ctx.autocompleteDisabled ? null : \"combobox\")(\"aria-autocomplete\", ctx.autocompleteDisabled ? null : \"list\")(\"aria-activedescendant\", ctx.panelOpen && ctx.activeOption ? ctx.activeOption.id : null)(\"aria-expanded\", ctx.autocompleteDisabled ? null : ctx.panelOpen.toString())(\"aria-owns\", ctx.autocompleteDisabled || !ctx.panelOpen ? null : ctx.autocomplete == null ? null : ctx.autocomplete.id)(\"aria-haspopup\", !ctx.autocompleteDisabled);\n    }\n  },\n  exportAs: [\"matAutocompleteTrigger\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([MAT_AUTOCOMPLETE_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteTrigger, [{\n    type: Directive,\n    args: [{\n      selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n      host: {\n        'class': 'mat-autocomplete-trigger',\n        '[attr.autocomplete]': 'autocompleteAttribute',\n        '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n        '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n        '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n        '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n        '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n        '[attr.aria-haspopup]': '!autocompleteDisabled',\n        // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n        // a little earlier. This avoids issues where IE delays the focusing of the input.\n        '(focusin)': '_handleFocus()',\n        '(blur)': '_onTouched()',\n        '(input)': '_handleInput($event)',\n        '(keydown)': '_handleKeydown($event)'\n      },\n      exportAs: 'matAutocompleteTrigger',\n      providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n    }]\n  }], null, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatAutocompleteModule {}\nMatAutocompleteModule.ɵfac = function MatAutocompleteModule_Factory(t) {\n  return new (t || MatAutocompleteModule)();\n};\nMatAutocompleteModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatAutocompleteModule\n});\nMatAutocompleteModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n  imports: [OverlayModule, MatOptionModule, MatCommonModule, CommonModule, CdkScrollableModule, MatOptionModule, MatCommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteModule, [{\n    type: NgModule,\n    args: [{\n      imports: [OverlayModule, MatOptionModule, MatCommonModule, CommonModule],\n      exports: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin, CdkScrollableModule, MatOptionModule, MatCommonModule],\n      declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n      providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatAutocompleteModule, {\n    declarations: function () {\n      return [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin];\n    },\n    imports: function () {\n      return [OverlayModule, MatOptionModule, MatCommonModule, CommonModule];\n    },\n    exports: function () {\n      return [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin, CdkScrollableModule, MatOptionModule, MatCommonModule];\n    }\n  });\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, _MatAutocompleteBase, _MatAutocompleteOriginBase, _MatAutocompleteTriggerBase, getMatAutocompleteMissingPanelError };","map":{"version":3,"names":["ActiveDescendantKeyManager","coerceBooleanProperty","coerceStringArray","Platform","_getEventTarget","InjectionToken","EventEmitter","Directive","ChangeDetectorRef","ElementRef","Inject","ViewChild","TemplateRef","Input","Output","Component","ViewEncapsulation","ChangeDetectionStrategy","ContentChildren","forwardRef","ViewContainerRef","NgZone","Optional","Host","NgModule","mixinDisableRipple","MAT_OPTION_PARENT_COMPONENT","MAT_OPTGROUP","MatOption","MatOptionSelectionChange","_countGroupLabelsBeforeOption","_getOptionScrollPosition","MatOptionModule","MatCommonModule","Subscription","Subject","defer","merge","of","fromEvent","DOCUMENT","CommonModule","Overlay","OverlayConfig","OverlayModule","ViewportRuler","CdkScrollableModule","Directionality","ESCAPE","hasModifierKey","ENTER","UP_ARROW","DOWN_ARROW","TAB","TemplatePortal","NG_VALUE_ACCESSOR","MatFormField","MAT_FORM_FIELD","take","switchMap","filter","map","tap","delay","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","ɵngcc5","ɵngcc6","_c0","MatAutocomplete_ng_template_0_Template","rf","ctx","ɵɵtext","ɵɵelementStart","ɵɵprojection","ɵɵelementEnd","formFieldId_r1","id","ctx_r0","ɵɵnextContext","ɵɵadvance","ɵɵproperty","_classList","ɵɵattribute","ariaLabel","_getPanelAriaLabelledby","_c1","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","constructor","source","option","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","providedIn","factory","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","autoActiveFirstOption","_MatAutocompleteBase","_changeDetectorRef","_elementRef","defaults","platform","_activeOptionChanges","EMPTY","showPanel","_isOpen","displayWith","optionSelected","opened","closed","optionActivated","inertGroups","SAFARI","_autoActiveFirstOption","isOpen","value","classList","length","reduce","className","_setVisibilityClasses","nativeElement","ngAfterContentInit","_keyManager","options","withWrap","change","subscribe","index","emit","toArray","_setVisibility","ngOnDestroy","unsubscribe","_setScrollTop","scrollTop","panel","_getScrollTop","markForCheck","_emitSelectEvent","event","labelId","labelExpression","ariaLabelledby","_visibleClass","_hiddenClass","ɵfac","_MatAutocompleteBase_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","viewQuery","_MatAutocompleteBase_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","template","first","inputs","panelWidth","outputs","features","ɵɵInheritDefinitionFeature","ctorParameters","undefined","decorators","args","propDecorators","static","ngDevMode","ɵsetClassMetadata","MatAutocomplete","arguments","ɵMatAutocomplete_BaseFactory","MatAutocomplete_Factory","ɵɵgetInheritedFactory","ɵcmp","ɵɵdefineComponent","selectors","contentQueries","MatAutocomplete_ContentQueries","dirIndex","ɵɵcontentQuery","optionGroups","hostAttrs","disableRipple","exportAs","ɵɵProvidersFeature","provide","useExisting","ngContentSelectors","decls","vars","consts","MatAutocomplete_Template","ɵɵprojectionDef","ɵɵtemplate","dependencies","NgClass","styles","encapsulation","changeDetection","descendants","selector","None","OnPush","host","providers","_MatAutocompleteOriginBase","elementRef","_MatAutocompleteOriginBase_Factory","MatAutocompleteOrigin","ɵMatAutocompleteOrigin_BaseFactory","MatAutocompleteOrigin_Factory","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","multi","getMatAutocompleteMissingPanelError","Error","_MatAutocompleteTriggerBase","_element","_overlay","_viewContainerRef","_zone","scrollStrategy","_dir","_formField","_document","_viewportRuler","_defaults","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","activeElement","panelOpen","_onChange","_onTouched","position","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","onSelectionChange","onStable","pipe","_scrollStrategy","autocompleteDisabled","ngAfterViewInit","window","_getWindow","runOutsideAngular","addEventListener","ngOnChanges","changes","_positionStrategy","_setStrategyPositions","_overlayRef","updatePosition","removeEventListener","_destroyPanel","complete","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","hasAttached","detach","_closingActionsSubscription","detectChanges","panelClosingActions","tabOut","_getOutsideClickStream","detachments","activeOption","activeItem","clickTarget","formField","customOrigin","connectedTo","contains","overlayElement","writeValue","Promise","resolve","then","_setTriggerValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","_handleKeydown","keyCode","preventDefault","_selectViaInteraction","_resetActiveItem","prevActiveItem","isArrowKey","onKeydown","_canOpen","_scrollToOption","activeItemIndex","_handleInput","target","parseFloat","_previousValue","_handleFocus","shouldAnimate","floatLabel","_animateAndLockLabel","_subscribeToClosingActions","firstStable","optionChanges","reapplyLastPosition","wasOpen","_setValueAndClose","dispose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","focus","skip","forEach","selected","deselect","_a","overlayRef","_portal","getLabelId","create","_getOverlayConfig","keydownEvents","next","stopPropagation","updateSize","width","_getPanelWidth","setOrigin","_getConnectedElement","attach","positionStrategy","_getOverlayPosition","direction","panelClass","overlayPanelClass","strategy","flexibleConnectedTo","withFlexibleDimensions","withPush","belowPositions","originX","originY","overlayX","overlayY","_aboveClass","abovePositions","positions","withPositions","getConnectedOverlayOrigin","_getHostWidth","getBoundingClientRect","setFirstItemActive","setActiveItem","element","readOnly","defaultView","labelCount","_getHostElement","newScrollPosition","offsetTop","offsetHeight","_MatAutocompleteTriggerBase_Factory","ɵɵNgOnChangesFeature","ɵMatAutocompleteTrigger_BaseFactory","MatAutocompleteTrigger_Factory","hostVars","hostBindings","MatAutocompleteTrigger_HostBindings","ɵɵlistener","MatAutocompleteTrigger_focusin_HostBindingHandler","MatAutocompleteTrigger_blur_HostBindingHandler","MatAutocompleteTrigger_input_HostBindingHandler","$event","MatAutocompleteTrigger_keydown_HostBindingHandler","toString","MatAutocompleteModule","MatAutocompleteModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope"],"sources":["/home/ceo/mmmm/createyourevent/node_modules/@angular/material/__ivy_ngcc__/fesm2015/autocomplete.js"],"sourcesContent":["import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceStringArray } from '@angular/cdk/coercion';\nimport { Platform, _getEventTarget } from '@angular/cdk/platform';\nimport { InjectionToken, EventEmitter, Directive, ChangeDetectorRef, ElementRef, Inject, ViewChild, TemplateRef, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, forwardRef, ViewContainerRef, NgZone, Optional, Host, NgModule } from '@angular/core';\nimport { mixinDisableRipple, MAT_OPTION_PARENT_COMPONENT, MAT_OPTGROUP, MatOption, MatOptionSelectionChange, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { Subscription, Subject, defer, merge, of, fromEvent } from 'rxjs';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ESCAPE, hasModifierKey, ENTER, UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatFormField, MAT_FORM_FIELD } from '@angular/material/form-field';\nimport { take, switchMap, filter, map, tap, delay } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/common';\nimport * as ɵngcc3 from '@angular/cdk/overlay';\nimport * as ɵngcc4 from '@angular/cdk/bidi';\nimport * as ɵngcc5 from '@angular/cdk/scrolling';\nimport * as ɵngcc6 from '@angular/material/form-field';\n\nconst _c0 = [\"panel\"];\nfunction MatAutocomplete_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵtext(0, \"\\n  \");\n    ɵngcc0.ɵɵelementStart(1, \"div\", 0, 1);\n    ɵngcc0.ɵɵtext(3, \"\\n    \");\n    ɵngcc0.ɵɵprojection(4);\n    ɵngcc0.ɵɵtext(5, \"\\n  \");\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtext(6, \"\\n\");\n} if (rf & 2) {\n    const formFieldId_r1 = ctx.id;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r0.id)(\"ngClass\", ctx_r0._classList);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r0.ariaLabel || null)(\"aria-labelledby\", ctx_r0._getPanelAriaLabelledby(formFieldId_r1));\n} }\nconst _c1 = [\"*\"];\nlet _uniqueAutocompleteIdCounter = 0;\n/** Event object that is emitted when an autocomplete option is selected. */\nclass MatAutocompleteSelectedEvent {\n    constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    source, \n    /** Option that was selected. */\n    option) {\n        this.source = source;\n        this.option = option;\n    }\n}\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nconst _MatAutocompleteMixinBase = mixinDisableRipple(class {\n});\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n    providedIn: 'root',\n    factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n    return { autoActiveFirstOption: false };\n}\n/** Base class with all of the `MatAutocomplete` functionality. */\nclass _MatAutocompleteBase extends _MatAutocompleteMixinBase {\n    constructor(_changeDetectorRef, _elementRef, defaults, platform) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._activeOptionChanges = Subscription.EMPTY;\n        /** Whether the autocomplete panel should be visible, depending on option length. */\n        this.showPanel = false;\n        this._isOpen = false;\n        /** Function that maps an option's control value to its display value in the trigger. */\n        this.displayWith = null;\n        /** Event that is emitted whenever an option from the list is selected. */\n        this.optionSelected = new EventEmitter();\n        /** Event that is emitted when the autocomplete panel is opened. */\n        this.opened = new EventEmitter();\n        /** Event that is emitted when the autocomplete panel is closed. */\n        this.closed = new EventEmitter();\n        /** Emits whenever an option is activated using the keyboard. */\n        this.optionActivated = new EventEmitter();\n        this._classList = {};\n        /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n        this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n        // TODO(crisbeto): the problem that the `inertGroups` option resolves is only present on\n        // Safari using VoiceOver. We should occasionally check back to see whether the bug\n        // wasn't resolved in VoiceOver, and if it has, we can remove this and the `inertGroups`\n        // option altogether.\n        this.inertGroups = (platform === null || platform === void 0 ? void 0 : platform.SAFARI) || false;\n        this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n    }\n    /** Whether the autocomplete panel is open. */\n    get isOpen() { return this._isOpen && this.showPanel; }\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     */\n    get autoActiveFirstOption() { return this._autoActiveFirstOption; }\n    set autoActiveFirstOption(value) {\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n    set classList(value) {\n        if (value && value.length) {\n            this._classList = coerceStringArray(value).reduce((classList, className) => {\n                classList[className] = true;\n                return classList;\n            }, {});\n        }\n        else {\n            this._classList = {};\n        }\n        this._setVisibilityClasses(this._classList);\n        this._elementRef.nativeElement.className = '';\n    }\n    ngAfterContentInit() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n        this._activeOptionChanges = this._keyManager.change.subscribe(index => {\n            if (this.isOpen) {\n                this.optionActivated.emit({ source: this, option: this.options.toArray()[index] || null });\n            }\n        });\n        // Set the initial visibility state.\n        this._setVisibility();\n    }\n    ngOnDestroy() {\n        this._activeOptionChanges.unsubscribe();\n    }\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     */\n    _setScrollTop(scrollTop) {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n    /** Returns the panel's scrollTop. */\n    _getScrollTop() {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /** Panel should hide itself when the option list is empty. */\n    _setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._setVisibilityClasses(this._classList);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Emits the `select` event. */\n    _emitSelectEvent(option) {\n        const event = new MatAutocompleteSelectedEvent(this, option);\n        this.optionSelected.emit(event);\n    }\n    /** Gets the aria-labelledby for the autocomplete panel. */\n    _getPanelAriaLabelledby(labelId) {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n    _setVisibilityClasses(classList) {\n        classList[this._visibleClass] = this.showPanel;\n        classList[this._hiddenClass] = !this.showPanel;\n    }\n}\n_MatAutocompleteBase.ɵfac = function _MatAutocompleteBase_Factory(t) { return new (t || _MatAutocompleteBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform)); };\n_MatAutocompleteBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatAutocompleteBase, viewQuery: function _MatAutocompleteBase_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(TemplateRef, 7);\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n    } }, inputs: { displayWith: \"displayWith\", autoActiveFirstOption: \"autoActiveFirstOption\", classList: [\"class\", \"classList\"], ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], panelWidth: \"panelWidth\" }, outputs: { optionSelected: \"optionSelected\", opened: \"opened\", closed: \"closed\", optionActivated: \"optionActivated\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n_MatAutocompleteBase.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,] }] },\n    { type: Platform }\n];\n_MatAutocompleteBase.propDecorators = {\n    template: [{ type: ViewChild, args: [TemplateRef, { static: true },] }],\n    panel: [{ type: ViewChild, args: ['panel',] }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    displayWith: [{ type: Input }],\n    autoActiveFirstOption: [{ type: Input }],\n    panelWidth: [{ type: Input }],\n    optionSelected: [{ type: Output }],\n    opened: [{ type: Output }],\n    closed: [{ type: Output }],\n    optionActivated: [{ type: Output }],\n    classList: [{ type: Input, args: ['class',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatAutocompleteBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n            }] }, { type: ɵngcc1.Platform }]; }, { displayWith: [{\n            type: Input\n        }], optionSelected: [{\n            type: Output\n        }], opened: [{\n            type: Output\n        }], closed: [{\n            type: Output\n        }], optionActivated: [{\n            type: Output\n        }], autoActiveFirstOption: [{\n            type: Input\n        }], classList: [{\n            type: Input,\n            args: ['class']\n        }], template: [{\n            type: ViewChild,\n            args: [TemplateRef, { static: true }]\n        }], panel: [{\n            type: ViewChild,\n            args: ['panel']\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], panelWidth: [{\n            type: Input\n        }] }); })();\nclass MatAutocomplete extends _MatAutocompleteBase {\n    constructor() {\n        super(...arguments);\n        this._visibleClass = 'mat-autocomplete-visible';\n        this._hiddenClass = 'mat-autocomplete-hidden';\n    }\n}\nMatAutocomplete.ɵfac = /*@__PURE__*/ function () { let ɵMatAutocomplete_BaseFactory; return function MatAutocomplete_Factory(t) { return (ɵMatAutocomplete_BaseFactory || (ɵMatAutocomplete_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatAutocomplete)))(t || MatAutocomplete); }; }();\nMatAutocomplete.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatAutocomplete, selectors: [[\"mat-autocomplete\"]], contentQueries: function MatAutocomplete_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n    } }, hostAttrs: [1, \"mat-autocomplete\"], inputs: { disableRipple: \"disableRipple\" }, exportAs: [\"matAutocomplete\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 2, vars: 0, consts: [[\"role\", \"listbox\", 1, \"mat-autocomplete-panel\", 3, \"id\", \"ngClass\"], [\"panel\", \"\"]], template: function MatAutocomplete_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MatAutocomplete_ng_template_0_Template, 7, 4, \"ng-template\");\n        ɵngcc0.ɵɵtext(1, \"\\n\");\n    } }, dependencies: [ɵngcc2.NgClass], styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}mat-autocomplete{display:none}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatAutocomplete.propDecorators = {\n    optionGroups: [{ type: ContentChildren, args: [MAT_OPTGROUP, { descendants: true },] }],\n    options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocomplete, [{\n        type: Component,\n        args: [{ selector: 'mat-autocomplete', template: \"<ng-template let-formFieldId=\\\"id\\\">\\n  <div class=\\\"mat-autocomplete-panel\\\"\\n       role=\\\"listbox\\\"\\n       [id]=\\\"id\\\"\\n       [attr.aria-label]=\\\"ariaLabel || null\\\"\\n       [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby(formFieldId)\\\"\\n       [ngClass]=\\\"_classList\\\"\\n       #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, exportAs: 'matAutocomplete', inputs: ['disableRipple'], host: {\n                    'class': 'mat-autocomplete'\n                }, providers: [\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }\n                ], styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}mat-autocomplete{display:none}\\n\"] }]\n    }], null, { optionGroups: [{\n            type: ContentChildren,\n            args: [MAT_OPTGROUP, { descendants: true }]\n        }], options: [{\n            type: ContentChildren,\n            args: [MatOption, { descendants: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Base class containing all of the functionality for `MatAutocompleteOrigin`. */\nclass _MatAutocompleteOriginBase {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n}\n_MatAutocompleteOriginBase.ɵfac = function _MatAutocompleteOriginBase_Factory(t) { return new (t || _MatAutocompleteOriginBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\n_MatAutocompleteOriginBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatAutocompleteOriginBase });\n_MatAutocompleteOriginBase.ctorParameters = () => [\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatAutocompleteOriginBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nclass MatAutocompleteOrigin extends _MatAutocompleteOriginBase {\n}\nMatAutocompleteOrigin.ɵfac = /*@__PURE__*/ function () { let ɵMatAutocompleteOrigin_BaseFactory; return function MatAutocompleteOrigin_Factory(t) { return (ɵMatAutocompleteOrigin_BaseFactory || (ɵMatAutocompleteOrigin_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatAutocompleteOrigin)))(t || MatAutocompleteOrigin); }; }();\nMatAutocompleteOrigin.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatAutocompleteOrigin, selectors: [[\"\", \"matAutocompleteOrigin\", \"\"]], exportAs: [\"matAutocompleteOrigin\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteOrigin, [{\n        type: Directive,\n        args: [{\n                selector: '[matAutocompleteOrigin]',\n                exportAs: 'matAutocompleteOrigin'\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatAutocompleteTrigger),\n    multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nfunction getMatAutocompleteMissingPanelError() {\n    return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n        'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n        'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n/** Base class with all of the `MatAutocompleteTrigger` functionality. */\nclass _MatAutocompleteTriggerBase {\n    constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler, _defaults) {\n        this._element = _element;\n        this._overlay = _overlay;\n        this._viewContainerRef = _viewContainerRef;\n        this._zone = _zone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._formField = _formField;\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        this._defaults = _defaults;\n        this._componentDestroyed = false;\n        this._autocompleteDisabled = false;\n        /** Whether or not the label state is being overridden. */\n        this._manuallyFloatingLabel = false;\n        /** Subscription to viewport size changes. */\n        this._viewportSubscription = Subscription.EMPTY;\n        /**\n         * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n         * closed autocomplete from being reopened if the user switches to another browser tab and then\n         * comes back.\n         */\n        this._canOpenOnNextFocus = true;\n        /** Stream of keyboard events that can close the panel. */\n        this._closeKeyEventStream = new Subject();\n        /**\n         * Event handler for when the window is blurred. Needs to be an\n         * arrow function in order to preserve the context.\n         */\n        this._windowBlurHandler = () => {\n            // If the user blurred the window while the autocomplete is focused, it means that it'll be\n            // refocused when they come back. In this case we want to skip the first focus event, if the\n            // pane was closed, in order to avoid reopening it unintentionally.\n            this._canOpenOnNextFocus =\n                this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n        };\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when autocomplete has been touched` */\n        this._onTouched = () => { };\n        /**\n         * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n         * will render the panel underneath the trigger if there is enough space for it to fit in\n         * the viewport, otherwise the panel will be shown above it. If the position is set to\n         * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n         * whether it fits completely in the viewport.\n         */\n        this.position = 'auto';\n        /**\n         * `autocomplete` attribute to be set on the input element.\n         * @docs-private\n         */\n        this.autocompleteAttribute = 'off';\n        this._overlayAttached = false;\n        /** Stream of autocomplete option selections. */\n        this.optionSelections = defer(() => {\n            if (this.autocomplete && this.autocomplete.options) {\n                return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n            }\n            // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n            // Return a stream that we'll replace with the real one once everything is in place.\n            return this._zone.onStable\n                .pipe(take(1), switchMap(() => this.optionSelections));\n        });\n        this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     */\n    get autocompleteDisabled() { return this._autocompleteDisabled; }\n    set autocompleteDisabled(value) {\n        this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n    ngAfterViewInit() {\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            this._zone.runOutsideAngular(() => window.addEventListener('blur', this._windowBlurHandler));\n        }\n    }\n    ngOnChanges(changes) {\n        if (changes['position'] && this._positionStrategy) {\n            this._setStrategyPositions(this._positionStrategy);\n            if (this.panelOpen) {\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    ngOnDestroy() {\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this._windowBlurHandler);\n        }\n        this._viewportSubscription.unsubscribe();\n        this._componentDestroyed = true;\n        this._destroyPanel();\n        this._closeKeyEventStream.complete();\n    }\n    /** Whether or not the autocomplete panel is open. */\n    get panelOpen() {\n        return this._overlayAttached && this.autocomplete.showPanel;\n    }\n    /** Opens the autocomplete suggestion panel. */\n    openPanel() {\n        this._attachOverlay();\n        this._floatLabel();\n    }\n    /** Closes the autocomplete suggestion panel. */\n    closePanel() {\n        this._resetLabel();\n        if (!this._overlayAttached) {\n            return;\n        }\n        if (this.panelOpen) {\n            // Only emit if the panel was visible.\n            this.autocomplete.closed.emit();\n        }\n        this.autocomplete._isOpen = this._overlayAttached = false;\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n            this._closingActionsSubscription.unsubscribe();\n        }\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this._componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this._changeDetectorRef.detectChanges();\n        }\n    }\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     */\n    updatePosition() {\n        if (this._overlayAttached) {\n            this._overlayRef.updatePosition();\n        }\n    }\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n    get panelClosingActions() {\n        return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ?\n            this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n            of()).pipe(\n        // Normalize the output so we return a consistent type.\n        map(event => event instanceof MatOptionSelectionChange ? event : null));\n    }\n    /** The currently active option, coerced to MatOption type. */\n    get activeOption() {\n        if (this.autocomplete && this.autocomplete._keyManager) {\n            return this.autocomplete._keyManager.activeItem;\n        }\n        return null;\n    }\n    /** Stream of clicks outside of the autocomplete panel. */\n    _getOutsideClickStream() {\n        return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'auxclick'), fromEvent(this._document, 'touchend'))\n            .pipe(filter(event => {\n            // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n            // fall back to check the first element in the path of the click event.\n            const clickTarget = _getEventTarget(event);\n            const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n            const customOrigin = this.connectedTo ? this.connectedTo.elementRef.nativeElement : null;\n            return this._overlayAttached && clickTarget !== this._element.nativeElement &&\n                (!formField || !formField.contains(clickTarget)) &&\n                (!customOrigin || !customOrigin.contains(clickTarget)) &&\n                (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n        }));\n    }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        Promise.resolve(null).then(() => this._setTriggerValue(value));\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this._element.nativeElement.disabled = isDisabled;\n    }\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE && !hasModifierKey(event)) {\n            event.preventDefault();\n        }\n        if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n            this.activeOption._selectViaInteraction();\n            this._resetActiveItem();\n            event.preventDefault();\n        }\n        else if (this.autocomplete) {\n            const prevActiveItem = this.autocomplete._keyManager.activeItem;\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n            if (this.panelOpen || keyCode === TAB) {\n                this.autocomplete._keyManager.onKeydown(event);\n            }\n            else if (isArrowKey && this._canOpen()) {\n                this.openPanel();\n            }\n            if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n                this._scrollToOption(this.autocomplete._keyManager.activeItemIndex || 0);\n            }\n        }\n    }\n    _handleInput(event) {\n        let target = event.target;\n        let value = target.value;\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value == '' ? null : parseFloat(value);\n        }\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this._previousValue !== value) {\n            this._previousValue = value;\n            this._onChange(value);\n            if (this._canOpen() && this._document.activeElement === event.target) {\n                this.openPanel();\n            }\n        }\n    }\n    _handleFocus() {\n        if (!this._canOpenOnNextFocus) {\n            this._canOpenOnNextFocus = true;\n        }\n        else if (this._canOpen()) {\n            this._previousValue = this._element.nativeElement.value;\n            this._attachOverlay();\n            this._floatLabel(true);\n        }\n    }\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @param shouldAnimate Whether the label should be animated when it is floated.\n     */\n    _floatLabel(shouldAnimate = false) {\n        if (this._formField && this._formField.floatLabel === 'auto') {\n            if (shouldAnimate) {\n                this._formField._animateAndLockLabel();\n            }\n            else {\n                this._formField.floatLabel = 'always';\n            }\n            this._manuallyFloatingLabel = true;\n        }\n    }\n    /** If the label has been manually elevated, return it to its normal state. */\n    _resetLabel() {\n        if (this._manuallyFloatingLabel) {\n            this._formField.floatLabel = 'auto';\n            this._manuallyFloatingLabel = false;\n        }\n    }\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n    _subscribeToClosingActions() {\n        const firstStable = this._zone.onStable.pipe(take(1));\n        const optionChanges = this.autocomplete.options.changes.pipe(tap(() => this._positionStrategy.reapplyLastPosition()), \n        // Defer emitting to the stream until the next tick, because changing\n        // bindings in here will cause \"changed after checked\" errors.\n        delay(0));\n        // When the zone is stable initially, and when the option list changes...\n        return merge(firstStable, optionChanges)\n            .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n            const wasOpen = this.panelOpen;\n            this._resetActiveItem();\n            this.autocomplete._setVisibility();\n            if (this.panelOpen) {\n                this._overlayRef.updatePosition();\n                // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                // event, because we may not have emitted it when the panel was attached. This\n                // can happen if the users opens the panel and there are no options, but the\n                // options come in slightly later or as a result of the value changing.\n                if (wasOpen !== this.panelOpen) {\n                    this.autocomplete.opened.emit();\n                }\n            }\n            return this.panelClosingActions;\n        }), \n        // when the first closing event occurs...\n        take(1))\n            // set the value, close the panel, and complete.\n            .subscribe(event => this._setValueAndClose(event));\n    }\n    /** Destroys the autocomplete suggestion panel. */\n    _destroyPanel() {\n        if (this._overlayRef) {\n            this.closePanel();\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n    }\n    _setTriggerValue(value) {\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n            this.autocomplete.displayWith(value) :\n            value;\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        const inputValue = toDisplay != null ? toDisplay : '';\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this._formField) {\n            this._formField._control.value = inputValue;\n        }\n        else {\n            this._element.nativeElement.value = inputValue;\n        }\n        this._previousValue = inputValue;\n    }\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n    _setValueAndClose(event) {\n        if (event && event.source) {\n            this._clearPreviousSelectedOption(event.source);\n            this._setTriggerValue(event.source.value);\n            this._onChange(event.source.value);\n            this._element.nativeElement.focus();\n            this.autocomplete._emitSelectEvent(event.source);\n        }\n        this.closePanel();\n    }\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     */\n    _clearPreviousSelectedOption(skip) {\n        this.autocomplete.options.forEach(option => {\n            if (option !== skip && option.selected) {\n                option.deselect();\n            }\n        });\n    }\n    _attachOverlay() {\n        var _a;\n        if (!this.autocomplete && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatAutocompleteMissingPanelError();\n        }\n        let overlayRef = this._overlayRef;\n        if (!overlayRef) {\n            this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef, { id: (_a = this._formField) === null || _a === void 0 ? void 0 : _a.getLabelId() });\n            overlayRef = this._overlay.create(this._getOverlayConfig());\n            this._overlayRef = overlayRef;\n            // Use the `keydownEvents` in order to take advantage of\n            // the overlay event targeting provided by the CDK overlay.\n            overlayRef.keydownEvents().subscribe(event => {\n                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n                if ((event.keyCode === ESCAPE && !hasModifierKey(event)) ||\n                    (event.keyCode === UP_ARROW && hasModifierKey(event, 'altKey'))) {\n                    this._closeKeyEventStream.next();\n                    this._resetActiveItem();\n                    // We need to stop propagation, otherwise the event will eventually\n                    // reach the input itself and cause the overlay to be reopened.\n                    event.stopPropagation();\n                    event.preventDefault();\n                }\n            });\n            this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n                if (this.panelOpen && overlayRef) {\n                    overlayRef.updateSize({ width: this._getPanelWidth() });\n                }\n            });\n        }\n        else {\n            // Update the trigger, panel width and direction, in case anything has changed.\n            this._positionStrategy.setOrigin(this._getConnectedElement());\n            overlayRef.updateSize({ width: this._getPanelWidth() });\n        }\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this._portal);\n            this._closingActionsSubscription = this._subscribeToClosingActions();\n        }\n        const wasOpen = this.panelOpen;\n        this.autocomplete._setVisibility();\n        this.autocomplete._isOpen = this._overlayAttached = true;\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this.autocomplete.opened.emit();\n        }\n    }\n    _getOverlayConfig() {\n        var _a;\n        return new OverlayConfig({\n            positionStrategy: this._getOverlayPosition(),\n            scrollStrategy: this._scrollStrategy(),\n            width: this._getPanelWidth(),\n            direction: this._dir,\n            panelClass: (_a = this._defaults) === null || _a === void 0 ? void 0 : _a.overlayPanelClass,\n        });\n    }\n    _getOverlayPosition() {\n        const strategy = this._overlay.position()\n            .flexibleConnectedTo(this._getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false);\n        this._setStrategyPositions(strategy);\n        this._positionStrategy = strategy;\n        return strategy;\n    }\n    /** Sets the positions on a position strategy based on the directive's input state. */\n    _setStrategyPositions(positionStrategy) {\n        // Note that we provide horizontal fallback positions, even though by default the dropdown\n        // width matches the input, because consumers can override the width. See #18854.\n        const belowPositions = [\n            { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n            { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' }\n        ];\n        // The overlay edge connected to the trigger should have squared corners, while\n        // the opposite end has rounded corners. We apply a CSS class to swap the\n        // border-radius based on the overlay position.\n        const panelClass = this._aboveClass;\n        const abovePositions = [\n            { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom', panelClass },\n            { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom', panelClass }\n        ];\n        let positions;\n        if (this.position === 'above') {\n            positions = abovePositions;\n        }\n        else if (this.position === 'below') {\n            positions = belowPositions;\n        }\n        else {\n            positions = [...belowPositions, ...abovePositions];\n        }\n        positionStrategy.withPositions(positions);\n    }\n    _getConnectedElement() {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n    }\n    _getPanelWidth() {\n        return this.autocomplete.panelWidth || this._getHostWidth();\n    }\n    /** Returns the width of the input element, so the panel width can match it. */\n    _getHostWidth() {\n        return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     */\n    _resetActiveItem() {\n        const autocomplete = this.autocomplete;\n        if (autocomplete.autoActiveFirstOption) {\n            // Note that we go through `setFirstItemActive`, rather than `setActiveItem(0)`, because\n            // the former will find the next enabled option, if the first one is disabled.\n            autocomplete._keyManager.setFirstItemActive();\n        }\n        else {\n            autocomplete._keyManager.setActiveItem(-1);\n        }\n    }\n    /** Determines whether the panel can be opened. */\n    _canOpen() {\n        const element = this._element.nativeElement;\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        var _a;\n        return ((_a = this._document) === null || _a === void 0 ? void 0 : _a.defaultView) || window;\n    }\n    /** Scrolls to a particular option in the list. */\n    _scrollToOption(index) {\n        // Given that we are not actually focusing active options, we must manually adjust scroll\n        // to reveal options below the fold. First, we find the offset of the option from the top\n        // of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n        // the panel height + the option height, so the active option will be just visible at the\n        // bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n        // will become the offset. If that offset is visible within the panel already, the scrollTop is\n        // not adjusted.\n        const autocomplete = this.autocomplete;\n        const labelCount = _countGroupLabelsBeforeOption(index, autocomplete.options, autocomplete.optionGroups);\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            autocomplete._setScrollTop(0);\n        }\n        else if (autocomplete.panel) {\n            const option = autocomplete.options.toArray()[index];\n            if (option) {\n                const element = option._getHostElement();\n                const newScrollPosition = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, autocomplete._getScrollTop(), autocomplete.panel.nativeElement.offsetHeight);\n                autocomplete._setScrollTop(newScrollPosition);\n            }\n        }\n    }\n}\n_MatAutocompleteTriggerBase.ɵfac = function _MatAutocompleteTriggerBase_Factory(t) { return new (t || _MatAutocompleteTriggerBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 9), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, 8)); };\n_MatAutocompleteTriggerBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatAutocompleteTriggerBase, inputs: { position: [\"matAutocompletePosition\", \"position\"], autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"], autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\"], autocomplete: [\"matAutocomplete\", \"autocomplete\"], connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"] }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\n_MatAutocompleteTriggerBase.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Overlay },\n    { type: ViewContainerRef },\n    { type: NgZone },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD,] }, { type: Host }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: ViewportRuler },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,] }] }\n];\n_MatAutocompleteTriggerBase.propDecorators = {\n    autocomplete: [{ type: Input, args: ['matAutocomplete',] }],\n    position: [{ type: Input, args: ['matAutocompletePosition',] }],\n    connectedTo: [{ type: Input, args: ['matAutocompleteConnectedTo',] }],\n    autocompleteAttribute: [{ type: Input, args: ['autocomplete',] }],\n    autocompleteDisabled: [{ type: Input, args: ['matAutocompleteDisabled',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatAutocompleteTriggerBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc3.Overlay }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc4.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc6.MatFormField, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_FORM_FIELD]\n            }, {\n                type: Host\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc5.ViewportRuler }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n            }] }]; }, { position: [{\n            type: Input,\n            args: ['matAutocompletePosition']\n        }], autocompleteAttribute: [{\n            type: Input,\n            args: ['autocomplete']\n        }], autocompleteDisabled: [{\n            type: Input,\n            args: ['matAutocompleteDisabled']\n        }], autocomplete: [{\n            type: Input,\n            args: ['matAutocomplete']\n        }], connectedTo: [{\n            type: Input,\n            args: ['matAutocompleteConnectedTo']\n        }] }); })();\nclass MatAutocompleteTrigger extends _MatAutocompleteTriggerBase {\n    constructor() {\n        super(...arguments);\n        this._aboveClass = 'mat-autocomplete-panel-above';\n    }\n}\nMatAutocompleteTrigger.ɵfac = /*@__PURE__*/ function () { let ɵMatAutocompleteTrigger_BaseFactory; return function MatAutocompleteTrigger_Factory(t) { return (ɵMatAutocompleteTrigger_BaseFactory || (ɵMatAutocompleteTrigger_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatAutocompleteTrigger)))(t || MatAutocompleteTrigger); }; }();\nMatAutocompleteTrigger.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatAutocompleteTrigger, selectors: [[\"input\", \"matAutocomplete\", \"\"], [\"textarea\", \"matAutocomplete\", \"\"]], hostAttrs: [1, \"mat-autocomplete-trigger\"], hostVars: 7, hostBindings: function MatAutocompleteTrigger_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focusin\", function MatAutocompleteTrigger_focusin_HostBindingHandler() { return ctx._handleFocus(); })(\"blur\", function MatAutocompleteTrigger_blur_HostBindingHandler() { return ctx._onTouched(); })(\"input\", function MatAutocompleteTrigger_input_HostBindingHandler($event) { return ctx._handleInput($event); })(\"keydown\", function MatAutocompleteTrigger_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"autocomplete\", ctx.autocompleteAttribute)(\"role\", ctx.autocompleteDisabled ? null : \"combobox\")(\"aria-autocomplete\", ctx.autocompleteDisabled ? null : \"list\")(\"aria-activedescendant\", ctx.panelOpen && ctx.activeOption ? ctx.activeOption.id : null)(\"aria-expanded\", ctx.autocompleteDisabled ? null : ctx.panelOpen.toString())(\"aria-owns\", ctx.autocompleteDisabled || !ctx.panelOpen ? null : ctx.autocomplete == null ? null : ctx.autocomplete.id)(\"aria-haspopup\", !ctx.autocompleteDisabled);\n    } }, exportAs: [\"matAutocompleteTrigger\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_AUTOCOMPLETE_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteTrigger, [{\n        type: Directive,\n        args: [{\n                selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n                host: {\n                    'class': 'mat-autocomplete-trigger',\n                    '[attr.autocomplete]': 'autocompleteAttribute',\n                    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n                    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n                    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n                    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n                    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n                    '[attr.aria-haspopup]': '!autocompleteDisabled',\n                    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n                    // a little earlier. This avoids issues where IE delays the focusing of the input.\n                    '(focusin)': '_handleFocus()',\n                    '(blur)': '_onTouched()',\n                    '(input)': '_handleInput($event)',\n                    '(keydown)': '_handleKeydown($event)'\n                },\n                exportAs: 'matAutocompleteTrigger',\n                providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatAutocompleteModule {\n}\nMatAutocompleteModule.ɵfac = function MatAutocompleteModule_Factory(t) { return new (t || MatAutocompleteModule)(); };\nMatAutocompleteModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatAutocompleteModule });\nMatAutocompleteModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [OverlayModule,\n        MatOptionModule,\n        MatCommonModule,\n        CommonModule, CdkScrollableModule,\n        MatOptionModule,\n        MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    OverlayModule,\n                    MatOptionModule,\n                    MatCommonModule,\n                    CommonModule\n                ],\n                exports: [\n                    MatAutocomplete,\n                    MatAutocompleteTrigger,\n                    MatAutocompleteOrigin,\n                    CdkScrollableModule,\n                    MatOptionModule,\n                    MatCommonModule,\n                ],\n                declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n                providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatAutocompleteModule, { declarations: function () { return [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin]; }, imports: function () { return [OverlayModule,\n        MatOptionModule,\n        MatCommonModule,\n        CommonModule]; }, exports: function () { return [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin, CdkScrollableModule,\n        MatOptionModule,\n        MatCommonModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, _MatAutocompleteBase, _MatAutocompleteOriginBase, _MatAutocompleteTriggerBase, getMatAutocompleteMissingPanelError };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}