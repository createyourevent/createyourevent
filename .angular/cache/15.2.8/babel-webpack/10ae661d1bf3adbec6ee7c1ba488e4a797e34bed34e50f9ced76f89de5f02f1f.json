{"ast":null,"code":"import _defineProperty from \"/home/ceo/mmmm/createyourevent/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getFeeTransactionEntryIdentifier } from '../fee-transaction-entry.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport class FeeTransactionEntryService {\n  constructor(http, applicationConfigService) {\n    _defineProperty(this, \"http\", void 0);\n    _defineProperty(this, \"applicationConfigService\", void 0);\n    _defineProperty(this, \"resourceUrl\", this.applicationConfigService.getEndpointFor('api/fee-transaction-entries'));\n    this.http = http;\n    this.applicationConfigService = applicationConfigService;\n  }\n  create(feeTransactionEntry) {\n    return this.http.post(this.resourceUrl, feeTransactionEntry, {\n      observe: 'response'\n    });\n  }\n  update(feeTransactionEntry) {\n    return this.http.put(`${this.resourceUrl}/${getFeeTransactionEntryIdentifier(feeTransactionEntry)}`, feeTransactionEntry, {\n      observe: 'response'\n    });\n  }\n  partialUpdate(feeTransactionEntry) {\n    return this.http.patch(`${this.resourceUrl}/${getFeeTransactionEntryIdentifier(feeTransactionEntry)}`, feeTransactionEntry, {\n      observe: 'response'\n    });\n  }\n  find(id) {\n    return this.http.get(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  query(req) {\n    const options = createRequestOption(req);\n    return this.http.get(this.resourceUrl, {\n      params: options,\n      observe: 'response'\n    });\n  }\n  delete(id) {\n    return this.http.delete(`${this.resourceUrl}/${id}`, {\n      observe: 'response'\n    });\n  }\n  addFeeTransactionEntryToCollectionIfMissing(feeTransactionEntryCollection, ...feeTransactionEntriesToCheck) {\n    const feeTransactionEntries = feeTransactionEntriesToCheck.filter(isPresent);\n    if (feeTransactionEntries.length > 0) {\n      const feeTransactionEntryCollectionIdentifiers = feeTransactionEntryCollection.map(feeTransactionEntryItem => getFeeTransactionEntryIdentifier(feeTransactionEntryItem));\n      const feeTransactionEntriesToAdd = feeTransactionEntries.filter(feeTransactionEntryItem => {\n        const feeTransactionEntryIdentifier = getFeeTransactionEntryIdentifier(feeTransactionEntryItem);\n        if (feeTransactionEntryIdentifier == null || feeTransactionEntryCollectionIdentifiers.includes(feeTransactionEntryIdentifier)) {\n          return false;\n        }\n        feeTransactionEntryCollectionIdentifiers.push(feeTransactionEntryIdentifier);\n        return true;\n      });\n      return [...feeTransactionEntriesToAdd, ...feeTransactionEntryCollection];\n    }\n    return feeTransactionEntryCollection;\n  }\n}\n_defineProperty(FeeTransactionEntryService, \"\\u0275fac\", function FeeTransactionEntryService_Factory(t) {\n  return new (t || FeeTransactionEntryService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n});\n_defineProperty(FeeTransactionEntryService, \"\\u0275prov\", /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FeeTransactionEntryService,\n  factory: FeeTransactionEntryService.ɵfac,\n  providedIn: 'root'\n}));","map":{"version":3,"mappings":";AAIA,SAASA,SAAS,QAAQ,yBAAyB;AAEnD,SAASC,mBAAmB,QAAQ,+BAA+B;AACnE,SAA+BC,gCAAgC,QAAQ,gCAAgC;;;;AAMvG,OAAM,MAAOC,0BAA0B;EAGrCC,YAAsBC,IAAgB,EAAYC,wBAAkD;IAAA;IAAA;IAAA,qCAF5E,IAAI,CAACA,wBAAwB,CAACC,cAAc,CAAC,6BAA6B,CAAC;IAE7E,SAAI,GAAJF,IAAI;IAAwB,6BAAwB,GAAxBC,wBAAwB;EAA6B;EAEvGE,MAAM,CAACC,mBAAyC;IAC9C,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAuB,IAAI,CAACC,WAAW,EAAEF,mBAAmB,EAAE;MAAEG,OAAO,EAAE;IAAU,CAAE,CAAC;EAC7G;EAEAC,MAAM,CAACJ,mBAAyC;IAC9C,OAAO,IAAI,CAACJ,IAAI,CAACS,GAAG,CAClB,GAAG,IAAI,CAACH,WAAW,IAAIT,gCAAgC,CAACO,mBAAmB,CAAW,EAAE,EACxFA,mBAAmB,EACnB;MAAEG,OAAO,EAAE;IAAU,CAAE,CACxB;EACH;EAEAG,aAAa,CAACN,mBAAyC;IACrD,OAAO,IAAI,CAACJ,IAAI,CAACW,KAAK,CACpB,GAAG,IAAI,CAACL,WAAW,IAAIT,gCAAgC,CAACO,mBAAmB,CAAW,EAAE,EACxFA,mBAAmB,EACnB;MAAEG,OAAO,EAAE;IAAU,CAAE,CACxB;EACH;EAEAK,IAAI,CAACC,EAAU;IACb,OAAO,IAAI,CAACb,IAAI,CAACc,GAAG,CAAuB,GAAG,IAAI,CAACR,WAAW,IAAIO,EAAE,EAAE,EAAE;MAAEN,OAAO,EAAE;IAAU,CAAE,CAAC;EAClG;EAEAQ,KAAK,CAACC,GAAS;IACb,MAAMC,OAAO,GAAGrB,mBAAmB,CAACoB,GAAG,CAAC;IACxC,OAAO,IAAI,CAAChB,IAAI,CAACc,GAAG,CAAyB,IAAI,CAACR,WAAW,EAAE;MAAEY,MAAM,EAAED,OAAO;MAAEV,OAAO,EAAE;IAAU,CAAE,CAAC;EAC1G;EAEAY,MAAM,CAACN,EAAU;IACf,OAAO,IAAI,CAACb,IAAI,CAACmB,MAAM,CAAC,GAAG,IAAI,CAACb,WAAW,IAAIO,EAAE,EAAE,EAAE;MAAEN,OAAO,EAAE;IAAU,CAAE,CAAC;EAC/E;EAEAa,2CAA2C,CACzCC,6BAAqD,EACrD,GAAGC,4BAAyE;IAE5E,MAAMC,qBAAqB,GAA2BD,4BAA4B,CAACE,MAAM,CAAC7B,SAAS,CAAC;IACpG,IAAI4B,qBAAqB,CAACE,MAAM,GAAG,CAAC,EAAE;MACpC,MAAMC,wCAAwC,GAAGL,6BAA6B,CAACM,GAAG,CAChFC,uBAAuB,IAAI/B,gCAAgC,CAAC+B,uBAAuB,CAAE,CACtF;MACD,MAAMC,0BAA0B,GAAGN,qBAAqB,CAACC,MAAM,CAACI,uBAAuB,IAAG;QACxF,MAAME,6BAA6B,GAAGjC,gCAAgC,CAAC+B,uBAAuB,CAAC;QAC/F,IAAIE,6BAA6B,IAAI,IAAI,IAAIJ,wCAAwC,CAACK,QAAQ,CAACD,6BAA6B,CAAC,EAAE;UAC7H,OAAO,KAAK;;QAEdJ,wCAAwC,CAACM,IAAI,CAACF,6BAA6B,CAAC;QAC5E,OAAO,IAAI;MACb,CAAC,CAAC;MACF,OAAO,CAAC,GAAGD,0BAA0B,EAAE,GAAGR,6BAA6B,CAAC;;IAE1E,OAAOA,6BAA6B;EACtC;;gBA1DWvB,0BAA0B;mBAA1BA,0BAA0B;AAAA;AAAA,gBAA1BA,0BAA0B;SAA1BA,0BAA0B;EAAAmC,SAA1BnC,0BAA0B;EAAAoC,YADb;AAAM","names":["isPresent","createRequestOption","getFeeTransactionEntryIdentifier","FeeTransactionEntryService","constructor","http","applicationConfigService","getEndpointFor","create","feeTransactionEntry","post","resourceUrl","observe","update","put","partialUpdate","patch","find","id","get","query","req","options","params","delete","addFeeTransactionEntryToCollectionIfMissing","feeTransactionEntryCollection","feeTransactionEntriesToCheck","feeTransactionEntries","filter","length","feeTransactionEntryCollectionIdentifiers","map","feeTransactionEntryItem","feeTransactionEntriesToAdd","feeTransactionEntryIdentifier","includes","push","factory","providedIn"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/entities/fee-transaction-entry/service/fee-transaction-entry.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { isPresent } from 'app/core/util/operators';\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { IFeeTransactionEntry, getFeeTransactionEntryIdentifier } from '../fee-transaction-entry.model';\n\nexport type EntityResponseType = HttpResponse<IFeeTransactionEntry>;\nexport type EntityArrayResponseType = HttpResponse<IFeeTransactionEntry[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class FeeTransactionEntryService {\n  protected resourceUrl = this.applicationConfigService.getEndpointFor('api/fee-transaction-entries');\n\n  constructor(protected http: HttpClient, protected applicationConfigService: ApplicationConfigService) {}\n\n  create(feeTransactionEntry: IFeeTransactionEntry): Observable<EntityResponseType> {\n    return this.http.post<IFeeTransactionEntry>(this.resourceUrl, feeTransactionEntry, { observe: 'response' });\n  }\n\n  update(feeTransactionEntry: IFeeTransactionEntry): Observable<EntityResponseType> {\n    return this.http.put<IFeeTransactionEntry>(\n      `${this.resourceUrl}/${getFeeTransactionEntryIdentifier(feeTransactionEntry) as number}`,\n      feeTransactionEntry,\n      { observe: 'response' }\n    );\n  }\n\n  partialUpdate(feeTransactionEntry: IFeeTransactionEntry): Observable<EntityResponseType> {\n    return this.http.patch<IFeeTransactionEntry>(\n      `${this.resourceUrl}/${getFeeTransactionEntryIdentifier(feeTransactionEntry) as number}`,\n      feeTransactionEntry,\n      { observe: 'response' }\n    );\n  }\n\n  find(id: number): Observable<EntityResponseType> {\n    return this.http.get<IFeeTransactionEntry>(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  query(req?: any): Observable<EntityArrayResponseType> {\n    const options = createRequestOption(req);\n    return this.http.get<IFeeTransactionEntry[]>(this.resourceUrl, { params: options, observe: 'response' });\n  }\n\n  delete(id: number): Observable<HttpResponse<{}>> {\n    return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  addFeeTransactionEntryToCollectionIfMissing(\n    feeTransactionEntryCollection: IFeeTransactionEntry[],\n    ...feeTransactionEntriesToCheck: (IFeeTransactionEntry | null | undefined)[]\n  ): IFeeTransactionEntry[] {\n    const feeTransactionEntries: IFeeTransactionEntry[] = feeTransactionEntriesToCheck.filter(isPresent);\n    if (feeTransactionEntries.length > 0) {\n      const feeTransactionEntryCollectionIdentifiers = feeTransactionEntryCollection.map(\n        feeTransactionEntryItem => getFeeTransactionEntryIdentifier(feeTransactionEntryItem)!\n      );\n      const feeTransactionEntriesToAdd = feeTransactionEntries.filter(feeTransactionEntryItem => {\n        const feeTransactionEntryIdentifier = getFeeTransactionEntryIdentifier(feeTransactionEntryItem);\n        if (feeTransactionEntryIdentifier == null || feeTransactionEntryCollectionIdentifiers.includes(feeTransactionEntryIdentifier)) {\n          return false;\n        }\n        feeTransactionEntryCollectionIdentifiers.push(feeTransactionEntryIdentifier);\n        return true;\n      });\n      return [...feeTransactionEntriesToAdd, ...feeTransactionEntryCollection];\n    }\n    return feeTransactionEntryCollection;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}