{"ast":null,"code":"import { isPresent } from 'app/core/util/operators';\nimport { createRequestOption } from 'app/core/request/request-util';\nimport { getGiftIdentifier } from '../gift.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"app/core/config/application-config.service\";\nexport let GiftService = /*#__PURE__*/(() => {\n  class GiftService {\n    constructor(http, applicationConfigService) {\n      this.http = http;\n      this.applicationConfigService = applicationConfigService;\n      this.resourceUrl = this.applicationConfigService.getEndpointFor('api/gifts');\n    }\n    create(gift) {\n      return this.http.post(this.resourceUrl, gift, {\n        observe: 'response'\n      });\n    }\n    update(gift) {\n      return this.http.put(`${this.resourceUrl}/${getGiftIdentifier(gift)}`, gift, {\n        observe: 'response'\n      });\n    }\n    partialUpdate(gift) {\n      return this.http.patch(`${this.resourceUrl}/${getGiftIdentifier(gift)}`, gift, {\n        observe: 'response'\n      });\n    }\n    find(id) {\n      return this.http.get(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    query(req) {\n      const options = createRequestOption(req);\n      return this.http.get(this.resourceUrl, {\n        params: options,\n        observe: 'response'\n      });\n    }\n    delete(id) {\n      return this.http.delete(`${this.resourceUrl}/${id}`, {\n        observe: 'response'\n      });\n    }\n    addGiftToCollectionIfMissing(giftCollection, ...giftsToCheck) {\n      const gifts = giftsToCheck.filter(isPresent);\n      if (gifts.length > 0) {\n        const giftCollectionIdentifiers = giftCollection.map(giftItem => getGiftIdentifier(giftItem));\n        const giftsToAdd = gifts.filter(giftItem => {\n          const giftIdentifier = getGiftIdentifier(giftItem);\n          if (giftIdentifier == null || giftCollectionIdentifiers.includes(giftIdentifier)) {\n            return false;\n          }\n          giftCollectionIdentifiers.push(giftIdentifier);\n          return true;\n        });\n        return [...giftsToAdd, ...giftCollection];\n      }\n      return giftCollection;\n    }\n  }\n  GiftService.ɵfac = function GiftService_Factory(t) {\n    return new (t || GiftService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApplicationConfigService));\n  };\n  GiftService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GiftService,\n    factory: GiftService.ɵfac,\n    providedIn: 'root'\n  });\n  return GiftService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}