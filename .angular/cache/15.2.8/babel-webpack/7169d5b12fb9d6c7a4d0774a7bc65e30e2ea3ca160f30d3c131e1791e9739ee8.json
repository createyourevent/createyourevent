{"ast":null,"code":"import { NavigationEnd } from \"@angular/router\";\nimport { ChipsCollectionChips } from \"app/entities/chips-collection-chips/chips-collection-chips.model\";\nimport { ChipItem } from \"./chip-item\";\nimport { ChipComponent } from \"./chip.component\";\nimport { ChipHolderDirective } from \"./chip.directive\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../chips-controller.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"app/general.service\";\nimport * as i4 from \"app/entities/chips-collection/service/chips-collection.service\";\nimport * as i5 from \"../switch-off-on-emitter.service\";\nimport * as i6 from \"app/entities/chips-admin/service/chips-admin.service\";\nimport * as i7 from \"app/entities/chips-collection-chips/service/chips-collection-chips.service\";\nimport * as i8 from \"app/points/points-display/points-display.service\";\nfunction ChipHolderComponent_ng_template_1_Template(rf, ctx) {}\nexport class ChipHolderComponent {\n  constructor(componentFactoryResolver, chipsControllerService, router, generalService, chipsCollectionService, switchOffOnEmitterService, chipsAdminService, chipsCollectionChipsService, pointsData) {\n    this.componentFactoryResolver = componentFactoryResolver;\n    this.chipsControllerService = chipsControllerService;\n    this.router = router;\n    this.generalService = generalService;\n    this.chipsCollectionService = chipsCollectionService;\n    this.switchOffOnEmitterService = switchOffOnEmitterService;\n    this.chipsAdminService = chipsAdminService;\n    this.chipsCollectionChipsService = chipsCollectionChipsService;\n    this.pointsData = pointsData;\n    this.chipsComponent = [];\n    this.currentAdIndex = -1;\n  }\n  ngOnInit() {\n    this.generalService.findWidthAuthorities().subscribe(u => {\n      this.user = u.body;\n      if (this.user != null) {\n        this.getChips().then(() => {\n          this.loadComponent();\n        });\n        this.chipsAdminService.find(1).subscribe(m => {\n          const gameActive = m.body;\n          if (gameActive.gameActive) {\n            this.valueOffOn = \"on\";\n          } else {\n            this.valueOffOn = \"off\";\n          }\n          this.router.events.subscribe(val => {\n            if (val instanceof NavigationEnd) {\n              // this.getChips().then(() => {\n              this.loadComponent();\n              // });\n            }\n          });\n\n          if (this.switchOffOnEmitterService.subsVar === undefined) {\n            this.switchOffOnEmitterService.subsVar = this.switchOffOnEmitterService.invokeSwitchOffOn.subscribe(value => {\n              this.valueOffOn = value;\n              this.chipsAdminService.find(1).subscribe(ms => {\n                const activeGame = ms.body;\n                if (value === 'on') {\n                  activeGame.gameActive = true;\n                } else {\n                  activeGame.gameActive = false;\n                }\n                this.chipsAdminService.update(activeGame).subscribe();\n              });\n            });\n          }\n        });\n      }\n    });\n  }\n  ngAfterViewInit() {}\n  loadComponent() {\n    this.viewContainerRef = this.chipHolder.viewContainerRef;\n    this.viewContainerRef.clear();\n    if (this.valueOffOn === \"on\") {\n      this.chipsComponent.forEach(chipItem => {\n        this.generalService.findChipsCollectionByUserId(this.user.id).subscribe(uc => {\n          this.userChipCollection = uc.body;\n          this.generalService.findOndChipsCollectionChipsByChipsCollectionIdAndChipsId(this.userChipCollection.id, chipItem.data.id).subscribe(res => {\n            const ucc = res.body;\n            if (this.router.url.includes(chipItem.data.website) && (ucc === null || ucc === undefined)) {\n              const componentFactory = this.componentFactoryResolver.resolveComponentFactory(chipItem.component);\n              this.componentRef = this.viewContainerRef.createComponent(componentFactory);\n              this.componentRef.instance.id = chipItem.data.id;\n              this.componentRef.instance.points = chipItem.data.points;\n              this.componentRef.instance.left = chipItem.data.left;\n              this.componentRef.instance.top = chipItem.data.top;\n              this.componentRef.instance.website = chipItem.data.website;\n              this.componentRef.instance.image = chipItem.data.image;\n              this.componentRef.instance.imageContentType = chipItem.data.imageContentType;\n              this.componentRef.instance.color = chipItem.data.color;\n              this.componentRef.changeDetectorRef.detectChanges();\n              const sub = this.componentRef.instance.clickChip.subscribe(event => this.clickChip(event));\n              this.componentRef.onDestroy(() => {\n                sub.unsubscribe();\n              });\n            }\n          });\n        });\n      });\n    }\n  }\n  clickChip(event) {\n    this.viewContainerRef.clear();\n    const chip = event.chip;\n    const foundChip = new ChipsCollectionChips();\n    this.generalService.findChipsCollectionByUserId(this.user.id).subscribe(cc => {\n      this.pointsData.changePoint(this.user.points + chip.points);\n      const collection = cc.body;\n      foundChip.chips = chip;\n      foundChip.chipsCollection = collection;\n      this.chipsCollectionChipsService.create(foundChip).subscribe();\n      this.user.points += chip.points;\n      this.generalService.updateUserLoggedInAndPoints(this.user.id, this.user.loggedIn, this.user.points).subscribe();\n    });\n  }\n  getChips() {\n    return new Promise(resolve => {\n      this.chipsComponent = [];\n      this.chipsControllerService.getAllChips().subscribe(c => {\n        this.chips = c.body;\n        this.chips.forEach(chip => {\n          this.chipsComponent.push(new ChipItem(ChipComponent, {\n            id: chip.id,\n            points: chip.points,\n            left: chip.x,\n            top: chip.y,\n            website: chip.website,\n            image: chip.image,\n            imageContentType: chip.imageContentType,\n            color: chip.color\n          }));\n        });\n        resolve();\n      });\n    });\n  }\n}\nChipHolderComponent.ɵfac = function ChipHolderComponent_Factory(t) {\n  return new (t || ChipHolderComponent)(i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver), i0.ɵɵdirectiveInject(i1.ChipsControllerService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.GeneralService), i0.ɵɵdirectiveInject(i4.ChipsCollectionService), i0.ɵɵdirectiveInject(i5.SwitchOffOnEmitterService), i0.ɵɵdirectiveInject(i6.ChipsAdminService), i0.ɵɵdirectiveInject(i7.ChipsCollectionChipsService), i0.ɵɵdirectiveInject(i8.PointsDataService));\n};\nChipHolderComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ChipHolderComponent,\n  selectors: [[\"jhi-chip-holder\"]],\n  viewQuery: function ChipHolderComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(ChipHolderDirective, 7);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chipHolder = _t.first);\n    }\n  },\n  decls: 3,\n  vars: 0,\n  consts: [[\"jhiChipHolder\", \"\"]],\n  template: function ChipHolderComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtext(0, \"\\n                \");\n      i0.ɵɵtemplate(1, ChipHolderComponent_ng_template_1_Template, 0, 0, \"ng-template\", 0);\n      i0.ɵɵtext(2, \"\\n            \");\n    }\n  },\n  styles: [\".centered[_ngcontent-%COMP%] {\\n  position: absolute;\\n  top: 50%;\\n  left: 50%;\\n  transform: translate(-50%, -50%);\\n  font-size: xx-large;\\n  font-weight: bolder;\\n}\\n\\n.container_chip[_ngcontent-%COMP%] {\\n  position: relative;\\n  text-align: center;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9tYWluL3dlYmFwcC9hcHAvdmlld3MvZ2FtZXMvZmluZC10aGUtY2hpcHMvY2hpcC9jaGlwLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksa0JBQUE7RUFDQSxRQUFBO0VBQ0EsU0FBQTtFQUNBLGdDQUFBO0VBQ0EsbUJBQUE7RUFDQSxtQkFBQTtBQUNKOztBQUVFO0VBQ0Usa0JBQUE7RUFDQSxrQkFBQTtBQUNKIiwic291cmNlc0NvbnRlbnQiOlsiLmNlbnRlcmVkIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiA1MCU7XG4gICAgbGVmdDogNTAlO1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xuICAgIGZvbnQtc2l6ZTogeHgtbGFyZ2U7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGRlcjtcbiAgfVxuXG4gIC5jb250YWluZXJfY2hpcCB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjsgXG4gIH1cbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["NavigationEnd","ChipsCollectionChips","ChipItem","ChipComponent","ChipHolderDirective","ChipHolderComponent","constructor","componentFactoryResolver","chipsControllerService","router","generalService","chipsCollectionService","switchOffOnEmitterService","chipsAdminService","chipsCollectionChipsService","pointsData","ngOnInit","findWidthAuthorities","subscribe","u","user","body","getChips","then","loadComponent","find","m","gameActive","valueOffOn","events","val","subsVar","undefined","invokeSwitchOffOn","value","ms","activeGame","update","ngAfterViewInit","viewContainerRef","chipHolder","clear","chipsComponent","forEach","chipItem","findChipsCollectionByUserId","id","uc","userChipCollection","findOndChipsCollectionChipsByChipsCollectionIdAndChipsId","data","res","ucc","url","includes","website","componentFactory","resolveComponentFactory","component","componentRef","createComponent","instance","points","left","top","image","imageContentType","color","changeDetectorRef","detectChanges","sub","clickChip","event","onDestroy","unsubscribe","chip","foundChip","cc","changePoint","collection","chips","chipsCollection","create","updateUserLoggedInAndPoints","loggedIn","Promise","resolve","getAllChips","c","push","x","y","selectors","viewQuery","i0"],"sourceRoot":"","sources":["/home/ceo/mmmm/createyourevent/src/main/webapp/app/views/games/find-the-chips/chip/chip-holder.component.ts"],"sourcesContent":["import { Component, AfterViewInit, OnInit, ViewChild, ViewContainerRef, ComponentRef, ComponentFactoryResolver } from \"@angular/core\";\nimport { Router, NavigationEnd } from \"@angular/router\";\nimport { IChipsAdmin } from \"app/entities/chips-admin/chips-admin.model\";\nimport { ChipsAdminService } from \"app/entities/chips-admin/service/chips-admin.service\";\nimport { IChipsCollectionChips, ChipsCollectionChips } from \"app/entities/chips-collection-chips/chips-collection-chips.model\";\nimport { ChipsCollectionChipsService } from \"app/entities/chips-collection-chips/service/chips-collection-chips.service\";\nimport { IChipsCollection } from \"app/entities/chips-collection/chips-collection.model\";\nimport { ChipsCollectionService } from \"app/entities/chips-collection/service/chips-collection.service\";\nimport { IChips } from \"app/entities/chips/chips.model\";\nimport { IUser } from \"app/entities/user/user.model\";\nimport { GeneralService } from \"app/general.service\";\nimport { PointsDataService } from \"app/points/points-display/points-display.service\";\nimport { Subscription } from \"rxjs\";\nimport { ChipsControllerService } from \"../chips-controller.service\";\nimport { SwitchOffOnEmitterService } from \"../switch-off-on-emitter.service\";\nimport { ChipItem } from \"./chip-item\";\nimport { ChipComponent } from \"./chip.component\";\nimport { ChipHolderDirective } from \"./chip.directive\";\n\n\n@Component({\n  selector: 'jhi-chip-holder',\n  template: `\n                <ng-template jhiChipHolder></ng-template>\n            `,\n  styleUrls: ['./chip.component.scss']\n})\nexport class ChipHolderComponent implements AfterViewInit, OnInit {\n\n  chipsComponent: ChipItem[] = [];\n  chips!: IChips[];\n  chipsCollectionChips!: IChipsCollectionChips[];\n  currentAdIndex = -1;\n  @ViewChild(ChipHolderDirective, {static: true}) chipHolder!: ChipHolderDirective;\n  viewContainerRef!: ViewContainerRef;\n  componentRef!: ComponentRef<ChipComponent>;\n  user!: IUser;\n  userChipCollection!: IChipsCollection;\n  valueOffOn!: string;\n\n\n  constructor(private componentFactoryResolver: ComponentFactoryResolver,\n              private chipsControllerService: ChipsControllerService,\n              private router: Router,\n              private generalService: GeneralService,\n              private chipsCollectionService: ChipsCollectionService,\n              private switchOffOnEmitterService: SwitchOffOnEmitterService,\n              private chipsAdminService: ChipsAdminService,\n              private chipsCollectionChipsService: ChipsCollectionChipsService,\n              private pointsData: PointsDataService)\n              {}\n\n\n  ngOnInit(): void {\n    this.generalService.findWidthAuthorities().subscribe(u => {\n      this.user = u.body!;\n\n      if(this.user != null) {\n      this.getChips().then(() => {\n        this.loadComponent();\n      });\n\n      this.chipsAdminService.find(1).subscribe(m => {\n        const gameActive: IChipsAdmin = m.body!;\n        if(gameActive.gameActive) {\n          this.valueOffOn = \"on\";\n        } else {\n          this.valueOffOn = \"off\";\n        }\n\n      this.router.events.subscribe(val => {\n        if(val instanceof NavigationEnd) {\n          // this.getChips().then(() => {\n            this.loadComponent();\n          // });\n        }\n      });\n\n      if (this.switchOffOnEmitterService.subsVar === undefined) {\n        this.switchOffOnEmitterService.subsVar = this.switchOffOnEmitterService.\n        invokeSwitchOffOn.subscribe((value:string) => {\n          this.valueOffOn = value;\n          this.chipsAdminService.find(1).subscribe(ms => {\n            const activeGame: IChipsAdmin = ms.body!;\n            if(value === 'on') {\n              activeGame.gameActive = true;\n            } else {\n              activeGame.gameActive = false;\n            }\n            this.chipsAdminService.update(activeGame).subscribe();\n          });\n        });\n       }\n      });\n     }\n    });\n  }\n\n\n  ngAfterViewInit(): void {\n\n\n  }\n\n  loadComponent(): void {\n    this.viewContainerRef = this.chipHolder.viewContainerRef;\n    this.viewContainerRef.clear();\n\n    if(this.valueOffOn === \"on\") {\n      this.chipsComponent.forEach(chipItem => {\n        this.generalService.findChipsCollectionByUserId(this.user.id!).subscribe(uc => {\n          this.userChipCollection = uc.body!;\n\n          this.generalService.findOndChipsCollectionChipsByChipsCollectionIdAndChipsId(this.userChipCollection.id!, chipItem.data.id).subscribe(res => {\n            const ucc = res.body;\n\n            if(this.router.url.includes(chipItem.data.website) && (ucc === null || ucc === undefined)) {\n              const componentFactory = this.componentFactoryResolver.resolveComponentFactory(chipItem.component);\n\n              this.componentRef = this.viewContainerRef.createComponent<ChipComponent>(componentFactory);\n              this.componentRef.instance.id = chipItem.data.id;\n              this.componentRef.instance.points = chipItem.data.points;\n              this.componentRef.instance.left = chipItem.data.left;\n              this.componentRef.instance.top = chipItem.data.top;\n              this.componentRef.instance.website = chipItem.data.website;\n              this.componentRef.instance.image = chipItem.data.image;\n              this.componentRef.instance.imageContentType = chipItem.data.imageContentType;\n              this.componentRef.instance.color = chipItem.data.color;\n              this.componentRef.changeDetectorRef.detectChanges();\n              const sub:Subscription = this.componentRef.instance.clickChip.subscribe(event => this.clickChip(event));\n              this.componentRef.onDestroy(()=> { sub.unsubscribe()});\n            }\n        });\n        });\n      });\n    }\n  }\n\n  clickChip(event: any): void {\n    this.viewContainerRef.clear();\n    const chip: IChips = event.chip;\n\n    const foundChip = new ChipsCollectionChips();\n\n    this.generalService.findChipsCollectionByUserId(this.user.id!).subscribe(cc => {\n      this.pointsData.changePoint(this.user.points! + chip.points!);\n      const collection: IChipsCollection = cc.body!;\n      foundChip.chips = chip;\n      foundChip.chipsCollection = collection;\n      this.chipsCollectionChipsService.create(foundChip).subscribe();\n      this.user.points! += chip.points!;\n      this.generalService.updateUserLoggedInAndPoints(this.user.id!, this.user!.loggedIn!, this.user!.points!).subscribe();\n    });\n\n  }\n\n\n  getChips(): Promise<void>{\n    return new Promise<void>(resolve => {\n      this.chipsComponent = [];\n      this.chipsControllerService.getAllChips().subscribe(c => {\n        this.chips = c.body!;\n        this.chips.forEach(chip => {\n          this.chipsComponent.push(new ChipItem(ChipComponent, {id: chip.id, points: chip.points,left: chip.x, top: chip.y, website: chip.website, image: chip.image, imageContentType: chip.imageContentType, color: chip.color}));\n        });\n        resolve();\n      });\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}